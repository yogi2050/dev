<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/java/java_files_io.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:37:13 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Java - Streams, Files and I/O</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="Java Streams, Files and I/O - Learning Java in simple and easy steps : A beginner's tutorial containing complete knowledge of Java Syntax Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, Packages, Collections, Networking, Multithreading, Generics, Multimedia, Serialization, GUI" />
<meta name="Keywords" content="Java, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, Packages, Collections, Networking, Multithreading, Generics, Multimedia, Serialization, GUI" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
/* Java Scheme */
#header{ 
background:#F3943D !important;
}
#topmenu
{
background-color:#5382A1 !important;
}
#leftcol ul.menu li.heading 
{
background:#F3943D !important;
border:1px solid #964800 !important;
}
#leftcol, #middlecol, #rightcol {min-height:1520px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/java-mini-logo.png" alt="Java Tutorial" />
</div>
<ul class="menu">
<li class="heading">Java Basics</li>
<li><a target="_top" href="index.htm">Java - Home</a></li>
<li><a target="_top" href="java_overview.htm">Java - Overview</a></li>
<li><a target="_top" href="java_environment_setup.htm">Java - Environment Setup</a></li>
<li><a target="_top" href="java_basic_syntax.htm">Java - Basic Syntax</a></li>
<li><a target="_top" href="java_object_classes.htm">Java - Object &amp; Classes</a></li>
<li><a target="_top" href="java_basic_datatypes.htm">Java - Basic Datatypes</a></li>
<li><a target="_top" href="java_variable_types.htm">Java - Variable Types</a></li>
<li><a target="_top" href="java_modifier_types.htm">Java - Modifier Types</a></li>
<li><a target="_top" href="java_basic_operators.htm">Java - Basic Operators</a></li>
<li><a target="_top" href="java_loop_control.htm">Java - Loop Control</a></li>
<li><a target="_top" href="java_decision_making.htm">Java - Decision Making</a></li>
<li><a target="_top" href="java_numbers.htm">Java - Numbers</a></li>
<li><a target="_top" href="java_characters.htm">Java - Characters</a></li>
<li><a target="_top" href="java_strings.htm">Java - Strings</a></li>
<li><a target="_top" href="java_arrays.htm">Java - Arrays</a></li>
<li><a target="_top" href="java_date_time.htm">Java - Date &amp; Time</a></li>
<li><a target="_top" href="java_regular_expressions.htm">Java - Regular Expressions</a></li>
<li><a target="_top" href="java_methods.htm">Java - Methods</a></li>
<li><a target="_top" href="java_files_io.htm"><b>Java - Files and I/O</b></a></li>
<li><a target="_top" href="java_exceptions.htm">Java - Exceptions</a></li>
</ul>
<ul class="menu">
<li class="heading">Java Object Oriented</li>
<li><a target="_top" href="java_inheritance.htm">Java - Inheritance</a></li>
<li><a target="_top" href="java_overriding.htm">Java - Overriding</a></li>
<li><a target="_top" href="java_polymorphism.htm">Java - Polymorphism</a></li>
<li><a target="_top" href="java_abstraction.htm">Java - Abstraction</a></li>
<li><a target="_top" href="java_encapsulation.htm">Java - Encapsulation</a></li>
<li><a target="_top" href="java_interfaces.htm">Java - Interfaces</a></li>
<li><a target="_top" href="java_packages.htm">Java - Packages</a></li>
</ul>
<ul class="menu">
<li class="heading">Java Advanced</li>
<li><a target="_top" href="java_data_structures.htm">Java - Data Structures</a></li>
<li><a target="_top" href="java_collections.htm">Java - Collections</a></li>
<li><a target="_top" href="java_generics.htm">Java - Generics</a></li>
<li><a target="_top" href="java_serialization.htm">Java - Serialization</a></li>
<li><a target="_top" href="java_networking.htm">Java - Networking</a></li>
<li><a target="_top" href="java_sending_email.htm">Java - Sending Email</a></li>
<li><a target="_top" href="java_multithreading.htm">Java - Multithreading</a></li>
<li><a target="_top" href="java_applet_basics.htm">Java - Applet Basics</a></li>
<li><a target="_top" href="java_documentation.htm">Java - Documentation</a></li>
</ul>
<ul class="menu">
<li class="heading">Java Useful Resources</li>
<li><a target="_top" href="java_quick_guide.htm">Java - Quick Guide</a></li>
<li><a target="_top" href="java_library_classes.htm">Java - Library Classes</a></li>
<li><a target="_top" href="java_useful_resources.htm">Java Useful Resources</a></li>
<li><a target="_top" href="../javaexamples/index.htm">Java - Examples</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Java - Streams, Files and I/O</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="java_methods.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="java_exceptions.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>The java.io package contains nearly every class you might ever need to perform input and output (I/O) in Java. All these streams represent an input source and an output destination. The stream in the java.io package supports many data  such as primitives, Object, localized characters etc.</p>
<p>A stream can be defined as a sequence of data. The InputStream is used to read data from a source and the OutputStream is used for writing data to a destination.</p>
<p>Java does provide strong, flexible support for I/O as it relates to files and networks but this tutorial covers very basic functionlity related to streams and I/O. We would see most commonly used example one by one:</p>
<h2>Reading Console Input:</h2>
<p>Java input console is accomplished by reading from <b>System.in</b>. To obtain a character-based stream that is attached to the console, you wrap <b>System.in</b> in a
<b>BufferedReader</b> object, to create a character stream. Here is most common syntax to obtain BufferedReader:</p>
<pre class="prettyprint">
BufferedReader br = new BufferedReader(new 
                      InputStreamReader(System.in));
</pre>
<p>Once BufferedReader is obtained, we can use read( ) method to reach a character or readLine( ) method to read a string from the console.</p>
<h2>Reading Characters from Console:</h2>
<p>To read a character from a BufferedReader, we would  read( ) method whose sytax is as follows:</p>
<pre class="prettyprint">
int read( ) throws IOException
</pre>
<p>Each time that read( ) is called, it reads a character from the input stream and returns it as an integer value. It returns .1 when the end of the stream is encountered. As you can see, it can throw an IOException.</p>
<p>The following program demonstrates read( ) by reading characters from the console until the user types a "q":</p>
<pre class="prettyprint">
// Use a BufferedReader to read characters from the console.

import java.io.*;

public class BRRead {
   public static void main(String args[]) throws IOException
   {
      char c;
      // Create a BufferedReader using System.in
      BufferedReader br = new BufferedReader(new 
                         InputStreamReader(System.in));
      System.out.println("Enter characters, 'q' to quit.");
      // read characters
      do {
         c = (char) br.read();
         System.out.println(c);
      } while(c != 'q');
   }
}
</pre>
<p>Here is a sample run:</p>
<pre class="prettyprint">
Enter characters, 'q' to quit.
123abcq
1
2
3
a
b
c
q
</pre>
<h2>Reading Strings from Console:</h2>
<p>To read a string from the keyboard, use the version of readLine( ) that is a member of the BufferedReader class. Its general form is shown here:</p>
<pre class="prettyprint">
String readLine( ) throws IOException
</pre>
<p>The following program demonstrates BufferedReader and the readLine( ) method. The program reads and displays lines of text until you enter the word "end":</p>
<pre class="prettyprint">
// Read a string from console using a BufferedReader.
import java.io.*;
public class BRReadLines {
   public static void main(String args[]) throws IOException
   {
      // Create a BufferedReader using System.in
      BufferedReader br = new BufferedReader(new
                              InputStreamReader(System.in));
      String str;
      System.out.println("Enter lines of text.");
      System.out.println("Enter 'end' to quit.");
      do {
         str = br.readLine();
         System.out.println(str);
      } while(!str.equals("end"));
   }
}
</pre>
<p>Here is a sample run:</p>
<pre class="prettyprint">
Enter lines of text.
Enter 'end' to quit.
This is line one
This is line one
This is line two
This is line two
end
end
</pre>
<h2>Writing Console Output:</h2>
<p>Console output is most easily accomplished with <b>print( )</b> and <b>println( )</b>, described earlier. These methods are defined by the class <b>PrintStream</b> which is the type of the object referenced by <b>System.out</b>. Even though System.out is a byte stream, using it for simple program output is still acceptable.</p>
<p>Because PrintStream is an output stream derived from OutputStream, it also implements the low-level method write( ). Thus, write( ) can be used to write to the
console. The simplest form of write( ) defined by PrintStream is shown here:</p>
<pre class="prettyprint">
void write(int byteval)
</pre>
<p>This method writes to the stream the byte specified by byteval. Although byteval is declared as an integer, only the low-order eight bits are written.</p>
<h2>Example:</h2>
<p>Here is a short example that uses write( ) to output the character "A" followed by a newline to the screen:</p>
<pre class="prettyprint">
import java.io.*;

// Demonstrate System.out.write().
public class WriteDemo {
   public static void main(String args[]) {
      int b; 
      b = 'A';
      System.out.write(b);
      System.out.write('\n');
   }
}
</pre>
<p>This would produce simply 'A' character on the output screen.</p>
<pre class="prettyprint">
A
</pre>
<p><b>Note:</b> You will not often use write( ) to perform console output because print( ) and println( ) are substantially easier to use.</p>
<h2>Reading and Writing Files:</h2>
<p>As described earlier, A stream can be defined as a sequence of data. The InputStream is used to read data from a source and the OutputStream is used for writing data to a destination.</p>
<p>Here is a hierarchy of classes to deal with Input and Output streams.</p>
<center>
<img src="../images/iostreams.jpg" alt="Java I/O Streams" />
</center>
<p>The two important streams are FileInputStream and FileOutputStream which would be discussed in this tutorial:</p>
<h2>FileInputStream:</h2>
<p>This stream is used for reading data from the files. Objects can be created using the keyword new and there are several types of constructors available.</p>
<p>Following constructor takes a file name as a string to create an input stream object to read the file.:</p>
<pre class="prettyprint">
InputStream f = new FileInputStream("C:/java/hello");
</pre>
<p>Following constructor takes a file object to create an input stream object to read the file. First we create a file object using File() method as follows:</p>
<pre class="prettyprint">
File f = new File("C:/java/hello");
InputStream f = new FileInputStream(f);
</pre>
<p>Once you have <i>InputStream</i> object in hand then there is a list of helper methods which can be used to read to stream or to do other operations on the stream.</p>
<table class="src">
<tr>
<th>SN</th><th>Methods with Description</th></tr>
<tr><td>1</td><td><b>public void close() throws IOException{}</b><br />This method closes the file output stream. Releases any system resources associated with the file. Throws an IOException.</td></tr>
<tr><td>2</td><td><b>protected void finalize()throws IOException {}</b><br />This method cleans up the connection to the file. Ensures that the close method of this file output stream is called when there are no more references to this stream. Throws an IOException.</td></tr>
<tr><td>3</td><td><b>public int read(int r)throws IOException{}</b><br />This method reads the specified byte of data from the InputStream. Returns an int.
Returns the next byte of data and -1 will be returned if it's end of file. </td></tr>
<tr><td>4</td><td><b>public int read(byte[] r) throws IOException{}</b><br />This method reads r.length bytes from the input stream into an array. Returns the total number of bytes read. If end of file -1 will be returned.</td></tr>
<tr><td>5</td><td><b>public int available() throws IOException{}</b><br />Gives the number of bytes that can be read from this file input stream. Returns an int.</td></tr>
</table>
<p>There are other important input streams available, for more detail you can refer to the following links:</p>
<ul class="list">
<li><p><a href="java_bytearrayinputstream.htm" title="ByteArrayInputStream">ByteArrayInputStream</a></p></li>
<li><p><a href="java_datainputstream.htm" title="DataInputStream">DataInputStream</a></p></li>
</ul>
<h2>FileOutputStream:</h2>
<p>FileOutputStream is used to create a file and write data into it.The stream would create a file, if it doesn't already exist, before opening it for output.</p>
<p>Here are two constructors which can be used to create a FileOutputStream object.</p>
<p>Following constructor takes a file name as a string to create an input stream object to write the file.:</p>
<pre class="prettyprint">
OutputStream f = new FileOutputStream("C:/java/hello") 
</pre>
<p>Following constructor takes a file object to create an output stream object to write the file. First we create a file object using File() method as follows:</p>
<pre class="prettyprint">
File f = new File("C:/java/hello");
OutputStream f = new FileOutputStream(f);
</pre>
<p>Once you have <i>OutputStream</i> object in hand then there is a list of helper methods which can be used to write to stream or to do other operations on the stream.</p>
<table class="src">
<tr>
<th>SN</th><th>Methods with Description</th></tr>
<tr><td>1</td><td><b>public void close() throws IOException{}</b><br />This method closes the file output stream. Releases any system resources associated with the file. Throws an IOException.</td></tr>
<tr><td>2</td><td><b>protected void finalize()throws IOException {}</b><br />This method cleans up the connection to the file. Ensures that the close method of this file output stream is called when there are no more references to this stream. Throws an IOException.</td></tr>
<tr><td>3</td><td><b>public void write(int w)throws IOException{}</b><br />This methods writes the specified byte to the output stream.</td></tr>
<tr><td>4</td><td><b>public void write(byte[] w)</b><br />Writes w.length bytes from the mentioned byte array to the OutputStream.</td></tr>
</table>
<p>There are other important output streams available, for more detail you can refer to the following links:</p>
<ul class="list">
<li><p><a href="java_bytearrayoutputstream.htm" title="ByteArrayOutputStream">ByteArrayOutputStream</a></p></li>
<li><p><a href="java_dataoutputstream.htm" title="DataOutputStream">DataOutputStream</a></p></li>
</ul>
<h2>Example:</h2>
<p>Following is the example to demonstrate InputStream and OutputStream:</p>
<pre class="prettyprint">
import java.io.*;

public class fileStreamTest{

   public static void main(String args[]){
   
   try{
      byte bWrite [] = {11,21,3,40,5};
      OutputStream os = new FileOutputStream("C:/test.txt");
      for(int x=0; x &lt; bWrite.length ; x++){
         os.write( bWrite[x] ); // writes the bytes
      }
      os.close();
     
      InputStream is = new FileInputStream("C:/test.txt");
      int size = is.available();

      for(int i=0; i&lt; size; i++){
         System.out.print((char)is.read() + "  ");
      }
      is.close();
   }catch(IOException e){
      System.out.print("Exception");
   }	
   }
}
</pre>
<p>The above code would create file test.txt and would write given numbers in binary format. Same would be output on the stdout screen.</p>
<h2>File Navigation and I/O:</h2>
<p>There are several other classes that we would be going through to get to know the basics of File Navigation and I/O.</p>
<ul class="list">
<li><p><a href="java_file_class.htm" title="File Class">File Class</a></p></li>
<li><p><a href="java_filereader_class.htm" title="FileReader  Class">FileReader  Class</a></p></li>
<li><p><a href="java_filewriter_class.htm" title="FileWriter  Class">FileWriter  Class</a></p></li>
</ul>
<h2>Directories in Java:</h2>
<h2>Creating Directories:</h2>
<p>There are two useful <b>File</b> utility methods which can be used to create directories:</p>
<ul class="list">
<li><p>The <b>mkdir( )</b> method creates a directory, returning true on success and false on failure. Failure indicates that the path specified in the File object already exists, or that the directory cannot be created because the entire path does not exist yet.</p></li>
<li><p>The <b>mkdirs()</b> method creates both a directory and all the parents of the directory.</p></li>
</ul>
<p>Following example creates "/tmp/user/java/bin" directory:</p>
<pre class="prettyprint">
import java.io.File;

public class CreateDir {
   public static void main(String args[]) {
      String dirname = "/tmp/user/java/bin";
      File d = new File(dirname);
      // Create directory now.
      d.mkdirs();
  }
}
</pre>
<p>Compile and execute above code to create "/tmp/user/java/bin".</p>
<p><b>Note:</b> Java  automatically takes care of path separators on UNIX and Windows as per conventions. If you use a forward slash (/) on a Windows version of Java, the path will still resolve correctly.</p>
<h2>Reading Directories:</h2>
<p>A directory is a File that contains a list of other files and directories. When you create a File object and it is a directory, the isDirectory( ) method will return true.</p>
<p>You can call list( ) on that object to extract the list of other files and directories inside. The program shown here illustrates how to use list( ) to examine the contents of a directory:</p>
<pre class="prettyprint">
import java.io.File;

public class DirList {
   public static void main(String args[]) {
      String dirname = "/java";
      File f1 = new File(dirname);
      if (f1.isDirectory()) {
         System.out.println( "Directory of " + dirname);
         String s[] = f1.list();
         for (int i=0; i &lt; s.length; i++) {
            File f = new File(dirname + "/" + s[i]);
            if (f.isDirectory()) {
               System.out.println(s[i] + " is a directory");
            } else {
               System.out.println(s[i] + " is a file");
            }
         }
      } else {
         System.out.println(dirname + " is not a directory");
    }
  }
}
</pre>
<p>This would produce following result:</p>
<pre class="prettyprint">
Directory of /mysql
bin is a directory
lib is a directory
demo is a directory
test.txt is a file
README is a file
index.html is a file
include is a directory
</pre>
<br />
<hr />
<div class="pre-btn">
<a href="java_methods.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/java_files_io.pdf" alt="Java - Streams, Files and I/O" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="java_exceptions.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/java/java_files_io.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:37:29 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
