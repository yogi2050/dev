<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/flex/flex_uicomponent_class.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:08:44 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Flex UIComponent Class</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="Flex  UIComponent Class - Learn Adobe Flex programming in simple and easy steps starting with Flex Environment Setup, Web Application Creation, Deploy and Debug Application, Style with CSS, Skin, Flex Components, Basic, Form and Complex Controls,  Layout Panels, Event Handling, Event Bubbling,  Custom Controls, RPC Services, FlexUnit Integration, Internationalization, Printing Support." />
<meta name="keywords" content="Adobe, Flex, Environment, Setup, Web, Application, Deploy, Debug, Application, Style, CSS, Skin, Component, Model, Basic, Form, Complex, Controls, Layout, Panels, Event, Handling, Bubbling, Custom, RPC, Services, FlexUnit Integration, Internationalization, Printing, Support" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
/* Flex Scheme */
#topmenu a:hover {text-decoration:none;color:#e0cf0b !important;background-color:transparent;font-weight:bold;}
#header{ 
   background:#e0cf0b !important;
}
#topmenu
{
   background-color:#3e3e3e !important;
}
#leftcol ul.menu li.heading 
{
   background:#e0cf0b !important;
   border:1px solid #dbaa02 !important;
}
#leftcol, #middlecol, #rightcol {min-height:1250px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
   _uacct = "UA-232293-6";
   urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index-2.html">Tutorials Point Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index-2.html" target="_top">HOME </a>
<a href="../java/index.html" target="_top">JAVA </a>
<a href="../php/index.html" target="_top">PHP </a>
<a href="../python/index.html" target="_top">Python </a>
<a href="../ruby/index.html" target="_top">Ruby </a>
<a href="../perl/index.html" target="_top">Perl </a>
<a href="../html/index.html" target="_top">HTML </a>
<a href="../css/index.html" target="_top">CSS </a>
<a href="../javascript/index.html" target="_top">Javascript </a>
<a href="../mysql/index.html" target="_top">MySQL </a>
<a href="../cplusplus/index.html" target="_top">C++ </a>
<a href="../unix/index.html" target="_top">UNIX </a>
<a href="../more.html" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.html" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.html" target="_top">ABOUT</a> |
<a href="../about/contact_us.html" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/flex-mini.png" alt="Adobe Flex Tutorial" />
</div>
<ul class="menu">
<li class="heading">Adobe Flex Tutorial</li>
<li><a target="_top" href="index.html">Flex - Home</a></li>
<li><a target="_top" href="flex_overview.html">Flex - Overview</a></li>
<li><a target="_top" href="flex_environment_setup.html">Flex - Environment</a></li>
<li><a target="_top" href="flex_applications.html">Flex - Applications</a></li>
<li><a target="_top" href="flex_create_application.html">Flex - Create Application</a></li>
<li><a target="_top" href="flex_deploy_application.html">Flex - Deploy Application</a></li>
<li><a target="_top" href="flex_life_cycle_phases.htm">Flex - Life Cycle Phases</a></li>
<li><a target="_top" href="flex_style_with_css.html">Flex - Style with CSS</a></li>
<li><a target="_top" href="flex_style_with_skin.html">Flex - Style with Skin</a></li>
<li><a target="_top" href="flex_data_binding.html">Flex - Data Binding</a></li>
<li><a target="_top" href="flex_basic_controls.html"><b>Flex - Basic Controls</b></a></li>
<li><a target="_top" href="flex_form_controls.html">Flex - Form Controls</a></li>
<li><a target="_top" href="flex_complex_controls.html">Flex - Complex Controls</a></li>
<li><a target="_top" href="flex_layout_panels.html">Flex - Layout Panels</a></li>
<li><a target="_top" href="flex_visual_effects.html">Flex - Visual Effects</a></li>
<li><a target="_top" href="flex_event_handling.html">Flex - Event Handling</a></li>
<li><a target="_top" href="flex_custom_controls.html">Flex - Custom Controls</a></li>
<li><a target="_top" href="flex_rpc_services.html">Flex -  RPC Services</a></li>
<li><a target="_top" href="flex_flexunit_integration.html">Flex - FlexUnit Integration</a></li>
<li><a target="_top" href="flex_debug_application.html">Flex - Debug Application</a></li>
<li><a target="_top" href="flex_internationalization.html">Flex - Internationalization</a></li>
<li><a target="_top" href="flex_printing_support.html">Flex -  Printing Support</a></li>
</ul>
<ul class="menu">
<li class="heading">Adobe Flex Resources</li>
<li><a target="_top" href="flex_quick_guide.html">Flex - Quick Guide</a></li>
<li><a target="_top" href="flex_useful_resources.html">Flex - Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.html">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Flex - UIComponent Class</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="flex_eventdispatcher_class.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="flex_label_control.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<h2>Introduction</h2>
<p>The <b>UIComponent</b> class is the base class for all visual components, both interactive and noninteractive.</p>
<h2>Class declaration</h2>
<p>Following is the declaration for <b>mx.core.UIComponent</b> class:</p>
<pre class="prettyprint">
public class UIComponent 
   extends FlexSprite
      implements IAutomationObject, IChildList, IConstraintClient,
         IDeferredInstantiationUIComponent, IFlexDisplayObject, 
            IFlexModule,IInvalidating, ILayoutManagerClient, 
               IPropertyChangeNotifier,IRepeaterClient, IStateClient,
                  IAdvancedStyleClient, IToolTipManagerClient,
                     IUIComponent, IValidatorListener, IVisualElement
</pre>
<h2>Public Properties</h2>
<p>Following are the public properties for <b>mx.core.UIComponent</b> class:</p>
<table class="src">
<tr><th style="width:5%">S.N.</th><th>Name &amp; Description</th></tr>
<tr><td>1</td><td><b>accessibilityDescription : String</b><br>A convenience accessor for the description property in this UIComponent's accessibilityProperties object.</td></tr>
<tr><td>2</td><td><b>accessibilityEnabled : Boolean</b><br>A convenience accessor for the silent property in this UIComponent's accessibilityProperties object.</td></tr>
<tr><td>3</td><td><b>accessibilityName : String</b><br />A convenience accessor for the name property in this UIComponent's accessibilityProperties object.</td></tr>
<tr><td>4</td><td><b>accessibilityShortcut : String</b><br />A convenience accessor for the shortcut property in this UIComponent's accessibilityProperties object.</td></tr>
<tr><td>5</td><td><b>activeEffects : Array</b><br />[read-only] The list of effects that are currently playing on the component, as an Array of EffectInstance instances.</td></tr>
<tr><td>6</td><td><b>automationDelegate : Object</b><br />The delegate object that handles the automation-related functionality.</td></tr>
<tr><td>7</td><td><b>automationEnabled : Boolean</b><br />[read-only] True if this component is enabled for automation, false otherwise.</td></tr>
<tr><td>8</td><td><b>automationName : String</b><br />Name that can be used as an identifier for this object.</td></tr>
<tr><td>9</td><td><b>automationOwner : DisplayObjectContainer</b><br />[read-only] The owner of this component for automation purposes.</td></tr>
<tr><td>10</td><td><b>automationParent : DisplayObjectContainer</b><br />[read-only] The parent of this component for automation purposes.</td></tr>
<tr><td>11</td><td><b>automationTabularData : Object</b><br />[read-only] An implementation of the IAutomationTabularData interface, which can be used to retrieve the data.</td></tr>
<tr><td>12</td><td><b>automationValue : Array</b><br />[read-only] This value generally corresponds to the rendered appearance of the object and should be usable for correlating the identifier with the object as it appears visually within the application.</td></tr>
<tr><td>13</td><td><b>automationVisible : Boolean</b><br />[read-only] True if this component is visible for automation, false otherwise.</td></tr>
<tr><td>14</td><td><b>baseline : Object</b><br />For components, this layout constraint property is a facade on top of the similarly-named style.</td></tr>
<tr><td>15</td><td><b>baselinePosition : Number</b><br />[read-only] The y-coordinate of the baseline of the first line of text of the component.</td></tr>
<tr><td>16</td><td><b>bottom : Object</b><br />For components, this layout constraint property is a facade on top of the similarly-named style.</td></tr>
<tr><td>17</td><td><b>cacheHeuristic : Boolean</b><br />[write-only] Used by Flex to suggest bitmap caching for the object.</td></tr>
<tr><td>18</td><td><b>cachePolicy : String</b><br />Specifies the bitmap caching policy for this object.</td></tr>
<tr><td>19</td><td><b>className : String</b><br />[read-only] The name of this instance's class, such as "Button".</td></tr>
<tr><td>20</td><td><b>contentMouseX : Number</b><br />[read-only] Returns the x position of the mouse, in the content coordinate system.</td></tr>
<tr><td>21</td><td><b>contentMouseY : Number</b><br />[read-only] Returns the y position of the mouse, in the content coordinate system.</td></tr>
<tr><td>22</td><td><b>currentState : String</b><br />The current view state of the component.</td></tr>
<tr><td>23</td><td><b>cursorManager : ICursorManager</b><br />[read-only] Gets the CursorManager that controls the cursor for this component and its peers.</td></tr>
<tr><td>24</td><td><b>depth : Number</b><br />Determines the order in which items inside of containers are rendered.</td></tr>
<tr><td>25</td><td><b>descriptor : UIComponentDescriptor</b><br />Reference to the UIComponentDescriptor, if any, that was used by the createComponentFromDescriptor() method to create this UIComponent instance.</td></tr>
<tr><td>26</td><td><b>designLayer : DesignLayer</b><br />Specifies the optional DesignLayer instance associated with this visual element.</td></tr>
<tr><td>27</td><td><b>document : Object</b><br />A reference to the document object associated with this UIComponent.</td></tr>
<tr><td>28</td><td><b>doubleClickEnabled : Boolean</b><br />[override] Specifies whether the UIComponent object receives doubleClick events.</td></tr>
<tr><td>29</td><td><b>enabled : Boolean</b><br />Whether the component can accept user interaction.</td></tr>
<tr><td>30</td><td><b>errorString : String</b><br />The text that displayed by a component's error tip when a component is monitored by a Validator and validation fails.</td></tr>
<tr><td>31</td><td><b>explicitHeight : Number</b><br />Number that specifies the explicit height of the component, in pixels, in the component's coordinates.</td></tr>
<tr><td>32</td><td><b>explicitMaxHeight : Number</b><br />The maximum recommended height of the component to be considered by the parent during layout.</td></tr>
<tr><td>33</td><td><b>explicitMaxWidth : Number</b><br />The maximum recommended width of the component to be considered by the parent during layout.</td></tr>
<tr><td>34</td><td><b>explicitMinHeight : Number</b><br />The minimum recommended height of the component to be considered by the parent during layout.</td></tr>
<tr><td>35</td><td><b>explicitMinWidth : Number</b><br />The minimum recommended width of the component to be considered by the parent during layout.</td></tr>
<tr><td>36</td><td><b>explicitWidth : Number</b><br />Number that specifies the explicit width of the component, in pixels, in the component's coordinates.</td></tr>
<tr><td>37</td><td><b>flexContextMenu : IFlexContextMenu</b><br />The context menu for this UIComponent.</td></tr>
<tr><td>38</td><td><b>focusEnabled : Boolean</b><br />Indicates whether the component can receive focus when tabbed to.</td></tr>
<tr><td>39</td><td><b>focusManager : IFocusManager</b><br />Gets the FocusManager that controls focus for this component and its peers.</td></tr>
<tr><td>40</td><td><b>focusPane : Sprite</b><br />The focus pane associated with this object.</td></tr>
<tr><td>41</td><td><b>hasFocusableChildren : Boolean</b><br />A flag that indicates whether child objects can receive focus.</td></tr>
<tr><td>42</td><td><b>hasLayoutMatrix3D : Boolean</b><br />[read-only] Contains true if the element has 3D Matrix.</td></tr>
<tr><td>43</td><td><b>height : Number</b><br />[override] Number that specifies the height of the component, in pixels, in the parent's coordinates.</td></tr>
<tr><td>44</td><td><b>horizontalCenter : Object</b><br />For components, this layout constraint property is a facade on top of the similarly-named style.</td></tr>
<tr><td>45</td><td><b>id : String</b><br />ID of the component.</td></tr>
<tr><td>46</td><td><b>includeInLayout : Boolean</b><br />Specifies whether this component is included in the layout of the parent container.</td></tr>
<tr><td>47</td><td><b>inheritingStyles : Object</b><br />The beginning of this component's chain of inheriting styles.</td></tr>
<tr><td>48</td><td><b>initialized : Boolean</b><br />A flag that determines if an object has been through all three phases of layout: commitment, measurement, and layout (provided that any were required).</td></tr>
<tr><td>49</td><td><b>instanceIndex : int</b><br />[read-only] The index of a repeated component.</td></tr>
<tr><td>50</td><td><b>instanceIndices : Array</b><br />An Array containing the indices required to reference this UIComponent object from its parent document.</td></tr>
<tr><td>51</td><td><b>is3D : Boolean</b><br />[read-only] Contains true when the element is in 3D.</td></tr>
<tr><td>52</td><td><b>isDocument : Boolean</b><br />[read-only] Contains true if this UIComponent instance is a document object.</td></tr>
<tr><td>53</td><td><b>isPopUp : Boolean</b><br />Set to true by the PopUpManager to indicate that component has been popped up.</td></tr>
<tr><td>54</td><td><b>layoutMatrix3D : Matrix3D</b><br />[write-only] The transform matrix that is used to calculate a component's layout relative to its siblings.</td></tr>
<tr><td>55</td><td><b>left : Object</b><br />For components, this layout constraint property is a facade on top of the similarly-named style.</td></tr>
<tr><td>56</td><td><b>maintainProjectionCenter : Boolean</b><br />When true, the component keeps its projection matrix centered on the middle of its bounding box.</td></tr>
<tr><td>57</td><td><b>maxHeight : Number</b><br />The maximum recommended height of the component to be considered by the parent during layout.</td></tr>
<tr><td>58</td><td><b>maxWidth : Number</b><br />The maximum recommended width of the component to be considered by the parent during layout.</td></tr>
<tr><td>59</td><td><b>measuredHeight : Number</b><br />The default height of the component, in pixels.</td></tr>
<tr><td>60</td><td><b>measuredMinHeight : Number</b><br />The default minimum height of the component, in pixels.</td></tr>
<tr><td>61</td><td><b>measuredMinWidth : Number</b><br />The default minimum width of the component, in pixels.</td></tr>
<tr><td>62</td><td><b>measuredWidth : Number</b><br />The default width of the component, in pixels.</td></tr>
<tr><td>63</td><td><b>minHeight : Number</b><br />The minimum recommended height of the component to be considered by the parent during layout.</td></tr>
<tr><td>64</td><td><b>minWidth : Number</b><br />The minimum recommended width of the component to be considered by the parent during layout.</td></tr>
<tr><td>65</td><td><b>moduleFactory : IFlexModuleFactory</b><br />A module factory is used as context for using embedded fonts and for finding the style manager that controls the styles for this component.</td></tr>
<tr><td>66</td><td><b>mouseFocusEnabled : Boolean</b><br />Whether you can receive focus when clicked on.</td></tr>
<tr><td>67</td><td><b>nestLevel : int</b><br />Depth of this object in the containment hierarchy.</td></tr>
<tr><td>68</td><td><b>nonInheritingStyles : Object</b><br />The beginning of this component's chain of non-inheriting styles.</td></tr>
<tr><td>69</td><td><b>numAutomationChildren : int</b><br />[read-only] The number of automation children this container has.</td></tr>
<tr><td>70</td><td><b>owner : DisplayObjectContainer</b><br />The owner of this IVisualElement object.</td></tr>
<tr><td>71</td><td><b>parent : DisplayObjectContainer</b><br />[override] [read-only] The parent container or component for this component.</td></tr>
<tr><td>72</td><td><b>parentApplication : Object</b><br />[read-only] A reference to the Application object that contains this UIComponent instance.</td></tr>
<tr><td>73</td><td><b>parentDocument : Object</b><br />[read-only] A reference to the parent document object for this UIComponent.</td></tr>
<tr><td>74</td><td><b>percentHeight : Number</b><br />Specifies the height of a component as a percentage of its parent's size.</td></tr>
<tr><td>75</td><td><b>percentWidth : Number</b><br />Specifies the width of a component as a percentage of its parent's size.</td></tr>
<tr><td>76</td><td><b>postLayoutTransformOffsets : mx.geom:TransformOffsets</b><br />Defines a set of adjustments that can be applied to the object's transform in a way that is invisible to its parent's layout.</td></tr>
<tr><td>77</td><td><b>processedDescriptors : Boolean</b><br />Set to true after immediate or deferred child creation, depending on which one happens.</td></tr>
<tr><td>78</td><td><b>repeater : IRepeater</b><br />[read-only] A reference to the Repeater object in the parent document that produced this UIComponent.</td></tr>
<tr><td>79</td><td><b>repeaterIndex : int</b><br />[read-only] The index of the item in the data provider of the Repeater that produced this UIComponent.</td></tr>
<tr><td>80</td><td><b>repeaterIndices : Array</b><br />An Array containing the indices of the items in the data provider of the Repeaters in the parent document that produced this UIComponent.</td></tr>
<tr><td>81</td><td><b>repeaters : Array</b><br />An Array containing references to the Repeater objects in the parent document that produced this UIComponent.</td></tr>
<tr><td>82</td><td><b>right : Object</b><br />For components, this layout constraint property is a facade on top of the similarly-named style.</td></tr>
<tr><td>83</td><td><b>rotation : Number</b><br />[override] Indicates the rotation of the DisplayObject instance, in degrees, from its original orientation.</td></tr>
<tr><td>84</td><td><b>rotationX : Number</b><br />[override] Indicates the x-axis rotation of the DisplayObject instance, in degrees, from its original orientation relative to the 3D parent container.</td></tr>
<tr><td>85</td><td><b>rotationY : Number</b><br />[override] Indicates the y-axis rotation of the DisplayObject instance, in degrees, from its original orientation relative to the 3D parent container.</td></tr>
<tr><td>86</td><td><b>rotationZ : Number</b><br />[override] Indicates the z-axis rotation of the DisplayObject instance, in degrees, from its original orientation relative to the 3D parent container.</td></tr>
<tr><td>87</td><td><b>scaleX : Number</b><br />[override] Number that specifies the horizontal scaling factor.</td></tr>
<tr><td>88</td><td><b>scaleY : Number</b><br />[override] Number that specifies the vertical scaling factor.</td></tr>
<tr><td>89</td><td><b>scaleZ : Number</b><br />[override] Number that specifies the scaling factor along the z axis.</td></tr>
<tr><td>90</td><td><b>screen : Rectangle</b><br />[read-only] Returns an object that contains the size and position of the base drawing surface for this object.</td></tr>
<tr><td>91</td><td><b>showInAutomationHierarchy : Boolean</b><br />A flag that determines if an automation object shows in the automation hierarchy.</td></tr>
<tr><td>92</td><td><b>states : Array</b><br />The view states that are defined for this component.</td></tr>
<tr><td>93</td><td><b>styleDeclaration : CSSStyleDeclaration</b><br />Storage for the inline inheriting styles on this object.</td></tr>
<tr><td>94</td><td><b>styleManager : IStyleManager2</b><br />[read-only] Returns the StyleManager instance used by this component.</td></tr>
<tr><td>95</td><td><b>styleName : Object</b><br />The class style used by this component.</td></tr>
<tr><td>96</td><td><b>styleParent : IAdvancedStyleClient</b><br />A component's parent is used to evaluate descendant selectors.</td></tr>
<tr><td>97</td><td><b>systemManager : ISystemManager</b><br />Returns the SystemManager object used by this component.</td></tr>
<tr><td>98</td><td><b>tabFocusEnabled : Boolean</b><br />A flag that indicates whether this object can receive focus via the TAB key This is similar to the tabEnabled property used by the Flash Player. This is usually true for components that handle keyboard input, but some components in controlbars have them set to false because they should not steal focus from another component like an editor.</td></tr>
<tr><td>99</td><td><b>toolTip : String</b><br />Text to display in the ToolTip.</td></tr>
<tr><td>100</td><td><b>top : Object</b><br />For components, this layout constraint property is a facade on top of the similarly-named style.</td></tr>
<tr><td>101</td><td><b>transform : flash.geom:Transform</b><br />[override] An object with properties pertaining to a display object's matrix, color transform, and pixel bounds.</td></tr>
<tr><td>102</td><td><b>transformX : Number</b><br />Sets the x coordinate for the transform center of the component.</td></tr>
<tr><td>103</td><td><b>transformY : Number</b><br />Sets the y coordinate for the transform center of the component.</td></tr>
<tr><td>104</td><td><b>transformZ : Number</b><br />Sets the z coordinate for the transform center of the component.</td></tr>
<tr><td>105</td><td><b>transitions : Array</b><br />An Array of Transition objects, where each Transition object defines a set of effects to play when a view state change occurs.</td></tr>
<tr><td>106</td><td><b>tweeningProperties : Array</b><br />Array of properties that are currently being tweened on this object.</td></tr>
<tr><td>107</td><td><b>uid : String</b><br />A unique identifier for the object.</td></tr>
<tr><td>108</td><td><b>updateCompletePendingFlag : Boolean</b><br />A flag that determines if an object has been through all three phases of layout validation (provided that any were required).</td></tr>
<tr><td>109</td><td><b>validationSubField : String</b><br />Used by a validator to associate a subfield with this component.</td></tr>
<tr><td>110</td><td><b>verticalCenter : Object</b><br />For components, this layout constraint property is a facade on top of the similarly-named style.</td></tr>
<tr><td>111</td><td><b>visible : Boolean</b><br />[override] Whether or not the display object is visible.</td></tr>
<tr><td>112</td><td><b>width : Number</b><br />[override] Number that specifies the width of the component, in pixels, in the parent's coordinates.</td></tr>
<tr><td>113</td><td><b>x : Number</b><br />[override] Number that specifies the component's horizontal position, in pixels, within its parent container.</td></tr>
<tr><td>114</td><td><b>y : Number</b><br />[override] Number that specifies the component's vertical position, in pixels, within its parent container.</td></tr>
<tr><td>115</td><td><b>z : Number</b><br />[override] Indicates the z coordinate position along the z-axis of the DisplayObject instance relative to the 3D parent container.</td></tr>
</table>
<h2>Protected Properties</h2>
<p>Following are the protected properties for <b>mx.core.UIComponent</b> class:</p>
<table class="src">
<tr><th style="width:5%">S.N.</th><th>Name &amp; Description</th></tr>
<tr><td>1</td><td><b>currentCSSState : String</b><br />[read-only] The state to be used when matching CSS pseudo-selectors.</td></tr>
<tr><td>2</td><td><b>hasComplexLayoutMatrix : Boolean</b><br />[read-only] Returns true if the UIComponent has any non-translation (x,y) transform properties.</td></tr>
<tr><td>3</td><td><b>resourceManager : IResourceManager</b><br />[read-only] A reference to the object which manages all of the application's localized resources.</td></tr>
<tr><td>4</td><td><b>unscaledHeight : Number</b><br />[read-only] A convenience method for determining the unscaled height of the component.</td></tr>
<tr><td>5</td><td><b>unscaledWidth : Number</b><br />[read-only] A convenience method for determining the unscaled width of the component All of a component's drawing and child layout should be done within a bounding rectangle of this width, which is also passed as an argument to updateDisplayList().</td></tr>
</table>	
<table class="src">
<tr><th style="width:5%">S.N.</th><th>Event &amp; Description</th></tr>
<tr><td>1</td><td><b>activate</b><br>Dispatched when the Flash Player gains operating system focus and becomes active.</td></tr>
<tr><td>2</td><td><b>detivate</b><br>Dispatched when the Flash Player loses operating system focus and becomes inactive.</td></tr>
</table>
<h2>Public methods</h2>
<table class="src">
<tr><th style="width:5%">S.N.</th><th>Method &amp; Description</th></tr>	
<tr><td>1</td><td><b>UIComponent()</b><br />Constructor.</td></tr>	
<tr><td>2</td><td><b>addStyleClient(styleClient:IAdvancedStyleClient):void</b><br />Adds a non-visual style client to this component instance.</td></tr>	
<tr><td>3</td><td><b>callLater(method:Function, args:Array = null):void</b><br />Queues a function to be called later.</td></tr>
<tr><td>4</td><td><b>clearStyle(styleProp:String):void</b><br />Deletes a style property from this component instance.</td></tr>
<tr><td>5</td><td><b>contentToGlobal(point:Point):Point</b><br />Converts a Point object from content coordinates to global coordinates.</td></tr>
<tr><td>6</td><td><b>contentToLocal(point:Point):Point</b><br />Converts a Point object from content to local coordinates.</td></tr>
<tr><td>7</td><td><b>createAutomationIDPart(child:IAutomationObject):Object</b><br />Returns a set of properties that identify the child within this container.</td></tr>
<tr><td>8</td><td><b>createAutomationIDPartWithRequiredProperties(child:IAutomationObject, properties:Array):Object</b><br />Returns a set of properties that identify the child within this container.</td></tr>
<tr><td>9</td><td><b>createReferenceOnParentDocument(parentDocument:IFlexDisplayObject):void</b><br />Creates an id reference to this IUIComponent object on its parent document object.</td></tr>
<tr><td>10</td><td><b>deleteReferenceOnParentDocument(parentDocument:IFlexDisplayObject):void</b><br />Deletes the id reference to this IUIComponent object on its parent document object.</td></tr>
<tr><td>11</td><td><b>determineTextFormatFromStyles():mx.core:UITextFormat</b><br />Returns a UITextFormat object corresponding to the text styles for this UIComponent.</td></tr>
<tr><td>12</td><td><b>dispatchEvent(event:Event):Boolean</b><br />[override] Dispatches an event into the event flow.</td></tr>
<tr><td>13</td><td><b>drawFocus(isFocused:Boolean):void</b><br />Shows or hides the focus indicator around this component.</td></tr>
<tr><td>14</td><td><b>drawRoundRect(x:Number, y:Number, w:Number, h:Number, r:Object = null, c:Object = null, alpha:Object = null, rot:Object = null, gradient:String = null, ratios:Array = null, hole:Object = null):void</b><br />
Programmatically draws a rectangle into this skin's Graphics object.</td></tr>
<tr><td>15</td><td><b>effectFinished(effectInst:IEffectInstance):void</b><br />Called by the effect instance when it stops playing on the component.</td></tr>
<tr><td>16</td><td><b>effectStarted(effectInst:IEffectInstance):void</b><br />Called by the effect instance when it starts playing on the component.</td></tr>
<tr><td>17</td><td><b>endEffectsStarted():void</b><br />Ends all currently playing effects on the component.</td></tr>
<tr><td>18</td><td><b>executeBindings(recurse:Boolean = false):void</b><br />Executes all the bindings for which the UIComponent object is the destination.</td></tr>
<tr><td>19</td><td><b>finishPrint(obj:Object, target:IFlexDisplayObject):void</b><br />Called after printing is complete.</td></tr>
<tr><td>20</td><td><b>getAutomationChildAt(index:int):IAutomationObject</b><br />Provides the automation object at the specified index.</td></tr>
<tr><td>21</td><td><b>getAutomationChildren():Array</b><br />Provides the automation object list .</td></tr>
<tr><td>22</td><td><b>getBoundsXAtSize(width:Number, height:Number, postLayoutTransform:Boolean = true):Number</b><br />Returns the x coordinate of the element's bounds at the specified element size.</td></tr>
<tr><td>23</td><td><b>getBoundsYAtSize(width:Number, height:Number, postLayoutTransform:Boolean = true):Number</b><br />Returns the y coordinate of the element's bounds at the specified element size.</td></tr>
<tr><td>24</td><td><b>getClassStyleDeclarations():Array</b><br />Finds the type selectors for this UIComponent instance.</td></tr>
<tr><td>25</td><td><b>getConstraintValue(constraintName:String):*</b><br />Returns a layout constraint value, which is the same as getting the constraint style for this component.</td></tr>
<tr><td>26</td><td><b>getExplicitOrMeasuredHeight():Number</b><br />A convenience method for determining whether to use the explicit or measured height</td></tr>
<tr><td>27</td><td><b>getExplicitOrMeasuredWidth():Number</b><br />A convenience method for determining whether to use the explicit or measured width</td></tr>
<tr><td>28</td><td><b>getFocus():InteractiveObject</b><br />Gets the object that currently has focus.</td></tr>
<tr><td>29</td><td><b>getLayoutBoundsHeight(postLayoutTransform:Boolean = true):Number</b><br />Returns the element's layout height.</td></tr>
<tr><td>30</td><td><b>getLayoutBoundsWidth(postLayoutTransform:Boolean = true):Number</b><br />Returns the element's layout width.</td></tr>
<tr><td>31</td><td><b>getLayoutBoundsX(postLayoutTransform:Boolean = true):Number</b><br />Returns the x coordinate that the element uses to draw on screen.</td></tr>
<tr><td>32</td><td><b>getLayoutBoundsY(postLayoutTransform:Boolean = true):Number</b><br />Returns the y coordinate that the element uses to draw on screen.</td></tr>
<tr><td>33</td><td><b>getLayoutMatrix():Matrix</b><br />Returns the transform matrix that is used to calculate the component's layout relative to its siblings.</td></tr>
<tr><td>34</td><td><b>getLayoutMatrix3D():Matrix3D</b><br />Returns the layout transform Matrix3D for this element.</td></tr>
<tr><td>35</td><td><b>getMaxBoundsHeight(postLayoutTransform:Boolean = true):Number</b><br />Returns the element's maximum height.</td></tr>
<tr><td>36</td><td><b>getMaxBoundsWidth(postLayoutTransform:Boolean = true):Number</b><br />Returns the element's maximum width.</td></tr>
<tr><td>37</td><td><b>getMinBoundsHeight(postLayoutTransform:Boolean = true):Number</b><br />Returns the element's minimum height.</td></tr>
<tr><td>38</td><td><b>getMinBoundsWidth(postLayoutTransform:Boolean = true):Number</b><br />Returns the element's minimum width.</td></tr>
<tr><td>39</td><td><b>getPreferredBoundsHeight(postLayoutTransform:Boolean = true):Number</b><br />Returns the element's preferred height.</td></tr>
<tr><td>40</td><td><b>getPreferredBoundsWidth(postLayoutTransform:Boolean = true):Number</b><br />Returns the element's preferred width.</td></tr>
<tr><td>41</td><td><b>getRepeaterItem(whichRepeater:int = -1):Object</b><br />Returns the item in the dataProvider that was used by the specified Repeater to produce this Repeater, or null if this Repeater isn't repeated.</td></tr>
<tr><td>42</td><td><b>getStyle(styleProp:String):*</b><br />Gets a style property that has been set anywhere in this component's style lookup chain.</td></tr>
<tr><td>43</td><td><b>globalToContent(point:Point):Point</b><br />Converts a Point object from global to content coordinates.</td></tr>
<tr><td>45</td><td><b>hasCSSState():Boolean</b><br />Returns true if currentCSSState is not null.</td></tr>
<tr><td>46</td><td><b>hasState(stateName:String):Boolean</b><br />Determines whether the specified state has been defined on this UIComponent.</td></tr>
<tr><td>47</td><td><b>horizontalGradientMatrix(x:Number, y:Number, width:Number, height:Number):Matrix</b><br />Returns a box Matrix which can be passed to the drawRoundRect() method as the rot parameter when drawing a horizontal gradient.</td></tr>
<tr><td>48</td><td><b>initialize():void</b><br />Initializes the internal structure of this component.</td></tr>
<tr><td>49</td><td><b>initializeRepeaterArrays(parent:IRepeaterClient):void</b><br />Initializes various properties which keep track of repeated instances of this component.</td></tr>
<tr><td>50</td><td><b>invalidateDisplayList():void</b><br />Marks a component so that its updateDisplayList() method gets called during a later screen update.</td></tr>
<tr><td>51</td><td><b>invalidateLayering():void</b><br />Called by a component's items to indicate that their depth property has changed.</td></tr>
<tr><td>52</td><td><b>invalidateLayoutDirection():void</b><br />An element must call this method when its layoutDirection changes or when its parent's layoutDirection changes.</td></tr>
<tr><td>53</td><td><b>invalidateProperties():void</b><br />Marks a component so that its commitProperties() method gets called during a later screen update.</td></tr>
<tr><td>54</td><td><b>invalidateSize():void</b><br />Marks a component so that its measure() method gets called during a later screen update.</td></tr>
<tr><td>55</td><td><b>localToContent(point:Point):Point</b><br />Converts a Point object from local to content coordinates.</td></tr>
<tr><td>56</td><td><b>matchesCSSState(cssState:String):Boolean</b><br />Returns true if cssState matches currentCSSState.</td></tr>
<tr><td>57</td><td><b>matchesCSSType(cssType:String):Boolean</b><br />Determines whether this instance is the same as, or is a subclass of, the given type.</td></tr>
<tr><td>58</td><td><b>measureHTMLText(htmlText:String):flash.text:TextLineMetrics</b><br />Measures the specified HTML text, which can contain HTML tags such as &amp;lt;font&amp;&gt; and &amp;&lt;b&amp;&gt;, assuming that it is displayed in a single-line UITextField using a UITextFormat determined by the styles of this UIComponent.</td></tr>
<tr><td>59</td><td><b>measureText(text:String):flash.text:TextLineMetrics</b><br />Measures the specified text, assuming that it is displayed in a single-line UITextField (or UIFTETextField) using a UITextFormat determined by the styles of this UIComponent.</td></tr>
<tr><td>60</td><td><b>move(x:Number, y:Number):void</b><br />Moves the component to a specified position within its parent.</td></tr>
<tr><td>61</td><td><b>notifyStyleChangeInChildren(styleProp:String, recursive:Boolean):void</b><br />Propagates style changes to the children.</td></tr>
<tr><td>62</td><td><b>owns(child:DisplayObject):Boolean</b><br />Returns true if the chain of owner properties points from child to this UIComponent.</td></tr>
<tr><td>63</td><td><b>parentChanged(p:DisplayObjectContainer):void</b><br />Called by Flex when a UIComponent object is added to or removed from a parent.</td></tr>
<tr><td>64</td><td><b>prepareToPrint(target:IFlexDisplayObject):Object</b><br />Prepares an IFlexDisplayObject for printing.</td></tr>
<tr><td>65</td><td><b>regenerateStyleCache(recursive:Boolean):void</b><br />Builds or rebuilds the CSS style cache for this component and, if the recursive parameter is true, for all descendants of this component as well.</td></tr>
<tr><td>66</td><td><b>registerEffects(effects:Array):void</b><br />For each effect event, registers the EffectManager as one of the event listeners.</td></tr>
<tr><td>67</td><td><b>removeStyleClient(styleClient:IAdvancedStyleClient):void</b><br />Removes a non-visual style client from this component instance.</td></tr>
<tr><td>68</td><td><b>replayAutomatableEvent(event:Event):Boolean</b><br />Replays the specified event.</td></tr>
<tr><td>69</td><td><b>resolveAutomationIDPart(criteria:Object):Array</b><br />Resolves a child by using the id provided.</td></tr>
<tr><td>70</td><td><b>resumeBackgroundProcessing():void</b><br />[static] Resumes the background processing of methods queued by callLater(), after a call to suspendBackgroundProcessing().</td></tr>
<tr><td>71</td><td><b>setActualSize(w:Number, h:Number):void</b><br />Sizes the object.</td></tr>
<tr><td>72</td><td><b>setConstraintValue(constraintName:String, value:*):void</b><br />Sets a layout constraint value, which is the same as setting the constraint style for this component.</td></tr>
<tr><td>73</td><td><b>setCurrentState(stateName:String, playTransition:Boolean = true):void</b><br />Set the current state.</td></tr>
<tr><td>74</td><td><b>setFocus():void</b><br />Sets the focus to this component.</td></tr>
<tr><td>75</td><td><b>setLayoutBoundsPosition(x:Number, y:Number, postLayoutTransform:Boolean = true):void</b><br />Sets the coordinates that the element uses to draw on screen.</td></tr>
<tr><td>76</td><td><b>setLayoutBoundsSize(width:Number, height:Number, postLayoutTransform:Boolean = true):void</b><br />Sets the layout size of the element.</td></tr>
<tr><td>77</td><td><b>setLayoutMatrix(value:Matrix, invalidateLayout:Boolean):void</b><br />Sets the transform Matrix that is used to calculate the component's layout size and position relative to its siblings.</td></tr>
<tr><td>78</td><td><b>setLayoutMatrix3D(value:Matrix3D, invalidateLayout:Boolean):void</b><br />Sets the transform Matrix3D that is used to calculate the component's layout size and position relative to its siblings.</td></tr>
<tr><td>79</td><td><b>setStyle(styleProp:String, newValue:*):void</b><br />Sets a style property on this component instance.</td></tr>
<tr><td>80</td><td><b>setVisible(value:Boolean, noEvent:Boolean = false):void</b><br />Called when the visible property changes.</td></tr>
<tr><td>81</td><td><b>styleChanged(styleProp:String):void</b><br />Detects changes to style properties.</td></tr>
<tr><td>82</td><td><b>stylesInitialized():void</b><br />Flex calls the stylesInitialized() method when the styles for a component are first initialized.</td></tr>
<tr><td>83</td><td><b>suspendBackgroundProcessing():void</b><br />[static] Blocks the background processing of methods queued by callLater(), until resumeBackgroundProcessing() is called.</td></tr>
<tr><td>84</td><td><b>transformAround(transformCenter:Vector3D, scale:Vector3D = null, rotation:Vector3D = null, translation:Vector3D = null, postLayoutScale:Vector3D = null, postLayoutRotation:Vector3D = null, postLayoutTranslation:Vector3D = null, invalidateLayout:Boolean = true):void</b><br />A utility method to update the rotation, scale, and translation of the transform while keeping a particular point, specified in the component's own coordinate space, fixed in the parent's coordinate space.</td></tr>
<tr><td>85</td><td><b>transformPointToParent(localPosition:Vector3D, position:Vector3D, postLayoutPosition:Vector3D):void</b><br />A utility method to transform a point specified in the local coordinates of this object to its location in the object's parent's coordinates.</td></tr>
<tr><td>86</td><td><b>validateDisplayList():void</b><br />Validates the position and size of children and draws other visuals.</td></tr>
<tr><td>87</td><td><b>validateNow():void</b><br />Validate and update the properties and layout of this object and redraw it, if necessary.</td></tr>
<tr><td>88</td><td><b>validateProperties():void</b><br />Used by layout logic to validate the properties of a component by calling the commitProperties() method.</td></tr>
<tr><td>89</td><td><b>validateSize(recursive:Boolean = false):void</b><br />Validates the measured size of the component If the LayoutManager.invalidateSize() method is called with this ILayoutManagerClient, then the validateSize() method is called when it's time to do measurements.</td></tr>
<tr><td>90</td><td><b>validationResultHandler(event:ValidationResultEvent):void</b><br />Handles both the valid and invalid events from a validator assigned to this component.</td></tr>
<tr><td>91</td><td><b>verticalGradientMatrix(x:Number, y:Number, width:Number, height:Number):Matrix</b><br />Returns a box Matrix which can be passed to drawRoundRect() as the rot parameter when drawing a vertical gradient.</td></tr>
</table>
<h2>Protected methods</h2>
<table class="src">
<tr><th style="width:5%">S.N.</th><th>Method &amp; Description</th></tr>	
<tr><td>1</td><td><b>adjustFocusRect(obj:DisplayObject = null):void</b><br />Adjust the focus rectangle.</td></tr>
<tr><td>2</td><td><b>applyComputedMatrix():void</b><br />Commits the computed matrix built from the combination of the layout matrix and the transform offsets to the flash displayObject's transform.</td></tr>
<tr><td>3</td><td><b>attachOverlay():void</b><br />This is an internal method used by the Flex framework to support the Dissolve effect.</td></tr>
<tr><td>4</td><td><b>canSkipMeasurement():Boolean</b><br />Determines if the call to the measure() method can be skipped.</td></tr>
<tr><td>5</td><td><b>childrenCreated():void</b><br />Performs any final processing after child objects are created.</td></tr>
<tr><td>6</td><td><b>commitProperties():void</b><br />Processes the properties set on the component.</td></tr>
<tr><td>7</td><td><b>createChildren():void</b><br />Create child objects of the component.</td></tr>
<tr><td>8</td><td><b>createInFontContext(classObj:Class):Object</b><br />Creates a new object using a context based on the embedded font being used.</td></tr>
<tr><td>9</td><td><b>createInModuleContext(moduleFactory:IFlexModuleFactory, className:String):Object</b><br />Creates the object using a given moduleFactory.</td></tr>
<tr><td>10</td><td><b>dispatchPropertyChangeEvent(prop:String, oldValue:*, value:*):void</b><br />Helper method for dispatching a PropertyChangeEvent when a property is updated.</td></tr>
<tr><td>11</td><td><b>focusInHandler(event:FocusEvent):void</b><br />The event handler called when a UIComponent object gets focus.</td></tr>
<tr><td>12</td><td><b>focusOutHandler(event:FocusEvent):void</b><br />The event handler called when a UIComponent object loses focus.</td></tr>
<tr><td>13</td><td><b>initAdvancedLayoutFeatures():void</b><br />Initializes the implementation and storage of some of the less frequently used advanced layout features of a component.</td></tr>
<tr><td>14</td><td><b>initializationComplete():void</b><br />Finalizes the initialization of this component.</td></tr>
<tr><td>15</td><td><b>initializeAccessibility():void</b><br />Initializes this component's accessibility code.</td></tr>
<tr><td>16</td><td><b>invalidateParentSizeAndDisplayList():void</b><br />Helper method to invalidate parent size and display list if this object affects its layout (includeInLayout is true).</td></tr>
<tr><td>17</td><td><b>isOurFocus(target:DisplayObject):Boolean</b><br />Typically overridden by components containing UITextField objects, where the UITextField object gets focus.</td></tr>
<tr><td>18</td><td><b>keyDownHandler(event:KeyboardEvent):void</b><br />The event handler called for a keyDown event.</td></tr>
<tr><td>19</td><td><b>keyUpHandler(event:KeyboardEvent):void</b><br />The event handler called for a keyUp event.</td></tr>
<tr><td>20</td><td><b>measure():void</b><br />Calculates the default size, and optionally the default minimum size, of the component.</td></tr>
<tr><td>21</td><td><b>resourcesChanged():void</b><br />This method is called when a UIComponent is constructed, and again whenever the ResourceManager dispatches a "change" Event to indicate that the localized resources have changed in some way.</td></tr>
<tr><td>22</td><td><b>setStretchXY(stretchX:Number, stretchY:Number):void</b><br />Specifies a transform stretch factor in the horizontal and vertical direction.</td></tr>
<tr><td>23</td><td><b>stateChanged(oldState:String, newState:String, recursive:Boolean):void</b><br />This method is called when a state changes to check whether state-specific styles apply to this component</td></tr>
<tr><td>24</td><td><b>updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void</b><br />Draws the object and/or sizes and positions its children.</td></tr>
</table>
<h2>Events</h2>
<p>Following are the events for <b>mx.core.UIComponent</b> class:</p>
<table class="src">
<tr><th style="width:5%">S.N.</th><th>Event &amp; Description</th></tr>
<tr><td>1</td><td><b>add</b><br />when the component is added to a container as a content child by using the addChild(), addChildAt(), addElement(), or addElementAt() method.	</td></tr>
<tr><td>2</td><td><b>creationComplete</b><br />when the component has finished its construction, property processing, measuring, layout, and drawing.</td></tr>
<tr><td>3</td><td><b>currentStateChange</b><br />after the view state has changed.</td></tr>
<tr><td>4</td><td><b>currentStateChanging</b><br />after the currentState property changes, but before the view state changes.</td></tr>
<tr><td>5</td><td><b>dragComplete</b><br />by the drag initiator (the component that is the source of the data being dragged) when the drag operation completes, either when you drop the dragged data onto a drop target or when you end the drag-and-drop operation without performing a drop.</td></tr>
<tr><td>6</td><td><b>dragDrop</b><br />by the drop target when the user releases the mouse over it.</td></tr>
<tr><td>7</td><td><b>dragEnter</b><br />by a component when the user moves the mouse over the component during a drag operation.</td></tr>
<tr><td>8</td><td><b>dragExit</b><br />by the component when the user drags outside the component, but does not drop the data onto the target.</td></tr>
<tr><td>9</td><td><b>dragOver</b><br />by a component when the user moves the mouse while over the component during a drag operation.</td></tr>
<tr><td>10</td><td><b>dragStart</b><br />by the drag initiator when starting a drag operation.</td></tr>
<tr><td>11</td><td><b>effectEnd</b><br />after an effect ends.</td></tr>
<tr><td>12</td><td><b>effectStart</b><br />just before an effect starts.</td></tr>
<tr><td>13</td><td><b>effectStop</b><br />after an effect is stopped, which happens only by a call to stop() on the effect.</td></tr>
<tr><td>14</td><td><b>enterState</b><br />after the component has entered a view state.</td></tr>
<tr><td>15</td><td><b>exitState</b><br />just before the component exits a view state.</td></tr>
<tr><td>16</td><td><b>hide</b><br />when an object's state changes from visible to invisible.</td></tr>
<tr><td>17</td><td><b>initialize</b><br />when the component has finished its construction and has all initialization properties set.</td></tr>
<tr><td>18</td><td><b>invalid</b><br />when a component is monitored by a Validator and the validation failed.</td></tr>
<tr><td>19</td><td><b>mouseDownOutside</b><br />from a component opened using the PopUpManager when the user clicks outside it.</td></tr>
<tr><td>20</td><td><b>mouseWheelOutside</b><br />from a component opened using the PopUpManager when the user scrolls the mouse wheel outside it.</td></tr>
<tr><td>21</td><td><b>move</b><br />when the object has moved.</td></tr>
<tr><td>22</td><td><b>preinitialize</b><br />at the beginning of the component initialization sequence.</td></tr>
<tr><td>23</td><td><b>remove</b><br />when the component is removed from a container as a content child by using the removeChild(), removeChildAt(), removeElement(), or removeElementAt() method.</td></tr>
<tr><td>24</td><td><b>resize</b><br />when the component is resized.</td></tr>
<tr><td>25</td><td><b>show</b><br />when an object's state changes from invisible to visible.</td></tr>
<tr><td>26</td><td><b>stateChangeComplete</b><br />after the component has entered a new state and any state transition animation to that state has finished playing.</td></tr>
<tr><td>27</td><td><b>stateChangeInterrupted</b><br />when a component interrupts a transition to its current state in order to switch to a new state.</td></tr>
<tr><td>28</td><td><b>toolTipCreate</b><br />by the component when it is time to create a ToolTip.</td></tr>
<tr><td>29</td><td><b>toolTipEnd</b><br />by the component when its ToolTip has been hidden and is to be discarded soon.</td></tr>
<tr><td>30</td><td><b>toolTipHide</b><br />by the component when its ToolTip is about to be hidden.</td></tr>
<tr><td>31</td><td><b>toolTipShow</b><br />by the component when its ToolTip is about to be shown.</td></tr>
<tr><td>32</td><td><b>toolTipShown</b><br />by the component when its ToolTip has been shown.</td></tr>
<tr><td>33</td><td><b>toolTipStart</b><br />by a component whose toolTip property is set, as soon as the user moves the mouse over it.</td></tr>
<tr><td>34</td><td><b>touchInteractionEnd</b><br />A non-cancellable event, by a component when it is done responding to a touch interaction user gesture.</td></tr>
<tr><td>35</td><td><b>touchInteractionStart</b><br />A non-cancellable event, by a component when it starts responding to a touch interaction user gesture.</td></tr>
<tr><td>36</td><td><b>touchInteractionStarting</b><br />A cancellable event, by a component in an attempt to respond to a touch interaction user gesture.</td></tr>
<tr><td>37</td><td><b>updateComplete</b><br />when an object has had its commitProperties(), measure(), and updateDisplayList() methods called (if needed).</td></tr>
<tr><td>38</td><td><b>valid</b><br />when a component is monitored by a Validator and the validation succeeded.</td></tr>
<tr><td>39</td><td><b>valueCommit</b><br />when values are changed programmatically or by user interaction.</td></tr>
</table>
<h2>Methods inherited</h2>
<p>This class inherits methods from the following classes:</p>
<ul class="list">
<li><p>mx.core.FlexSprite</p></li>
<li><p>flash.display.Sprite</p></li>
<li><p>flash.display.DisplayObjectContainer</p></li>
<li><p>flash.display.InteractiveObject</p></li>
<li><p>flash.display.DisplayObject</p></li>
<li><p>flash.events.EventDispatcher</p></li>
<li><p>Object</p></li>
</ul>
<hr />
<div class="pre-btn">
<a href="flex_eventdispatcher_class.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/flex_uicomponent_class.html" alt="Flex UIComponent Class" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="flex_label_control.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.html" target="_top">ASP.NET </a> |
<a href="../jquery/index.html" target="_top">jQuery </a> |
<a href="../ajax/index.html" target="_top">AJAX </a> |
<a href="../ant/index.html" target="_top">ANT</a> |
<a href="../jsp/index.html" target="_top">JSP </a> |
<a href="../servlets/index.html" target="_top">Servlets </a> |
<a href="../log4j/index.html" target="_top">log4j </a> |
<a href="../ibatis/index.html" target="_top">iBATIS </a> |
<a href="../hibernate/index.html" target="_top">Hibernate </a> |
<a href="../jdbc/index.html" target="_top">JDBC </a> |
<a href="../struts_2/index.html" target="_top">Struts </a> |
<a href="../html5/index.html" target="_top">HTML5 </a> |
<a href="../sql/index.html" target="_top">SQL </a> |
<a href="../mysql/index.html" target="_top">MySQL </a> |
<a href="../cplusplus/index.html" target="_top">C++ </a> |
<a href="../unix/index.html" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/flex/flex_uicomponent_class.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:08:44 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>