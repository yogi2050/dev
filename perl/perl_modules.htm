<html>

<!-- Mirrored from www.tutorialspoint.com/perl/perl_modules.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:47:28 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<title>Writing PERL Packages & Modules</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<meta name="Keywords" content="Perl, Programming, Language, Object Oriented Perl, Perl Variables, Scalars, Arrays, Hash, File I/O, Looping, Regular Expressions, Subroutines, Coding Standard, Writing Modules, Process Management, Socket, Examples, References, Special Variables, Syntax Overview, Advanced Perl, Tutorial, Tutorials, Operators, Built-in Functions, Quiz">
<meta name="Description" content="Free tutorials and references for PERL Programming Common Gateway Interface (CGI) Database Interface (DBI) with PERL Object Oriented Perl and Perl Variables Scalars Arrays Hash File I/O Looping Regular Expressions Subroutines Coding Standard Writing Modules Process Management Socket Examples References Special Variables Syntax Overview Advanced Perl Tutorial Perl Operators Built-in Functions and Quiz">
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base >
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<table border=0 class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index.htm"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="18" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br>
&nbsp;&nbsp;<b>PERL Tutorial</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="index.htm">PERL HOME</a></li>
<li><a class="left" target="_top" href="perl_introduction.htm" >PERL Introduction</a></li>
<li><a class="left" target="_top" href="perl_syntax.htm" >Syntax Overview</a></li>
<li><a class="left" target="_top" href="perl_variables.htm" >Perl Variables</a></li>
<li><a class="left" target="_top" href="perl_scalars.htm" >Perl Scalars</a></li>
<li><a class="left" target="_top" href="perl_arrays.htm" >Perl Arrays</a></li>
<li><a class="left" target="_top" href="perl_hashes.htm" >Perl Hashes</a></li>
<li><a class="left" target="_top" href="perl_special_variables.htm" >Special Variables</a></li>
<li><a class="left" target="_top" href="perl_conditions.htm" >Perl IF..ELSE..</a></li>
<li><a class="left" target="_top" href="perl_loops.htm" >Perl Loopings</a></li>
<li><a class="left" target="_top" href="perl_operators.htm" >Perl Operators</a></li>
<li><a class="left" target="_top" href="perl_files.htm" >Perl Files & I/O</a></li>
<li><a class="left" target="_top" href="perl_regular_expression.htm" >Regular Expressions</a></li>
<li><a class="left" target="_top" href="perl_subroutines.htm" >Perl Subroutines</a></li>
<li><a class="left" target="_top" href="perl_format.htm" >Perl Formats</a></li>
<li><a class="left" target="_top" href="perl_error_handeling.htm" >Perl Error Handeling</a></li>
<li><a class="left" target="_top" href="perl_coding_standard.htm" >Perl Coding Standard</a></li>
</ul>
</div>
<br>
&nbsp;&nbsp;<b>Advanced PERL</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="perl_socket.htm" >Perl Sockets</a></li>
<li><a class="left" target="_top" href="perl_modules.htm" ><b>Writing Perl Modules</b></a></li>
<li><a class="left" target="_top" href="perl_oo_perl.htm" >Object Oriented Perl</a></li>
<li><a class="left" target="_top" href="perl_database.htm" >Database Management</a></li>
<li><a class="left" target="_top" href="perl_cgi.htm" >CGI Programming</a></li>
</ul>
</div>
<br>
&nbsp;&nbsp;<b>PERL References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="perl_function_references.htm" >Perl Functions</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.htm">Computer Glossary</b></a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br><br>
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index.htm">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.htm">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.htm">About TP</a>&nbsp;&nbsp;
</td>
<td  style="width:10px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/about_advertising.htm">Advertising</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle"  cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>Writing PERL Modules</h1>
<a href="perl_socket.htm"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="perl_oo_perl.htm"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<hr />
<table width="100%" border="0" cellpadding="0" cellspacing="0">
<tr>
<td valign="top">
<h2>What are Packages?</h2>
<ul>
<li><p>A package is a collection of code which lives in its own namespace</p></li>
<li><p>A namespace is a named collection of unique variable names (also called a symbol table).</p></li>
<li><p>Namespaces prevent variable name collisions between packages</p></li>
<li><p>Packages enable the construction of modules which, when used, won't clobbber variables and functions outside of the modules's own namespace</p></li>
</ul>
<h2>The Package Statement</h2>
<ul>
<li><p><The <b> package</b> statement switches the current naming context to a specified namespace (symbol table)</p></li>
<li><p>If the named package does not exists, a new namespace is first created.</li>
</ul>
<br />
<table cellpadding=5 class="src"><tr><td><pre>
$i = 1; print "$i\n"; # Prints "1"
package foo;
$i = 2; print "$i\n"; # Prints "2"
package main;
print "$i\n"; # Prints "1"
</tr></tr></table></pre>
<ul>
<li><p>The package stays in effect until either another package statement is invoked, or until the end of the end of the current block or file.</p></li>
<li><p>You can explicitly refer to variables within a package using the <b>::</b> package qualifier</p></li>
</ul>
<br>
<table cellpadding=5 class="src"><tr><td><pre>
<b>$PACKAGE_NAME::VARIABLE_NAME</b>

For Example:
$i = 1; print "$i\n"; # Prints "1"
package foo;
$i = 2; print "$i\n"; # Prints "2"
package main;
print "$i\n"; # Prints "1"

print "$foo::i\n"; # Prints "2"
</tr></tr></table></pre>
<h2>BEGIN and END Blocks</h2>
<p>You may define any number of code blocks named BEGIN and END which act as constructors and destructors respectively.</P>
<table cellpadding=5 class="src"><tr><td><pre>
BEGIN { ... }
END { ... }
BEGIN { ... }
END { ... }
</tr></tr></table></pre>
<ul>
<li><p>Every <b>BEGIN</b> block is executed after the perl script is loaded and compiled but before any other statement is executed</p></li>
<li><p>Every END block is executed just before the perl interpreter exits.</p></li>
<li><p>The BEGIN and END blocks are particularly useful when creating Perl modules.</p></li>
</ul>
<h1>What are Perl Modules?</h1>
<p>A Perl module is a reusable package defined in a library file whose name is the same as the name of the package (with a .pm on the end).</p>
<p>A Perl module file called "Foo.pm" might contain statements like this.</p>
<table cellpadding=5 class="src"><tr><td><pre>
#!/usr/bin/perl

package Foo;
sub bar { 
   print "Hello $_[0]\n" 
}

sub blat { 
   print "World $_[0]\n" 
}
1;
</tr></tr></table></pre>
<p>Few noteable points about modules</p>
<ul>
<li><p>The functions <b>require</b>  and <b>use</b>  will load a module.</p></li>
<li><p>Both use the list of search paths in <b>@INC</b> to find the module (you may modify it!)</p></li>
<li><p>Both call the <b>eval</b> function to process the code</p></li>
<li><p>The <b>1;</b> at the bottom  causes eval to evaluate to TRUE (and thus not fail)</p></li>
</ul>
<h2>The Require Function</h2>
<p>A module can be loaded by calling the <b>require</b> function</p>
<table cellpadding=5 class="src"><tr><td><pre>
#!/usr/bin/perl

require Foo;

Foo::bar( "a" );
Foo::blat( "b" );
</tr></tr></table></pre>
<p>Notice above that the subroutine names must be fully qualified (because they are isolated in their own package)</p>
<p>It would be nice to enable the functions bar and blat to be imported into our own namespace so we wouldn't have to use the Foo:: qualifier.</p>
<h2>The Use Function</h2>
<p>A module can be loaded by calling the <b>use</b> function</p>
<table cellpadding=5 class="src"><tr><td><pre>
#!/usr/bin/perl

use Foo;

bar( "a" );
blat( "b" );
</tr></tr></table></pre>

<p>Notice that we didn't have to fully qualify the package's function names?</p>
<p>The use function will export a list of symbols from a module given a few added statements inside a module</p>
<table cellpadding=5 class="src"><tr><td><pre>
require Exporter;
@ISA = qw(Exporter);
</tr></tr></table></pre>
<p>Then, provide a list of symbols (scalars, lists, hashes, subroutines, etc) by filling the list variable named <b>@EXPORT</b>: For Example</p>
<table cellpadding=5 class="src"><tr><td><pre>
package Module;

require Exporter;
@ISA = qw(Exporter);
@EXPORT = qw(bar blat);

sub bar { print "Hello $_[0]\n" }
sub blat { print "World $_[0]\n" }
sub splat { print "Not $_[0]\n" }  # Not exported!

1;
</tr></tr></table></pre>
<h1>Create the Perl Module Tree</h1>
<p>When you are ready to ship your PERL module then there is standard way of creating a Perl Module Tree. This is done using <b>h2xs</b> utility. This utility comes alongwith PERL. Here is the syntax to use h2xs</p>
<table cellpadding=5 class="src"><tr><td><pre>
$h2xs -AX -n  Module Name

# For example, if your module is available in Person.pm file
$h2xs -AX -n Person

This will produce following result
Writing Person/lib/Person.pm
Writing Person/Makefile.PL
Writing Person/README
Writing Person/t/Person.t
Writing Person/Changes
Writing Person/MANIFEST
</tr></tr></table></pre>
<p>Here is the descritpion of these options</p>
<ul>
<li><p><b>-A</b> omits the Autoloader code (best used by modules that define a large number of infrequently used subroutines)</p></li>
<li><p><b>-X</b> omits XS elements (eXternal Subroutine, where eXternal means external to Perl, i.e. C)</p></li>
<li><p><b>-n</b> specifies the name of the module</p></li>
</ul>
<p>So above command creates the following  structure inside Person directory. Actual result is shown above.</p>
<ul>
<li><p>Changes</p></li>
<li><p>Makefile.PL</p></li>
<li><p>MANIFEST (contains the list of all files in the package)</p></li>
<li><p>README</p></li>
<li><p>t/ (test files)</p></li>
<li><p>lib/ ( Actual source code goes here</p></lI>
</ul>
<p>So finally you <b>tar</b> this directory structure into a file Person.tar and you can ship it. You would have to update README file with the proper instructions. You can provide some test  examples files in t directory.</p>

<h1>Installing Perl Module</h1>
<p>Installing a Perl Module is very easy. Use the following sequence to install any Perl Module.</p>
<table cellpadding=5 class="src"><tr><td><pre>
perl Makefile.PL
make
make install
</tr></tr></table></pre>
<p>The Perl interpreter has a list of directories in which it searches for modules (global array @INC)</p>
</td>
</tr></table>
<br>
<hr />
<a href="perl_socket.htm"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="perl_oo_perl.htm"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion7a24.html?tutorial=perl&amp;file=perl_modules.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<hr />
<br />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/perl/perl_modules.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:47:29 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
