<html>

<!-- Mirrored from www.tutorialspoint.com/perl/oraperl_manual.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:03:09 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<title>Oraperl Manual</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<meta name="Keywords" content="Perl, Programming, Language, Object Oriented Perl, Perl Variables, Scalars, Arrays, Hash, File I/O, Looping, Regular Expressions, Subroutines, Coding Standard, Writing Modules, Process Management, Socket, Examples, References, Special Variables, Syntax Overview, Advanced Perl, Tutorial, Tutorials, Operators, Built-in Functions, Quiz">
<meta name="Description" content="Free tutorials and references for PERL Programming Common Gateway Interface (CGI) Database Interface (DBI) with PERL Object Oriented Perl and Perl Variables Scalars Arrays Hash File I/O Looping Regular Expressions Subroutines Coding Standard Writing Modules Process Management Socket Examples References Special Variables Syntax Overview Advanced Perl Tutorial Perl Operators Built-in Functions and Quiz">
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base >
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<table border=0 class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="18" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br>
&nbsp;&nbsp;<b>PERL Tutorial</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="index.html">PERL HOME</a></li>
<li><a class="left" target="_top" href="perl_introduction.html" >PERL Introduction</a></li>
<li><a class="left" target="_top" href="perl_syntax.html" >Syntax Overview</a></li>
<li><a class="left" target="_top" href="perl_variables.html" >Perl Variables</a></li>
<li><a class="left" target="_top" href="perl_scalars.html" >Perl Scalars</a></li>
<li><a class="left" target="_top" href="perl_arrays.html" >Perl Arrays</a></li>
<li><a class="left" target="_top" href="perl_hashes.html" >Perl Hashes</a></li>
<li><a class="left" target="_top" href="perl_special_variables.html" >Special Variables</a></li>
<li><a class="left" target="_top" href="perl_conditions.html" >Perl IF..ELSE..</a></li>
<li><a class="left" target="_top" href="perl_loops.html" >Perl Loopings</a></li>
<li><a class="left" target="_top" href="perl_operators.html" >Perl Operators</a></li>
<li><a class="left" target="_top" href="perl_files.html" >Perl Files & I/O</a></li>
<li><a class="left" target="_top" href="perl_regular_expression.html" >Regular Expressions</a></li>
<li><a class="left" target="_top" href="perl_subroutines.html" >Perl Subroutines</a></li>
<li><a class="left" target="_top" href="perl_format.html" >Perl Formats</a></li>
<li><a class="left" target="_top" href="perl_error_handeling.html" >Perl Error Handeling</a></li>
<li><a class="left" target="_top" href="perl_coding_standard.html" >Perl Coding Standard</a></li>
</ul>
</div>
<br>
&nbsp;&nbsp;<b>Advanced PERL</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="perl_socket.html" >Perl Sockets</a></li>
<li><a class="left" target="_top" href="perl_modules.html" >Writing Perl Modules</a></li>
<li><a class="left" target="_top" href="perl_oo_perl.html" >Object Oriented Perl</a></li>
<li><a class="left" target="_top" href="perl_database.html" ><b>Database Management</b></a></li>
<li><a class="left" target="_top" href="perl_cgi.html" >CGI Programming</a></li>
</ul>
</div>
<br>
&nbsp;&nbsp;<b>PERL References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="perl_function_references.html" >Perl Functions</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</b></a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br><br>
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
<td  style="width:10px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/about_advertising.html">Advertising</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle"  cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>Oraperl Manual</h1>
<a href="perl_database.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<hr />
<p>Oraperl is an extension to Perl which allows access to Oracle databases. In order to make the oraperl function definitions available in perl5 you need to arrange to 'use' the Oraperl.pm module in each file or package which uses them. You can do this by simply adding use Oraperl; in each file or package. </p>
<p>Put a following line in your each script:</p>
<table class="src" cellpadding="5"><tr><td><pre>
eval 'use Oraperl; 1;' || die $@ if $] &gt;= 5;
</pre></td></tr></table>
<p>There are following important perl functions to understand to work with oraperl module.</p>
<ul>
<li><p><b>&amp;ora_login() - </b> is used to login to an oralce database.</p></li>
<li><p><b>&amp;ora_open() - </b> is used to execute any SQL command.</p></li>
<li><p><b>&amp;ora_bind() - </b> is used to assign actual values to substitution variables.</p></li>
<li><p><b>&amp;ora_fetch() - </b> is used to used in conjunction with a SQL SELECT statement to retrieve information from a database. </p></li>
<li><p><b>&amp;ora_close() - </b> is used to close oralce connection.</p></li>
<li><p><b>&amp;ora_do() - </b> is used to as an alternative to &amp;ora_open() and &amp;ora_close().</p></li>
<li><p><b>&amp;ora_logoff - </b> is used to log out of oracle.</p></li>
</ul>
<p>There are other ancillary functions which we will discuss in this  session.</p>
<h2>Database Connection using  ora_login():</h2>
<p>In order to access information held within an Oracle database, a program must first log in to it by calling the <b>ora_login()</b> function. This function is called with three parameters, the system ID of the Oracle database to be used, and the Oracle username and password. The value returned is a login identifier actually an Oracle Login Data Area.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
$lda = &amp;ora_login($system_id, $username, $password)
</pre></td></tr></table>
<p>Here if $system_id is empty then this call will use ORALDE_SID or TASK_TWO envrionment variables to identify an oracle sytem.</p>
<p><b>$lda</b> is Login Data Area and will be used in all subsequent calls.</p>
<h3>Example:</h3>
<p>The following example will connect a database called <b>tutorialspoint</b> with username as <b>guest</b> and password as <b>guest123</b></p>
<table class="src" cellpadding="5"><tr><td><pre>
my $system_id = "tutorialspoint";
my $username = "guest";
my $password = "guest123";
$lda = &amp;ora_login($system_id, $username, $password)
</pre></td></tr></table>
<h2>Execute SQL Command using ora_open():</h2>
<p>The function <b>ora_open</b> takes at least two parameters: a login identifier obtained from &amp;ora_login() and the SQL statement to be executed. An optional third parameter specifies the size of the row cache to be used for a SELECT statement.</p>
<p>If the row cache size is not specified, a default size is used. As distributed, the default is five rows, but this may have been changed at your installation. Check $ora_cache variable.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
$csr = &amp;ora_open($lda, $statement [, $cache]);
</pre></td></tr></table>
<p>The value returned from ora_open() is a statement identifier actually an Oracle curosr represented as $csr.</p>
<h3>Example:</h3>
<p>Try out following example</p>
<table class="src" cellpadding="5"><tr><td><pre>
$csr = &amp;ora_open($lda, 'select ename, sal from emp order by ename', 10);
$csr = &amp;ora_open($lda, 'insert into dept values(:1, :2, :3)');
</pre></td></tr></table>
<p>For the second call variable values will be subsitituted by <b>ora_bind()</b> function.</p>
<h2>Bind Variable values using ora_bind():</h2>
<p>If If an SQL statement contains substitution variables ( see above example with values :1, :2 and :3 ) then actual values are supplied using <b>ora_bind</b> function. This takes a statement identifier obtained from ora_open() call as its first parameter, followed by as many parameters as are required by the statement.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
&amp;ora_bind($csr, $var, ...);
</pre></td></tr></table>
<h3>Example:</h3>
<p>Try out following example to supply values to the above INSERT statement</p>
<table class="src" cellpadding="5"><tr><td><pre>
&amp;ora_bind($csr, 50, 'management', 'Paris');
</pre></td></tr></table>
<h2>Fetching values from database using ora_fetch():</h2>
<p>The <b>ora_fetch</b> function is used in conjunction with a SQL SELECT statement to retrieve information from a database. This function takes one mandatory parameter, a statement identifier obtained from ora_open().</p>
<p>In scalar context the function returns the number of fields returned by the query but no data is actually fetched.</p>
<p>In array context the function returns an array containing the data, one element per field.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
# Calling in scalar context
$nfields = &amp;ora_fetch($csr);
# Calling in array conext
@data = &amp;ora_fetch($csr);
</pre></td></tr></table>
<p>Each call to this function will returna single row. To fetch multiple rows you would need to call this function multiple timepossible inside a while loop.</p>
<p>The function ora_fetch() will fail at the end of the data or if an error occurs. It is possible to distinguish between these cases by testing the value of the variable $ora_errno. This will be zero for end of data, non-zero if an error has occurred.</p>
<h3>Example:</h3>
<p>Try out following example to fetch values from database.</p>
<table class="src" cellpadding="5"><tr><td><pre>
 while (($deptno, $dname, $loc) = &amp;ora_fetch($csr))
 {
   warn "Truncated!!!" if $ora_errno == 1406;
   # do something with the data
 }
 warn $ora_errstr if $ora_errno;
</pre></td></tr></table>
<h2>Closing database connection using ora_close:</h2>
<p>If an SQL statement is no longer required then the statement identifier should be released. This is done by calling the &amp;ora_close() function with the statement identifier as its only parameter.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
&amp;ora_close($csr);
</pre></td></tr></table>
<h2>Using ora_do() function:</h2>
<p>All SQL statements do not return data or contain substitution variables. So in such cases <b>ora_do</b> function may be used as an alternative to &amp;ora_open() and &amp;ora_close().</p>
<p>This function takes two parameters, a login identifier and the statement to be executed.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
&amp;ora_do($lda, $statement)
</pre></td></tr></table>
<h3>Example:</h3>
<p>The follwoing two examples will do same job:</p>
<p><b>ora_do:</b></p>
<table class="src" cellpadding="5"><tr><td><pre>
&amp;ora_do($lda, 'drop table employee');
</pre></td></tr></table>
<p><b>ora_open and ora_close</b></p>
<table class="src" cellpadding="5"><tr><td><pre>
&amp;ora_close( &amp;ora_open($lda, 'drop table employee') );
</pre></td></tr></table>
<h2>Ancillary Functions:</h2>
There are following ancillary functions which will be used trime to tim:</p>
<h3>ora_titles() Function:</h3>
<p>A program may determine the field titles of an executed query by calling &ora_titles(). This function takes a single parameter, a statement identifier obtained from &ora_open() indicating the query for which the titles are required. The titles are returned as an array of strings, one for each column.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
@titles = &amp;ora_titles($csr);
</pre></td></tr></table>
<h3>ora_lengths() Function:</h3>
<p>A program may determine the length of each of the fields returned by a query by calling the &ora_lengths() function. This function takes a single parameter, a statement identifier obtained from &ora_open() indicating the query for which the lengths are required. The lengths are returned as an array of integers, one for each column.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
@types = &amp;ora_types($csr);
</pre></td></tr></table>
<h3>ora_autocommit() Function:</h3>
<p>Autocommit mode in which each transaction is committed immediately, without waiting for an explicit commit may be enabled or disabled using &ora_autocommit().</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
&amp;ora_autocommit($lda, $on_or_off);
</pre></td></tr></table>
<p>This function takes two parameters, a login identifier obtained from &ora_login() and a true/false value indicating whether autocommit is to be enabled (non-zero) or disabled (zero). By default, autocommit is off.</p>
<h3>ora_commit, ora_rollback Functions:</h3>
<p>Modifications to a database may be committed or rolled back using the &ora_commit() and &ora_rollback() functions. These functions take a single parameter, a login identifier obtained from &ora_login().</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
&amp;ora_commit($lda);
&amp;ora_rollback($lda);
</pre></td></tr></table>
<h3>ora_version() Function:</h3>
<p>The &ora_version() function prints the version number and copyright information concerning Oraperl. It also prints the values of various compilation time options.</p>
<h3>Syntax:</h3>
<table class="src" cellpadding="5"><tr><td><pre>
&ora_version();
</pre></td></tr></table>
<p>This function is the equivalent of Perl's -v flag.</p>
<h2>Oraperl Variables:</h2>
<p>Six special variables are provided, $ora_cache, $ora_long, $ora_trunc, $ora_errno, $ora_errstr and $ora_verno.</p>
<ul>
<li><p><b>$ora_cache:</b> The $ora_cache variable determines the default cache size used by the &ora_open() function for SELECT statements if an explicit cache size is not given.</p></li>
<li><p><b>$ora_long:</b> Oraperl interrogates the database to determine the length of each field and allocates buffer space accordingly. This is not possible for fields of type LONG or LONGRAW. To allocate space according to the maximum possible length (65535 bytes) would obviously be extremely wasteful of memory. Therefore, when &ora_open() determines that a field is a LONG type, it allocates the amount of space indicated by the $ora_long variable.</p></li>
<li><p><b>$ora_trunc:</b> Since Oraperl cannot determine exactly the maximum length of a LONG field, it is possible that the length indicated by $ora_long is not sufficient to store the data fetched. In such a case, the optional second parameter to &ora_fetch() indicates whether the truncation should be allowed or should provoke an error.</p>
<p>If this second parameter is not specified, the value of $ora_trunc is used as a default. This only applies to LONG and LONGRAW data types.</li>
<li><p><b>$ora_errno :</b> contains the Oracle error code provoked by the last function call.</p></li>
<li><p><b>$ora_errstr: </b> contains the Oracle error message corresponding to the current value of $ora_errno.</p></li>
<li><p><b>$ora_verno: </b> contains the version number of Oraperl in the form v.ppp where v is the major version number and ppp is the patchlevel.</p></li>
</ul>
<hr />
<a href="perl_database.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href='../cgi-bin/printversion4f61.html?tutorial=perl&amp;file=oraperl_manual.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<hr />
<br />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/perl/oraperl_manual.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:03:09 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
