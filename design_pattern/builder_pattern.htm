<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/design_pattern/builder_pattern.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 21:18:59 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Builder Pattern</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="Keywords" content="Builder Pattern - Design, Patterns, Java, Tutorials, Learning, Beginners, Basics, Factory Pattern, Abstract Factory, Singleton, Builder, Prototype, Adapter, Bridge, Filter, Composite, Decorator, Facade, Flyweight, Proxy, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Null Object,Strategy, Template, Visitor, MVC, Front, Controller" />
<meta name="description" content="Design Pattern Overview - Learning java design patterns in simple and easy steps : A beginner's tutorial containing complete knowledge about an java design patterns starting from its Factory Pattern, Abstract Factory, Singleton, Builder, Prototype, Adapter, Bridge, Filter, Composite, Decorator, Facade, Flyweight, Proxy, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Null Object,Strategy, Template, Visitor, MVC, Front Controller etc." />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
/* Java Scheme */
#header{ 
background:#F3943D !important;
}
#topmenu
{
background-color:#5382A1 !important;
}
#leftcol ul.menu li.heading 
{
background:#F3943D !important;
border:1px solid #964800 !important;
}
#leftcol, #middlecol, #rightcol {min-height:1300px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/dp-mini-logo.png" alt="Design Patterns in Java Tutorial" />
</div>
<ul class="menu">
<li class="heading">Design Patterns Tutorial</li>
<li><a target="_top" href="index.htm">Home</a></li>
<li><a target="_top" href="design_pattern_overview.htm">Design Pattern Overview</a></li>
<li><a target="_top" href="factory_pattern.htm">Factory Pattern</a></li>
<li><a target="_top" href="abstract_factory_pattern.htm">Abstract Factory Pattern</a></li>
<li><a target="_top" href="singleton_pattern.htm">Singleton Pattern</a></li>
<li><a target="_top" href="builder_pattern.htm"><b>Builder Pattern</b></a></li>
<li><a target="_top" href="prototype_pattern.htm">Prototype Pattern</a></li>
<li><a target="_top" href="adapter_pattern.htm">Adapter Pattern</a></li>
<li><a target="_top" href="bridge_pattern.htm">Bridge Pattern</a></li>
<li><a target="_top" href="filter_pattern.htm">Filter Pattern</a></li>
<li><a target="_top" href="composite_pattern.htm">Composite Pattern</a></li>
<li><a target="_top" href="decorator_pattern.htm">Decorator Pattern</a></li>
<li><a target="_top" href="facade_pattern.htm">Facade Pattern</a></li>
<li><a target="_top" href="flyweight_pattern.htm">Flyweight Pattern</a></li>
<li><a target="_top" href="proxy_pattern.htm">Proxy Pattern</a></li>
<li><a target="_top" href="chain_of_responsibility_pattern.htm">Chain of Responsibility Pattern</a></li>
<li><a target="_top" href="command_pattern.htm">Command Pattern</a></li>
<li><a target="_top" href="interpreter_pattern.htm">Interpreter Pattern</a></li>
<li><a target="_top" href="iterator_pattern.htm">Iterator Pattern</a></li>
<li><a target="_top" href="mediator_pattern.htm">Mediator Pattern</a></li>
<li><a target="_top" href="memento_pattern.htm">Memento Pattern</a></li>
<li><a target="_top" href="observer_pattern.htm">Observer Pattern</a></li>
<li><a target="_top" href="state_pattern.htm">State Pattern</a></li>
<li><a target="_top" href="null_object_pattern.htm">Null Object Pattern</a></li>
<li><a target="_top" href="strategy_pattern.htm">Strategy Pattern</a></li>
<li><a target="_top" href="template_pattern.htm">Template Pattern</a></li>
<li><a target="_top" href="visitor_pattern.htm">Visitor Pattern</a></li>
<li><a target="_top" href="mvc_pattern.htm">MVC Pattern</a></li>
<li><a target="_top" href="business_delegate_pattern.htm">Business Delegate Pattern</a></li>
<li><a target="_top" href="composite_entity_pattern.htm">Composite Entity Pattern</a></li>
<li><a target="_top" href="data_access_object_pattern.htm">Data Access Object Pattern</a></li>
<li><a target="_top" href="front_controller_pattern.htm">Front Controller Pattern</a></li>
<li><a target="_top" href="intercepting_filter_pattern.htm">Intercepting Filter Pattern</a></li>
<li><a target="_top" href="service_locator_pattern.htm">Service Locator  Pattern</a></li>
<li><a target="_top" href="transfer_object_pattern.htm">Transfer Object Pattern</a></li>
</ul>
<ul class="menu">
<li class="heading">Design Pattern Resources</li>
<li><a class="left" target="_top" href="design_pattern_quick_guide.htm">Design Pattern Guide</a></li>
<li><a class="left" target="_top" href="design_pattern_resources.htm">Design Pattern Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Builder Pattern</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="singleton_pattern.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="prototype_pattern.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>Builder pattern builds a complex object using simple objects and using a step by step approach. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>A Builder class builds the final object step by step. This builder is independent of other objects.</p>
<h2>Implementation</h2>
<p>We've considered a business case of fast-food restaurant where a typical meal could be a burger and a cold drink. Burger could be either a Veg Burger or Chicken Burger and will be packed by a wrapper. Cold drink could be either a coke or pepsi and will be packed in a bottle.</p>
<p>We're going to create an <i>Item</i> interface representing food items such as burgers and cold drinks and concrete classes implementing the <i>Item</i> interface and a <i>Packing</i> interface representing packaging of food items and concrete classes implementing the <i>Packing</i> interface as burger would be packed in wrapper and cold drink would be packed as bottle.</p>
<p>We then create a <i>Meal</i> class having <i>ArrayList</i> of <i>Item</i> and a <i>MealBuilder</i> to build different types of <i>Meal</i> object by combining <i>Item</i>. <i>BuilderPatternDemo</i>, our demo class will use <i>MealBuilder</i> to build a <i>Meal</i>.</p>
<img src="images/builder_pattern_uml_diagram.jpg" alt="Builder Pattern UML Diagram" />
<h2>Step 1</h2>
<p>Create an interface Item representing food item and packing.</p>
<p><i>Item.java</i></p>
<pre class="prettyprint">
public interface Item {
   public String name();
   public Packing packing();
   public float price();	
}
</pre>
<p><i>Packing.java</i></p>
<pre class="prettyprint">
public interface Packing {
   public String pack();
}
</pre>
<h2>Step 2</h2>
<p>Create concreate classes implementing the Packing interface.</p>
<p><i>Wrapper.java</i></p>
<pre class="prettyprint">
public class Wrapper implements Packing {

   @Override
   public String pack() {
      return "Wrapper";
   }
}
</pre>
<p><i>Bottle.java</i></p>
<pre class="prettyprint">
public class Bottle implements Packing {

   @Override
   public String pack() {
      return "Bottle";
   }
}
</pre>
<h2>Step 3</h2>
<p>Create abstract classes implementing the item interface providing default functionalities.</p>
<p><i>Burger.java</i></p>
<pre class="prettyprint">
public abstract class Burger implements Item {

   @Override
   public Packing packing() {
      return new Wrapper();
   }

   @Override
   public abstract float price();
}
</pre>
<p><i>ColdDrink.java</i></p>
<pre class="prettyprint">
public abstract class ColdDrink implements Item {

	@Override
	public Packing packing() {
       return new Bottle();
	}

	@Override
	public abstract float price();
}
</pre>
<h2>Step 4</h2>
<p>Create concrete classes extending Burger and ColdDrink classes</p>
<p><i>VegBurger.java</i></p>
<pre class="prettyprint">
public class VegBurger extends Burger {

   @Override
   public float price() {
      return 25.0f;
   }

   @Override
   public String name() {
      return "Veg Burger";
   }
}
</pre>
<p><i>ChickenBurger.java</i></p>
<pre class="prettyprint">
public class ChickenBurger extends Burger {

   @Override
   public float price() {
      return 50.5f;
   }

   @Override
   public String name() {
      return "Chicken Burger";
   }
}
</pre>
<p><i>Coke.java</i></p>
<pre class="prettyprint">
public class Coke extends ColdDrink {

   @Override
   public float price() {
      return 30.0f;
   }

   @Override
   public String name() {
      return "Coke";
   }
}
</pre>
<p><i>Pepsi.java</i></p>
<pre class="prettyprint">
public class Pepsi extends ColdDrink {

   @Override
   public float price() {
      return 35.0f;
   }

   @Override
   public String name() {
      return "Pepsi";
   }
}
</pre>
<h2>Step 5</h2>
<p>Create a Meal class having Item objects defined above.</p>
<p><i>Meal.java</i></p>
<pre class="prettyprint">
import java.util.ArrayList;
import java.util.List;

public class Meal {
   private List&lt;Item&gt; items = new ArrayList&lt;Item>();	

   public void addItem(Item item){
      items.add(item);
   }

   public float getCost(){
      float cost = 0.0f;
      for (Item item : items) {
         cost += item.price();
      }		
      return cost;
   }

   public void showItems(){
      for (Item item : items) {
         System.out.print("Item : "+item.name());
         System.out.print(", Packing : "+item.packing().pack());
         System.out.println(", Price : "+item.price());
      }		
   }	
}
</pre>
<h2>Step 6</h2>
<p>Create a MealBuilder class, the actual builder class responsible to create Meal objects.</p>
<p><i>MealBuilder.java</i></p>
<pre class="prettyprint">
public class MealBuilder {

   public Meal prepareVegMeal (){
      Meal meal = new Meal();
      meal.addItem(new VegBurger());
      meal.addItem(new Coke());
      return meal;
   }   

   public Meal prepareNonVegMeal (){
      Meal meal = new Meal();
      meal.addItem(new ChickenBurger());
      meal.addItem(new Pepsi());
      return meal;
   }
}
</pre>
<h2>Step 7</h2>
<p>BuiderPatternDemo uses MealBuider to demonstrate builder pattern.</p>
<p><i>BuilderPatternDemo.java</i></p>
<pre class="prettyprint">
public class BuilderPatternDemo {
   public static void main(String[] args) {
      MealBuilder mealBuilder = new MealBuilder();

      Meal vegMeal = mealBuilder.prepareVegMeal();
      System.out.println("Veg Meal");
      vegMeal.showItems();
      System.out.println("Total Cost: " +vegMeal.getCost());

      Meal nonVegMeal = mealBuilder.prepareNonVegMeal();
      System.out.println("\n\nNon-Veg Meal");
      nonVegMeal.showItems();
      System.out.println("Total Cost: " +nonVegMeal.getCost());
   }
}
</pre>
<h2>Step 8</h2>
<p>Verify the output.</p>
<pre class="result">
Veg Meal
Item : Veg Burger, Packing : Wrapper, Price : 25.0
Item : Coke, Packing : Bottle, Price : 30.0
Total Cost: 55.0


Non-Veg Meal
Item : Chicken Burger, Packing : Wrapper, Price : 50.5
Item : Pepsi, Packing : Bottle, Price : 35.0
Total Cost: 85.5
</pre>
<hr />
<div class="pre-btn">
<a href="singleton_pattern.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="nxt-btn">
<a href="prototype_pattern.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2012 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/design_pattern/builder_pattern.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 21:19:00 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>