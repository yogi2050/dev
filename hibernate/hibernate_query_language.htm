<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/hibernate/hibernate_query_language.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 21:08:23 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Hibernate Query Language (HQL) Tutorial</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="Hibernate, Tutorials, Learning, Beginners, Basics, Environment, Object Relational Mapping (ORM), Query Language, Native SQL, Caching, Interceptors, Persistent Classes, Persistent Objects, Collections, Associations and components, and Hibernate tools." />
<meta name="keywords" content="Hibernate Query Language (HQL) Tutorial- Learn Hibernate 3.x starting from environment setup, Object Relational Mapping (ORM), Query Language, Native SQL, Caching, Interceptors, Persistent Classes, Persistent Objects, Collections, Associations and components, and Hibernate tools." />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
#topmenu a:hover {text-decoration:none;color:#bcae79  !important;background-color:transparent;font-weight:bold;}
#header{ 
background:#bcae79  !important;
}
#topmenu
{
background-color:#59666c !important;
}
#leftcol ul.menu li.heading 
{
background:#bcae79 !important;
border:1px solid #59666c  !important;
}
#leftcol, #middlecol, #rightcol {min-height:1200px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/hibernate-mini-logo.png" alt="Hibernate Tutorial" />
</div>
<ul class="menu">
<li class="heading">Hibernate Tutorial</li>
<li><a target="_top" href="index.htm">Hibernate Home</a></li>
<li><a target="_top" href="orm_overview.htm">ORM Overview</a></li>
<li><a target="_top" href="hibernate_overview.htm">Hibernate Overview</a></li>
<li><a target="_top" href="hibernate_architecture.htm">Hibernate Architecture</a></li>
<li><a target="_top" href="hibernate_environment.htm">Hibernate Environment</a></li>
<li><a target="_top" href="hibernate_configuration.htm">Hibernate Configuration</a></li>
<li><a target="_top" href="hibernate_sessions.htm">Hibernate Sessions</a></li>
<li><a target="_top" href="hibernate_persistent_classes.htm">Hibernate Persistent Class</a></li>
<li><a target="_top" href="hibernate_mapping_files.htm">Hibernate Mapping Files</a></li>
<li><a target="_top" href="hibernate_mapping_types.htm">Hibernate Mapping Types</a></li>
<li><a target="_top" href="hibernate_examples.htm">Hibernate Examples</a></li>
<li><a target="_top" href="hibernate_or_mappings.htm">Hibernate O/R Mappings</a></li>
<li><a target="_top" href="hibernate_annotations.htm">Hibernate Annotations</a></li>
<li><a target="_top" href="hibernate_query_language.htm"><b>Hibernate Query Language</b></a></li>
<li><a target="_top" href="hibernate_criteria_queries.htm">Hibernate Criteria Queries</a></li>
<li><a target="_top" href="hibernate_native_sql.htm">Hibernate Native SQL</a></li>
<li><a target="_top" href="hibernate_caching.htm">Hibernate Caching</a></li>
<li><a target="_top" href="hibernate_batch_processing.htm">Hibernate Batch Processing</a></li>
<li><a target="_top" href="hibernate_interceptors.htm">Hibernate Interceptors</a></li>
</ul>
<ul class="menu">
<li class="heading">Hibernate Useful Resources</li>
<li><a target="_top" href="hibernate_quick_guide.htm">Hibernate Quick Guide</a></li>
<li><a target="_top" href="hibernate_useful_resources.htm">Hibernate Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Hibernate Query Language</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="hibernate_annotations.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="hibernate_criteria_queries.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>Hibernate Query Language (HQL) is an object-oriented query language, similar to SQL, but instead of operating on tables and columns, HQL works with persistent objects and their properties. HQL queries are translated by Hibernate into conventional SQL queries which in turns perform action on database.</p>
<p>Although you can use SQL statements directly with Hibernate using Native SQL but I would recommend to use HQL whenever possible to avoid database portability hassles, and to take advantage of Hibernate's SQL generation and caching strategies.</p>
<p>Keywords like SELECT , FROM and WHERE etc. are not case sensitive but properties like table and column names are case sensitive in HQL.</p>
<h2>FROM Clause</h2>
<p>You will use <b>FROM</b> clause if you want to load a complete persistent objects into memory. Following is the simple syntax of using FROM clause:</p>
<pre class="prettyprint">
String hql = "FROM Employee";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<p>If you need to fully qualify a class name in HQL, just specify the package and class name as follows:</p>
<pre class="prettyprint">
String hql = "FROM com.hibernatebook.criteria.Employee";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>AS Clause</h2>
<p>The <b>AS</b> clause can be used to assign aliases to the classes in your HQL queries, specially when you have long queries. For instance, our previous simple example would be the following:</p>
<pre class="prettyprint">
String hql = "FROM Employee AS E";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<p>The <b>AS</b> keyword is optional and you can also specify the alias directly after the class name, as follows:</p>
<pre class="prettyprint">
String hql = "FROM Employee E";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>SELECT Clause</h2>
<p>The <b>SELECT</b> clause provides more control over the result set than the from clause. If you want to obtain few properties of objects instead of the complete object, use the SELECT clause. Following is the simple syntax of using SELECT clause to get just first_name field of the Employee object: </p>
<pre class="prettyprint">
String hql = "SELECT E.firstName FROM Employee E";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<p>It is notable here that <b>Employee.firstName</b> is a property of Employee object rather than a field of the EMPLOYEE table.</p>
<h2>WHERE Clause</h2>
<p>If you want to narrow the specific objects that are returned from storage, you use the WHERE clause. Following is the simple syntax of using WHERE clause:</p>
<pre class="prettyprint">
String hql = "FROM Employee E WHERE E.id = 10";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>ORDER BY Clause</h2>
<p>To sort your HQL query's results, you will need to use the <b>ORDER BY</b> clause. You can order the results by any property on the objects in the result set either ascending (ASC) or descending (DESC). Following is the simple syntax of using ORDER BY clause:</p>
<pre class="prettyprint">
String hql = "FROM Employee E WHERE E.id &gt; 10 ORDER BY E.salary DESC";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<p>If you wanted to sort by more than one property, you would just add the additional properties to the end of the order by clause, separated by commas as follows:</p>
<pre class="prettyprint">
String hql = "FROM Employee E WHERE E.id &gt; 10 " +
             "ORDER BY E.firstName DESC, E.salary DESC ";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>GROUP BY Clause</h2>
<p>This clause lets Hibernate pull information from the database and group it based on a value of an attribute and, typically, use the result to include an aggregate value. Following is the simple syntax of using GROUP BY clause:</p>
<pre class="prettyprint">
String hql = "SELECT SUM(E.salary), E.firtName FROM Employee E " +
             "GROUP BY E.firstName";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>Using Named Paramters</h2>
<p>Hibernate supports named parameters in its HQL queries. This makes writing HQL queries that accept input from the user easy and you do not have to defend against SQL injection attacks. Following is the simple syntax of using named parameters:</p>
<pre class="prettyprint">
String hql = "FROM Employee E WHERE E.id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("employee_id",10);
List results = query.list();
</pre>
<h2>UPDATE Clause</h2>
<p>Bulk updates are new to HQL with Hibernate 3, and deletes work differently in Hibernate 3 than they did in Hibernate 2. The Query interface now contains a method called executeUpdate() for executing HQL UPDATE or DELETE statements. </p>
<p>The <b>UPDATE</b> clause can be used to update one or more properties of an one or more objects. Following is the simple syntax of using UPDATE clause: </p>
<pre class="prettyprint">
String hql = "UPDATE Employee set salary = :salary "  + 
             "WHERE id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("salary", 1000);
query.setParameter("employee_id", 10);
int result = query.executeUpdate();
System.out.println("Rows affected: " + result);
</pre>
<h2>DELETE Clause</h2>
<p>The <b>DELETE</b> clause can be used to delete one or more objects. Following is the simple syntax of using DELETE clause: </p>
<pre class="prettyprint">
String hql = "DELETE FROM Employee "  + 
             "WHERE id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("employee_id", 10);
int result = query.executeUpdate();
System.out.println("Rows affected: " + result);
</pre>
<h2>INSERT  Clause</h2>
<p>HQL supports <b>INSERT INTO</b> clause only where records can be inserted from one object to another object. Following is the simple syntax of using INSERT INTO clause: </p>
<pre class="prettyprint">
String hql = "INSERT INTO Employee(firstName, lastName, salary)"  + 
             "SELECT firstName, lastName, salary FROM old_employee";
Query query = session.createQuery(hql);
int result = query.executeUpdate();
System.out.println("Rows affected: " + result);
</pre>
<h2>Aggregate Methods</h2>
<p>HQL supports a range of aggregate methods, similar to SQL. They work the same way in HQL as in SQL and following is the list of the available functions:</p>
<table class="src">
<tr><th style="width:5%">S.N.</th><th>Functions</th><th>Description</th></tr>
<tr><td>1</td><td>avg(property name)</td><td>The average of a property's value</td></tr>
<tr><td>2</td><td>count(property name or *)</td><td>The number of times a property occurs in the results</td></tr>
<tr><td>3</td><td>max(property name)</td><td>The maximum value of the property values</td></tr>
<tr><td>4</td><td>min(property name)</td><td>The minimum value of the property values</td></tr>
<tr><td>5</td><td>sum(property name)</td><td>The sum total of the property values</td></tr>
</table>
<p>The <b>distinct</b> keyword only counts the unique values in the row set. The following query will return only unique count:</p>
<pre class="prettyprint">
String hql = "SELECT count(distinct E.firstName) FROM Employee E";
Query query = session.createQuery(hql);
List results = query.list();
</pre>
<h2>Pagination using Query</h2>
<p>There are two methods of the Query interface for pagination.</p>
<table class="src">
<tr><th style="width:5%">S.N.</th><th>Method &amp; Description</th></tr>
<tr><td>1</td><td><b>Query setFirstResult(int startPosition)</b><br/>This method takes an integer that represents the first row in your result set, starting with row 0.</td></tr>
<tr><td>2</td><td><b>Query setMaxResults(int maxResult)</b><br/>This method tells Hibernate to retrieve a fixed number <b>maxResults</b> of objects.</td></tr>
</table>
<p>Using above two methods together, we can construct a paging component in our web or Swing application. Following is the example which you can extend to fetch 10 rows at a time:</p>
<pre class="prettyprint">
String hql = "FROM Employee";
Query query = session.createQuery(hql);
query.setFirstResult(1);
query.setMaxResults(10);
List results = query.list();
</pre>
<hr />
<div class="pre-btn">
<a href="hibernate_annotations.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/hibernate_query_language.pdf" alt="Hibernate Query Language (HQL) Tutorial" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="hibernate_criteria_queries.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2012 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/hibernate/hibernate_query_language.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 21:08:24 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>