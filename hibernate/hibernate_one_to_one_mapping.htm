<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/hibernate/hibernate_one_to_one_mapping.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:06:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Hibernate One-to-One Mappings</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="Hibernate, Tutorials, Learning, Beginners, Basics, Environment, Object Relational Mapping (ORM), Query Language, Native SQL, Caching, Interceptors, Persistent Classes, Persistent Objects, Collections, Associations and components, and Hibernate tools." />
<meta name="keywords" content="Hibernate One-to-One Mappings - Learn Hibernate 3.x starting from environment setup, Object Relational Mapping (ORM), Query Language, Native SQL, Caching, Interceptors, Persistent Classes, Persistent Objects, Collections, Associations and components, and Hibernate tools." />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
#topmenu a:hover {text-decoration:none;color:#bcae79  !important;background-color:transparent;font-weight:bold;}
#header{ 
background:#bcae79  !important;
}
#topmenu
{
background-color:#59666c !important;
}
#leftcol ul.menu li.heading 
{
background:#bcae79 !important;
border:1px solid #59666c  !important;
}
#leftcol, #middlecol, #rightcol {min-height:1200px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index-2.html">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index-2.html" target="_top">HOME </a>
<a href="../java/index.html" target="_top">JAVA </a>
<a href="../php/index.html" target="_top">PHP </a>
<a href="../python/index.html" target="_top">Python </a>
<a href="../ruby/index.html" target="_top">Ruby </a>
<a href="../perl/index.html" target="_top">Perl </a>
<a href="../html/index.html" target="_top">HTML </a>
<a href="../css/index.html" target="_top">CSS </a>
<a href="../javascript/index.html" target="_top">Javascript </a>
<a href="../mysql/index.html" target="_top">MySQL </a>
<a href="../cplusplus/index.html" target="_top">C++ </a>
<a href="../unix/index.html" target="_top">UNIX </a>
<a href="../more.html" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.html" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.html" target="_top">ABOUT</a> |
<a href="../about/contact_us.html" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/hibernate-mini-logo.png" alt="Hibernate Tutorial" />
</div>
<ul class="menu">
<li class="heading">Hibernate Tutorial</li>
<li><a target="_top" href="index.html">Hibernate Home</a></li>
<li><a target="_top" href="orm_overview.html">ORM Overview</a></li>
<li><a target="_top" href="hibernate_overview.html">Hibernate Overview</a></li>
<li><a target="_top" href="hibernate_architecture.html">Hibernate Architecture</a></li>
<li><a target="_top" href="hibernate_environment.html">Hibernate Environment</a></li>
<li><a target="_top" href="hibernate_configuration.html">Hibernate Configuration</a></li>
<li><a target="_top" href="hibernate_sessions.html">Hibernate Sessions</a></li>
<li><a target="_top" href="hibernate_persistent_classes.html">Hibernate Persistent Class</a></li>
<li><a target="_top" href="hibernate_mapping_files.html">Hibernate Mapping Files</a></li>
<li><a target="_top" href="hibernate_mapping_types.html">Hibernate Mapping Types</a></li>
<li><a target="_top" href="hibernate_examples.html">Hibernate Examples</a></li>
<li><a target="_top" href="hibernate_or_mappings.html"><b>Hibernate O/R Mappings</b></a></li>
<li><a target="_top" href="hibernate_annotations.html">Hibernate Annotations</a></li>
<li><a target="_top" href="hibernate_query_language.html">Hibernate Query Language</a></li>
<li><a target="_top" href="hibernate_criteria_queries.html">Hibernate Criteria Queries</a></li>
<li><a target="_top" href="hibernate_native_sql.html">Hibernate Native SQL</a></li>
<li><a target="_top" href="hibernate_caching.html">Hibernate Caching</a></li>
<li><a target="_top" href="hibernate_batch_processing.html">Hibernate Batch Processing</a></li>
<li><a target="_top" href="hibernate_interceptors.html">Hibernate Interceptors</a></li>
</ul>
<ul class="menu">
<li class="heading">Hibernate Useful Resources</li>
<li><a target="_top" href="hibernate_quick_guide.html">Hibernate Quick Guide</a></li>
<li><a target="_top" href="hibernate_useful_resources.html">Hibernate Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.html">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Hibernate One-to-One Mappings</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="hibernate_or_mappings.html">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="hibernate_or_mappings.html">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>A <b>one-to-one</b> association is similar to <b>many-to-one</b> association with a difference that the column will be set as unique. For example an address object can be associated with a single employee object.</p>
<h2>Define RDBMS Tables:</h2>
<p>Consider a situation where we need to store our employee records in EMPLOYEE table which will have following structure:</p>
<pre class="prettyprint">
create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   address    INT NOT NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Further,  assuming that an address can be associated a single employee only, so this association can be presented using one-to-one association. We will store address related information in a separate table which has following structure:</p>
<pre class="prettyprint">
create table ADDRESS (
   id INT NOT NULL auto_increment,
   street_name VARCHAR(40) default NULL,
   city_name VARCHAR(40) default NULL,
   state_name VARCHAR(40) default NULL,
   zipcode VARCHAR(10) default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Create both the RBDMS tables and keep them ready for the next implementation.</p>
<h2>Define POJO Classes:</h2>
<p>Let us implement a POJO class <b>Employee</b> which will be used to persist the objects related to EMPLOYEE table and having a variable of Address type.</p>
<pre class="prettyprint">
import java.util.*;

public class Employee{
   private int id;
   private String firstName; 
   private String lastName;   
   private int salary;
   private Address address;

   public Employee() {}
   public Employee(String fname, String lname, 
                   int salary, Address address ) {
      this.firstName = fname;
      this.lastName = lname;
      this.salary = salary;
      this.address = address;
   }
   public int getId() {
      return id;
   }
   public void setId( int id ) {
      this.id = id;
   }
   public String getFirstName() {
      return firstName;
   }
   public void setFirstName( String first_name ) {
      this.firstName = first_name;
   }
   public String getLastName() {
      return lastName;
   }
   public void setLastName( String last_name ) {
      this.lastName = last_name;
   }
   public int getSalary() {
      return salary;
   }
   public void setSalary( int salary ) {
      this.salary = salary;
   }

   public Address getAddress() {
      return address;
   }
   public void setAddress( Address address ) {
      this.address = address;
   }
}
</pre>
<p>We need to define another POJO class corresponding to ADDRESS table so that address objects can be stored and retrieved into the ADDRESS table.</p>
<pre class="prettyprint">
import java.util.*;

public class Address{
   private int id;
   private String street;     
   private String city;     
   private String state;    
   private String zipcode; 

   public Address() {}
   public Address(String street, String city, 
                  String state, String zipcode) {
      this.street = street; 
      this.city = city; 
      this.state = state; 
      this.zipcode = zipcode; 
   }
   public int getId() {
      return id;
   }
   public void setId( int id ) {
      this.id = id;
   }
   public String getStreet() {
      return street;
   }
   public void setStreet( String street ) {
      this.street = street;
   }
   public String getCity() {
      return city;
   }
   public void setCity( String city ) {
      this.city = city;
   }
   public String getState() {
      return state;
   }
   public void setState( String state ) {
      this.state = state;
   }
   public String getZipcode() {
      return zipcode;
   }
   public void setZipcode( String zipcode ) {
      this.zipcode = zipcode;
   }
   
}
</pre>
<h2>Define Hibernate Mapping File:</h2>
<p>Let us develop our mapping files which instructs Hibernate how to map the defined classes to the database tables.  The &lt;many-to-one&gt; element will be used to define the rule to establish a one-to-one relationship between EMPLOYEE and ADDRESS entities but column attribute will be set to <b>unique</b> constraint and rest of the mapping file will remain as it was in case of many-to-one association.</p>
<pre class="prettyprint">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE hibernate-mapping PUBLIC 
 "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt; 

&lt;hibernate-mapping&gt;
   &lt;class name="Employee" table="EMPLOYEE"&gt;
      &lt;meta attribute="class-description"&gt;
         This class contains the employee detail. 
      &lt;/meta&gt;
      &lt;id name="id" type="int" column="id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      &lt;property name="firstName" column="first_name" type="string"/&gt;
      &lt;property name="lastName" column="last_name" type="string"/&gt;
      &lt;property name="salary" column="salary" type="int"/&gt;
      &lt;many-to-one name="address" column="address" unique="true" 
       class="Address" not-null="true"/&gt;
   &lt;/class&gt;

   &lt;class name="Address" table="ADDRESS"&gt;
      &lt;meta attribute="class-description"&gt;
         This class contains the address detail. 
      &lt;/meta&gt;
      &lt;id name="id" type="int" column="id"&gt;
         &lt;generator class="native"/&gt;
      &lt;/id&gt;
      &lt;property name="street" column="street_name" type="string"/&gt;
      &lt;property name="city" column="city_name" type="string"/&gt;
      &lt;property name="state" column="state_name" type="string"/&gt;
      &lt;property name="zipcode" column="zipcode" type="string"/&gt;
   &lt;/class&gt;

&lt;/hibernate-mapping&gt;
</pre>
<p>You should save the mapping document in a file with the format &lt;classname&gt;.hbm.xml. We saved our mapping document in the file Employee.hbm.xml. You are already familiar with most of the mapping detail but let us see all the elements of mapping file once again:</p>
<ul class="list">
<li><p>The mapping document is an XML document having <b>&lt;hibernate-mapping&gt;</b> as the root element which contains two &lt;class&gt; elements corresponding to each class.</p></li>
<li><p>The <b>&lt;class&gt;</b> elements are used to define specific mappings from a Java classes to the database tables. The Java class name is specified using the <b>name</b> attribute of the class element and the database table name is specified using the <b>table</b> attribute.</p></li>
<li><p>The <b>&lt;meta&gt;</b> element is optional element and can be used to create the class description.</p></li>
<li><p>The <b>&lt;id&gt;</b> element maps the unique ID attribute in class to the primary key of the database table. The <b>name</b> attribute of the id element refers to the property in the class and the <b>column</b> attribute refers to the column in the database table. The <b>type</b> attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.</p></li>
<li><p>The <b>&lt;generator&gt;</b> element within the id element is used to automatically generate the primary key values. Set the <b>class</b> attribute of the generator element is set to <b>native</b> to let hibernate pick up either <b>identity, sequence</b> or <b>hilo</b> algorithm to create primary key depending upon the capabilities of the underlying database.</p></li>
<li><p>The <b>&lt;property&gt;</b> element is used to map a Java class property to a column in the database table. The <b>name</b> attribute of the element refers to the property in the class and the <b>column</b> attribute refers to the column in the database table. The <b>type</b> attribute holds the hibernate mapping type, this mapping types will convert from Java to SQL data type.</p></li>
<li><p>The <b>&lt;many-to-one&gt;</b> element is used to set the relationship between EMPLOYEE and ADDRESS entities. The <b>name</b> attribute is set to the defined variable in the parent class, in our case it is <i>address</i>. The <b>column</b> attribute is used to set the column name in the parent table EMPLOYEE which is set to <b>unique</b> so that only one Employee object can be associated with an address object.</p></li>
</ul>
<p>Finally, we will create our application class with the main() method to run the application. We will use this application to save few Employee's records alongwith their certificates and then we will apply CRUD operations on those records.</p>
<pre class="prettyprint">
import java.util.*;
 
import org.hibernate.HibernateException; 
import org.hibernate.Session; 
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class ManageEmployee {
   private static SessionFactory factory; 
   public static void main(String[] args) {
      try{
         factory = new Configuration().configure().buildSessionFactory();
      }catch (Throwable ex) { 
         System.err.println("Failed to create sessionFactory object." + ex);
         throw new ExceptionInInitializerError(ex); 
      }
      ManageEmployee ME = new ManageEmployee();

      /* Let us have one address object */
      Address address1 = ME.addAddress("Kondapur","Hyderabad","AP","532");

      /* Add employee records in the database */
      Integer empID1 = ME.addEmployee("Manoj", "Kumar", 4000, address1);

      /* Let us have another address object */
      Address address2 = ME.addAddress("Saharanpur","Ambehta","UP","111");
  
    /* Add another employee record in the database */
      Integer empID2 = ME.addEmployee("Dilip", "Kumar", 3000, address2);

      /* List down all the employees */
      ME.listEmployees();

      /* Update employee's salary records */
      ME.updateEmployee(empID1, 5000);

      /* List down all the employees */
      ME.listEmployees();

   }

   /* Method to add an address record in the database */
   public Address addAddress(String street, String city, 
                             String state, String zipcode) {
      Session session = factory.openSession();
      Transaction tx = null;
      Integer addressID = null;
      Address address = null;
      try{
         tx = session.beginTransaction();
         address = new Address(street, city, state, zipcode);
         addressID = (Integer) session.save(address); 
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
      return address;
   }

   /* Method to add an employee record in the database */
   public Integer addEmployee(String fname, String lname, 
                              int salary, Address address){
      Session session = factory.openSession();
      Transaction tx = null;
      Integer employeeID = null;
      try{
         tx = session.beginTransaction();
         Employee employee = new Employee(fname, lname, salary, address);
         employeeID = (Integer) session.save(employee); 
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
      return employeeID;
   }

   /* Method to list all the employees detail */
   public void listEmployees( ){
      Session session = factory.openSession();
      Transaction tx = null;
      try{
         tx = session.beginTransaction();
         List employees = session.createQuery("FROM Employee").list(); 
         for (Iterator iterator = 
                           employees.iterator(); iterator.hasNext();){
            Employee employee = (Employee) iterator.next(); 
            System.out.print("First Name: " + employee.getFirstName()); 
            System.out.print("  Last Name: " + employee.getLastName()); 
            System.out.println("  Salary: " + employee.getSalary());
            Address add = employee.getAddress();
            System.out.println("Address ");
            System.out.println("\tStreet: " +  add.getStreet());
            System.out.println("\tCity: " + add.getCity());
            System.out.println("\tState: " + add.getState());
            System.out.println("\tZipcode: " + add.getZipcode());
         }
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
   }
   /* Method to update salary for an employee */
   public void updateEmployee(Integer EmployeeID, int salary ){
      Session session = factory.openSession();
      Transaction tx = null;
      try{
         tx = session.beginTransaction();
         Employee employee = 
                    (Employee)session.get(Employee.class, EmployeeID); 
         employee.setSalary( salary );
         session.update(employee);
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
   }
}
</pre>
<h2>Compilation and Execution:</h2>
<p>Here are the steps to compile and run the above mentioned application. Make sure you have set PATH and CLASSPATH appropriately before proceeding for the compilation and execution.</p>
<ul class="list">
<li><p>Create hibernate.cfg.xml configuration file as explained in configuration chapter.</p></li>
<li><p>Create Employee.hbm.xml mapping file as shown above.</p></li>
<li><p>Create Employee.java source file as shown above and compile it.</p></li>
<li><p>Create Address.java source file as shown above and compile it.</p></li>
<li><p>Create ManageEmployee.java source file as shown above and compile it.</p></li>
<li><p>Execute ManageEmployee binary to run the program.</p></li>
</ul>
<p>You would get following result on the screen, and same time records would be created in EMPLOYEE and ADDRESS tables.</p>
<pre class="prettyprint">
$java ManageEmployee
.......VARIOUS LOG MESSAGES WILL DISPLAY HERE........

First Name: Manoj  Last Name: Kumar  Salary: 4000
Address
        Street: Kondapur
        City: Hyderabad
        State: AP
        Zipcode: 532
First Name: Dilip  Last Name: Kumar  Salary: 3000
Address
        Street: Saharanpur
        City: Ambehta
        State: UP
        Zipcode: 111
First Name: Manoj  Last Name: Kumar  Salary: 5000
Address
        Street: Kondapur
        City: Hyderabad
        State: AP
        Zipcode: 532
First Name: Dilip  Last Name: Kumar  Salary: 3000
Address
        Street: Saharanpur
        City: Ambehta
        State: UP
        Zipcode: 111
</pre>
<p>If you check your EMPLOYEE and CERTIFICATE tables, they should have following records:</p>
<pre class="prettyprint">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+---------+
| id | first_name | last_name | salary | address |
+----+------------+-----------+--------+---------+
|  7 | Manoj      | Kumar     |   5000 |       5 |
|  8 | Dilip      | Kumar     |   3000 |       6 |
+----+------------+-----------+--------+---------+
2 rows in set (0.00 sec)

mysql&gt; select * from ADDRESS;
+----+-------------+-----------+------------+---------+
| id | street_name | city_name | state_name | zipcode |
+----+-------------+-----------+------------+---------+
|  5 | Kondapur    | Hyderabad | AP         | 532     |
|  6 | Saharanpur  | Ambehta   | UP         | 111     |
+----+-------------+-----------+------------+---------+
2 rows in set (0.00 sec)

mysql&gt;
</pre>
<hr />
<div class="pre-btn">
<a href="hibernate_or_mappings.html">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/hibernate_one_to_one_mapping.html" alt="Hibernate One-to-One Mappings" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="hibernate_or_mappings.html">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.html" target="_top">ASP.NET </a> |
<a href="../jquery/index.html" target="_top">jQuery </a> |
<a href="../ajax/index.html" target="_top">AJAX </a> |
<a href="../ant/index.html" target="_top">ANT</a> |
<a href="../jsp/index.html" target="_top">JSP </a> |
<a href="../servlets/index.html" target="_top">Servlets </a> |
<a href="../log4j/index.html" target="_top">log4j </a> |
<a href="../ibatis/index.html" target="_top">iBATIS </a> |
<a href="index.html" target="_top">Hibernate </a> |
<a href="../jdbc/index.html" target="_top">JDBC </a> |
<a href="../struts_2/index.html" target="_top">Struts </a> |
<a href="../html5/index.html" target="_top">HTML5 </a> |
<a href="../sql/index.html" target="_top">SQL </a> |
<a href="../mysql/index.html" target="_top">MySQL </a> |
<a href="../cplusplus/index.html" target="_top">C++ </a> |
<a href="../unix/index.html" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2012 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/hibernate/hibernate_one_to_one_mapping.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:06:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>