<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/ctags.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:32 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>ctags - Unix, Linux Command</title>
<meta name="Description" Content="ctags - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>ctags - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<p>
<p>
<h1 class="manpages">NAME</h1>
ctags - Generate tag files for source code
<p>
<p>
<h1 class="manpages">SYNOPSIS</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>ctags</b> [<b>options</b>] [<i>file(s)</i>]
<!-- Consumed .TP 6 -->
<br />
<b>etags</b> [<b>options</b>] [<i>file(s)</i>]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
<p>
<p>
</td></tr>
</table>
<h1 class="manpages">DESCRIPTION</h1>
The <b>ctags</b> and <b>etags</b> programs (hereinafter collectively referred to
as <b>ctags</b>, except where distinguished) generate an index (or "tag") file
for a variety of language objects found in <i>file(s)</i>.
This tag file allows these items to be quickly and easily located by a text
editor or other utility. A "tag" signifies a language object for which an
index entry is available (or, alternatively, the index entry created for that
object).
<p>
Alternatively, <b>ctags</b> can generate a cross reference file which lists, in
human readable form, information about the various source objects found in a
set of language files.
<p>
Tag index files are supported by numerous editors, which allow the user to
locate the object associated with a name appearing in a source file and jump
to the file and line which defines the name. Those known about at the time of
this release are:
<p>
<b>Vi</b>(1) and its derivatives (e.g. Elvis, Vim, Vile, Lemmy),
<b>CRiSP</b>,
<b>Emacs</b>,
<b>FTE</b> (Folding Text Editor),
<b>JED</b>,
<b>jEdit</b>,
<b>Mined</b>,
<b>NEdit</b> (Nirvana Edit),
<b>TSE</b> (The SemWare Editor),
<b>UltraEdit</b>,
<b>WorkSpace</b>,
<b>X2</b>,
<b>Zeus</b>
<p>
<b>Ctags</b> is capable of generating different kinds of tags for each of many
different languages. For a complete list of supported languages, the names
by which they are recognized, and the kinds of tags which are generated for
each, see the <b>--list-languages</b> and <b>--list-kinds</b> options.
<p>
<p>
<h1 class="manpages">SOURCE FILES</h1>
<p>
Unless the <b>--language-force</b> option is specified, the language of each
source file is automatically selected based upon a mapping of file names to
languages. The mappings in effect for each language may be display using the
<b>--list-maps</b> option and may be changed using the <b>--langmap</b> option.
On platforms which support it, if the name of a file is not mapped
to a language and the file is executable, the first line of the file is
checked to see if the file is a "#!" script for a recognized language.
<p>
By default, all other files names are ignored. This permits running
<b>ctags</b> on all files in either a single directory (e.g. "ctags *"), or on
all files in an entire source directory tree (e.g. "ctags -R"), since only
those files whose names are mapped to languages will be scanned.
<p>
[The reason that .h extensions are mapped to C++ files rather than C files
is because it is common to use .h extensions in C++, and no harm results in
treating them as C++ files.]
<p>
<p>
<h1 class="manpages">OPTIONS</h1>
<p>
Despite the wealth of available options, defaults are set so that <b>ctags</b>
is most commonly executed without any options (e.g. "ctags *", or "ctags -R"),
which will create a tag file in the current directory for all recognized
source files. The options described below are provided merely to allow custom
tailoring to meet special needs.
<p>
Note that spaces separating the single-letter options from their parameters
are optional.
<p>
Note also that the boolean parameters to the long form options (those
beginning with "--" and that take a "<i>[=yes</i>|<i>no]</i>" parameter) may
be omitted, in which case "<b>=</b><i>yes</i>" is implied. (e.g. <b>--sort</b>
is equivalent to <b>--sort</b>=<i>yes</i>). Note further that "=<i>1</i>" and
"=<i>on</i>" are considered synonyms for "=<i>yes</i>", and that "=<i>0</i>"
and "=<i>off</i>" are considered synonyms for "=<i>no</i>".
<p>
Some options are either ignored or useful only when used while running in
etags mode (see <b>-e</b> option). Such options will be noted.
<p>
Most options may appear anywhere on the command line, affecting only those
files which follow the option. A few options, however, must appear before the
first file name and will be noted as such.
<p>
Options taking language names will accept those names in either upper or lower
case. See the <b>--list-languages</b> option for a complete list of the
built-in language names.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-a</b> </td><td valign="bottom">
Equivalent to <b>--append</b>.
<p>
</td></tr>
<tr valign="top"><td>
<b>-B</b> </td><td valign="bottom">
Use backward searching patterns (e.g. ?pattern?). [Ignored in etags mode]
<p>
</td></tr>
<tr valign="top"><td>
<b>-e</b> </td><td valign="bottom">
Enable etags mode, which will create a tag file for use with the Emacs editor.
Alternatively, if <b>ctags</b> is invoked by a name containing the string
"etags" (either by renaming, or creating a link to, the executable), etags
mode will be enabled. This option must appear before the first file name.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>-f</b><i> tagfile</i> </td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
Use the name specified by <i>tagfile</i> for the tag file (default is "tags",
or "TAGS" when running in etags mode). If <i>tagfile</i> is specified as
"-", then the tag file is written to standard output instead. <b>Ctags</b>
will stubbornly refuse to take orders if <i>tagfile</i> exists and its first
line contains something other than a valid tags line. This will save your neck
if you mistakenly type "ctags -f *.c", which would otherwise overwrite your
first C file with the tags generated by the rest! It will also refuse to
accept a multi character file name which begins with a &#146;-&#146; (dash) character,
since this most likely means that you left out the tag file name and this
option tried to grab the next option as the file name. If you really want to
name your output tag file "-ugly", specify it as "./-ugly". This option must
appear before the first file name. If this option is specified more than once,
only the last will apply.
<p>
</td></tr>
<tr valign="top"><td>
<b>-F</b> </td><td valign="bottom">
Use forward searching patterns (e.g. /pattern/) (default).
[Ignored in etags mode]
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>-h</b><i> list</i> </td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
Specifies a list of file extensions, separated by periods, which are to be
interpreted as include (or header) files. To indicate files having no
extension, use a period not followed by a non-period character (e.g. ".",
"..x", ".x."). This option only affects how the scoping of a particular kinds
of tags is interpreted (i.e. whether or not they are considered as globally
visible or visible only within the file in which they are defined); it does
not map the extension to any particular language. Any tag which is located in
a non-include file and cannot be seen (e.g. linked to) from another file is
considered to have file-limited (e.g. static) scope. No kind of tag appearing
in an include file will be considered to have file-limited scope. If the first
character in the list is a plus sign, then the extensions in the list will be
appended to the current list; otherwise, the list will replace the current
list. See, also, the <b>--file-scope</b> option. The default list is
".h.H.hh.hpp.hxx.h++.inc.def". To restore the default list, specify <b>-h</b>
<i>default</i>. Note that if an extension supplied to this option is not
already mapped to a particular language (see <b>SOURCE FILES</b>, above), you
will also need to use either the <b>--langmap</b> or <b>--language-force</b>
option.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>-I</b><i> identifier-list</i> </td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
Specifies a list of identifiers which are to be specially handled while
parsing C and C++ source files. This option is specifically provided to handle
special cases arising through the use of preprocessor macros. When the
identifiers listed are simple identifiers, these identifiers will be ignored
during parsing of the source files. If an identifier is suffixed with a &#146;+&#146;
character, <b>ctags</b> will also ignore any parenthesis-enclosed argument list
which may immediately follow the identifier in the source files. If two
identifiers are separated with the &#146;=&#146; character, the first identifiers is
replaced by the second identifiers for parsing purposes. The list of
identifiers may be supplied directly on the command line or read in from a
separate file. If the first character of <i>identifier-list</i> is &#146;@&#146;, &#146;.&#146; or
a pathname separator (&#146;/&#146; or &#146;#146;), or the first two characters specify a
drive letter (e.g. "C:"), the parameter <i>identifier-list</i> will be
interpreted as a filename from which to read a list of identifiers, one per
input line. Otherwise, <i>identifier-list</i> is a list of identifiers (or
identifier pairs) to be specially handled, each delimited by a either a comma
or by white space (in which case the list should be quoted to keep the entire
list as one command line argument). Multiple <b>-I</b> options may be supplied.
To clear the list of ignore identifiers, supply a single dash ("-") for
<i>identifier-list</i>.
<p>
This feature is useful when preprocessor macros are used in such a way that
they cause syntactic confusion due to their presence. Indeed, this is the best
way of working around a number of problems caused by the presence of
syntax-busting macros in source files (see <b>CAVEATS</b>, below). Some
examples will illustrate this point.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr><td width=3%>&nbsp;</td><td>
int foo ARGDECL4(void *, ptr, long int, nbytes)
</td></tr>
</table>
<p>
</td></tr>
<tr valign="top"><td width=3%>

</td><td>
In the above example, the macro "ARGDECL4" would be mistakenly interpreted to
be the name of the function instead of the correct name of "foo". Specifying
<b>-I</b> <i>ARGDECL4</i> results in the correct behavior.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr><td width=3%>&nbsp;</td><td>
/* creates an RCS version string in module */
<!-- Need break --><br />
MODULE_VERSION("$Revision: 1.41 $")
</td></tr>
</table>
<p>
</td></tr>
<tr valign="top"><td width=3%>

</td><td>
In the above example the macro invocation looks too much like a function
definition because it is not followed by a semicolon (indeed, it could even be
followed by a global variable definition that would look much like a K&R style
function parameter declaration). In fact, this seeming function definition
could possibly even cause the rest of the file to be skipped over while trying
to complete the definition. Specifying <b>-I</b> <i>MODULE_VERSION+</i> would
avoid such a problem.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr><td width=3%>&nbsp;</td><td>
CLASS Example {
<!-- Need break --><br />
    // your content here
<!-- Need break --><br />
};
</td></tr>
</table>
<p>
</td></tr>
<tr valign="top"><td width=3%>

</td><td>
The example above uses "CLASS" as a preprocessor macro which expands to
something different for each platform. For instance CLASS may be defined as
"class __declspec(dllexport)" on Win32 platforms and simply "class" on UNIX.
Normally, the absence of the C++ keyword "class" would cause the source file
to be incorrectly parsed. Correct behavior can be restored by specifying
<b>-I</b> <i>CLASS=class</i>.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>-L</b><i> file</i> </td></tr><tr valign="top"><td width=3%>&nbsp;</td><td>
Read from <i>file</i> a list of file names for which tags should be generated.
If <i>file</i> is specified as "-", then file names are read from standard
input. File names read using this option are processed following file names
appearing on the command line. Options all also accepted in this input. If
this option is specified more than once, only the last will apply. <b>Note:</b>
<i>file</i> is read in line-oriented mode, where a new line is the only
delimiter and spaces are considered significant, in order that file names
containing spaces may be supplied; this can affect how options are parsed if
included in the input.
<p>
</td></tr>
<tr valign="top"><td>
<b>-n</b> </td><td valign="bottom">
Equivalent to <b>--excmd</b>=<i>number</i>.
<p>
</td></tr>
<tr valign="top"><td>
<b>-N</b> </td><td valign="bottom">
Equivalent to <b>--excmd</b>=<i>pattern</i>.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>-o</b><i> tagfile</i> </td></tr><tr valign="top"><td width=3%>&nbsp;</td><td>
Equivalent to <b>-f</b> <i>tagfile</i>.
<p>
</td></tr>
<tr valign="top"><td>
<b>-R</b> </td><td valign="bottom">
Equivalent to <b>--recurse</b>.
<p>
</td></tr>
<tr valign="top"><td>
<b>-u</b> </td><td valign="bottom">
Equivalent to <b>--sort</b>=<i>no</i> (i.e. "unsorted").
<p>
</td></tr>
<tr valign="top"><td>
<b>-V</b> </td><td valign="bottom">
Equivalent to <b>--verbose</b>.
<p>
</td></tr>
<tr valign="top"><td>
<b>-w</b> </td><td valign="bottom">
This option is silently ignored for backward-compatibility with the ctags
of SVR4 Unix.
<p>
</td></tr>
<tr valign="top"><td>
<b>-x</b> </td><td valign="bottom">
Print a tabular, human-readable cross reference (xref) file to standard output
instead of generating a tag file. The information contained in the output
includes: the tag name; the kind of tag; the line number, file name, and
source line (with extra white space condensed) of the file which defines the
tag. No tag file is written and all options affecting tag file output will be
ignored. Example applications for this feature are generating a listing of all
functions located in a source file (e.g. <b>ctags -x --c-kinds</b>=<i>f</i>
<i>file</i>), or generating a list of all externally visible global variables
located in a source file (e.g. <b>ctags -x --c-kinds</b>=<i>v</i>
<b>--file-scope</b>=<i>no file</i>). This option must appear before the first
file name.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--append</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=3%>&nbsp;</td><td>
Indicates whether tags generated from the specified files should be appended
to those already present in the tag file or should replace them. This option
is off by default. This option must appear before the first file name.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--etags-include</b>=<i>file</i>
</td></tr><tr valign="top"><td width=3%>&nbsp;</td><td>
Include a reference to <i>file</i> in the tag file. This option may be
specified as many times as desired. This supports Emacs&#146; capability to use a
tag file which "includes" other tag files. [Available only in etags mode]
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--exclude</b>=[<i>pattern</i>]
</td></tr><tr valign="top"><td width=3%>&nbsp;</td><td>
Add <i>pattern</i> to a list of excluded files and directories. This option
may be specified as many times as desired. For each file name considered by
<b>ctags</b>, each <i>pattern</i> specified using this option will be compared
against both the complete path (e.g. some/path/base.ext) and the base name
(e.g. base.ext) of the file, thus allowing patterns which match a given file
name irrespective of its path, or match only a specific path. If appropriate
support is available from the runtime library of your C compiler, then
<i>pattern</i> may contain the usual shell wildcards (not regular expressions)
common on Unix (be sure to quote the option parameter to protect the wildcards
from being expanded by the shell before being passed to <b>ctags</b>; also be
aware that wildcards can match the slash character, &#146;/&#146;). You can determine if
shell wildcards are available on your platform by examining the output of the
<b>--version</b> option, which will include "+wildcards" in the compiled
feature list; otherwise, <i>pattern</i> is matched against file names using a
simple textual comparison.
<p>
If <i>pattern</i> begins with the character &#146;@&#146;, then the rest of the string
is interpreted as a file name from which to read exclusion patterns, one per
line. If <i>pattern</i> is empty, the list of excluded patterns is cleared.
Note that at program startup, the default exclude list contains "EIFGEN",
"SCCS", "RCS", and "CVS", which are names of directories for which it is
generally not desirable to descend while processing the <b>--recurse</b>
option.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--excmd</b>=<i>type</i>
</td></tr><tr valign="top"><td width=3%>&nbsp;</td><td>
Determines the type of EX command used to locate tags in the source file.
[Ignored in etags mode]
<p>
The valid values for <i>type</i> (either the entire word or the first letter is
accepted) are:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>number</i> </td><td valign="bottom">
Use only line numbers in the tag file for locating tags. This has four
advantages:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
1.
</td><td valign="bottom">
Significantly reduces the size of the resulting tag file.
</td></tr>
<tr valign="top"><td>
2.
</td><td valign="bottom">
Eliminates failures to find tags because the line defining the tag has
changed, causing the pattern match to fail (note that some editors, such as
<b>vim</b>, are able to recover in many such instances).
</td></tr>
<tr valign="top"><td>
3.
</td><td valign="bottom">
Eliminates finding identical matching, but incorrect, source lines (see
<b>BUGS</b>, below).
</td></tr>
<tr valign="top"><td>
4.
</td><td valign="bottom">
Retains separate entries in the tag file for lines which are identical in
content. In <i>pattern</i> mode, duplicate entries are dropped because the
search patterns they generate are identical, making the duplicate entries
useless.
</td></tr>
</table>
<p>
</td></tr>
<tr valign="top"><td width=4%>

</td><td>
However, this option has one significant drawback: changes to the source files
can cause the line numbers recorded in the tag file to no longer correspond
to the lines in the source file, causing jumps to some tags to miss the target
definition by one or more lines. Basically, this option is best used when the
source code to which it is applied is not subject to change. Selecting this
option type causes the following options to be ignored: <b>-BF</b>.
<p>
</td></tr>
<tr valign="top"><td>
<i>pattern</i> </td><td valign="bottom">
Use only search patterns for all tags, rather than the line numbers usually
used for macro definitions. This has the advantage of not referencing obsolete
line numbers when lines have been added or removed since the tag file was
generated.
<p>
</td></tr>
<tr valign="top"><td>
<i>mixed</i> </td><td valign="bottom">
In this mode, patterns are generally used with a few exceptions. For C, line
numbers are used for macro definition tags. This was the default format
generated by the original <b>ctags</b> and is, therefore, retained as the
default for this option. For Fortran, line numbers are used for common blocks
because their corresponding source lines are generally identical, making
pattern searches useless for finding all matches.
</td></tr>
</table>
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--extra</b>=<i>[+|-]flags</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Specifies whether to include extra tag entries for certain kinds of
information. The parameter <i>flags</i> is a set of one-letter flags, each
representing one kind of extra tag entry to include in the tag file. If
<i>flags</i> is preceded by by either the &#146;+&#146; or &#146;-&#146; character, the effect of
each flag is added to, or removed from, those currently enabled; otherwise the
flags replace any current settings. The meaning of each flag is as follows:
<p>
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr><td width=3%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>f</i> </td><td valign="bottom">
Include an entry for the base file name of every source file (e.g.
"example.c"), which addresses the first line of the file.
</td></tr>
<tr valign="top"><td>
<i>q</i> </td><td valign="bottom">
Include an extra class-qualified tag entry for each tag which is a member
of a class (for languages for which this information is extracted; currently
C++, Eiffel, and Java). The actual form of the qualified tag depends upon the
language from which the tag was derived (using a form that is most natural for
how qualified calls are specified in the language). For C++, it is in the form
"class::member"; for Eiffel and Java, it is in the form "class.member". This
may allow easier location of a specific tags when multiple occurrences of a
tag name occur in the tag file. Note, however, that this could potentially
more than double the size of the tag file.
</td></tr>
</table>
</td></tr>
</table>
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--fields</b>=<i>[+|-]flags</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Specifies the available extension fields which are to be included in the
entries of the tag file (see <b>TAG FILE FORMAT</b>, below, for more
information). The parameter <i>flags</i> is a set of one-letter flags, each
representing one type of extension field to include, with the following
meanings (disabled by default unless indicated):
<p>
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr><td width=3%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>a</i> </td><td valign="bottom">
Access (or export) of class members
</td></tr>
<tr valign="top"><td>
<i>f</i> </td><td valign="bottom">
File-restricted scoping [enabled]
</td></tr>
<tr valign="top"><td>
<i>i</i> </td><td valign="bottom">
Inheritance information
</td></tr>
<tr valign="top"><td>
<i>k</i> </td><td valign="bottom">
Kind of tag as a single letter [enabled]
</td></tr>
<tr valign="top"><td>
<i>K</i> </td><td valign="bottom">
Kind of tag as full name
</td></tr>
<tr valign="top"><td>
<i>l</i> </td><td valign="bottom">
Language of source file containing tag
</td></tr>
<tr valign="top"><td>
<i>m</i> </td><td valign="bottom">
Implementation information
</td></tr>
<tr valign="top"><td>
<i>n</i> </td><td valign="bottom">
Line number of tag definition
</td></tr>
<tr valign="top"><td>
<i>s</i> </td><td valign="bottom">
Scope of tag definition [enabled]
</td></tr>
<tr valign="top"><td>
<i>S</i> </td><td valign="bottom">
Signature of routine (e.g. prototype or parameter list)
</td></tr>
<tr valign="top"><td>
<i>z</i> </td><td valign="bottom">
Include the "kind:" key in kind field
</td></tr>
<tr valign="top"><td>
<i>t</i> </td><td valign="bottom">
Type and name of a variable or typedef as "typeref:" field [enabled]
</td></tr>
</table>
</td></tr>
</table>
<p>
Each letter or group of letters may be preceded by either &#146;+&#146; to add it to the
default set, or &#146;-&#146; to exclude it. In the absence of any preceding &#146;+&#146; or &#146;-&#146;
sign, only those kinds explicitly listed in <i>flags</i> will be included in
the output (i.e. overriding the default set). This option is ignored if the
option <b>--format</b>=<i>1</i> has been specified. The default value
of this options is <i>fks</i>.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--file-scope</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Indicates whether tags scoped only for a single file (i.e. tags which cannot
be seen outside of the file in which they are defined, such as "static" tags)
should be included in the output. See, also, the <b>-h</b> option. This option
is enabled by default.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--filter</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Causes <b>ctags</b> to behave as a filter, reading source file names from
standard input and printing their tags to standard output on a file-by-file
basis. If <b>--sorted</b> is enabled, tags are sorted only within the source
file in which they are defined. File names are read from standard output in
line-oriented input mode (see note for <b>-L</b> option) and only after file
names listed on the command line or from any file supplied using the <b>-L</b>
option. When this option is enabled, the options <b>-f</b>, <b>-o</b>,
and <b>--totals</b> are ignored. This option is quite esoteric and is disabled
by default. This option must appear before the first file name.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--filter-terminator</b>=<i>string</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Specifies a string to print to standard output following the tags for each
file name parsed when the <b>--filter</b> option is enabled. This may permit an
application reading the output of ctags to determine when the output for each
file is finished. Note that if the file name read is a directory and
<b>--recurse</b> is enabled, this string will be printed only one once at the
end of all tags found for by descending the directory. This string will always
be separated from the last tag line for the file by its terminating newline.
This option is quite esoteric and is empty by default. This option must appear
before the first file name.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--format</b>=<i>level</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Change the format of the output tag file. Currently the only valid values for
<i>level</i> are <i>1</i> or <i>2</i>. Level 1 specifies the original tag file
format and level 2 specifies a new extended format containing extension fields
(but in a manner which retains backward-compatibility with original
<b>vi</b>(1) implementations). The default level is 2. This option must appear
before the first file name. [Ignored in etags mode]
<p>
</td></tr>
<tr valign="top"><td>
<b>--help</b> </td><td valign="bottom">
Prints to standard output a detailed usage description, and then exits.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--if0</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Indicates a preference as to whether code within an "#if 0" branch of a
preprocessor conditional should be examined for non-macro tags (macro tags are
always included). Because the intent of this construct is to disable code, the
default value of this options is <i>no</i>. Note that this indicates a
preference only and does not guarantee skipping code within an "#if 0" branch,
since the fall-back algorithm used to generate tags when preprocessor
conditionals are too complex follows all branches of a conditional. This
option is disabled by default.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--&lt;LANG&gt;-kinds</b>=<i>[+|-]kinds</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Specifies a list of language-specific kinds of tags (or kinds) to include in
the output file for a particular language, where <b>&lt;LANG&gt;</b> is
case-insensitive and is one of the built-in language names (see the
<b>--list-languages</b> option for a complete list). The parameter <i>kinds</i>
is a group of one-letter flags designating kinds of tags (particular to the
language) to either include or exclude from the output. The specific sets of
flags recognized for each language, their meanings and defaults may be list
using the <b>--list-kinds</b> option. Each letter or group of letters may be
preceded by either &#146;+&#146; to add it to, or &#146;-&#146; to remove it from, the default
set. In the absence of any preceding &#146;+&#146; or &#146;-&#146; sign, only those kinds
explicitly listed in <i>kinds</i> will be included in the output (i.e.
overriding the default for the specified language).
<p>
As an example for the C language, in order to add prototypes and external
variable declarations to the default set of tag kinds, but exclude macros,
use <b>--c-kinds</b>=<i>+px-d</i>; to include only tags for functions, use
<b>--c-kinds</b>=<i>f</i>.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--langdef</b>=<i>name</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Defines a new user-defined language, <i>name</i>, to be parsed with regular
expressions. Once defined, <i>name</i> may be used in other options taking
language names. The typical use of this option is to first define the
language, then map file names to it using <i>--langmap</i>, then specify
regular expressions using <i>--regex-&lt;LANG&gt;</i> to define how its tags are
found.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--langmap</b>=<i>map[,map[...]]</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Controls how file names are mapped to languages (see the <b>--list-maps</b>
option). Each comma-separated <i>map</i> consists of the language name (either
a built-in or user-defined language), a colon, and a list of file extensions
and/or file name patterns. A file extension is specified by preceding the
extension with a period (e.g. ".c"). A file name pattern is specified by
enclosing the pattern in parentheses (e.g. "([Mm]akefile)"). If appropriate
support is available from the runtime library of your C compiler, then the
file name pattern may contain the usual shell wildcards common on Unix (be
sure to quote the option parameter to protect the wildcards from being
expanded by the shell before being passed to <b>ctags</b>). You can determine
if shell wildcards are available on your platform by examining the output of
the <b>--version</b> option, which will include "+wildcards" in the compiled
feature list; otherwise, the file name patterns are matched against file names
using a simple textual comparison. When mapping a file extension, it will
first be unmapped from any other languages.
<p>
If the first character in a map is a plus sign, then the extensions and file
name patterns in that map will be appended to the current map for that
language; otherwise, the map will replace the current map. For example, to
specify that only files with extensions of .c and .x are to be treated as C
language files, use "<b>--langmap</b>=<i>c:.c.x</i>"; to also add files with
extensions of .j as Java language files, specify
"<b>--langmap</b>=<i>c:.c.x,java:+.j</i>". To map makefiles (.e.g files
named either "Makefile", "makefile", or having the extension ".mak") to a
language called "make", specify "<b>--langmap</b>=<i>make:([Mm]akefile).mak</i>".
To map files having no extension, specify a period not followed by a
non-period character (e.g. ".", "..x", ".x."). To clear the mapping for a
particular language (thus inhibiting automatic generation of tags for that
language), specify an empty extension list (e.g.
"<b>--langmap</b>=<i>fortran:</i>"). To restore the default language mappings
for all a particular language, supply the keyword "default" for the mapping.
To specify restore the default language mappings for all languages, specify
"<b>--langmap</b>=<i>default</i>". Note that file extensions are tested before
file name patterns when inferring the language of a file.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--language-force</b>=<i>language</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
By default, <b>ctags</b> automatically selects the language of a source file,
ignoring those files whose language cannot be determined (see
<b>SOURCE FILES</b>, above). This option forces the specified <i>language</i>
(case-insensitive; either built-in or user-defined) to be used for every
supplied file instead of automatically selecting the language based upon its
extension. In addition, the special value <i>auto</i> indicates that the
language should be automatically selected (which effectively disables this
option).
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--languages</b>=<i>[+|-]list</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Specifies the languages for which tag generation is enabled, with <i>list</i>
containing a comma-separated list of language names (case-insensitive; either
built-in or user-defined). If the first language of <i>list</i> is not preceded
by either a &#146;+&#146; or &#146;-&#146;, the current list will be cleared before adding or
removing the languages in <i>list</i>. Until a &#146;-&#146; is encountered, each
language in the list will be added to the current list. As either the &#146;+&#146; or
<!-- ignored unsupported tag .-' -->
removed from the current list, respectively. Thus, it becomes simple to
replace the current list with a new one, or to add or remove languages from
the current list. The actual list of files for which tags will be generated
depends upon the language extension mapping in effect (see the <b>--langmap</b>
option). Note that all languages, including user-defined languages are enabled
unless explicitly disabled using this option. Language names included in
<i>list</i> may be any built-in language or one previously defined with
<b>--langdef</b>. The default is "all", which is also accepted as a valid
argument. See the <b>--list-languages</b> option for a complete list of the
built-in language names.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--license</b>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Prints a summary of the software license to standard output, and then exits.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--line-directives</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Specifies whether "#line" directives should be recognized. These are present
in the output of preprocessors and contain the line number, and possibly the
file name, of the original source file(s) from which the preprocessor output
file was generated. When enabled, this option will cause <b>ctags</b> to
generate tag entries marked with the file names and line numbers of their
locations original source file(s), instead of their actual locations in the
preprocessor output. The actual file names placed into the tag file will have
the same leading path components as the preprocessor output file, since it is
assumed that the original source files are located relative to the
preprocessor output file (unless, of course, the #line directive specifies an
absolute path). This option is off by default. <b>Note:</b> This option is
generally only useful when used together with the <b>--excmd</b>=<i>number</i>
(<b>-n</b>) option. Also, you may have to use either the <b>--langmap</b> or
<b>--language-force</b> option if the extension of the preprocessor output file
is not known to <b>ctags</b>.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--links</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Indicates whether symbolic links (if supported) should be followed. When
disabled, symbolic links are ignored. This option is on by default.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--list-kinds</b>[=<i>language</i>|<i>all</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Lists the tag kinds recognized for either the specified language or all
languages, and then exits. Each kind of tag recorded in the tag file is
represented by a one-letter flag, which is also used to filter the tags placed
into the output through use of the <b>--&lt;LANG&gt;-kinds</b> option. Note that some
languages and/or tag kinds may be implemented using regular expressions and
may not be available if regex support is not compiled into <b>ctags</b> (see
the <b>--regex-&lt;LANG&gt;</b> option). Each kind listed is enabled unless followed
by "[off]".
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--list-maps</b>[=<i>language</i>|<i>all</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Lists the file extensions and file name patterns which associate a file name
with a language for either the specified language or all languages, and then
exits. See the <b>--langmap</b> option, and <b>SOURCE FILES</b>, above.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--list-languages</b>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Lists the names of the languages understood by <b>ctags</b>, and then exits.
These language names are case insensitive and may be used in the
<b>--language-force</b>, <b>--languages</b>, <b>--&lt;LANG&gt;-kinds</b>, and
<b>--regex-&lt;LANG&gt;</b> options.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--options</b>=<i>file</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Read additional options from <i>file</i>. As a special case, if
<b>--options</b>=<i>NONE</i> is specified as the first option on the command
line, it will disable the automatic reading of any configuration options from
either a file or the environment (see <b>FILES</b>).
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--recurse</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Recurse into directories encountered in the list of supplied files. If the
list of supplied files is empty and no file list is specified with the
<b>-L</b> option, then the current directory (i.e. ".") is assumed. Symbolic
links are followed. If you don&#146;t like these behaviors, either explicitly
specify the files or pipe the output of <b>find</b>(1) into <b>ctags -L-</b>
instead. <b>Note:</b> This option is not supported on all platforms at present.
It is available if the output of the <b>--help</b> option includes this option.
See, also, the <b>--exclude</b> to limit recursion.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--regex-&lt;LANG&gt;</b>=<i>/regexp/replacement/[kind-spec/][flags]</i>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
The <i>/regexp/replacement/</i> pair define a regular expression replacement
pattern, similar in style to <b>sed</b> substitution commands, with which to
generate tags from source files mapped to the named language, <b>&lt;LANG&gt;</b>,
(case-insensitive; either a built-in or user-defined language). The regular
expression, <i>regexp</i>, defines an extended regular expression (roughly that
used by <b>egrep</b>(1)), which is used to locate a single source line
containing a tag and may specify tab characters using \t. When a matching
line is found, a tag will be generated for the name defined by
<i>replacement</i>, which generally will contain the special back-references
\1 through \9 to refer to matching sub-expression groups within
<i>regexp</i>. The &#146;/&#146; separator characters shown in the parameter to the
option can actually be replaced by any character. Note that whichever
separator character is used will have to be escaped with a backslash (&#146;#146;)
character wherever it is used in the parameter as something other than a
separator. The regular expression defined by this option is added to the
current list of regular expressions for the specified language unless the
parameter is omitted, in which case the current list is cleared.
<p>
Unless modified by <i>flags</i>, <i>regexp</i> is interpreted as a Posix
extended regular expression. The <i>replacement</i> should expand for all
matching lines to a non-empty string of characters, or a warning message will
be reported. An optional kind specifier for tags matching <i>regexp</i> may
follow <i>replacement</i>, which will determine what kind of tag is reported in
the "kind" extension field (see <b>TAG FILE FORMAT</b>, below). The full form
of <i>kind-spec</i> is in the form of a single letter, a comma, a name (without
spaces), a comma, a description, followed by a separator, which specify
the short and long forms of the kind value and its textual description
(displayed using <b>--list-kinds</b>). Either the kind name and/or the
description may be omitted. If <i>kind-spec</i> is omitted, it defaults to
"<i>r,regex</i>". Finally, <i>flags</i> are one or more single-letter characters
having the following effect upon the interpretation of <i>regexp</i>:
<p>
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr><td width=3%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>b</i> </td><td valign="bottom">
The pattern is interpreted as a Posix basic regular expression.
</td></tr>
<tr valign="top"><td>
<i>e</i> </td><td valign="bottom">
The pattern is interpreted as a Posix extended regular expression (default).
</td></tr>
<tr valign="top"><td>
<i>i</i> </td><td valign="bottom">
The regular expression is to be applied in a case-insensitive manner.
</td></tr>
</table>
</td></tr>
</table>
<p>
Note that this option is available only if <b>ctags</b> was compiled with
support for regular expressions, which depends upon your platform. You can
determine if support for regular expressions is compiled in by examining the
output of the <b>--version</b> option, which will include "+regex" in the
compiled feature list.
<p>
For more information on the regular expressions used by <b>ctags</b>, see
either the <b>regex(5,7)</b> man page, or the GNU info documentation for regex
(e.g. "info regex").
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--sort</b>[=<i>yes</i>|<i>no</i>|<i>foldcase</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Indicates whether the tag file should be sorted on the tag name (default is
<i>yes</i>). Note that the original <b>vi</b>(1) required sorted tags.
The <i>foldcase</i> value specifies case insensitive (or case-folded) sorting.
Fast binary searches of tag files sorted with case-folding will require
special support from tools using tag files, such as that found in the ctags
readtags library, or Vim version 6.2 or higher (using "set ignorecase"). This
option must appear before the first file name. [Ignored in etags mode]
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--tag-relative</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Indicates that the file paths recorded in the tag file should be relative to
the directory containing the tag file, rather than relative to the current
directory, unless the files supplied on the command line are specified with
absolute paths. This option must appear before the first file name. The
default is <i>yes</i> when running in etags mode (see the <b>-e</b>
option), <i>no</i> otherwise.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--totals</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Prints statistics about the source files read and the tag file written during
the current invocation of <b>ctags</b>. This option is off by default.
This option must appear before the first file name.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--verbose</b>[=<i>yes</i>|<i>no</i>]
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Enable verbose mode. This prints out information on option processing and a
brief message describing what action is being taken for each file considered
by <b>ctags</b>. Normally, <b>ctags</b> does not read command line arguments
until after options are read from the configuration files (see <b>FILES</b>,
below) and the <b>CTAGS</b> environment variable. However, if this option is
the first argument on the command line, it will take effect before any options
are read from these sources. The default is <i>no</i>.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<b>--version</b>
</td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
Prints a version identifier for <b>ctags</b> to standard output, and then
exits. This is guaranteed to always contain the string "Exuberant Ctags".
<p>
<p>
</td></tr>
</table>
<h1 class="manpages">OPERATIONAL DETAILS</h1>
<p>
As <b>ctags</b> considers each file name in turn, it tries to determine the
language of the file by applying the following three tests in order: if the
file extension has been mapped to a language, if the file name matches a shell
pattern mapped to a language, and finally if the file is executable and its
first line specifies an interpreter using the Unix-style "#!" specification
(if supported on the platform). If a language was identified, the file is
opened and then the appropriate language parser is called to operate on the
currently open file. The parser parses through the file and adds an entry to
the tag file for each language object it is written to handle. See
<b>TAG FILE FORMAT</b>, below, for details on these entries.
<p>
This implementation of <b>ctags</b> imposes no formatting requirements on C
code as do legacy implementations. Older implementations of ctags tended to
rely upon certain formatting assumptions in order to help it resolve coding
dilemmas caused by preprocessor conditionals.
<p>
In general, <b>ctags</b> tries to be smart about conditional preprocessor
directives. If a preprocessor conditional is encountered within a statement
which defines a tag, <b>ctags</b> follows only the first branch of that
conditional (except in the special case of "#if 0", in which case it follows
only the last branch). The reason for this is that failing to pursue only one
branch can result in ambiguous syntax, as in the following example:
<p>
#ifdef TWO_ALTERNATIVES
<!-- Need break --><br />
struct {
<!-- Need break --><br />
#else
<!-- Need break --><br />
union {
<!-- Need break --><br />
#endif
short a;
<!-- Need break --><br />
long b;
}
<p>
Both branches cannot be followed, or braces become unbalanced and <b>ctags</b>
would be unable to make sense of the syntax.
<p>
If the application of this heuristic fails to properly parse a file,
generally due to complicated and inconsistent pairing within the conditionals,
<b>ctags</b> will retry the file using a different heuristic which does not
selectively follow conditional preprocessor branches, but instead falls back
to relying upon a closing brace ("}") in column 1 as indicating the end of a
block once any brace imbalance results from following a #if conditional branch.
<p>
<b>Ctags</b> will also try to specially handle arguments lists enclosed in
double sets of parentheses in order to accept the following conditional
construct:
<p>
extern void foo __ARGS((int one, char two));
<p>
Any name immediately preceding the "((" will be automatically ignored and
the previous name will be used.
<p>
C++ operator definitions are specially handled. In order for consistency with
all types of operators (overloaded and conversion), the operator name in the
tag file will always be preceded by the string "operator " (i.e. even if the
actual operator definition was written as "operator&lt;&lt;").
<p>
After creating or appending to the tag file, it is sorted by the tag name,
removing identical tag lines.
<p>
<p>
<h1 class="manpages">TAG FILE FORMAT</h1>
<p>
When not running in etags mode, each entry in the tag file consists of a
separate line, each looking like this in the most general case:
<p>
tag_name&lt;TAB&gt;file_name&lt;TAB&gt;ex_cmd;"&lt;TAB&gt;extension_fields
<p>
The fields and separators of these lines are specified as follows:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
1.
</td><td valign="bottom">
tag name
</td></tr>
<tr valign="top"><td>
2.
</td><td valign="bottom">
single tab character
</td></tr>
<tr valign="top"><td>
3.
</td><td valign="bottom">
name of the file in which the object associated with the tag is located
</td></tr>
<tr valign="top"><td>
4.
</td><td valign="bottom">
single tab character
</td></tr>
<tr valign="top"><td>
5.
</td><td valign="bottom">
EX command used to locate the tag within the file; generally a search pattern
(either /pattern/ or ?pattern?) or line number (see <b>--excmd</b>). Tag file
format 2 (see <b>--format</b>) extends this EX command under certain
circumstances to include a set of extension fields (described below) embedded
in an EX comment immediately appended to the EX command, which leaves it
backward-compatible with original <b>vi</b>(1) implementations.
</td></tr>
</table>
<p>
A few special tags are written into the tag file for internal purposes. These
tags are composed in such a way that they always sort to the top of the file.
Therefore, the first two characters of these tags are used a magic number to
detect a tag file for purposes of determining whether a valid tag file is
being overwritten rather than a source file.
<p>
Note that the name of each source file will be recorded in the tag file
exactly as it appears on the command line. Therefore, if the path you
specified on the command line was relative to the current directory, then it
will be recorded in that same manner in the tag file. See, however, the
<b>--tag-relative</b> option for how this behavior can be modified.
<p>
Extension fields are tab-separated key-value pairs appended to the end of the
EX command as a comment, as described above. These key value pairs appear in
the general form "<i>key</i>:<i>value</i>". Their presence in the lines of the
tag file are controlled by the <b>--fields</b> option. The possible keys and
the meaning of their values are as follows:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>access</i> </td><td valign="bottom">
Indicates the visibility of this class member, where <i>value</i> is specific
to the language.
<p>
</td></tr>
<tr valign="top"><td>
<i>file</i> </td><td valign="bottom">
Indicates that the tag has file-limited visibility. This key has no
corresponding value.
<p>
</td></tr>
<tr valign="top"><td>
<i>kind</i> </td><td valign="bottom">
Indicates the type, or kind, of tag. Its value is either one of the
corresponding one-letter flags described under the various
<b>--&lt;LANG&gt;-kinds</b> options above, or a full name. It is permitted (and is,
in fact, the default) for the key portion of this field to be omitted. The
optional behaviors are controlled with the <b>--fields</b> option.
<p>
</td></tr>
<tr valign="top"><td colspan="2">
<i>implementation</i> </td></tr><tr valign="top"><td width=12%>&nbsp;</td><td>
When present, this indicates a limited implementation (abstract vs. concrete)
of a routine or class, where <i>value</i> is specific to the language
("virtual" or "pure virtual" for C++; "abstract" for Java).
<p>
</td></tr>
<tr valign="top"><td>
<i>inherits</i> </td><td valign="bottom">
When present, <i>value</i>. is a comma-separated list of classes from which
this class is derived (i.e. inherits from).
<p>
</td></tr>
<tr valign="top"><td>
<i>signature</i> </td><td valign="bottom">
When present, <i>value</i>. is a language-dependent representation of the
signature of a routine. A routine signature in its complete form specifies the
return type of a routine and its formal argument list. This extension field is
presently supported only for C-based languages and does not include the return
type.
<p>
</td></tr>
<!-- PP ends table -->
</table>
In addition, information on the scope of the tag definition may be available,
with the key portion equal to some language-dependent construct name and its
value the name declared for that construct in the program. This scope entry
indicates the scope in which the tag was found. For example, a tag generated
for a C structure member would have a scope looking like "struct:myStruct".
<p>
<p>
<h1 class="manpages">HOW TO USE WITH VI</h1>
Vi will, by default, expect a tag file by the name "tags" in the current
directory. Once the tag file is built, the following commands exercise the tag
indexing feature:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>vi -t tag</b> </td><td valign="bottom">
Start vi and position the cursor at the file and line where "tag" is defined.
</td></tr>
<tr valign="top"><td>
<b>:ta tag</b> </td><td valign="bottom">
Find a tag.
</td></tr>
<tr valign="top"><td>
<b>Ctrl-]</b> </td><td valign="bottom">
Find the tag under the cursor.
</td></tr>
<tr valign="top"><td>
<b>Ctrl-T</b> </td><td valign="bottom">
Return to previous location before jump to tag (not widely implemented).
<p>
<p>
</td></tr>
</table>
<h1 class="manpages">HOW TO USE WITH GNU EMACS</h1>
Emacs will, by default, expect a tag file by the name "TAGS" in the current
directory. Once the tag file is built, the following commands exercise the
tag indexing feature:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>M-x visit-tags-table &lt;RET&gt; FILE &lt;RET&gt;</b> </td></tr><tr valign="top"><td width=10%>&nbsp;</td><td>
Select the tag file, "FILE", to use.
</td></tr>
<tr valign="top"><td>
<b>M-. [TAG] &lt;RET&gt;</b> </td><td valign="bottom">
Find the first definition of TAG. The default tag is the identifier under the
cursor.
</td></tr>
<tr valign="top"><td>
<b>M-*</b> </td><td valign="bottom">
Pop back to where you previously invoked "M-.".
</td></tr>
<tr valign="top"><td>
<b>C-u M-.</b> </td><td valign="bottom">
Find the next definition for the last tag.
<p>
</td></tr>
<!-- PP ends table -->
</table>
For more commands, see the <i>Tags</i> topic in the Emacs info document.
<p>
<p>
<h1 class="manpages">HOW TO USE WITH NEDIT</h1>
NEdit version 5.1 and later can handle the new extended tag file format (see
<b>--format</b>). To make NEdit use the tag file, select "File-&gt;Load Tags
File". To jump to the definition for a tag, highlight the word, the press
Ctrl-D. NEdit 5.1 can can read multiple tag files from different directories.
Setting the X resource nedit.tagFile to the name of a tag file instructs NEdit
to automatically load that tag file at startup time.
<p>
<p>
<h1 class="manpages">CAVEATS</h1>
Because <b>ctags</b> is neither a preprocessor nor a compiler, use of
preprocessor macros can fool <b>ctags</b> into either missing tags or
improperly generating inappropriate tags. Although <b>ctags</b> has been
designed to handle certain common cases, this is the single biggest cause of
reported problems. In particular, the use of preprocessor constructs which
alter the textual syntax of C can fool <b>ctags</b>. You can work around many
such problems by using the <b>-I</b> option.
<p>
White space is treated as a separator for file names and options read from
list files, specified using the <b>-L</b> option, and in filter mode (specified
using the <b>--filter</b> option). Therefore, it is not currently possible to
supply file names or other options containing embedded white space (spaces,
etc.) through these options.
<p>
Note that when <b>ctags</b> generates uses patterns for locating tags (see
the <b>--excmd</b> option), it is entirely possible that the wrong line may be
found by your editor if there exists another source line which is identical to
the line containing the tag. The following example demonstrates this condition:
<p>
int variable;
<p>
/* ... */
<!-- Need break --><br />
void foo(variable)
<!-- Need break --><br />
int variable;
<!-- Need break --><br />
{
/* ... */
}
<p>
Depending upon which editor you use and where in the code you happen to be, it
is possible that the search pattern may locate the local parameter declaration
in foo() before it finds the actual global variable definition, since the
lines (and therefore their search patterns are identical). This can be avoided
by use of the <b>--excmd</b>=<i>n</i> option.
<p>
<p>
<h1 class="manpages">BUGS</h1>
<b>Ctags</b> has more options than <b>ls</b>(1).
<p>
When parsing a C++ member function definition (e.g. "className::function"),
<b>ctags</b> cannot determine whether the scope specifier is a class name or a
namespace specifier and always lists it as a class name in the scope portion
of the extension fields. Also, if a C++ function is defined outside of the
class declaration (the usual case), the access specification (i.e. public,
protected, or private) and implementation information (e.g. virtual, pure
virtual) contained in the function declaration are not known when the tag is
generated for the function definition. It will, however be available for
prototypes (e.g <b>--c++-kinds</b>=<i>+p</i>).
<p>
No qualified tags are generated for language objects inherited into a class.
<p>
<p>
<h1 class="manpages">ENVIRONMENT VARIABLES</h1>
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>CTAGS</b> </td><td valign="bottom">
If this environment variable exists, it will be expected to contain a set of
default options which are read when <b>ctags</b> starts, after the
configuration files listed in <b>FILES</b>, below, are read, but before any
command line options are read. Options appearing on the command line will
override options specified in this variable. Only options will be read from
this variable. Note that all white space in this variable in considered a
separator, making it impossible to pass an option parameter containing an
embedded space. If this is a problem, use a configuration file instead.
<p>
</td></tr>
<tr valign="top"><td>
<b>ETAGS</b> </td><td valign="bottom">
Similar to the <b>CTAGS</b> variable above, this variable, if found, will be
read when <b>etags</b> starts. If this variable is not found, <b>etags</b> will
try to use <b>CTAGS</b> instead.
<p>
</td></tr>
<tr valign="top"><td>
<b>TMPDIR</b> </td><td valign="bottom">
On Unix-like hosts where mkstemp() is available, the value of this variable
specifies the directory in which to place temporary files. This can be useful
if the size of a temporary file becomes too large to fit on the partition
holding the default temporary directory defined at compilation time.
<b>ctags</b> creates temporary files only if either (1) an emacs-style tag file
is being generated, (2) the tag file is being sent to standard output, or (3)
the program was compiled to use an internal sort algorithm to sort the tag
files instead of the the sort utility of the operating system. If the sort
utility of the operating system is being used, it will generally observe this
variable also. Note that if <b>ctags</b> is setuid, the value of TMPDIR will be
ignored.
<p>
<p>
</td></tr>
</table>
<h1 class="manpages">FILES</h1>
<i>/ctags.cnf (on MSDOS, MSWindows only)</i> <!-- Need break --><br />
<i>/etc/ctags.conf</i> <!-- Need break --><br />
<i>/usr/local/etc/ctags.conf</i> <!-- Need break --><br />
<i>$HOME/.ctags ($HOME/ctags.cnf on MSDOS, MSWindows)</i> <!-- Need break --><br />
<i>.ctags (ctags.cnf on MSDOS, MSWindows)</i> <table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=8%>

</td><td>
If any of these configuration files exist, each will be expected to contain a
set of default options which are read in the order listed when <b>ctags</b>
starts, but before the <b>CTAGS</b> environment variable is read or any command
line options are read. This makes it possible to set up site-wide, personal
or project-level defaults. It is possible to compile <b>ctags</b> to read an
additional configuration file before any of those shown above, which will be
indicated if the output produced by the <b>--version</b> option lists the
"custom-conf" feature. Options appearing in the <b>CTAGS</b> environment
variable or on the command line will override options specified in these
files. Only options will be read from these files. Note that the option files
are read in line-oriented mode in which spaces are significant (since
shell quoting is not possible). Each line of the file is read as one command
line parameter (as if it were quoted with single quotes). Therefore, use new
lines to indicate separate command-line arguments.
<p>
</td></tr>
<tr valign="top"><td>
<i>tags</i> </td><td valign="bottom">
The default tag file created by <b>ctags</b>.
</td></tr>
<tr valign="top"><td>
<i>TAGS</i> </td><td valign="bottom">
The default tag file created by <b>etags</b>.
<p>
</td></tr>
</table>
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<p>
<a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net</a>
<p>
Also <b>ex</b>(1), <b>vi</b>(1), <b>elvis</b>, or, better yet, <b>vim</b>, the
official editor of <b>ctags</b>. For more information on <b>vim</b>, see the VIM
Pages web site at:
<p>
<a href="http://www.vim.org/">http://www.vim.org</a>/
<p>
<p>
<h1 class="manpages">AUTHOR</h1>
Darren Hiebert &lt;dhiebert at users.sourceforge.net&gt;
<!-- Need break --><br />
<a href="http://darrenhiebert.com/">http://DarrenHiebert.com</a>/
<p>
<p>
<h1 class="manpages">MOTIVATION</h1>
"Think ye at all times of rendering some service to every member of the human
race."
<p>
"All effort and exertion put forth by man from the fullness of his heart is
worship, if it is prompted by the highest motives and the will to do service
to humanity."
<p>
-- From the Baha&#146;i Writings
<p>
<p>
<h1 class="manpages">CREDITS</h1>
This version of <b>ctags</b> was originally derived from and inspired by the
ctags program by Steve Kirkendall &lt;<a href="mailto:kirkenda@cs.pdx.edu">kirkenda@cs.pdx.edu</a>&gt; that comes with the
Elvis vi clone (though virtually none of the original code remains).
<p>
Credit is also due Bram Moolenaar &lt;<a href="mailto:Bram@vim.org">Bram@vim.org</a>&gt;, the author of <b>vim</b>, who
has devoted so much of his time and energy both to developing the editor as a
service to others, and to helping the orphans of Uganda.
<p>
The section entitled "HOW TO USE WITH GNU EMACS" was shamelessly stolen from
the info page for GNU <b>etags</b>.
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion604e.html?tutorial=unix_commands&amp;file=ctags.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/ctags.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:32 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
