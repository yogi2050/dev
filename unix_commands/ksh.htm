<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/ksh.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>ksh - Unix, Linux Command</title>
<meta name="Description" Content="ksh - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>ksh - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<!-- ignored unsupported tag .xx -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->
<h1 class="manpages">NAME</h1>
<!-- ignored unsupported tag .if -->
sh, rsh, pfsh - shell, the standard/restricted command and programming language
<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
ksh, rksh, pfksh - KornShell, a standard/restricted command and programming language
<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
ksh93, rksh93, pfksh93 - KornShell, a standard/restricted command and programming language
<!-- ignored unsupported tag .\} -->
<h1 class="manpages">SYNOPSIS</h1>
<!-- ignored unsupported tag .if -->
<b>sh</b> <!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<b>ksh</b> <!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<b>ksh93</b> <!-- ignored unsupported tag .\} -->
[
<b>&#177;abcefhiknoprstuvxBCDP</b> ] [
<b>-R</b> file ] [
<b>&#177;o</b> option ] ... [
<b>-</b> ] [ arg ... ]
<h1 class="manpages">DESCRIPTION</h1>
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
is a command and programming language
that executes commands read from a terminal
or a file.
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
is a restricted version of the
<!-- ignored unsupported tag .if -->
command interpreter
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
it is used to set up login names and execution environments whose
capabilities are more controlled than those of the standard shell.
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
is a profile shell version of the
<!-- ignored unsupported tag .if -->
command interpreter
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
it is used to to execute commands with the attributes specified by
the user&#146;s profiles (see
<b>pfexec</b>(1)).
See
<i>Invocation</i> below
for the meaning of arguments to the shell.
<p>
<b>NOTE:</b> <b>Pfksh</b>, <b>Rpfksh</b> and <b>pfexec</b> parts are not related to Linux systems. <b>Rksh</b> can be used as rksh symlink to <b>ksh93</b> or as <b>ksh -r</b>.
<h2><i>Definitions.</i></h2>
A
<i>metacharacter</i> is one of the following characters:
<p>
<b>;   &   (   )   |   &lt;   &gt;   new-line   space   tab</b>
<p>
A
<i>blank</i> is a
<b>tab</b> or a
<b>space</b>. An
<i>identifier</i> is a sequence of letters, digits, or underscores
starting with a letter or underscore.
Identifiers are used as components of
<i>variable</i> names.
A
<i>vname</i> is a sequence of one or more identifiers
separated by a <b><font size="2">.</font></b> and optionally preceded
by a <b><font size="2">.</font></b>.
Vnames are used as function and variable names.
A
<i>word</i> is a sequence of
<i>characters</i> from the character set defined by the current locale,
excluding non-quoted
<i>metacharacters</i>. <p>
A
<i>command</i> is a sequence of characters in the syntax
of the shell language.
The shell reads each command and
carries out the desired action either directly or by invoking
separate utilities.
A built-in command is a command that is carried out by the
shell itself without creating a separate process.
Some commands are built-in purely for convenience
and are not documented here.
Built-ins that cause
side effects in the shell environment and
built-ins that are found before performing a
path search (see
<i>Execution</i> below)
are documented here.
For historical reasons, some of
these built-ins behave differently than
other built-ins and are called
<i>special built-ins</i>. <h2><i>Commands.</i></h2>
A
<i>simple-command</i> is a list of variable assignments
(see
<i>Variable Assignments</i> below)
or a sequence of
<i>blank</i> separated words
which may be preceded by a list of variable assignments
(see
<i>Environment</i> below).
The first word specifies the name of the command to
be executed.
Except as specified below,
the remaining words are passed as arguments
to the invoked command.
The command name is passed as argument 0
(see
<b>exec</b>(2)).
The
<i>value</i> of a simple-command is its exit status; 0-255
if it terminates normally; 256+<i>signum</i> if
it terminates abnormally (the name of the signal corresponding
to the exit status can be
obtained via the
<b>-l</b> option of the
<b>kill</b> built-in utility).
<p>
A
<i>pipeline</i> is a sequence of one or more
<i>commands</i> separated by
<b>|</b>. The standard output of each command but the last
is connected by a
<b>pipe</b>(2)
to the standard input of the next command.
Each command,
except possibly the last,
is run as a separate process;
the shell waits for the last command to terminate.
The exit status of a pipeline is the exit
status of the last command unless the
<b>pipefail</b> option is enabled.
Each pipeline can be preceded by the
<i>reserved word</i> <b>!</b> which causes the exit status of the pipeline to become
0 if the exit status of the last command is non-zero, and
1 if the exit status of the last command is 0.
<p>
A
<i>list</i> is a sequence of one or more
pipelines
separated by
<b>;</b>, <b>&</b>, <b>|&</b>, <b>&&</b>, or
<b>||</b>, and optionally terminated by
<b>;</b>, <b>&</b>, or
<b>|&</b>. Of these five symbols,
<b>;</b>, <b>&</b>, and
<b>|&</b> have equal precedence,
which is lower than that of
<b>&&</b> and
<b>||</b>. The symbols
<b>&&</b> and
<b>||</b> also have equal precedence.
A semicolon
(<b>;</b>) causes sequential execution of the preceding pipeline; an ampersand
(<b>&</b>) causes asynchronous execution of the preceding pipeline (i.e., the shell does
<i>not</i> wait for that pipeline to finish).
The symbol
<b>|&</b> causes asynchronous execution of the preceding pipeline
with a two-way pipe established to the parent shell;
the standard input and output of the spawned pipeline
can be written to and read from by the parent shell
by applying
the redirection operators
<b>&lt;&</b> and
<b>&gt;&</b> with arg
<b>p</b> to commands and by using
<b>-p</b> option of
the built-in commands
<b>read</b> and
<b>print</b> described later.
The symbol
<b>&&</b> (<b>||</b>) causes the
<i>list</i> following it to be executed only if the preceding
pipeline
returns a zero (non-zero) value.
One or more new-lines may appear in a
<i>list</i> instead of a semicolon,
to delimit a command.
The first
<i>item </i> of the first
<i>pipeline</i> of a
<i>list</i> that is a simple command not beginning
with a redirection, and not occurring within a
<b>while</b>, <b>until</b>, or
<b>if</b> <i>list</i>, can be preceded by a semicolon.
This semicolon
is ignored unless the
<b>showme</b> option is enabled as described with
the
<b>set</b> built-in below.
<p>
A
<i>command</i> is either a simple-command
or one of the following.
Unless otherwise stated,
the value returned by a command is that of the
last simple-command executed in the command.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>for</b> <i>vname</i> [ <b>in</b> <i>word</i> ... ] <b>;do</b> <i>list</i> <b>;done</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Each time a
<b>for</b> command is executed,
<i>vname</i> is set to the next
<i>word</i> taken from the
<b>in</b> <i>word</i> list.
If
<b>in</b><i> word</i> &#46;..
is omitted, then
the
<b>for</b> command executes the <b>do</b> <i>list</i> once for each positional parameter
that is set starting from
<b>1</b> (see
<i>Parameter Expansion</i> below).
Execution ends when there are no more words in the list.
</td></tr>
<tr valign="top"><td colspan="2">
<b>for ((</b> [<i>expr1</i>] <b>;</b> [<i>expr2</i>] <b>;</b> [<i>expr3</i>] <b>))</b> <b>;do</b> <i>list</i> <b>;done</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The arithmetic expression
<i>expr1</i> is evaluated first
(see
<i>Arithmetic evaluation</i> below).
The arithmetic expression
<i>expr2</i> is repeatedly evaluated until it evaluates to zero and when non-zero,
<i>list</i> is executed and the arithmetic expression
<i>expr3</i> evaluated.
If any expression
is omitted, then it behaves as if it evaluated to 1.
</td></tr>
<tr valign="top"><td colspan="2">
<b>select</b> <i>vname</i> [ <b>in</b> <i>word</i> ... ] <b>;do</b> <i>list</i> <b>;done</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
A
<b>select</b> command prints on standard error (file descriptor 2) the set of
<i>word</i>s, each preceded by a number.
If
<b>in</b><i> word</i> &#46;..
is omitted, then
the
positional parameters starting from
<b>1</b> are used instead
(see
<i>Parameter Expansion</i> below).
The
<font size="-1"></font> <b>PS3</b> prompt is printed
and a line is read from the standard input.
If this line consists of the number
of one of the listed
<i>word</i>s, then the value of the variable
<i>vname</i> is set to the
<i>word</i> corresponding to this number.
If this line is empty, the selection list is
printed again.
Otherwise the value of the variable
<i>vname</i> is set to
<i>null</i>. The contents of the line read from standard input is
saved in
the variable
<font size="-1"></font> <b>REPLY</b>. The
<i>list</i> is executed for each selection until a
<b>break</b> or
<i>end-of-file</i> is encountered.
If the
<font size="-1"></font> <b>REPLY</b> variable is set to
<i>null</i> by the execution of
<i>list</i>, then the selection list is printed before
displaying the
<font size="-1"></font> <b>PS3</b> prompt for the next selection.
</td></tr>
<tr valign="top"><td colspan="2">
<b>case</b> <i>word</i> <b>in</b> [ [<b>(</b>]<i>pattern</i> [ | <i>pattern</i> ] ... <b>)</b> <i>list</i> <b>;;</b> ] ... <b>esac</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
A
<b>case</b> command executes the
<i>list</i> associated with the first
<i>pattern</i> that matches
<i>word</i>. The form of the patterns is
the same as that used for
file-name generation (see
<i>File Name Generation</i> below).
The
<b>;;</b> operator causes execution of
<b>case</b> to terminate.
If
<b>;&</b> is used in place of
<b>;;</b> the next subsequent list, if any,  is executed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>if</b> <i>list</i> <b>;then</b> <i>list</i> [ 
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
<b>;elif</b> <i>list</i> <b>;then</b> <i>list</i> ] ... 
[ <b>;else</b> <i>list</i> ] <b>;fi</b>
The
<i>list</i> following <b>if</b> is executed and,
if it
returns a zero exit status, the
<i>list</i> following
the first
<b>then</b> is executed.
Otherwise, the
<i>list</i> following <b>elif</b>
is executed and, if its value is zero,
the
<i>list</i> following
the next
<b>then</b> is executed.
Failing each successive
<b>elif</b> <i>list</i>, the
<b>else</b> <i>list</i> is executed.
If the
<b>if</b> <i>list</i> has non-zero exit status
and there is no
<b>else</b> <i>list</i>, then the
<b>if</b> command returns a zero exit status.
</td></tr>
<tr valign="top"><td colspan="2">
<b>while</b> <i>list</i> <b>;do</b> <i>list</i> <b>;done</b>
<!-- Consumed .TP -->
<br />
<b>until</b> <i>list</i> <b>;do</b> <i>list</i> <b>;done</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
A
<b>while</b> command repeatedly executes the
<b>while</b> <i>list</i> and, if the exit status of the last command in the list is zero, executes
the
<b>do</b> <i>list</i>; otherwise the loop terminates.
If no commands in the
<b>do</b> <i>list</i> are executed, then the
<b>while</b> command returns a zero exit status;
<b>until</b> may be used in place of
<b>while</b> to negate
the loop termination test.
</td></tr>
<tr valign="top"><td colspan="2">
<b>((</b><i>expression</i><b>))</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The
<i>expression</i> is evaluated using the rules for arithmetic evaluation described below.
If the value of the arithmetic expression is non-zero, the exit
status is 0, otherwise the exit status is 1.
</td></tr>
<tr valign="top"><td colspan="2">
<b>(</b><i>list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Execute
<i>list</i> in a separate environment.
Note, that if two adjacent open parentheses are
needed for nesting, a space must be inserted to avoid
evaluation as an arithmetic command as described above.
</td></tr>
<tr valign="top"><td colspan="2">
<b>{ </b><i>list</i><b>;}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
<i>list</i> is simply executed.
Note that unlike the metacharacters
<b>(</b> and
<b>)</b>, <b>{</b> and
<b>}</b> are
<i>reserved word</i>s and must occur
at the beginning of a line or after a
<b>;</b> in order to be recognized.
</td></tr>
<tr valign="top"><td colspan="2">
<b>[[</b><i> expression </i><b>]]</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Evaluates
<i>expression</i> and returns a zero exit status when
<i>expression</i> is true.
See
<i>Conditional Expressions</i> below, for a description of
<i>expression</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>function</b> <i>varname</i> <b>{</b> <i>list</i> <b>;}</b>
<!-- Consumed .TP -->
<br />
<i>varname</i> <b>() {</b> <i>list</i> <b>;}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Define a function which is referenced by
<i>varname</i>. A function whose
<i>varname</i> contains a
<b><font size="2">.</font></b> is called a discipline function and the portion
of the
<i>varname</i> preceding the last
<b><font size="2">.</font></b> must refer to an existing variable.
The body of the function is the
<i>list</i> of commands between
<b>{</b> and
<b>}</b>. A function defined with the <b>function</b> <i>varname</i>
syntax can also be used as an argument to the <b>.</b>
special built-in command to get the equivalent behavior
as if the <i>varname</i><b>()</b> syntax were used to define it.
(See
<i>Functions</i> below.)
</td></tr>
<tr valign="top"><td colspan="2">
<b>time</b> [ <i>pipeline</i> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If <i>pipeline</i> is omitted the user and system time for
the current shell and completed child processes is printed
on standard error.
Otherwise,
<i>pipeline</i> is executed and the elapsed time as well as
the user and system time are printed on standard error.
The
<font size="-1"></font> <b>TIMEFORMAT</b> variable may be set to a format string that specifies how the timing
information should be displayed.
See
<b>Shell Variables</b> below
for a description of the
<font size="-1"></font> <b>TIMEFORMAT</b> variable.
</td></tr>
<!-- PP ends table -->
</table>
The following reserved words
are recognized as reserved only when they are the first word of a command
and are not quoted:
<p>
<b></b> <!-- ignored unsupported tag .if -->
if   then   else   elif   fi   case   esac   for   while   until   do   done   {   }   function   select   time  [[  ]]   !
<h2><i>Variable Assignments.</i></h2>
One or more variable assignments can start a simple command
or can be arguments to the
<b>typeset</b>, <b>enum</b>, <b>export</b>, or
<b>readonly</b> special built-in commands as well as
to other declaration commands created as types.
The syntax for an <i>assignment</i> is of the form:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<i>varname</i><b>=</b><i>word</i>
<!-- Consumed .TP -->
<br />
<i>varname</i><b>[</b><i>word</i><b>]</b>=<i>word</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
No space is permitted between <i>varname</i> and the <b>=</b> or
between <b>=</b> and <i>word</i>.
</td></tr>
<tr valign="top"><td colspan="2">
<i>varname</i><b>=(</b><i>assign_list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
No space is permitted between <i>varname</i> and the <b>=</b>.
An <i>assign_list</i> can be one of the following:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr><td width=9%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<i>word</i> ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Indexed array assignment.
</td></tr>
<tr valign="top"><td colspan="2">
<b>[</b><i>word</i><b>]=</b><i>word</i> ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Associative array assignment.
If preceded by
<b>typeset -a</b> this will create an indexed array instead.
</td></tr>
<tr valign="top"><td colspan="2">
<i>assignment</i> ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Compound variable assignment.
This creates a compound variable <i>varname</i> with
sub-variables of the form <i>varname</i><b>.</b><i>name</i>,
where <i>name</i> is the name portion of <i>assignment</i>.
The value of <i>varname</i> will contain all the assignment elements.
Additional assignments made to sub-variables of <i>varname</i>
will also be displayed as part of the value of <i>varname</i>.
If no <i>assignment</i>s are specified, <i>varname</i> will be
a compound variable allowing subsequence child elements to be defined.
</td></tr>
<tr valign="top"><td colspan="2">
<b>typeset</b> [<i>options</i>] <i>assignment</i> ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Nested variable assignment.  Multiple assignments
can be specified by separating each of them with a <b>;</b>.
The previous value is unset before the assignment.
Other declaration commands such as
<b>readonly,</b> <b>enum</b>, and
other declaration commands can be used in place of
<b>typeset</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>.</b> <i>filename</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Include the assignment commands contained in
<i>filename</i>. </td></tr>
</table>
</td></tr>
</table>
</td></tr>
<!-- PP ends table -->
</table>
In addition, a <b>+=</b> can be used in place of the <b>=</b>
to signify adding to or appending to the previous value.
When <b>+=</b> is applied to an arithmetic type, <i>word</i>
is evaluated as an arithmetic expression and added to the current value.
When applied to a string variable, the value defined by <i>word</i>
is appended to the value.  For compound assignments, the previous
value is not unset and the new values are appended to the
current ones provided that the types are compatible.
<p>
The right hand side of a variable assignment undergoes all the expansion
list below except word splitting, brace expansion, and file name generation.
When the left hand side is an assignment is a compound variable and
the right hand is the name of a compound variable, the compound variable
on the right will be copied or appended to the compound variable on the left.
<h2><i>Comments.</i></h2>
A word beginning with
<b>#</b> causes that word and all the following characters up to a new-line
to be ignored.
<h2><i>Aliasing.</i></h2>
The first word of each command is replaced by the text of an
<b>alias</b> if an
<b>alias</b> for this word has been defined.
An
<b>alias</b> name consists of any number of characters excluding metacharacters,
quoting characters,
file expansion characters,
parameter expansion and command substitution
characters,
and
<b>=</b>. The replacement string can contain any
valid shell script
including the metacharacters listed above.
The first word of each command in the
replaced text,
other than
any that are in the process of being replaced,
will be tested for aliases.
If the last character of the alias value is a
<i>blank</i> then the word following the alias will also be checked for alias
substitution.
Aliases can be used to redefine
built-in commands but cannot be used to redefine
the reserved words listed above.
Aliases can be created and listed with the
<b>alias</b> command and can be removed with the
<b>unalias</b> command.
<p>
<i>Aliasing</i> is performed when
scripts are read,
not while they are executed.
Therefore,
for an alias to take effect,
the
<b></b> alias
definition command has to be executed before
the command which references the alias is read.
<p>
The following aliases
are compiled into the shell
but can be unset or redefined:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>autoload=&#39;typeset -fu&#39;</b> <!-- Consumed .TP -->
<br />
<b>command=&#39;command  &#39;</b> <!-- Consumed .TP -->
<br />
<b>compound=&#39;typeset -C&#39;</b> <!-- Consumed .TP -->
<br />
<b>fc=hist</b> <!-- Consumed .TP -->
<br />
<b>float=&#39;typeset -lE&#39;</b> <!-- Consumed .TP -->
<br />
<b>functions=&#39;typeset -f&#39;</b> <!-- Consumed .TP -->
<br />
<b>hash=&#39;alias -t --&#39;</b> <!-- Consumed .TP -->
<br />
<b>history=&#39;hist -l&#39;</b> <!-- Consumed .TP -->
<br />
<b>integer=&#39;typeset -li&#39;</b> <!-- Consumed .TP -->
<br />
<b>nameref=&#39;typeset -n&#39;</b> <!-- Consumed .TP -->
<br />
<b>nohup=&#39;nohup  &#39;</b> <!-- Consumed .TP -->
<br />
<b>r=&#39;hist -s&#39;</b> <!-- Consumed .TP -->
<br />
<b>redirect=&#39;command exec&#39;</b> <!-- Consumed .TP -->
<br />
<b>source=&#39;command <font size="2">.</font>&#39;</b> <!-- Consumed .TP -->
<br />
<b>stop=&#39;kill -s <font size="-1">STOP</font>&#39;</b> <!-- Consumed .TP -->
<br />
<b>suspend=&#39;kill -s <font size="-1">STOP</font> $$&#39;</b> <!-- Consumed .TP -->
<br />
<b>times=&#39;{ { time;} 2&gt;&1;}&#39;</b> <!-- Consumed .TP -->
<br />
<b>type=&#39;whence -v&#39;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
</td></tr>
</table>
<h2><i>Tilde Substitution.</i></h2>
After alias substitution is performed, each word
is checked to see if it begins with an unquoted
<b>&#126;</b>. For tilde substitution,
<i>word</i> also refers to the
<i>word</i> portion of parameter expansion
(see
<i>Parameter Expansion</i> below).
If it does, then the word up to a
<b>/</b> is checked to see if it matches a user name in the
password database (See
<b>getpwname</b>(3).)
If a match is found, the
<b>&#126;</b> and the matched login name are replaced by the
login directory of the matched user.
If no match is found, the original text is left unchanged.
A
<b>&#126;</b> by itself, or in front of a
<b>/</b>, is replaced by
<font size="-1"></font> <b>$HOME</b>. A
<b>&#126;</b> followed by a
<b>+</b> or
<b>-</b> is replaced by the value of
<b></b> <font size="-1">$PWD</font> and
<b></b> <font size="-1">$OLDPWD</font> respectively.
<p>
In addition,
when expanding a
<i>variable assignment</i>, <i>tilde</i> substitution is attempted when
the value of the assignment
begins with a
<b>&#126;</b>, and when a
<b>&#126;</b> appears after a
<b>:</b>. The
<b>:</b> also terminates a
<b>&#126;</b> login name.
<h2><i>Command Substitution.</i></h2>
The standard output from a command list enclosed in
parentheses preceded by a dollar sign (
<b>$(</b><i>list</i><b>)</b>
),
or in a brace group preceded by a dollar sign (
<b>${ </b><i>list</i><b>;}</b>
), or in a pair of grave accents (<b><font size="2">&#96;</font><font size="2">&#96;</font></b>)
may be used as part or all
of a word;
trailing new-lines are removed.
In the second case, the <b>{</b> and <b>}</b> are treated as a reserved words
so that <b>{</b> must be followed by a <i>blank</i> and <b>}</b> must
appear at the beginning of the line or follow a <b>;</b>.
In the third (obsolete) form, the string between the quotes is processed
for special quoting characters before the command is executed (see
<i>Quoting</i> below).
The command substitution
<b>$(cat file)</b>
can be replaced by the equivalent but faster
<b>$(&lt;file)</b>.
The command substitution
<b>$(</b><i>n</i><b>&lt;#)</b>
will expand to the current byte offset for file descriptor
<i>n</i>. Except for the second form, the command list is run in a subshell so that no
side effects are possible.
For the second form, the final
<b>}</b> will be recognized as a reserved word after any token.
<h2><i>Arithmetic Substitution.</i></h2>
An arithmetic expression enclosed in double
parentheses preceded by a dollar sign (
<b>$(())</b> )
is replaced by the value of the arithmetic expression
within the double parentheses.
<h2><i>Process Substitution.</i></h2>
This feature is only available on
versions of the UNIX operating system that support the
<b>/dev/fd</b> directory for naming open files.
Each command argument of the form
<b>&lt;(</b><i>list</i><b>)</b>
or
<b>&gt;(</b><i>list</i><b>)</b>
will run process
<i>list</i> asynchronously connected to some file in
<b>/dev/fd</b>. The name of this file will become the argument to the command.
If the form with
<b>&gt;</b> is selected then writing on this file will provide input for
<i>list</i>. If
<b>&lt;</b> is used,
then the file passed as an argument will contain the output of the
<i>list</i> process.
For example,
<p>
<b>paste &lt;(cut -f1</b> <i>file1</i><b>) &lt;(cut -f3</b> <i>file2</i><b>) | tee &gt;(</b><i>process1</i><b>) &gt;(</b><i>process2</i><b>)</b>
<p>
<i>cuts</i> fields 1 and 3 from
the files
<i>file1</i> and
<i>file2</i> respectively,
<i>pastes</i> the results together, and
sends it
to the processes
<i>process1</i> and
<i>process2</i>, as well as putting it onto the standard output.
Note that the file, which is passed as an argument to the command,
is a UNIX
<b>pipe</b>(2)
so programs that expect to
<b>lseek</b>(2)
on the file will not work.
<p>
Process substitution of the form
<b>&lt;(</b><i>list</i><b>)</b>
can also be used with the
<b>&lt;</b> redirection operator which causes the output of
<i>list</i> to be standard input or the input for whatever file descriptor is specified.
<h2><i>Parameter Expansion.</i></h2>
A
<i>parameter</i> is a
<i>variable</i>, one or more digits,
or any of the characters
<b>*</b>, <b>@</b>, <b>#</b>, <b>?</b>, <b>-</b>, <b>$</b>, and
<b>!\^</b>. A
<i>variable</i> is denoted by a <i>vname</i>.
To create a variable whose
<i>vname</i> contains a <b><font size="2">.</font></b>,
a variable whose
<i>vname</i> consists of everything before the last <b><font size="2">.</font></b> must already exist.
A
<i>variable</i> has a
<i>value</i> and zero or more
<i>attributes</i>. <i>Variables</i> can be assigned
<i>values</i> and
<i>attributes</i> by using the
<b>typeset</b> special built-in command.
The attributes supported by the shell are described
later with the
<b>typeset</b> special built-in command.
Exported variables pass values and attributes to
the environment.
<p>
The shell supports both indexed and associative arrays.
An element of an array variable is referenced by a
<i>subscript</i>. A
<i>subscript</i> for an indexed array is denoted by
an
<i>arithmetic expression</i> (see
<i>Arithmetic evaluation</i> below)
between a
<b>[</b> and a
<b>]</b>. To assign values to an indexed array, use
<i>vname</i><b>=(</b><i>value</i> ...<b>)</b> or
<b>set -A</b> <i>vname</i>  <i>value</i> ... .
The value of all non-negative
subscripts must be in the
range of
0 through 4,194,303.
A negative subscript is treated as an offset from the maximum
current index +1 so that -1 refers to the last element.
Indexed arrays can be declared with the
<b>-a</b> option to
<b>typeset.</b> Indexed arrays need not be declared.
Any reference to a variable
with a valid subscript is
legal and an array will be created if necessary.
<p>
An associative array is created with the
<b>-A</b> option to
<b>typeset.</b> A
<i>subscript</i> for an associative array is denoted by
a string enclosed between
<b>[</b> and
<b>]</b>. <p>
Referencing any array without a subscript
is equivalent to referencing the array with subscript 0.
<p>
The
<i>value</i> of a
<i>variable</i> may be assigned by writing:
<p>
<i>vname</i><b>=</b><i>value</i> [
<i>vname</i><b>=</b><i>value</i> ] ...
<p>
or
<p>
<i>vname</i><b>[</b><i>subscript</i><b>]=</b><i>value</i> [
<i>vname</i><b>[</b><i>subscript</i><b>]=</b><i>value</i> ] ...
<p>
Note that no space is allowed before or after the
<b>=</b>. <p>
<p>
A
<i>nameref</i> is a variable that is a reference to another variable.
A nameref is created with the
<b>-n</b> attribute of
<b>typeset</b>. The value of the variable at the time of the
<b>typeset</b> command becomes the variable that will be referenced whenever
the nameref variable is used.
The name of a nameref cannot contain a <b><font size="2">.</font></b>.
When a variable or function name contains a <b><font size="2">.</font></b>, and the portion
of the name up to the first <b><font size="2">.</font></b> matches the
name of a nameref, the variable referred to is obtained by
replacing the nameref portion with the name of the variable
referenced by the nameref.
If a nameref is used as the index of a <b>for</b> loop,
a name reference is established for each item in the list.
A nameref provides a convenient way to refer to the variable
inside a function whose name is passed as an argument to a function.
For example, if the name of a variable is passed as the first
argument to a function, the command
<p>
<b>typeset -n var=$1</b>
<p>
inside the function causes references and assignments to
<b>var</b> to be references and assignments to the variable whose
name has been passed to the function.
<p>
<p>
If any of the floating point attributes,
<b>-E</b>, <b>-F</b>, or
<b>-X</b>, or the integer attribute,
<b>-i</b>, is set for
<i>vname</i>, then the
<i>value</i> is subject to arithmetic evaluation as described below.
<p>
<p>
Positional parameters,
parameters denoted by a number,
may be assigned values with the
<b>set</b> special built-in command.
Parameter
<b>$0</b> is set from argument zero when the shell
is invoked.
<p>
<p>
The character
<b>$</b> is used to introduce substitutable
<i>parameters</i>. <table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The shell
reads all the characters from
<b>${</b> to the matching
<b>}</b> as part of the same word even if it contains
braces or metacharacters.
The value, if any, of the parameter is substituted.
The braces are required when
<i>parameter</i> is followed by a letter, digit, or underscore
that is not to be interpreted as part of its name,
when the variable name contains a <b><font size="2">.</font></b>.
The braces are also required when a variable is subscripted
unless it is part of an Arithmetic Expression
or a Conditional Expression.
If
<i>parameter</i> is one or more digits then it is a positional parameter.
A positional parameter of more than one digit must be
enclosed in braces.
If
<i>parameter</i> is
<b>*</b> or
<b>@</b>, then all the positional
parameters, starting with
<b>$1</b>, are substituted
(separated by a field separator character).
If an array
<i>vname</i> with subscript
<b>*</b> <b>@</b>, or of the form
<i>sub1</i> <b>..</b> <i>sub2</i>. is used,
then the value
for each of the
elements between
<i>sub1</i> and
<i>sub2</i> inclusive (or all elements for
<b>*</b> and
<b>@</b>) is substituted,
separated by
the first character of
the value of
<font size="-1"></font> <b>IFS</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>${#</b><i>parameter</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>parameter</i> is
<b>*</b> or
<b>@</b>, the number of positional parameters is substituted.
Otherwise, the length of the value of the
<i>parameter</i> is substituted.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${#</b><i>vname</i><b>[*]}</b>
<!-- Consumed .TP -->
<br />
<b>${#</b><i>vname</i><b>[@]}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The number of elements in the array
<i>vname</i> is substituted.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${@</b><i>vname</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Expands to the type name (See
<i>Type Variables </i> below) or attributes of the variable referred to by
<i>vname</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>${!</b><i>vname</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Expands to the name of the variable referred to by
<i>vname</i>. This will be
<i>vname</i> except when
<i>vname</i> is a name reference.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${!</b><i>vname</i><b>[</b><i>subscript</i><b>]}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Expands to name of the subscript unless
<i>subscript</i> is
<b>*</b>, <b>@</b>. or of the form
<i>sub1</i> <b>..</b> <i>sub2</i>. When
<i>subscript</i> is
<b>*</b>, the list of array subscripts for <i>vname</i>
is generated.
For a variable that is not an array, the value is 0 if the variable
is set.  Otherwise it is null.
When
<i>subscript</i> is
<b>@</b>, same as above, except that when used in double quotes,
each array subscript yields a separate
argument.
When
<i>subscript</i> is of the form
<i>sub1</i> <b>..</b> <i>sub2</i> it expands
to the list of subscripts between
<i>sub1</i> and
<i>sub2</i> inclusive using the same quoting rules as
<b>@</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>${!</b><i>prefix</i><b>*}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Expands to the names of the variables whose names begin with
<i>prefix</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>:-</b><i>word</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>parameter</i> is set and is non-null then substitute its value;
otherwise substitute
<i>word</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>:=</b><i>word</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>parameter</i> is not set or is null then set it to
<i>word</i>; the value of the parameter is then substituted.
Positional parameters may not be assigned to
in this way.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>:?</b><i>word</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>parameter</i> is set and is non-null then substitute its value;
otherwise, print
<i>word</i> and exit from the shell (if not interactive).
If
<i>word</i> is omitted then a standard message is printed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>:+</b><i>word</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>parameter</i> is set and is non-null then substitute
<i>word</i>; otherwise substitute nothing.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
In the above,
<i>word</i> is not evaluated unless it is
to be used as the substituted string,
so that, in the following example,
<b>pwd</b> is executed only if
<b>d</b> is not set or is null:
<p>
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
print ${d:-$(pwd)}
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
If the colon (
<b>: )</b> is omitted from the above expressions,
then the shell only checks whether
<i>parameter</i> is set or not.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>:</b><i>offset</i><b>:</b><i>length</i><b>}</b>
<!-- Consumed .TP -->
<br />
<b>${</b><i>parameter</i><b>:</b><i>offset</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Expands to the portion of the value of
<i>parameter</i> starting at the character (counting from
<b>0</b>) determined by expanding
<i>offset</i> as an arithmetic expression and consisting of the
number of characters determined by the arithmetic expression
defined by
<i>length.</i> In the second form, the remainder of the value is used.
If
A negative
<i>offset</i> counts backwards from the end of
<i>parameter</i>. Note that one or more
<i>blank</i>s is required in front of a minus sign
to prevent the shell from interpreting the operator as
<b>:-</b>. If
<i>parameter</i> is
<b>*</b> or
<b>@</b>, or is an array name indexed by
<b>*</b> or
<b>@</b>, then
<i>offset</i> and
<i>length</i> refer to the array index and number
of elements respectively.
A negative
<i>offset</i> is taken relative to one greater than the highest subscript
for indexed arrays.
The order for associate arrays is unspecified.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>#</b><i>pattern</i><b>}</b>
<!-- Consumed .TP -->
<br />
<b>${</b><i>parameter</i><b>##</b><i>pattern</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
the shell
<i>pattern</i> matches the beginning of the value of
<i>parameter</i>, then the value of
this expansion is the value of the
<i>parameter</i> with the matched portion deleted;
otherwise the value of this
<i>parameter</i> is substituted.
In the first form the smallest matching pattern is deleted and in the
second form the largest matching pattern is deleted.
When
<i>parameter</i> is
<b>@</b>, <b>*</b>, or an array variable with subscript
<b>@</b> or
<b>*</b>, the substring operation is applied to each element in turn.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>%</b><i>pattern</i><b>}</b>
<!-- Consumed .TP -->
<br />
<b>${</b><i>parameter</i><b>%%</b><i>pattern</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
the shell
<i>pattern</i> matches the end of the value of
<i>parameter</i>, then the value of
this expansion is the value of the
<i>parameter</i> with the matched part deleted;
otherwise substitute the value of
<i>parameter</i>. In the first form the smallest matching pattern is deleted and in the
second form the largest matching pattern is deleted.
When
<i>parameter</i> is
<b>@</b>, <b>*</b>, or an array variable with subscript
<b>@</b> or
<b>*</b>, the substring operation is applied to each element in turn.
</td></tr>
<tr valign="top"><td colspan="2">
<b>${</b><i>parameter</i><b>/</b><i>pattern</i><b>/</b><i>string</i><b>}</b>
<!-- Consumed .TP -->
<br />
<b>${</b><i>parameter</i><b>//</b><i>pattern</i><b>/</b><i>string</i><b>}</b>
<!-- Consumed .TP -->
<br />
<b>${</b><i>parameter</i><b>/#</b><i>pattern</i><b>/</b><i>string</i><b>}</b>
<!-- Consumed .TP -->
<br />
<b>${</b><i>parameter</i><b>/%</b><i>pattern</i><b>/</b><i>string</i><b>}</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Expands
<i>parameter</i> and replaces the longest match of
<i>pattern</i> with the given
<i>string.</i> Each occurrence of <b>&#92;</b><i>n</i> in
<i>string</i> is replaced by the portion of <i>parameter</i>
that matches the <i>n</i>-th sub-pattern.
In the first form,
only the first occurrence of
<i>pattern</i> is replaced.
In the second form,
each match for
<i>pattern</i> is replaced by the given
<i>string.</i> The third form restricts the pattern match to the beginning of the string
while the fourth form restricts the pattern match to the end of
the string.
When
<i>string</i> is null, the
<i>pattern</i> will be deleted and the
<b>/</b> in front of
<i>string</i> may be omitted.
When
<i>parameter</i> is
<b>@</b>, <b>*</b>, or an array variable with subscript
<b>@</b> or
<b>*</b>, the substitution operation is applied to each element in turn.
In this case, the
<i>string</i> portion of
<i>word</i> will be re-evaluated for each element.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
The following
parameters
are automatically set by the shell:
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>#</b> </td><td valign="bottom">
The number of positional parameters in decimal.
</td></tr>
<tr valign="top"><td>
<b>-</b> </td><td valign="bottom">
Options supplied to the shell on invocation or by
the
<b>set</b> command.
</td></tr>
<tr valign="top"><td>
<b>?</b> </td><td valign="bottom">
The decimal value returned by the last executed command.
</td></tr>
<tr valign="top"><td>
<b>$</b> </td><td valign="bottom">
The process number of this shell.
</td></tr>
<tr valign="top"><td>
<b>_</b> </td><td valign="bottom">
Initially, the value of
<b>_</b> is an absolute pathname of the shell or script being executed
as passed in the
<i>environment</i>. Subsequently it is assigned the last argument of the previous command.
This parameter is not set for commands which are asynchronous.
This parameter is also used to hold the name of the matching
<b></b> <font size="-1">MAIL</font> file when checking for mail.
While defining a compound variable or a type,
<b>_</b> is initialized as a reference to the compound variable or type.
When a discipline function is invoked,
<b>_</b> is initialized as a reference to the variable associated with
the call to this function.
Finally when
<b>_</b> is used as the name of the first variable of a type definition,
the new type is derived from the type of the first variable (See
<i>Type Variables </i> below.).
</td></tr>
<tr valign="top"><td>
<b>!</b> </td><td valign="bottom">
The process number of the last background command invoked or
the most recent job put in the background with the
<b>bg</b> built-in command.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.command</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
When processing a
<font size="-1"></font> <b>DEBUG</b> trap, this variable contains the current command line
that is about to run.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.edchar</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This variable contains the value of the keyboard character
(or sequence of characters if the first character is an ESC, ascii
<b>033</b>) that has
been entered when processing a
<b></b> <font size="-1">KEYBD</font> trap
(see
<i>Key Bindings</i> below).
If the value is changed as part of the trap action, then the new
value replaces the key (or key sequence) that caused the trap.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.edcol</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The character position of the cursor at the time of the most recent
<b></b> <font size="-1">KEYBD</font> trap.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.edmode</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The value is set to ESC when processing a
<b></b> <font size="-1">KEYBD</font> trap while in
<b>vi</b> insert mode.  (See
<i>Vi Editing Mode </i> below.)
Otherwise,
<b>.sh.edmode</b> is null when processing a
<b></b> <font size="-1">KEYBD</font> trap.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.edtext</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The characters in the input buffer at the time of the most recent
<b></b> <font size="-1">KEYBD</font> trap.
The value is null when not processing a
<b></b> <font size="-1">KEYBD</font> trap.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.file</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The pathname of the file than contains the current command.
</td></tr>
<tr valign="top"><td>
<b>.sh.fun</b> </td><td valign="bottom">
The name of the current function that is being executed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.level</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set to the current function depth.  This can be changed
inside a DEBUG trap and will set the context to the specified
level.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.lineno</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set during a DEBUG trap to the line number for the caller of
each function.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.match</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
An indexed array which stores the most recent match and sub-pattern
matches after conditional pattern matches that match and after
variables expansions using the operators
<b>#</b>, <b>%</b>, or
<b>/</b>. The
<b>0</b>-th element stores the complete match and the
<i>i</i>-th. element stores the
<i>i</i>-th submatch.
The
<b>.sh.match</b> variable
becomes unset when the variable that has expanded
is assigned a new value.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.name</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set to the name of the variable at the time that a
discipline function is invoked.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.subscript</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set to the name subscript of the variable at the time that a
discipline function is invoked.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.subshell</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The current depth for subshells and command substitution.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.value</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set to the value of the variable at the time that the
<b>set</b> or
<b>append</b> discipline function is invoked.
</td></tr>
<tr valign="top"><td colspan="2">
<b>.sh.version</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set to a value that identifies the version of this shell.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">KSH_VERSION</font> A name reference to
<b>.sh.version</b>. </td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">LINENO</font> The current line number within the script or
function being executed.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">OLDPWD</font> The previous working directory set by the
<b>cd</b> command.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">OPTARG</font> The value of the last option argument processed by the
<b>getopts</b> built-in command.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">OPTIND</font> The index of the last option argument processed by the
<b>getopts</b> built-in command.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">PPID</font> The process number of the parent of the shell.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">PWD</font> The present working directory set by the
<b>cd</b> command.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">RANDOM</font> Each time this variable is referenced, a random integer,
uniformly distributed between 0 and 32767, is generated.
The sequence of random numbers can be initialized by assigning
a numeric value to
<font size="-1"></font> <b>RANDOM</b>. </td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">REPLY</font> This variable is set by the
<b>select</b> statement and by
the
<b>read</b> built-in command when no arguments are supplied.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">SECONDS</font> Each time this variable is referenced, the number of
seconds since shell invocation is returned.
If this variable is
assigned a value, then the value returned upon reference will
be the value that was assigned plus the number of seconds since the assignment.
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>SHLVL</b> </td><td valign="bottom">
An integer variable the is incremented each time the shell
is invoked and is exported.
If
<font size="-1"></font> <b>SHLVL</b> is not in the environment when the shell is invoked, it is set
to 1.
</td></tr>
</table>
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
The following
variables
are used by the shell:
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">CDPATH</font> The search path for the
<b>cd</b> command.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">COLUMNS</font> If this variable is set,
the value is used to define the width of the edit window
for the shell edit modes and for printing
<b>select</b> lists.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">EDITOR</font> If the
<b></b> <font size="-1">VISUAL</font> variable is not set,
the value of this variable will be checked for the patterns
as described with
<b></b> <font size="-1">VISUAL</font> below and the corresponding editing option
(see Special Command
<b>set</b> below)
will be turned on.
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>ENV</b> </td><td valign="bottom">
If this variable is set, then
parameter expansion, command substitution, and arithmetic substitution
are performed on
the value to generate
the pathname of the script that will be
executed when the shell
is invoked interactively
(see
<i>Invocation</i> below).
This file is typically used for
<b>alias</b> and
<b>function</b> definitions.
The default value is <b>$HOME/.kshrc</b>.
On systems that support a system wide  <b>/etc/ksh.kshrc</b> initialization file,
if the filename generated by the expansion of
<font size="-1"></font> <b>ENV</b> begins with
<b>/./</b> or
<b>././</b> the system wide initialization file will not be executed.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">FCEDIT</font> Obsolete name for
the default editor name for the
<b>hist</b> command.
<b></b> <font size="-1">FCEDIT</font> is not used when
<b></b> <font size="-1">HISTEDIT</font> is set.
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>FIGNORE</b> </td><td valign="bottom">
A pattern that defines the set of filenames that will be
ignored when performing filename matching.
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>FPATH</b> </td><td valign="bottom">
The search path for function definitions.
The directories in this path are searched for a file with the same name
as the function or command when a function with the
<b>-u</b> attribute is referenced and when a command is not found.
If an executable file with the name of that command is found,
then it is read and executed
in the current environment.
Unlike
<font size="-1"></font> <b>PATH</b>, the current directory must be represented
explicitly by
<b>.</b> rather than by adjacent
<b>:</b> characters or a beginning or ending
<b>:</b>. </td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">HISTCMD</font> Number of the current command in the history file.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">HISTEDIT</font> Name for
the default editor name for the
<b>hist</b> command.
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>HISTFILE</b> </td><td valign="bottom">
If this variable is set when the shell is invoked, then
the value is the pathname of the file that will be
used to store the command history (see
<i>Command Re-entry</i> below).
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>HISTSIZE</b> </td><td valign="bottom">
If this variable is set when the shell is invoked, then
the number of previously entered commands that
are accessible by this shell
will be greater than or equal to this number.
The default is 512.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">HOME</font> The default argument (home directory) for the
<b>cd</b> command.
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>IFS</b> </td><td valign="bottom">
Internal field separators,
normally
<b>space</b>, <b>tab</b>, and
<b>new-line</b> that are used to separate the results of
command substitution or parameter expansion
and to separate fields with the built-in command
<b>read</b>. The first character of the
<font size="-1"></font> <b>IFS</b> variable is used to separate arguments for the
<b></b> "$*"
substitution (see
<i>Quoting</i> below).
Each single occurrence of
an
<font size="-1"></font> <b>IFS</b> character in the string to be split,
that is not in the <i>isspace</i> character class, and any
adjacent characters in
<font size="-1"></font> <b>IFS</b> that are in the <i>isspace</i> character class, delimit a field.
One or more
characters in
<font size="-1"></font> <b>IFS</b> that belong to the <i>isspace</i> character class,
delimit a field.
In addition, if the same <i>isspace</i> character appears
consecutively inside
<font size="-1"></font> <b>IFS</b>, this character is treated as if it were not in the <i>isspace</i>
class, so that if
<font size="-1"></font> <b>IFS</b> consists of two
<b>tab</b> characters,
then two adjacent
<b>tab</b> characters delimit a null field.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">JOBMAX</font> This variable defines the maximum number running background jobs
that can run at a time.  When this limit is reached, the
shell will wait for a job to complete before staring a new job.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">LANG</font> This variable determines the locale category for any
category not specifically selected with a variable
starting with
<b></b> <font size="-1">LC_</font> or
<font size="-1"></font> <b>LANG</b>. </td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">LC_ALL</font> This variable overrides the value of the
<b></b> <font size="-1">LANG</font> variable and any other
<b></b> <font size="-1">LC_</font> variable.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">LC_COLLATE</font> This variable determines the locale category for character
collation information.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">LC_CTYPE</font> This variable determines the locale category for character
handling functions.
It determines the character classes for pattern matching (see
<i>File Name Generation</i> below).
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">LC_NUMERIC</font> This variable determines the locale category for the
decimal point character.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">LINES</font> If this variable is set,
the value is used to determine the column length for printing
<b>select</b> lists.
Select lists will print vertically until about two-thirds of
<b></b> <font size="-1">LINES</font> lines are filled.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">MAIL</font> If this variable is set to the name of a mail file
<i>and</i> the
<b></b> <font size="-1">MAILPATH</font> variable is not set,
then the shell informs the user of arrival of mail
in the specified file.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">MAILCHECK</font> This variable specifies how often (in seconds) the
shell will check for changes in the modification time
of any of the files specified by the
<b></b> <font size="-1">MAILPATH</font> or
<b></b> <font size="-1">MAIL</font> variables.
The default value is 600 seconds.
When the time has elapsed
the shell will check before issuing the next prompt.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">MAILPATH</font> A colon (
<b>:</b> )
separated list of file names.
If this variable is set,
then the shell informs the user of
any modifications to the specified files
that have occurred within the last
<b></b> <font size="-1">MAILCHECK</font> seconds.
Each file name can be followed by a
<b>?</b> and a message that will be printed.
The message will undergo parameter expansion, command substitution,
and arithmetic substitution
with the variable
<b>$_</b> defined as the name of the file that has changed.
The default message is
<i>you have mail in $_.</i> </td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">PATH</font> The search path for commands (see
<i>Execution</i> below).
The user may not change
<b><font size="-1">PATH</font></b> if executing under
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
(except in
<b>.profile).</b> </td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>PS1</b> </td><td valign="bottom">
The value of this variable is expanded for parameter
expansion, command substitution, and arithmetic substitution to define the
primary prompt string which by default is
&#145;&#145;<b>$</b>&#146;&#146;. The character
<b>!</b> in the primary prompt string is replaced by the
<i>command</i> number (see
<i>Command Re-entry</i> below).
Two successive occurrences of
<b>!</b> will produce a single
<b>!</b> when the prompt string is printed.
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>PS2</b> </td><td valign="bottom">
Secondary prompt string, by default
&#145;&#145;<b>&gt; </b>&#146;&#146;. </td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>PS3</b> </td><td valign="bottom">
Selection prompt string
used within a
<b>select</b> loop, by default
&#145;&#145;<b>#? </b>&#146;&#146;. </td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>PS4</b> </td><td valign="bottom">
The value of this variable is expanded for parameter evaluation,
command substitution, and arithmetic substitution
and precedes each line of an execution trace.
By default,
<font size="-1"></font> <b>PS4</b> is
&#145;&#145;<b>+ </b>&#146;&#146;. In addition
when
<font size="-1"></font> <b>PS4</b> is unset,
the execution trace prompt is also
&#145;&#145;<b>+ </b>&#146;&#146;. </td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>SHELL</b> </td><td valign="bottom">
The pathname of the
<i>shell</i> is kept in the environment.
At invocation, if the basename of this variable is
<b>rsh</b>, <b>rksh</b>, or
<b>krsh</b>, then the shell becomes restricted.
If it is
<b>pfsh</b> or
<b>pfksh</b>, then the shell becomes a profile shell (see
<b>pfexec</b>(1)).
</td></tr>
<tr valign="top"><td>
<font size="-1"></font> <b>TIMEFORMAT</b> </td><td valign="bottom">
The value of this parameter is used as a format string specifying
how the timing information for pipelines prefixed with the
<b>time</b> reserved word should be displayed.
The <b>%</b> character introduces a format sequence that is
expanded to a time value or other information.
The format sequences and their meanings are as follows.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>%%</b> </td><td valign="bottom">
A literal <b>%</b>.
</td></tr>
<tr valign="top"><td>
<b>%[</b><i>p</i>][l]R </td><td valign="bottom">
The elapsed time in seconds.
</td></tr>
<tr valign="top"><td>
<b>%[</b><i>p</i>][l]U </td><td valign="bottom">
The number of CPU seconds spent in user mode.
</td></tr>
<tr valign="top"><td>
<b>%[</b><i>p</i>][l]S </td><td valign="bottom">
The number of CPU seconds spent in system mode.
</td></tr>
<tr valign="top"><td>
<b>%P</b> </td><td valign="bottom">
The CPU percentage, computed as (U + S) / R.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=10%>

</td><td>
The brackets denote optional portions.
The optional <i>p</i> is a digit specifying the <i>precision</i>,
the number of fractional digits after a decimal point.
A value of 0 causes no decimal point or fraction to be output.
At most three places after the decimal point can be displayed;
values of <i>p</i> greater than 3 are treated as 3.
If <i>p</i> is not specified, the value 3 is used.
</td></tr>
<tr valign="top"><td width=10%>

</td><td>
The optional <b>l</b> specifies a longer format, including
hours if greater than zero,
minutes, and seconds of the form <i>HH</i>h<i>MM</i>m<i>SS</i>.<i>FF</i>s.
The value of <i>p</i> determines whether or not the fraction is
included.
</td></tr>
<tr valign="top"><td width=10%>

</td><td>
All other characters are output without change and a trailing
newline is added.
If unset, the default value, <b>$&#146;&#92;nreal&#92;t%2lR&#92;nuser&#92;t%2lU&#92;nsys&nbsp;&nbsp;&nbsp;&nbsp;%2lS&#146;</b>,
is used.  If the value is null, no timing information is displayed.
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">TMOUT</font> If set to a value greater than zero,
<b></b> <font size="-1">TMOUT</font> will be the default timeout value for the
<b>read</b> built-in command.
The
<b>select</b> compound command terminates after
<b></b> <font size="-1">TMOUT</font> seconds when input is from a terminal.
Otherwise,
the shell will terminate if a line is not entered within
the prescribed number of seconds while reading from a terminal.
(Note that the shell can be compiled with a maximum bound
for this value which cannot be exceeded.)
</td></tr>
<tr valign="top"><td>
<b></b> </td><td valign="bottom">
<font size="-1">VISUAL</font> If the value of this variable matches the pattern
<i>*[Vv][Ii]*</i>, then the
<b>vi</b> option
(see Special Command
<b>set</b> below)
is turned on.
If the value matches the pattern
<i>*gmacs* ,</i> the
<b>gmacs</b> option is turned on.
If the value matches the pattern
<i>*macs*</i>, then the
<b>emacs</b> option
will be turned on.
The value of
<b></b> <font size="-1">VISUAL</font> overrides the value of
<b></b> <font size="-1">EDITOR.</font> </td></tr>
</table>
</td></tr>
<!-- PP ends table -->
</table>
The shell gives default values to
<b><font size="-1">PATH</font></b>, <b><font size="-1">PS1</font></b>, <b><font size="-1">PS2</font></b>,
<b><font size="-1">PS3</font></b>, <b><font size="-1">PS4</font></b>, <b><font size="-1">MAILCHECK</font></b>, <b><font size="-1">FCEDIT</font></b>,
<b><font size="-1">TMOUT</font></b> and <b><font size="-1">IFS</font></b>,
while
<font size="-1"></font> <b>HOME</b>, <font size="-1"></font> <b>SHELL</b>, <font size="-1"></font> <b>ENV</b>, and
<font size="-1"></font> <b>MAIL</b> are
not set at all by the shell (although
<font size="-1"></font> <b>HOME</b> <i>is</i> set by
<b>login</b>(1)).
On some systems
<font size="-1"></font> <b>MAIL</b> and
<font size="-1"></font> <b>SHELL</b> are also
set by
<b>login</b>(1).
<h2><i>Field Splitting.</i></h2>
After parameter expansion and command substitution,
the results of substitutions are scanned for the field separator
characters (those found in
<font size="-1"></font> <b>IFS</b> )
and split into distinct fields where such characters are found.
Explicit null fields (<b>""</b> or <b>&#39;&#39;</b>) are retained.
Implicit null fields
(those resulting from
<i>parameters</i> that have no values or command substitutions with no output) are removed.
<p>
If the
<b>braceexpand</b> (<b>-B</b>) option is set then each of the fields resulting from
<font size="-1"></font> <b>IFS</b> are checked to see if they contain one or more of the brace patterns
<b>{*,*}</b>, <b>{</b><i>l1</i><b>..</b><i>l2</i><b>}</b> ,
<b>{</b><i>n1</i><b>..</b><i>n2</i><b>}</b> ,
<b>{</b><i>n1</i><b>..</b><i>n2</i><b>%</b> <i>fmt</i><b>}</b> ,
<b>{</b><i>n1</i><b>..</b><i>n2</i> <b>..</b><i>n3</i><b>}</b> , or
<b>{</b><i>n1</i><b>..</b><i>n2</i> <b>..</b><i>n3</i><b>%</b><i>fmt</i><b>}</b> , where
<b>*</b> represents any character,
<i>l1</i>,<i>l2</i> are letters and
<i>n1</i>,<i>n2</i>,<i>n3</i> are signed numbers and
<i>fmt</i> is a format specified as used by
<b>printf</b>. In each case, fields are created
by prepending the characters before the
<b>{</b> and appending the characters after the
<b>}</b> to each of the strings generated by the characters between
the
<b>{</b> and
<b>}</b>. The resulting fields are checked to see if they have any
brace patterns.
<p>
In the first form, a field is created for each string between
<b>{</b> and
<b>,</b>, between
<b>,</b> and
<b>,</b>, and between
<b>,</b> and
<b>}</b>. The string represented by
<b>*</b> can contain embedded matching
<b>{</b> and
<b>}</b> without quoting.
Otherwise, each
<b>{</b> and
<b>}</b> with
<b>*</b> must be quoted.
<p>
In the seconds form,
<i>l1</i> and
<i>l2</i> must both be either upper case or both be lower case characters
in the C locale.  In this case a field is created for each character
from
<i>l1</i> thru
<i>l2</i>. <p>
In the remaining forms, a field is created for each number starting at
<i>n1</i> and continuing until it reaches
<i>n2</i> incrementing
<i>n1</i> by
<i>n3</i>. The cases where
<i>n3</i> is not specified behave as if
<i>n3</i> where
<b>1</b> if
<i>n1</i><b>&lt;=</b><i>n2</i> and
<b>-1</b> otherwise.
If forms which specify
<b>%</b><i>fmt</i> any format flags, widths and precisions can be specified
and
<i>fmt</i> can end in any of the specifiers
<b>cdiouxX</b>. For example,
<b>{a,z}{1..5..3%02d}{b..c}x</b> expands to the 8 fields,
<b>a01bx</b>, <b>a01cx</b>, <b>a04bx</b>, <b>a04cx</b>, <b>z01bx</b>, <b>z01cx</b>, <b>z04bx</b> and
<b>z4cx</b>. <h2><i>File Name Generation.</i></h2>
Following splitting, each field is scanned for the characters
<b>*</b>, <b>?</b>, <b>(</b>, and
<b>[</b> unless the
<b>-f</b> option has been set.
If one of these characters appears,
then the word is regarded as a
<i>pattern</i>. Each file name component that contains any pattern character
is replaced with a lexicographically sorted set of names
that matches the pattern
from
that directory.
If no file name is found that matches the pattern, then
that component of the filename is left unchanged unless
the pattern is prefixed with
<b>&#126;(N)</b> in which case it is removed as described below.
If
<font size="-1"></font> <b>FIGNORE</b> is set,
then each file name component
that matches the pattern defined by the value of
<font size="-1"></font> <b>FIGNORE</b> is ignored when generating the matching filenames.
The names
<b>.</b> and
<b>..</b> are also ignored.
If
<font size="-1"></font> <b>FIGNORE</b> is not set,
the character
<b>.</b> at the start of each file name component
will be ignored unless the first character of the pattern
corresponding to this component is the character
<b>.</b> itself.
Note, that for other
uses of pattern matching the
<b>/</b> and
<b>.</b> are not treated specially.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>*</b> </td><td valign="bottom">
Matches any string, including the null string.
When used for filename expansion,
if the
<b>globstar</b> option is on, two adjacent
<b>*</b>&#146;s by itself
will match all files and zero or more directories
and subdirectories.
If followed by a
<b>/</b> then only directories and subdirectories will match.
</td></tr>
<tr valign="top"><td>
<b>?</b> </td><td valign="bottom">
Matches any single character.
</td></tr>
<tr valign="top"><td>
<b>[</b>...<b>]</b> </td><td valign="bottom">
Matches any one of the enclosed characters.
A pair of characters separated by
<b>-</b> matches any
character lexically between the pair, inclusive.
If the first character following the opening
<b>[</b> is a
<b>!</b> then any character not enclosed is matched.
A
<b>-</b> can be included in the character set by putting it as the
first or last character.
<!-- Need break --><br />
Within
<b>[</b> and
<b>]</b>, character classes can be specified with the syntax
<b>[:</b><i>class</i><b>:]</b>
where class is one of the following classes defined in the ANSI-C standard:
(Note that <b>word</b> is equivalent to <b>alnum</b> plus the character <b>_</b>).
</td></tr>
<!-- PP ends table -->
</table>
<b></b> <!-- ignored unsupported tag .if -->
alnum   alpha   blank   cntrl   digit   graph   lower   print   punct   space   upper   word    xdigit
<!-- Need break --><br />
Within
<b>[</b> and
<b>]</b>, an equivalence class can be specified with the syntax
<b>[=</b><i>c</i><b>=]</b>
which matches all characters with the same primary
collation weight (as defined by the current locale) as
the character <i>c</i>.
<!-- Need break --><br />
Within
<b>[</b> and
<b>]</b>, <b>[.</b><i>symbol</i><b>.]</b>
matches the collating symbol <i>symbol</i>.
A
<i>pattern-list</i> is a list of one or more patterns separated from each other
with a
<b>&</b> or
<b>|</b>. A
<b>&</b> signifies that all patterns must be matched whereas
<b>|</b> requires that only one pattern be matched.
Composite patterns can be formed with one or more of the following sub-patterns:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>?(</b><i>pattern-list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Optionally matches any one of the given patterns.
</td></tr>
<tr valign="top"><td colspan="2">
<b>*(</b><i>pattern-list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Matches zero or more occurrences of the given patterns.
</td></tr>
<tr valign="top"><td colspan="2">
<b>+(</b><i>pattern-list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Matches one or more occurrences of the given patterns.
</td></tr>
<tr valign="top"><td colspan="2">
<b>{</b><i>n</i><b>}</b>(<i>pattern-list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Matches <i>n</i> occurrences of the given patterns.
</td></tr>
<tr valign="top"><td colspan="2">
<b>{</b><i>m</i><b>,</b><i>n</i><b>}</b>(<i>pattern-list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Matches from <i>m</i> to <i>n</i> occurrences of the given patterns.
If <i>m</i> is omitted, <b>0</b> will be used.  If <i>n</i>
is omitted at least <i>m</i> occurrences will be matched.
</td></tr>
<tr valign="top"><td colspan="2">
<b>@(</b><i>pattern-list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Matches exactly one of the given patterns.
</td></tr>
<tr valign="top"><td colspan="2">
<b>!(</b><i>pattern-list</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Matches anything except one of the given patterns.
</td></tr>
</table>
By default, each pattern, or sub-pattern will match the
longest string possible consistent with generating
the longest overall match.  If more than one match is
possible, the one starting closest to the beginning
of the string will be chosen.   However, for each of the above
compound patterns a <b>-</b> can be inserted in front of the <b>(</b>
to cause the shortest match to the specified <i>pattern-list</i>
to be used.
<p>
When <i>pattern-list</i> is contained within parentheses,
the backslash character <b>&#92;</b> is treated specially even
when inside a character class.   All ANSI-C character escapes are
recognized and match the specified character.  In addition
the following escape sequences are recognized:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>&#92;d</b> </td><td valign="bottom">
Matches any character in the <b>digit</b> class.
</td></tr>
<tr valign="top"><td>
<b>&#92;D</b> </td><td valign="bottom">
Matches any character not in the <b>digit</b> class.
</td></tr>
<tr valign="top"><td>
<b>&#92;s</b> </td><td valign="bottom">
Matches any character in the <b>space</b> class.
</td></tr>
<tr valign="top"><td>
<b>&#92;S</b> </td><td valign="bottom">
Matches any character not in the <b>space</b> class.
</td></tr>
<tr valign="top"><td>
<b>&#92;w</b> </td><td valign="bottom">
Matches any character in the <b>word</b> class.
</td></tr>
<tr valign="top"><td>
<b>&#92;W</b> </td><td valign="bottom">
Matches any character not in the <b>word</b> class.
</td></tr>
</table>
<p>
A pattern of the form
<b>%(</b><i>pattern-pair</i>(s)<b>)</b>
is a sub-pattern that
can be used to match nested character expressions.
Each
<i>pattern-pair</i> is a two character sequence which cannot contain
<b>&</b> or
<b>|</b>. The first
<i>pattern-pair</i> specifies the starting and ending characters for the match.
Each subsequent
<i>pattern-pair</i> represents the beginning and ending characters of a nested group that
will be skipped over when counting starting and ending character matches.
The behavior is unspecified when the first character of a
<i>pattern-pair</i> is alpha-numeric
except for the following:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>D</b> </td><td valign="bottom">
Causes the ending character to terminate the search for this pattern without
finding a match.
</td></tr>
<tr valign="top"><td>
<b>E</b> </td><td valign="bottom">
Causes the ending character to be interpreted as an escape character.
</td></tr>
<tr valign="top"><td>
<b>L</b> </td><td valign="bottom">
Causes the ending character to be interpreted as a quote character
causing all characters to be ignored when looking for a match.
</td></tr>
<tr valign="top"><td>
<b>Q</b> </td><td valign="bottom">
Causes the ending character to be interpreted as a quote character
causing all characters other than any escape character to be ignored
when looking for a match.
</td></tr>
</table>
Thus,
<b>%({}Q"E&#92;)</b>,
matches characters starting at
<b>{</b> until the matching
<b>}</b> is found not counting any
<b>{</b> or
<b>}</b> that is inside a double quoted string or preceded by the escape character
<b>&#92;</b>. Without the
<b>{}</b> this pattern matches any C language string.
<p>
Each sub-pattern in a composite pattern is numbered,
starting at 1, by the location of the <b>(</b> within
the pattern.
The sequence <b>&#92;</b><i>n</i>, where <i>n</i>
is a single digit and <b>&#92;</b><i>n</i> comes after
the <i>n</i>-th. sub-pattern,
matches the same string as the sub-pattern itself.
<p>
Finally a pattern can contain sub-patterns of the form
<b>&#126;(</b><i>options</i><b>:</b><i>pattern-list</i><b>)</b>,
where either <i>options</i> or <b>:</b><i>pattern-list</i>
can be omitted.  Unlike the other compound patterns,
these sub-patterns are not counted in the numbered sub-patterns.
If <i>options</i> is present, it can consist of one or more
of the following:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>+</b> </td><td valign="bottom">
Enable the following options.  This is the default.
</td></tr>
<tr valign="top"><td>
<b>-</b> </td><td valign="bottom">
Disable the following options.
</td></tr>
<tr valign="top"><td>
<b>E</b> </td><td valign="bottom">
The remainder of the pattern uses extended regular expression syntax
like the
<b>egrep</b>(1)
command.
</td></tr>
<tr valign="top"><td>
<b>F</b> </td><td valign="bottom">
The remainder of the pattern uses
<b>fgrep</b>(1)
expression syntax.
</td></tr>
<tr valign="top"><td>
<b>G</b> </td><td valign="bottom">
The remainder of the pattern uses basic regular expression syntax
like the
<b>grep</b>(1)
command.
</td></tr>
<tr valign="top"><td>
<b>K</b> </td><td valign="bottom">
The remainder of the pattern uses shell pattern syntax.
This is the default.
</td></tr>
<tr valign="top"><td>
<b>N</b> </td><td valign="bottom">
This is ignored.  However, when it is the first letter and is
used with file name generation, and no matches occur,
the file pattern expands to the empty string.
</td></tr>
<tr valign="top"><td>
<b>i</b> </td><td valign="bottom">
Treat the match as case insensitive.
</td></tr>
<tr valign="top"><td>
<b>g</b> </td><td valign="bottom">
File the longest match (greedy).  This is the default.
</td></tr>
<tr valign="top"><td>
<b>l</b> </td><td valign="bottom">
Left anchor the pattern.  This is the default for
<b>K</b> style patterns.
</td></tr>
<tr valign="top"><td>
<b>r</b> </td><td valign="bottom">
Right anchor the pattern.  This is the default for
<b>K</b> style patterns.
</td></tr>
</table>
If both <i>options</i> and <b>:</b><i>pattern-list</i>
are specified, then the options apply only to  <i>pattern-list</i>.
Otherwise, these options remain in effect until they are disabled
by a subsequent <b>&#126;(</b><i>...</i><b>)</b> or at the end of
the sub-pattern containing <b>&#126;(</b><i>...</i><b>)</b>.
<h2><i>Quoting.</i></h2>
Each of the
<i>metacharacters</i> listed earlier (see
<i>Definitions</i> above)
has a special meaning to the shell
and causes termination of a word unless quoted.
A character may be
<i>quoted</i> (i.e., made to stand for itself)
by preceding
it with a
<b>&#92;</b>. The pair
<b>&#92;new-line</b> is removed.
All characters enclosed between a pair of single quote marks
(<b>&#39;&#39;</b>)
that is not preceded by a
<b>$</b> are quoted.
A single quote cannot appear within the single quotes.
A single quoted string preceded by an unquoted
<b>$</b> is processed as an ANSI-C string
except for the following:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>&#92;0</b> </td><td valign="bottom">
Causes the remainder of the string to be ignored.
</td></tr>
<tr valign="top"><td>
<b>&#92;E</b> </td><td valign="bottom">
Equivalent to the escape character
(ascii
<b>033</b>), </td></tr>
<tr valign="top"><td>
<b>&#92;e</b> </td><td valign="bottom">
Equivalent to the escape character
(ascii
<b>033</b>), </td></tr>
<tr valign="top"><td>
<b>&#92;c</b><i>x</i> </td><td valign="bottom">
Expands to the character control-<i>x</i>.
</td></tr>
<tr valign="top"><td colspan="2">
<b>&#92;C[.</b><i>name</i><b>.]</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Expands to the collating element <i>name</i>.
</td></tr>
<!-- PP ends table -->
</table>
Inside double quote marks
(<b>""</b>),
parameter and command substitution occur and
<b>&#92;</b> quotes the characters
<b>&#92;</b>, <b><font size="2">&#96;</font></b>, <b>"</b>,
and
<b>$</b>. A
<b>$</b> in front of a double quoted string will be ignored
in the "C" or "POSIX" locale, and may cause
the string to be replaced by a locale specific string otherwise.
The meaning of
<b>$*</b> and
<b>$@</b> is identical when not quoted or when used as a variable assignment value
or as a file name.
However, when used as a command argument,
<b></b> "$*"
is equivalent to
<b>"$1</b><i>d</i><b>$2</b><i>d</i>...<b>"</b>,
where
<i>d</i> is the first character of the
<font size="-1"></font> <b>IFS</b> variable, whereas
<b></b> "$@"
is equivalent to
<b></b> "$1"
<b></b> "$2"
&#46;...
Inside grave quote marks
(<b><font size="2">&#96;</font><font size="2">&#96;</font></b>),
<b>&#92;</b> quotes the characters
<b>&#92;</b>, <b><font size="2">&#96;</font></b>, and
<b>$</b>. If the grave quotes occur within double quotes, then
<b>&#92;</b> also quotes the character
<b>"</b>.
<p>
The special meaning of reserved words or aliases can be removed by quoting any
character of the reserved word.
The recognition of function names or built-in command names listed below
cannot be altered by quoting them.
<h2><i>Arithmetic Evaluation.</i></h2>
The shell performs arithmetic evaluation for
arithmetic substitution, to evaluate an arithmetic command,
to evaluate an indexed array subscript,
and to evaluate arguments to
the built-in commands
<b>shift</b> and
<b>let</b>. Evaluations are performed using
double precision floating point
arithmetic or long double precision floating point for
systems that provide this data type.
Floating point constants follow the ANSI-C programming language
floating point conventions.
Integer constants follow the ANSI-C programming language
integer constant conventions although only single byte
character constants are recognized and character casts
are not recognized.
In addition constants can be of the form
[<i>base</i><b>#</b>]<i>n</i>
where
<i>base</i> is a decimal number between two and sixty-four
representing the arithmetic base
and
<i>n</i> is a number in that base.
The digits above 9 are represented
by the lower case letters, the upper case letters,
<b>@</b>, and
<b>_</b> respectively.
For bases less than or equal to 36, upper and lower case
characters can be used interchangeably.
<p>
An arithmetic expression uses the same syntax, precedence, and
associativity of
expression as the C language.
All the C language operators
that apply to floating point quantities can be used.
In addition, the operator
<b>**</b> can be used for exponentiation.
It has higher precedence than multiplication and is left associative.
In addition, when the value of an arithmetic variable
or sub-expression can be represented as a long integer,
all C language integer arithmetic operations can be performed.
Variables can be referenced by name within an arithmetic expression
without using the parameter expansion syntax.
When a variable is referenced, its value is evaluated as
an arithmetic expression.
<p>
Any of the following math library functions that are in the C math library
can be used within an arithmetic expression:
<p>
<b></b> <!-- ignored unsupported tag .if -->
abs   acos   acosh   asin   asinh   atan   atan2   atanh   cbrt   copysign   cos   cosh   erf  erfc   exp   exp2   expm1   fabs   fdim   finite   floor  fma   fmax   fmod   j0      j1      jn      hypot   ilogb   int   isinf   isnan   lgamma   log   log2   logb   nearbyint   nextafter   nexttoward  pow   rint   round   sin   sinh   sqrt   tan   tanh   tgamma   trunc   y0      y1      yn
<p>
An internal representation of a
<i>variable</i> as a double precision floating point can be specified with the
<b>-E</b> [<i>n</i>],
<b>-F</b> [<i>n</i>],
or
<b>-X</b> [<i>n</i>]
option of the
<b>typeset</b> special built-in command.
The
<b>-E</b> option causes the expansion of the value to be represented using
scientific notation when it is expanded.
The optional option argument
<i>n</i> defines the number of significant figures.
The
<b>-F</b> option causes the expansion to be represented as a floating decimal number
when it is expanded.
The
<b>-X</b> option cause the expansion to be represented using the
<b>%a</b> format defined by ISO C-99.
The optional option argument
<i>n</i> defines the number of places after the decimal (or radix) point in this case.
<p>
An internal integer representation of a
<i>variable</i> can be specified with the
<b>-i</b> [<i>n</i>]
option of the
<b>typeset</b> special built-in command.
The optional option argument
<i>n</i> specifies an arithmetic base to be used when expanding the variable.
If you do not specify an arithmetic base,
base 10 will be used.
<p>
Arithmetic evaluation is performed on the value of each
assignment to a variable with the
<b>-E</b>, <b>-F</b>, <b>-X</b>, or
<b>-i</b> attribute.
Assigning a floating point number to a
variable whose type is an integer causes the fractional
part to be truncated.
<p>
<h2><i>Prompting.</i></h2>
When used interactively,
the shell prompts with the value of
<font size="-1"></font> <b>PS1</b> after expanding it for parameter expansion, command substitution, and
arithmetic substitution,
before reading a command.
In addition, each single
<b>!</b> in the prompt is replaced by the command number.
A
<b>!!</b> is required to place
<b>!</b> in the prompt.
If at any time a new-line is typed and further input is needed
to complete a command, then the secondary prompt
(i.e., the value of
<b><font size="-1">PS2</font></b>) is issued.
<h2><i>Conditional Expressions.</i></h2>
A
<i>conditional expression</i> is used with the
<b>[[</b> compound command to test attributes of files and to compare
strings.
Field splitting and file name generation are
not performed on the words between
<b>[[</b> and
<b>]]</b>. Each expression can be constructed from one or more
of the following unary or binary expressions:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>string</i>
</td><td valign="bottom">
True, if
<i>string</i> is not null.
</td></tr>
<tr valign="top"><td>
<b>-a</b> <i>file</i>
</td><td valign="bottom">
Same as <b>-e</b> below.
This is obsolete.
</td></tr>
<tr valign="top"><td>
<b>-b</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is a block special file.
</td></tr>
<tr valign="top"><td>
<b>-c</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is a character special file.
</td></tr>
<tr valign="top"><td>
<b>-d</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is a directory.
</td></tr>
<tr valign="top"><td>
<b>-e</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists.
</td></tr>
<tr valign="top"><td>
<b>-f</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is an ordinary file.
</td></tr>
<tr valign="top"><td>
<b>-g</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and it has its setgid bit set.
</td></tr>
<tr valign="top"><td>
<b>-k</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and it has its sticky bit set.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-n</b> <i>string</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if length of
<i>string</i> is non-zero.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-o</b> <b>?</b><i>option</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if option named
<i>option</i> is a valid option name.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-o</b> <i>option</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if option named
<i>option</i> is on.
</td></tr>
<tr valign="top"><td>
<b>-p</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is a fifo special file or a pipe.
</td></tr>
<tr valign="top"><td>
<b>-r</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is readable by current process.
</td></tr>
<tr valign="top"><td>
<b>-s</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and has size greater than zero.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-t</b> <i>fildes</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if file descriptor number
<i>fildes</i> is open and associated with a terminal device.
</td></tr>
<tr valign="top"><td>
<b>-u</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and it has its setuid bit set.
</td></tr>
<tr valign="top"><td>
<b>-w</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is writable by current process.
</td></tr>
<tr valign="top"><td>
<b>-x</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is executable by current process.
If
<i>file</i> exists and is a directory, then true if the current process
has permission to search in the directory.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-z</b> <i>string</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if length of
<i>string</i> is zero.
</td></tr>
<tr valign="top"><td>
<b>-L</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is a symbolic link.
</td></tr>
<tr valign="top"><td>
<b>-h</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is a symbolic link.
</td></tr>
<tr valign="top"><td>
<b>-N</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and the modification time is greater than the last access time.
</td></tr>
<tr valign="top"><td>
<b>-O</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is owned by the effective user id of this process.
</td></tr>
<tr valign="top"><td>
<b>-G</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and its group matches the effective group id of this process.
</td></tr>
<tr valign="top"><td>
<b>-S</b> <i>file</i>
</td><td valign="bottom">
True, if
<i>file</i> exists and is a socket.
</td></tr>
<tr valign="top"><td colspan="2">
<i>file1</i> <b>-nt</b> <i>file2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>file1</i> exists and
<i>file2</i> does not, or
<i>file1</i> is newer than
<i>file2</i>. </td></tr>
<tr valign="top"><td colspan="2">
<i>file1</i> <b>-ot</b> <i>file2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>file2</i> exists and
<i>file1</i> does not, or
<i>file1</i> is older than
<i>file2</i>. </td></tr>
<tr valign="top"><td colspan="2">
<i>file1</i> <b>-ef</b> <i>file2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>file1</i> and
<i>file2</i> exist and refer to the same file.
</td></tr>
<tr valign="top"><td colspan="2">
<i>string</i> <b>==</b> <i>pattern</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>string</i> matches
<i>pattern</i>. Any part of
<i>pattern</i> can be quoted to cause it to be matched as a string.
With a successful match to a pattern, the
<b>.sh.match</b> array variable will contain the match and sub-pattern matches.
</td></tr>
<tr valign="top"><td colspan="2">
<i>string</i> <b>=</b> <i>pattern</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Same as <b>==</b> above, but is obsolete.
</td></tr>
<tr valign="top"><td colspan="2">
<i>string</i> <b>!=</b> <i>pattern</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>string</i> does not match
<i>pattern</i>. When the
<i>string</i> matches the
<i>pattern</i> the
<b>.sh.match</b> array variable will contain the match and sub-pattern matches.
</td></tr>
<tr valign="top"><td colspan="2">
<i>string</i> <b>=&#126;</b> <i>ere</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True if
<i>string</i> matches the pattern
<b>&#126;(E)</b><i>ere</i> where
<i>ere</i> is an extended regular expression.
</td></tr>
<tr valign="top"><td colspan="2">
<i>string1</i> <b>&lt;</b> <i>string2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>string1</i> comes before
<i>string2</i> based on ASCII value of their characters.
</td></tr>
<tr valign="top"><td colspan="2">
<i>string1</i> <b>&gt;</b> <i>string2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>string1</i> comes after
<i>string2</i> based on ASCII value of their characters.
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
The following obsolete arithmetic comparisons are also permitted:
</td></tr>
<tr valign="top"><td colspan="2">
<i>exp1</i> <b>-eq</b> <i>exp2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>exp1</i> is equal to
<i>exp2</i>. </td></tr>
<tr valign="top"><td colspan="2">
<i>exp1</i> <b>-ne</b> <i>exp2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>exp1</i> is not equal to
<i>exp2</i>. </td></tr>
<tr valign="top"><td colspan="2">
<i>exp1</i> <b>-lt</b> <i>exp2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>exp1</i> is less than
<i>exp2</i>. </td></tr>
<tr valign="top"><td colspan="2">
<i>exp1</i> <b>-gt</b> <i>exp2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>exp1</i> is greater than
<i>exp2</i>. </td></tr>
<tr valign="top"><td colspan="2">
<i>exp1</i> <b>-le</b> <i>exp2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>exp1</i> is less than or equal to
<i>exp2</i>. </td></tr>
<tr valign="top"><td colspan="2">
<i>exp1</i> <b>-ge</b> <i>exp2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>exp1</i> is greater than or equal to
<i>exp2</i>. </td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
In each of the above expressions, if
<i>file</i> is of the form
<b>/dev/fd/</b><i>n</i>,
where
<i>n</i> is an integer,
then the test is applied to the open file whose
descriptor number is
<i>n</i>. </td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
A compound expression can be constructed from these primitives by
using any of the following, listed in decreasing order of precedence.
</td></tr>
<tr valign="top"><td colspan="2">
<b>(</b><i>expression</i><b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>expression</i> is true.
Used to group expressions.
</td></tr>
<tr valign="top"><td colspan="2">
<b>!</b> <i>expression</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True if
<i>expression</i> is false.
</td></tr>
<tr valign="top"><td colspan="2">
<i>expression1</i> <b>&&</b> <i>expression2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if
<i>expression1</i> and
<i>expression2</i> are both true.
</td></tr>
<tr valign="top"><td colspan="2">
<i>expression1</i> <b>||</b> <i>expression2</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
True, if either
<i>expression1</i> or
<i>expression2</i> is true.
</td></tr>
</table>
<h2><i>Input/Output.</i></h2>
Before a command is executed, its input and output
may be redirected using a special notation interpreted by the shell.
The following may appear anywhere in a simple-command
or may precede or follow a
<i>command</i> and are
<i>not</i> passed on to the invoked command.
Command substitution, parameter expansion,
and arithmetic substitution occur before
<i>word</i> or
<i>digit</i> is used except as noted below.
File name generation
occurs only if the shell is interactive and
the pattern matches a single file.
Field splitting is not performed.
<p>
In each of the following redirections, if
<i>file</i> is of the form
<b>/dev/sctp/</b><i>host</i><b>/</b><i>port</i>,
<b>/dev/tcp/</b><i>host</i><b>/</b><i>port</i>,
or
<b>/dev/udp/</b><i>host</i><b>/</b><i>port</i>,
where
<i>host</i> is a hostname or host address,
and
<i>port</i> is a service given by name or an integer port number,
then the redirection attempts to make a
<b>tcp</b>, <b>sctp</b> or <b>udp</b> connection to the corresponding
socket.
<p>
No intervening space is allowed between the characters of redirection operators.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>&lt;</b><i>word</i> </td><td valign="bottom">
Use file
<i>word</i> as standard input (file descriptor 0).
</td></tr>
<tr valign="top"><td>
<b>&gt;</b><i>word</i> </td><td valign="bottom">
Use file
<i>word</i> as standard output (file descriptor 1).
If the file does not exist then it is created.
If the file exists, and the
<b>noclobber</b> option is on,
this causes an error;
otherwise, it is truncated to zero length.
</td></tr>
<tr valign="top"><td>
<b>&gt;|</b><i>word</i> </td><td valign="bottom">
Sames as
<b>&gt;</b>, except that it overrides the
<b>noclobber</b> option.
</td></tr>
<tr valign="top"><td>
<b>&gt;;</b><i>word</i> </td><td valign="bottom">
Write output to a temporary file.  If the command completes
successfully rename it to
<i>word</i>, otherwise, delete the temporary file.
<b>&gt;;</b><i>word</i> cannot be used with the
<b>exec</b>(2).
built-in.
</td></tr>
<tr valign="top"><td>
<b>&gt;&gt;</b><i>word</i> </td><td valign="bottom">
Use file
<i>word</i> as standard output.
If the file exists, then output is appended to it (by first seeking to the end-of-file);
otherwise, the file is created.
</td></tr>
<tr valign="top"><td>
<b>&lt;&gt;</b><i>word</i> </td><td valign="bottom">
Open file
<i>word</i> for reading and writing
as standard output.
</td></tr>
<tr valign="top"><td>
<b>&lt;&gt;;</b><i>word</i> </td><td valign="bottom">
The same as
<b>&lt;&gt;</b><i>word</i> except that if the command completes successfully,
<i>word</i> is truncated to the offset at command completion.
<b>&lt;&gt;;</b><i>word</i> cannot be used with the
<b>exec</b>(2).
built-in.
</td></tr>
<tr valign="top"><td>
<b>&lt;&lt;</b>[<b>-</b>]<i>word</i>
</td><td valign="bottom">
The shell input is read up to a line that is the same as
<i>word</i> after any quoting has been removed,
or to an end-of-file.
No parameter substitution, command substitution, arithmetic substitution or
file name generation is performed on
<i>word</i>. The resulting document,
called a
<i>here-document</i>, becomes
the standard input.
If any character of
<i>word</i> is quoted, then no interpretation
is placed upon the characters of the document;
otherwise, parameter expansion, command substitution, and arithmetic
substitution occur,
<b>&#92;new-line</b> is ignored,
and
<b>&#92;</b> must be used to quote the characters
<b>&#92;</b>, <b>$</b>, <b><font size="2">&#96;</font></b>. If
<b>-</b> is appended to
<b>&lt;&lt;</b>, then all leading tabs are stripped from
<i>word</i> and from the document.
If
<b>#</b> is appended to
<b>&lt;&lt;</b>, then leading spaces and tabs will be stripped off the first
line of the document and up to an equivalent indentation will
be stripped from the remaining lines and from
<i>word</i>. A tab stop is assumed to occur at every 8 columns for the
purposes of determining the indentation.
</td></tr>
<tr valign="top"><td>
<b>&lt;&lt;&lt;</b><i>word</i>
</td><td valign="bottom">
A short form of here document in which <i>word</i> becomes the
contents of the here-document after any
parameter expansion, command substitution, and arithmetic
substitution occur.
</td></tr>
<tr valign="top"><td>
<b>&lt;&</b><i>digit</i> </td><td valign="bottom">
The standard input is duplicated from file descriptor
<i>digit</i> (see
<b>dup</b>(2)).
Similarly for the standard output using
<b>&gt;&</b><i>digit</i>.
</td></tr>
<tr valign="top"><td>
<b>&lt;&</b><i>digit</i><b>-</b> </td><td valign="bottom">
The file descriptor given by
<i>digit</i> is moved to standard input.
Similarly for the standard output using
<b>&gt;&</b><i>digit</i><b>-</b>.
</td></tr>
<tr valign="top"><td>
<b>&lt;&-</b> </td><td valign="bottom">
The standard input is closed.
Similarly for the standard output using
<b>&gt;&-</b>. </td></tr>
<tr valign="top"><td>
<b>&lt;&p</b> </td><td valign="bottom">
The input from the co-process is moved to standard input.
</td></tr>
<tr valign="top"><td>
<b>&gt;&p</b> </td><td valign="bottom">
The output to the co-process is moved to standard output.
</td></tr>
<tr valign="top"><td>
<b>&lt;#</b><i></i><b>((</b><i>expr</i><b>))</b> </td><td valign="bottom">
Evaluate arithmetic expression
<i>expr</i> and position file descriptor 0
to the resulting value
bytes from the start of the file.
The variables
<b>CUR</b> and
<b>EOF</b> evaluate to the current offset and end-of-file offset
respectively when evaluating
<i>expr.</i> </td></tr>
<tr valign="top"><td>
<b>&gt;#</b><i></i><b>((</b><i>offset</i><b>))</b> </td><td valign="bottom">
The same as
<b>&lt;#</b> except applies to file descriptor 1.
</td></tr>
<tr valign="top"><td>
<b>&lt;#</b><i>pattern</i> </td><td valign="bottom">
Seeks forward to the beginning of the next line containing
<i>pattern</i>. </td></tr>
<tr valign="top"><td>
<b>&lt;##</b><i>pattern</i> </td><td valign="bottom">
The same as
<b>&lt;#</b> except that the portion of the file that is skipped is copied to
standard output.
</td></tr>
<!-- PP ends table -->
</table>
If one of the above is preceded by a digit,
with no intervening space, then the
file descriptor number referred to is that specified
by the digit
(instead of the default 0 or 1).
If one of the above, other than
<b>&gt;&-</b> and the
<b>&gt;#</b> and
<b>&lt;#</b> forms,
is preceded by
<b>{</b><i>varname</i><b>}</b> with no intervening space,
then a file descriptor number &gt; 10
will be selected by
the shell and stored in the variable
<i>varname</i>. If
<b>&gt;&-</b> or the any of the
<b>&gt;#</b> and
<b>&lt;#</b> forms
is preceded by
<b>{</b><i>varname</i><b>}</b> the value of
<i>varname</i> defines the file descriptor to close or position.
For example:
<p>
<b>&#46;.. 2&gt;&1</b>
<p>
means file descriptor 2 is to be opened
for writing as a duplicate
of file descriptor 1 and
<p>
<b>exec {n}&lt;file</b>
<p>
means open file named
<b>file</b> for reading and store
the file descriptor number in variable
<b>n</b>. <p>
The order in which redirections are specified is significant.
The shell evaluates each redirection in terms of the
(<i>file descriptor</i>, <i>file</i>) association at the time of evaluation.
For example:
<p>
<b>&#46;.. 1&gt;</b><i>fname</i> 2&gt;&1
<p>
first associates file descriptor 1 with file
<i>fname</i>. It then associates file descriptor 2 with the file associated with file
descriptor 1 (i.e.
<i>fname</i>). If the order of redirections were reversed, file descriptor 2 would be associated
with the terminal (assuming file descriptor 1 had been) and then file descriptor
1 would be associated with file
<i>fname</i>. <p>
If a command is followed by
<b>&</b> and job control is not active,
then the default standard input
for the command
is the empty file
<b>/dev/null</b>. Otherwise, the environment for the execution of a command contains the
file descriptors of the invoking shell as modified by
input/output specifications.
<h2><i>Environment.</i></h2>
The
<i>environment</i> (see
<b>environ</b>(7))
is a list of name-value pairs that is passed to
an executed program in the same way as a normal argument list.
The names must be
<i>identifiers</i> and the values are character strings.
The shell interacts with the environment in several ways.
On invocation, the shell scans the environment
and creates a
variable
for each name found,
giving it the corresponding value and attributes and marking it
<i>export</i>. Executed commands inherit the environment.
If the user modifies the values of these
variables
or creates new ones,
using the
<b>export</b> or
<b>typeset -x</b> commands, they become part of the
environment.
The environment seen by any executed command is thus composed
of any name-value pairs originally inherited by the shell,
whose values may be modified by the current shell,
plus any additions
which must be noted in
<b>export</b> or
<b>typeset -x</b> commands.
<p>
The environment for any
<i>simple-command</i> or function
may be augmented by prefixing it with one or more variable assignments.
A variable assignment argument is a word of the form
<i>identifier=value</i>. Thus:
<p>
<b><font size="-1">TERM</font>=450 cmd args</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and
<!-- Need break --><br />
<b>(export <font size="-1">TERM</font>; <font size="-1">TERM</font>=450; cmd args)</b>
<p>
are equivalent (as far as the above execution of
<i>cmd</i> is concerned except for special built-in commands listed below -
those that are
preceded with a dagger).
<p>
If the obsolete
<b>-k</b> option is set,
<i>all</i> variable assignment arguments are placed in the environment,
even if they occur after the command name.
The following
first prints
<b>a=b c</b> and then
<b>c</b>: <p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>echo a=b c
set -k
echo a=b c
</b></pre></td></tr>
</table>
This feature is intended for use with scripts written
for early versions of the shell and its use in new scripts
is strongly discouraged.
It is likely to disappear someday.
<h2><i>Functions.</i></h2>
<p>
For historical reasons, there are two
ways to define functions,
the
<i>name</i><b>()</b> syntax and
the
<b>function</b> <i>name</i> syntax, described in the
<i>Commands</i> section above.
Shell functions are read in and stored internally.
Alias names are resolved when the function is read.
Functions are executed like commands with the arguments
passed as positional parameters.
(See
<i>Execution</i> below.)
<p>
Functions defined by the
<b>function</b> <i>name</i> syntax and called by name execute in the same process as the caller and
share all files
and present working directory with the
caller.
Traps caught by the caller are reset to their default action
inside the function.
A trap condition that is not caught or ignored by the
function causes the function to terminate and the condition
to be passed on to the caller.
A trap on
<font size="-1"></font> <b>EXIT</b> set inside a function
is executed
in the environment
of the caller
after the function completes.
Ordinarily,
variables are shared between the calling program
and the function.
However,
the
<b>typeset</b> special built-in command used within a function
defines local variables whose scope includes
the current function.
They can be passed to functions that they call in the
variable assignment list that precedes the call or as arguments
passed as name references.
Errors within functions return control to the caller.
<p>
Functions defined with the
<i>name</i><b>()</b> syntax and functions defined with the
<b>function</b> <i>name</i> syntax that are invoked with the <b><font size="2">.</font></b>
special built-in
are executed in the caller&#146;s
environment and share all variables
and traps with the caller.
Errors within these function executions cause the script that contains
them to abort.
<p>
The special built-in command
<b>return</b> is used to return
from function calls.
<p>
Function names
can be listed with the
<b>-f</b> or
<b>+f</b> option of the
<b>typeset</b> special built-in command.
The text of functions, when available, will also
be listed with
<b>-f</b>. Functions can be undefined with the
<b>-f</b> option of the
<b>unset</b> special built-in command.
<p>
Ordinarily, functions are unset when the shell executes a shell script.
Functions that need to be defined across separate
invocations of the shell should
be placed in a directory and the
<b></b> <font size="-1"></font> FPATH
variable should contain the name of this directory.
They may also
be specified in the
<b></b> <font size="-1"></font> ENV
file.
<h2><i>Discipline Functions.</i></h2>
Each variable can have zero or more discipline functions
associated with it.
The shell initially understands the discipline names <b>get</b>,
<b>set</b>, <b>append</b>, and <b>unset</b> but can be added
when defining new types.  On most systems
others can be added at run time via the
C programming interface extension provided by the
<b>builtin</b> built-in utility.
If the <b>get</b> discipline is defined for a variable, it is invoked
whenever the given variable is referenced.
If the variable <b>.sh.value</b> is assigned a value inside
the discipline function, the referenced variable will evaluate
to this value instead.
If the <b>set</b> discipline is defined for a variable, it is invoked
whenever the given variable is assigned a value.
If the <b>append</b> discipline is defined for a variable, it is invoked
whenever a value is appended to the given variable.
The variable <b>.sh.value</b> is given the value
of the variable before invoking the discipline, and
the variable will be assigned the value of <b>.sh.value</b>
after the discipline completes.
If <b>.sh.value</b> is unset inside the discipline, then
that value is unchanged.
If the <b>unset</b> discipline is defined for a variable, it is invoked
whenever the given variable is unset.
The variable will not be unset unless it is unset explicitly
from within this discipline function.
<p>
The variable
<b>.sh.name</b> contains the name of the variable for which the discipline function is called,
<b>.sh.subscript</b> is the subscript of the variable, and
<b>.sh.value</b> will contain the value being assigned inside the
<b>set</b> discipline function.
The variable
<b>_</b> is a reference to the variable including the subscript if any.
For the <b>set</b> discipline,
changing
<b>.sh.value</b> will change the value that gets assigned.
Finally, the expansion <b>${</b><i>var</i><b>.</b><i>name</i><b>}</b>,
when <i>name</i> is the name of a discipline, and there is
no variable of this name, is equivalent to the command substitution
<b>${ </b><i>var</i><b>.</b><i>name</i><b>;}</b>.
<p>
<h2><i>Type Variables.</i></h2>
Typed variables provide a way to create data structure and objects.
A type can be defined either by a shared library, by the
<b>enum</b> built-in command described below, or by using the new
<b>-T</b> option of the
<b>typeset</b> built-in command.
With the
<b>-T</b> option of
<b>typeset</b>, the type name, specified as an option argument to
<b>-T</b>, is set with a compound variable assignment that defines the type.
Function definitions can appear inside the compound variable
assignment and these become discipline functions for this type and
can be invoked or redefined by each instance of the type.
The function name
<b>create</b> is treated specially.  It is invoked for each instance of
the type that is created but is not inherited and cannot be
redefined for each instance.
<p>
When a type is defined a special built-in command of that name
is added.  These built-ins are declaration commands and follow the
same expansion rules as all the special built-in commands defined
below that are preceded by &#134;&#134;.  These commands can subsequently
be used inside further type definitions.  The man page for these commands can
be generated by using the
<b>--man</b> option or any of the other
<b>--</b> options described with
<b>getopts</b>. The
<b>-r</b>, <b>-a</b>, <b>-A</b>, <b>-h</b>, and
<b>-S</b> options of
<b>typeset</b> are permitted with each of these new built-ins.
<p>
An instance of a type is created by invoking the type name
followed by one or more instance names.
Each instance of the type is initialized with a copy of the sub-variables
except for sub-variables that are defined with the
<b>-S</b> option.  Variables defined with the
<b>-S</b> are shared by all instances of the type.
Each instance can change the value of any sub-variable and can also
define new discipline functions of the same names
as those defined by the type definition as well as any
standard discipline names.
No additional sub-variables can be defined for any instance.
<p>
When defining a type,
if the value of a sub-variable is not set and the
<b>-r</b> attribute is specified, it causes the sub-variable
to be a required sub-variable.
Whenever an instance of a type is created, all required sub-variables
must be specified.
These sub-variables become readonly in each instance.
<p>
When
<b>unset</b> is invoked on a sub-variable within a type,
and the
<b>-r</b> attribute has not been specified for this field,
the value is reset to the default value associative with
the type.
Invoking
<b>unset</b> on a type instance not contained within another type deletes
all sub-variables and the variable itself.
<p>
A type definition can be derived from another type definition
by defining the first sub-variable name as
<b>_</b> and defining its type as the base type.
Any remaining definitions will be additions and modifications
that apply to the new type.
If the new type name is the same is that of the base type,
the type will be replaced and the original type will
no longer be accessible.
<p>
<h2><i>Jobs.</i></h2>
<p>
If the
<b>monitor</b> option of the
<b>set</b> command is turned on,
an interactive shell associates a <i>job</i> with each pipeline.
It keeps
a table of current jobs, printed by the
<b>jobs</b> command, and assigns them small integer numbers.
When a job is started asynchronously with
<b>&</b>, the shell prints a line which looks
like:
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] 1234
<p>
indicating that the job which was started asynchronously was job number
1 and had one (top-level) process, whose process id was 1234.
<p>
This paragraph and the next require features that are
not in all versions of UNIX and may not apply.
If you are running a job and wish to do something else you may hit the key
<b>^Z</b> (control-Z) which sends a STOP signal to the current job.
The shell will then normally indicate that the job has been &#145;Stopped&#146;,
and print another prompt.
You can then manipulate the state of this job,
putting it in the background with the
<b>bg</b> command, or run some other
commands and then eventually bring the job back into the foreground with
the foreground command
<b>fg</b>. A <b>^Z</b> takes effect immediately and
is like an interrupt in that pending output and unread input are discarded
when it is typed.
<p>
A job being run in the background will stop if it tries to read
from the terminal.
Background jobs are normally allowed to produce output,
but this can be disabled by giving the command
<b>stty tostop</b>. If you set this
tty option, then background jobs will stop when they try to produce
output like they do when they try to read input.
<p>
There are several ways to refer to jobs in the shell.
A job can be referred to by the process id of any process of the job
or by one of the following:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>%</b><i>number</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The job with the given number.
</td></tr>
<tr valign="top"><td colspan="2">
<b>%</b><i>string</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Any job whose command line begins with
<i>string</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>%?</b><i>string</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Any job whose command line contains
<i>string</i>. </td></tr>
<tr valign="top"><td>
<b>%%</b> </td><td valign="bottom">
Current job.
</td></tr>
<tr valign="top"><td>
<b>%+</b> </td><td valign="bottom">
Equivalent to
<b>%%</b>. </td></tr>
<tr valign="top"><td>
<b>%-</b> </td><td valign="bottom">
Previous job.
</td></tr>
<!-- PP ends table -->
</table>
The shell learns immediately whenever a process changes state.
It normally informs you whenever a job becomes blocked so that
no further progress is possible, but only just before it prints
a prompt.
This is done so that it does not otherwise disturb your work.
The
<b>notify</b> option of the
<b>set</b> command causes
the shell to print these job change messages
as soon as they occur.
<p>
When the
<b>monitor</b> option is on, each background job that completes
triggers any trap set for
<b>CHLD</b>. <p>
When you try to leave the shell while jobs are running or stopped, you will
be warned that &#145;You have stopped(running) jobs.&#146;
You may use the
<b>jobs</b> command to see what they are.
If you immediately try to
exit again, the shell will not warn you a second time, and the stopped
jobs will be terminated.
When a login shell receives a HUP signal, it sends
a HUP signal to each job that has not been disowned with the
<b>disown</b> built-in command described below.
<h2><i>Signals.</i></h2>
The <font size="-1">INT</font> and <font size="-1">QUIT</font> signals for an invoked
command are ignored if the command is followed by
<b>&</b> and the
<b>monitor</b> option is not active.
Otherwise, signals have the values
inherited by the shell from its parent
(but see also
the
<b>trap</b> built-in command below).
<h2><i>Execution.</i></h2>
Each time a command is read, the above substitutions
are carried out.
If the command name matches one
of the
<i>Special Built-in Commands</i> listed below,
it is executed within the
current shell process.
Next, the command name is checked to see if
it matches a user defined function.
If it does,
the positional parameters are saved
and then reset to the arguments of the
<i>function</i> call.
A function is also executed in the
current shell process.
When the
<i>function</i> completes or issues a
<b>return</b>, the positional parameter list is restored.
For functions defined with the
<b>function</b> <i>name</i> syntax,
any trap set on
<font size="-1"></font> <b>EXIT</b> within the function is executed.
The exit value of a
<i>function</i> is the value of the last command executed.
If a command name is not a
<i>special built-in command</i> or a user defined
<i>function</i>, but it is one of the built-in commands listed below,
it is executed in the current shell process.
<p>
The shell variable
<b></b> <font size="-1">PATH</font> defines the search path for
the directory containing the command.
Alternative directory names are separated by
a colon
(<b>:</b>). The default path is
<b>/bin:/usr/bin:</b> (specifying
<b>/bin</b>, <b>/usr/bin</b>, and the current directory
in that order).
The current directory can be specified by
two or more adjacent colons, or by a colon
at the beginning or end of the path list.
If the command name contains a <b>/</b>, then the search path
is not used.
Otherwise, each directory in the path is
searched for an executable file
of the given name
that is not a directory.
If found, and if the shell
determines that there is a built-in version
of a command corresponding to a given pathname,
this built-in is invoked in the current process.
If found, and this directory is also contained in the value of the
<b></b> <font size="-1">FPATH</font> variable,
then this file is loaded into the current shell environment
as if it were the argument to the <b>.</b> command
except that only preset aliases are expanded,
and a function of the given name is executed
as described above.
If not found, and the file
<b>.paths</b> is found, and this file contains a line of the form
<b>FPATH=</b><i>path</i> where
<i>path</i> names an
existing directory, and this directory contains
a file of the given name,
then this file is loaded into the current shell environment
as if it were the argument to the <b>.</b> special built-in command
and a function of the given name is executed.
Otherwise, if found,
a process is created and
an attempt is made to execute the command via
<b>exec</b>(2).
<p>
When an executable is found, the directory where it is found
in is searched for a file named
<b>.paths</b>. If this file is found and it contains a line of the form
<b>BUILTIN_LIB=</b><i>value</i> , then the library named by
<i>value</i> will be searched for as if it were an option argument to
<b>builtin -f</b>, and if it contains a built-in of the specified name
this will be executed instead of a command by this name.
Otherwise, if this file is found and it contains a line of the form
<i>name</i><b>=</b><i>value</i> in the first or second line, then the environment variable
<i>name</i> is modified by prepending the directory specified by
<i>value</i> to the directory list.
If
<i>value</i> is not an absolute directory, then it
specifies a directory relative to the directory that the
executable was found.
If the environment variable
<i>name</i> does not already exist it will be added to the environment
list for the specified command.
<p>
If the file has execute permission but is not an
<b>a.out</b> file,
it is assumed to be a file containing shell commands.
A separate shell is spawned to read it.
All non-exported variables are removed in this case.
If the shell command
file doesn&#146;t have read permission,
or if the
<i>setuid</i> and/or
<i>setgid</i> bits are set on the file,
then the shell executes an agent whose job it is to
set up the permissions and execute the shell with the
shell command file passed down as an open file.
A parenthesized command is executed in
a sub-shell without removing non-exported variables.
<h2><i>Command Re-entry.</i></h2>
The text of the last
<b></b> <font size="-1"></font> HISTSIZE
(default 512)
commands entered from a terminal device
is saved in a
<i>history</i> file.
The file
<b><font size="-1">$HOME</font>/.sh_history</b> is used if the
<b></b> <font size="-1"></font> HISTFILE
variable is not set
or if the file it names is not writable.
A shell can access the commands of
all
<i>interactive</i> shells which use the same named
<font size="-1"></font> <b>HISTFILE</b>. The built-in command
<b>hist</b> is used to list or
edit a portion of this file.
The portion of the file to be edited or listed can be selected by
number or by giving the first character or
characters of the command.
A single command or range of commands can be specified.
If you do not specify an editor program as
an argument to
<b>hist</b> then the value of the variable
<font size="-1"></font> <b>HISTEDIT</b> is used.
If
<font size="-1"></font> <b>HISTEDIT</b> is unset, the obsolete variable
<font size="-1"></font> <b>FCEDIT</b> is used.
If
<font size="-1"></font> <b>FCEDIT</b> is not defined, then
<b>/bin/ed</b> is used.
The edited command(s) is printed and re-executed upon
leaving the editor unless you quit without writing.
The
<b>-s</b> option
(and in obsolete versions, the editor name
<b>-</b>) is used to skip the editing phase and
to re-execute the command.
In this case a substitution parameter of the form
<i>old</i><b>=</b><i>new</i>
can be used to modify the command before execution.
For example, with the preset alias
<b>r</b>, which is aliased to
<b>&#39;hist -s&#39;</b>, typing
&#145;<b>r bad=good c</b>&#146;
will re-execute the most recent command which starts with the letter
<b>c</b>, replacing the first occurrence of the string
<b>bad</b> with the string
<b>good</b>. <h2><i>In-line Editing Options.</i></h2>
Normally, each command line entered from a terminal device is simply
typed followed by a <b>new-line</b> (&#145;RETURN&#146; or &#145;LINE FEED&#146;).
If either the
<b>emacs</b>, <b>gmacs</b>, or
<b>vi</b> option is active, the user can edit the command line.
To be in either of these edit modes
<b>set</b> the corresponding
option.
An editing option is automatically selected each time the
<font size="-1"></font> <b>VISUAL</b> or
<font size="-1"></font> <b>EDITOR</b> variable is assigned a value ending in either of these
option names.
<p>
The editing features require that the user&#146;s terminal
accept &#145;RETURN&#146; as carriage return without line feed
and that a space (&#145; &#146;) must overwrite the current character on
the screen.
<p>
Unless the
<b>multiline</b> option is on,
the editing modes implement a concept where the user is looking through a
window at the current line.
The window width is the value of
<font size="-1"></font> <b>COLUMNS</b> if it is defined, otherwise 80.
If the window width is too small to display the prompt and leave
at least 8 columns to enter input, the prompt is truncated from the
left.
If the line is longer than the window width minus two, a mark is
displayed at the end of the window to notify the user.
As the cursor moves and reaches the window boundaries the window will be
centered about the cursor.
The mark is a
<b>&gt;</b> (&lt;<b>,</b> <b>*</b>) if the line extends on the
right (left, both) side(s) of the window.
<p>
The search commands in each edit mode provide access to the history file.
Only strings are matched, not patterns, although a leading
<b>^</b> in the string restricts the match
to begin at the first character in the line.
<p>
Each of the edit modes has an operation to list the files
or commands that match a partially entered word.
When applied to the first word on the line,
or the first word after a
<b>;</b>, <b>|</b>, <b>&</b>, or
<b>(</b>, and the word does not begin with
<b>&#126;</b> or contain a
<b>/</b>, the list of aliases, functions, and executable commands
defined by the
<b></b> <font size="-1">PATH</font> variable that could match the partial word is displayed.
Otherwise, the list of files that match the given
word is displayed.
If the partially entered word does not contain any
file expansion characters, a
<b>*</b> is appended before generating these lists.
After displaying the generated list, the input line
is redrawn.
These operations are called command name listing and file name listing,
respectively.
There are additional operations, referred to as command name
completion and file name completion, which compute the list
of matching commands or files, but instead of printing the list,
replace
the current word with a complete or partial match.
For file name completion,
if the match is unique, a
<b>/</b> is appended if the file is a directory and a space is
appended if the file is not a directory.
Otherwise, the longest common prefix for all the matching
files replaces the word.
For command name completion, only the portion of the file names
after the last
<b>/</b> are used to find the longest command prefix.
If only a single name matches this prefix, then the
word is replaced with the command name followed by a space.
When using a
<i>tab</i> for completion that does not yield a unique match,
a subsequent
<i>tab</i> will provide a numbered list of matching alternatives.
A specific selection can be made by entering the
selection number followed by a
<i>tab</i>. <h2><i>Key Bindings.</i></h2>
The
<b></b> <font size="-1">KEYBD</font> trap can be used to intercept keys as they are typed
and change the characters that are actually seen by
the shell.
This trap is executed after each character
(or sequence of characters when the first character is ESC)
is entered while reading from a terminal.
The variable
<b>.sh.edchar</b> contains the character or character sequence which
generated the trap.
Changing the value of
<b>.sh.edchar</b> in the trap action causes the shell to behave as if the
new value were entered from the keyboard rather than
the original value.
<p>
The variable
<b>.sh.edcol</b> is set to the input column number of the cursor at the time
of the input.
The variable
<b>.sh.edmode</b> is set to
ESC
when in
<b>vi</b> insert mode (see below) and is null otherwise.
By prepending
<b>${.sh.editmode}</b> to a value assigned to
<b>.sh.edchar</b> it will cause the shell
to change to control mode if it is not already in this mode.
<p>
This trap is not invoked for characters entered as arguments to
editing directives, or while reading input for a character search.
<h2><i>Emacs Editing Mode.</i></h2>
This mode is entered by enabling either the
<b>emacs</b> or
<b>gmacs</b> option.
The only difference between these two modes is the way
they handle
<b>^T</b>. To edit, the user
moves the cursor to the point needing correction and
then inserts or deletes characters or words as needed.
All the editing commands are control characters or escape
sequences.
The notation for control characters is caret
(<b>^</b>) followed
by the character.
For example,
<b>^F</b> is the notation for control
<b>F</b>. This is entered by depressing &#145;f&#146; while holding down the
&#145;CTRL&#146; (control) key.
The &#145;SHIFT&#146; key is
<i>not</i> depressed.
(The notation
<b>^?</b> indicates the DEL (delete) key.)
<p>
The notation for escape sequences is
<b>M-</b> followed by a
character.
For example,
<b>M-f</b> (pronounced Meta f)
is entered by depressing ESC
(ascii
<b>033</b>) followed by &#145;f&#146;.
(<b>M-F</b> would be the notation for ESC followed by &#145;SHIFT&#146; (capital) &#145;F&#146;.)
<p>
All edit commands
operate from any place on the line
(not just at the beginning).
Neither the &#145;RETURN&#146; nor the &#145;LINE FEED&#146; key is
entered after edit commands except when noted.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>^F</b> </td><td valign="bottom">
Move cursor forward (right) one character.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-[C</b> </td><td valign="bottom">
Move cursor forward (right) one character.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-f</b> </td><td valign="bottom">
Move cursor forward one word.
(The
<b>emacs</b> editor&#146;s idea of a word is a string of characters
consisting of only letters, digits and underscores.)
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^B</b> </td><td valign="bottom">
Move cursor backward (left) one character.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-[D</b> </td><td valign="bottom">
Move cursor backward (left) one character.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-b</b> </td><td valign="bottom">
Move cursor backward one word.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^A</b> </td><td valign="bottom">
Move cursor to start of line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-[H</b> </td><td valign="bottom">
Move cursor to start of line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^E</b> </td><td valign="bottom">
Move cursor to end of line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-[Y</b> </td><td valign="bottom">
Move cursor to end of line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^]</b><i>char</i> </td><td valign="bottom">
Move cursor forward to character
<i>char</i> on current line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-^]</b><i>char</i> </td><td valign="bottom">
Move cursor backward to character
<i>char</i> on current line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^X^X</b> </td><td valign="bottom">
Interchange the cursor and mark.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<i>erase</i> </td><td valign="bottom">
(User defined erase character as defined
by the
<b>stty</b>(1)
command, usually
<b>^H</b> or
<b>#</b>.) Delete previous character.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<i>lnext</i> </td><td valign="bottom">
(User defined literal next character as defined
by the
<b>stty</b>(1)
command,
or
<b>^V</b> if not defined.)
Removes the next character&#146;s
editing features (if any).
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^D</b> </td><td valign="bottom">
Delete current character.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-d</b> </td><td valign="bottom">
Delete current word.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-^H</b> </td><td valign="bottom">
(Meta-backspace) Delete previous word.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-h</b> </td><td valign="bottom">
Delete previous word.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-^?</b> </td><td valign="bottom">
(Meta-DEL) Delete previous word (if your interrupt character is
<b>^?</b> (DEL, the default) then this command will not work).
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^T</b> </td><td valign="bottom">
Transpose current character with previous character
and advance the cursor
in
<i>emacs</i> mode.
Transpose two previous characters in
<i>gmacs</i> mode.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^C</b> </td><td valign="bottom">
Capitalize current character.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-c</b> </td><td valign="bottom">
Capitalize current word.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-l</b> </td><td valign="bottom">
Change the current word to lower case.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^K</b> </td><td valign="bottom">
Delete from the cursor to the end of the line.
If preceded by a numerical parameter whose value is less than the
current cursor position, then delete from given position
up to the cursor.
If preceded by a numerical parameter whose value is greater than the
current cursor position, then delete from cursor up to
given cursor position.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^W</b> </td><td valign="bottom">
Kill from the cursor to the mark.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-p</b> </td><td valign="bottom">
Push the region from the cursor to the mark on the stack.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<i>kill</i> </td><td valign="bottom">
(User defined kill character as defined
by the stty command, usually
<b>^G</b> or
<b>@</b>.) Kill the entire current line.
If two
<i>kill</i> characters are entered in succession, all
kill characters from then on cause a line feed
(useful when using paper terminals).
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^Y</b> </td><td valign="bottom">
Restore last item removed from line. (Yank item back to the line.)
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^L</b> </td><td valign="bottom">
Line feed and print current line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-^L</b> </td><td valign="bottom">
Clear the screen.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^@</b> </td><td valign="bottom">
(Null character) Set mark.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-</b><i>space</i> </td><td valign="bottom">
(Meta space) Set mark.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^J</b> </td><td valign="bottom">
(New line) Execute the current line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^M</b> </td><td valign="bottom">
(Return) Execute the current line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<i>eof</i> </td><td valign="bottom">
End-of-file character,
normally
<b>^D</b>, is processed as an End-of-file only
if the current line is null.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^P</b> </td><td valign="bottom">
Fetch previous command.
Each time
<b>^P</b> is entered
the previous command back in time is accessed.
Moves back one line when not on the first line of a multi-line command.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-[A</b> </td><td valign="bottom">
If the cursor is at the end of the line, it is equivalent to
<b>^R</b> with
<i>string</i> set to the contents of the current line.
Otherwise, it is
equivalent to
<b>^P.</b> <!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-&lt;</b> </td><td valign="bottom">
Fetch the least recent (oldest) history line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-&gt;</b> </td><td valign="bottom">
Fetch the most recent (youngest) history line.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^N</b> </td><td valign="bottom">
Fetch next command line.
Each time
<b>^N</b> is entered
the next command line forward in time is accessed.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-[B</b> </td><td valign="bottom">
Equivalent to
<b>^N.</b> <!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^R</b><i>string</i> </td><td valign="bottom">
Reverse search history for a previous command line containing
<i>string</i>. If a parameter of zero is given, the search is forward.
<i>String</i> is terminated by a &#145;RETURN&#146; or &#145;NEW LINE&#146;.
If string is preceded by a
<b>^</b>, the matched line must begin with
<i>string</i>. If
<i>string</i> is omitted,
then the next command line containing the most recent
<i>string</i> is accessed.
In this case a parameter of zero
reverses the direction of the search.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^O</b> </td><td valign="bottom">
Operate - Execute the current line and fetch
the next line relative to current line from the
history file.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-</b><i>digits</i> </td><td valign="bottom">
(Escape) Define numeric parameter, the digits
are taken as a parameter to the next command.
The commands that accept a parameter are
<b>^F</b>, <b>^B</b>, <i>erase</i>, <b>^C</b>, <b>^D</b>, <b>^K</b>, <b>^R</b>, <b>^P</b>, <b>^N</b>, <b>^]</b>, <b>M-.</b>, <b>M-^]</b>, <b>M-_</b>, <b>M-=</b>, <b>M-b</b>, <b>M-c</b>, <b>M-d</b>, <b>M-f</b>, <b>M-h</b>, <b>M-l</b> and
<b>M-^H</b>. <!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-</b><i>letter</i> </td><td valign="bottom">
Soft-key - Your alias list is searched for an
alias by the name
<b>_</b><i>letter</i> and if an alias of this name is defined, its
value will be inserted on the input queue.
The
<i>letter</i> must not be one of the above meta-functions.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-[</b><i>letter</i> </td><td valign="bottom">
Soft-key - Your alias list is searched for an
alias by the name
<b>__</b><i>letter</i> and if an alias of this name is defined, its
value will be inserted on the input queue.
This can be used to program function keys on many terminals.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-.</b> </td><td valign="bottom">
The last word of the previous command is inserted
on the line.
If preceded by a numeric parameter, the value
of this parameter determines which word to insert rather than
the last word.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-_</b> </td><td valign="bottom">
Same as
<b>M-.</b>. <!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-*</b> </td><td valign="bottom">
Attempt file name generation on the current word.
An asterisk is appended if the word doesn&#146;t match any file
or contain any special
pattern characters.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-ESC</b> </td><td valign="bottom">
Command or file name completion as described above.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^I</b><i> tab</i> </td><td valign="bottom">
Attempts command or file name completion as described above.
If a partial completion occurs, repeating this will
behave as if
<b>M-=</b> were entered.
If no match is found or entered after
<i>space</i>, a
<i>tab</i> is inserted.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-=</b> </td><td valign="bottom">
If not preceded by a numeric parameter,
it generates the list of matching commands or
file names as described above.
Otherwise, the word under the cursor is replaced by
the item corresponding to the value of the numeric parameter
from the most recently generated command or file list.
If the cursor is not on a word, it is inserted instead.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>^U</b> </td><td valign="bottom">
Multiply parameter of next command by 4.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>&#92;</b> </td><td valign="bottom">
Escape next character.
Editing characters, the user&#146;s erase, kill and
interrupt (normally
<b>^?</b>) characters
may be entered
in a command line or in a search string if preceded by a
<b>&#92;</b>. The
<b>&#92;</b> removes the next character&#146;s
editing features (if any).
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-^V</b> </td><td valign="bottom">
Display version of the shell.
<!-- suppressed PP before TP -->
</td></tr>
<tr valign="top"><td>
<b>M-#</b> </td><td valign="bottom">
If the line does not begin with a
<b>#</b>, a
<b>#</b> is inserted
at the beginning of the line
and after each new-line,
and the line is entered.
This causes a comment to be inserted in the history file.
If the line begins with a
<b>#</b>, the
<b>#</b> is deleted and one
<b>#</b> after each new-line is also deleted.
</td></tr>
</table>
<h2><i>Vi Editing Mode.</i></h2>
There are two typing modes.
Initially, when you enter a command you are in the
<i>input</i> mode.
To edit, the user enters
<i>control</i> mode by typing ESC
(<b>033</b>) and moves the cursor to the point needing correction and
then inserts or deletes characters or words as needed.
Most control commands accept an optional repeat
<i>count</i> prior to the command.
<p>
When in
<b>vi</b> mode on most systems,
canonical processing is initially enabled and the
command will be echoed again if the speed is 1200 baud or greater and it
contains any control characters or less than one second has elapsed
since the prompt was printed.
The ESC character terminates canonical processing for the remainder of the command
and the user can then modify the command line.
This scheme has the advantages of canonical processing with the type-ahead
echoing of raw mode.
<p>
If the option
<b>viraw</b> is also set, the terminal will always have canonical processing
disabled.
This mode is implicit for systems that do not support two
alternate end of line delimiters,
and may be helpful for certain terminals.
<h2><i>     Input Edit Commands</i></h2>
<p>
By default the editor is in input mode.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>erase</i> </td><td valign="bottom">
(User defined erase character as defined
by the stty command, usually
<b>^H</b> or
<b>#</b>.) Delete previous character.
</td></tr>
<tr valign="top"><td>
<b>^W</b> </td><td valign="bottom">
Delete the previous blank separated word.
On some systems the <b>viraw</b> option
may be required for this to work.
</td></tr>
<tr valign="top"><td>
<i>eof</i> </td><td valign="bottom">
As the first character of the line causes
the shell to terminate unless the <b>ignoreeof</b>
option is set.
Otherwise this character is ignored.
</td></tr>
<tr valign="top"><td>
<i>lnext</i> </td><td valign="bottom">
(User defined literal next character as defined
by the
<b>stty</b>(1)
or
<b>^V</b> if not defined.)
Removes the next character&#146;s
editing features (if any).
On some systems the <b>viraw</b> option
may be required for this to work.
</td></tr>
<tr valign="top"><td>
<b>&#92;</b> </td><td valign="bottom">
Escape the next
<i>erase</i> or
<i>kill</i> character.
</td></tr>
<tr valign="top"><td>
<b>^I</b><i> tab</i> </td><td valign="bottom">
Attempts command or file name completion as described above
and returns to input mode.
If a partial completion occurs, repeating this will
behave as if
<b>=</b> were entered from control mode.
If no match is found or entered after
<i>space</i>, a
<i>tab</i> is inserted.
</td></tr>
</table>
<h2><i>     Motion Edit Commands</i></h2>
These commands will move the cursor.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
[<i>count</i>]<b>l</b>
</td><td valign="bottom">
Cursor forward (right) one character.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>[C</b>
</td><td valign="bottom">
Cursor forward (right) one character.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>w</b>
</td><td valign="bottom">
Cursor forward one alpha-numeric word.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>W</b>
</td><td valign="bottom">
Cursor to the beginning of the next word that follows a blank.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>e</b>
</td><td valign="bottom">
Cursor to end of word.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>E</b>
</td><td valign="bottom">
Cursor to end of the current blank delimited word.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>h</b>
</td><td valign="bottom">
Cursor backward (left) one character.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>[D</b>
</td><td valign="bottom">
Cursor backward (left) one character.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>b</b>
</td><td valign="bottom">
Cursor backward one word.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>B</b>
</td><td valign="bottom">
Cursor to preceding blank separated word.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>|</b>
</td><td valign="bottom">
Cursor to column
<i>count</i>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>f</b><i>c</i>
</td><td valign="bottom">
Find the next character <i>c</i> in the current line.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>F</b><i>c</i>
</td><td valign="bottom">
Find the previous character <i>c</i> in the current line.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>t</b><i>c</i>
</td><td valign="bottom">
Equivalent to
<b>f</b> followed by
<b>h</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>T</b><i>c</i>
</td><td valign="bottom">
Equivalent to
<b>F</b> followed by
<b>l</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>;</b>
</td><td valign="bottom">
Repeats
<i>count</i> times,
the last single character find command,
<b>f</b>, <b>F</b>, <b>t</b>, or
<b>T</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>,</b>
</td><td valign="bottom">
Reverses the last single character find command
<i>count</i> times.
</td></tr>
<tr valign="top"><td>
<b>0</b> </td><td valign="bottom">
Cursor to start of line.
</td></tr>
<tr valign="top"><td>
<b>^</b> </td><td valign="bottom">
Cursor to start of line.
</td></tr>
<tr valign="top"><td>
<b>[H</b> </td><td valign="bottom">
Cursor to first non-blank character in line.
</td></tr>
<tr valign="top"><td>
<b>$</b> </td><td valign="bottom">
Cursor to end of line.
</td></tr>
<tr valign="top"><td>
<b>[Y</b> </td><td valign="bottom">
Cursor to end of line.
</td></tr>
<tr valign="top"><td>
<b>%</b> </td><td valign="bottom">
Moves to balancing
<b>(</b>, <b>)</b>, <b>{</b>, <b>}</b>, <b>[</b>, or
<b>]</b>. If cursor is not on one of the above characters,
the remainder of the line is searched for the first
occurrence of one of the above characters first.
</td></tr>
</table>
<h2><i>     Search Edit Commands</i></h2>
These commands access your command history.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
[<i>count</i>]<b>k</b>
</td><td valign="bottom">
Fetch previous command.
Each time
<b>k</b> is entered
the previous command back in time is accessed.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>-</b>
</td><td valign="bottom">
Equivalent to
<b>k</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>[A</b>
</td><td valign="bottom">
If cursor is at the end of the line it is equivalent to
<b>/</b> with
<i>string^</i> set to the contents of the current line.
Otherwise, it is equivalent to
<b>k</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>j</b>
</td><td valign="bottom">
Fetch next command.
Each time
<b>j</b> is entered
the next command forward in time is accessed.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>+</b>
</td><td valign="bottom">
Equivalent to
<b>j</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>[B</b>
</td><td valign="bottom">
Equivalent to
<b>j</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>G</b>
</td><td valign="bottom">
The command number
<i>count</i> is fetched.
The default is the least recent history command.
</td></tr>
<tr valign="top"><td>
<b>/</b><i>string</i> </td><td valign="bottom">
Search backward through history for a previous command containing
<i>string</i>. <i>String</i> is terminated by a &#145;RETURN&#146; or &#145;NEW LINE&#146;.
If string is preceded by a
<b>^</b>, the matched line must begin with
<i>string</i>. If <i>string</i> is null, the previous string will be used.
</td></tr>
<tr valign="top"><td>
<b>?</b><i>string</i> </td><td valign="bottom">
Same as
<b>/</b> except that search will be in the forward direction.
</td></tr>
<tr valign="top"><td>
<b>n</b> </td><td valign="bottom">
Search for next match of the last pattern to
<b>/</b> or
<b>?</b> commands.
</td></tr>
<tr valign="top"><td>
<b>N</b> </td><td valign="bottom">
Search for next match of the last pattern to
<b>/</b> or
<b>?</b>, but in reverse direction.
</td></tr>
</table>
<h2><i>     Text Modification Edit Commands</i></h2>
These commands will modify the line.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>a</b> </td><td valign="bottom">
Enter input mode and enter text after the current character.
</td></tr>
<tr valign="top"><td>
<b>A</b> </td><td valign="bottom">
Append text to the end of the line.
Equivalent to
<b>$a</b>. </td></tr>
<tr valign="top"><td colspan="2">
[<i>count</i>]<b>c</b><i>motion</i>
<!-- Consumed .TP 10 -->
<br />
<b>c</b>[<i>count</i>]<i>motion</i>
</td></tr><tr valign="top"><td width=10%>&nbsp;</td><td>
Delete current character through the character that
<i>motion</i> would move the cursor to and enter input mode.
If <i>motion</i> is
<b>c</b>, the entire line will be deleted and
input mode entered.
</td></tr>
<tr valign="top"><td>
<b>C</b> </td><td valign="bottom">
Delete the current character through the end of line and enter input mode.
Equivalent to
<b>c$</b>. </td></tr>
<tr valign="top"><td>
<b>S</b> </td><td valign="bottom">
Equivalent to
<b>cc</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>s</b>
</td><td valign="bottom">
Replace characters under the cursor in input mode.
</td></tr>
<tr valign="top"><td>
<b>D</b> </td><td valign="bottom">
Delete the current character through the end of line.
Equivalent to
<b>d$</b>. </td></tr>
<tr valign="top"><td colspan="2">
[<i>count</i>]<b>d</b><i>motion</i>
<!-- Consumed .TP 10 -->
<br />
<b>d</b>[<i>count</i>]<i>motion</i>
</td></tr><tr valign="top"><td width=10%>&nbsp;</td><td>
Delete current character through the character that
<i>motion</i> would move to.
If <i>motion</i> is
<b>d ,</b> the entire line will be deleted.
</td></tr>
<tr valign="top"><td>
<b>i</b> </td><td valign="bottom">
Enter input mode and insert text before the current character.
</td></tr>
<tr valign="top"><td>
<b>I</b> </td><td valign="bottom">
Insert text before the beginning of the line.
Equivalent to
<b>0i</b>. </td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>P</b>
</td><td valign="bottom">
Place the previous text modification before the cursor.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>p</b>
</td><td valign="bottom">
Place the previous text modification after the cursor.
</td></tr>
<tr valign="top"><td>
<b>R</b> </td><td valign="bottom">
Enter input mode and
replace characters on the screen with characters you type overlay fashion.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>r</b><i>c</i>
</td><td valign="bottom">
Replace the
<i>count</i> character(s) starting at the current cursor position with
<i>c</i>, and advance the cursor.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>x</b>
</td><td valign="bottom">
Delete current character.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>X</b>
</td><td valign="bottom">
Delete preceding character.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>.</b>
</td><td valign="bottom">
Repeat the previous text modification command.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>&#126;</b>
</td><td valign="bottom">
Invert the case of the
<i>count</i> character(s) starting at the current cursor position and advance the cursor.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>_</b>
</td><td valign="bottom">
Causes the
<i>count</i> word of the previous command to be appended and
input mode entered.
The last word is used
if
<i>count</i> is omitted.
</td></tr>
<tr valign="top"><td>
<b>*</b> </td><td valign="bottom">
Causes an
<b>*</b> to be appended to the current word and file name generation attempted.
If no match is found,
it rings the bell.
Otherwise, the word is replaced
by the matching pattern and input mode is entered.
</td></tr>
<tr valign="top"><td>
<b>&#92;</b> </td><td valign="bottom">
Command or file name completion as described above.
</td></tr>
</table>
<h2><i>     Other Edit Commands</i></h2>
Miscellaneous commands.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
[<i>count</i>]<b>y</b><i>motion</i>
<!-- Consumed .TP 10 -->
<br />
<b>y</b>[<i>count</i>]<i>motion</i>
</td></tr><tr valign="top"><td width=10%>&nbsp;</td><td>
Yank current character through character that
<i>motion</i> would move the cursor to and puts them into the delete buffer.
The text and cursor are unchanged.
</td></tr>
<tr valign="top"><td>
<b>yy</b> </td><td valign="bottom">
Yanks the entire line.
</td></tr>
<tr valign="top"><td>
<b>Y</b> </td><td valign="bottom">
Yanks from current position to end of line.
Equivalent to
<b>y$</b>. </td></tr>
<tr valign="top"><td>
<b>u</b> </td><td valign="bottom">
Undo the last text modifying command.
</td></tr>
<tr valign="top"><td>
<b>U</b> </td><td valign="bottom">
Undo all the text modifying commands performed on the line.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>v</b>
</td><td valign="bottom">
Returns the command
<b>hist -e ${<font size="-1">VISUAL</font>:-${<font size="-1">EDITOR</font>:-vi}}</b><i> count</i> in the input buffer.
If
<i>count</i> is omitted, then the current line is used.
</td></tr>
<tr valign="top"><td>
<b>^L</b> </td><td valign="bottom">
Line feed and print current line.
Has effect only in control mode.
</td></tr>
<tr valign="top"><td>
<b>^J</b> </td><td valign="bottom">
(New line) Execute the current line, regardless of mode.
</td></tr>
<tr valign="top"><td>
<b>^M</b> </td><td valign="bottom">
(Return) Execute the current line, regardless of mode.
</td></tr>
<tr valign="top"><td>
<b>#</b> </td><td valign="bottom">
If the first character of the command is a
<b>#</b>, then this command deletes this
<b>#</b> and each
<b>#</b> that follows a newline.
Otherwise,
sends the line after
inserting a
<b>#</b> in front of each line in the command.
Useful for causing the current line to be
inserted in the history as a comment and
uncommenting previously commented commands
in the history file.
</td></tr>
<tr valign="top"><td>
[<i>count</i>]<b>=</b>
</td><td valign="bottom">
If <i>count</i> is not specified,
it generates the list of matching commands or
file names as described above.
Otherwise, the word under the the cursor is replaced by the
<i>count</i> item from the most recently generated command or file list.
If the cursor is not on a word, it is inserted instead.
</td></tr>
<tr valign="top"><td>
<b>@</b><i>letter</i> </td><td valign="bottom">
Your alias list is searched for an
alias by the name
<b>_</b><i>letter</i> and if an alias of this name is defined, its
value will be inserted on the input queue for processing.
</td></tr>
<tr valign="top"><td>
<b>^V</b> </td><td valign="bottom">
Display version of the shell.
</td></tr>
</table>
<h2><i>Built-in Commands.</i></h2>
The following simple-commands are executed in the shell process.
Input/Output redirection is permitted.
Unless otherwise indicated, the output is written on file descriptor 1
and the exit status, when there is no syntax error, is zero.
Except for
<b>:</b>, <b>true</b>, <b>false</b>, <b>echo</b>, <b>newgrp</b>, and
<b>login</b>, all built-in commands accept
<b>--</b> to indicate end of options.
They also interpret the option
<b>--man</b> as a request to display the man page onto
standard error and
<b>-?</b> as a help request which prints a
<i>usage</i> message
on standard error.
Commands that are preceded by one or two &#134; symbols
are special built-in commands and
are treated specially in the following ways:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
1.
</td><td valign="bottom">
Variable assignment lists preceding the command
remain in effect when the command completes.
</td></tr>
<tr valign="top"><td>
2.
</td><td valign="bottom">
I/O redirections are processed after variable assignments.
</td></tr>
<tr valign="top"><td>
3.
</td><td valign="bottom">
Errors
cause a script
that contains them to abort.
</td></tr>
<tr valign="top"><td>
4.
</td><td valign="bottom">
They are not valid function names.
</td></tr>
<tr valign="top"><td>
5.
</td><td valign="bottom">
Words
following a command preceded by &#134;&#134;
that are in the format of a variable assignment
are expanded with the same rules as a variable assignment.
This means that
tilde substitution is performed after the
<b>=</b> sign and field splitting and file name generation are not
performed.
These are called
<i>declaration</i> built-ins.
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>:</b> [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The command only expands parameters.
<!-- ignored unsupported tag .ne -->
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>. </b><i>name</i> [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>name</i> is a function defined with the
<b>function</b> <i>name</i> reserved word syntax,
the function is executed in the current environment
(as if it had been defined with the
<i>name</i><b>()</b> syntax.)
Otherwise if
<i>name</i> refers to a file, the
file is read in its entirety and the commands are
executed in the current shell environment.
The search path
specified by
<b></b> <font size="-1">PATH</font> is used to find the directory containing the file.
If any arguments
<i>arg</i> are given,
they become the positional parameters while processing
the
<b>.</b> command and the original positional parameters are restored upon completion.
Otherwise the positional parameters are unchanged.
The exit status is the exit status of the last command executed.
</td></tr>
<tr valign="top"><td colspan="2">
&#134;&#134; <b>alias</b> [ <b>-ptx</b> ]  [ <i>name</i>[ <b>=</b><i>value</i>  ] ] ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
<b>alias</b> with no arguments prints the list of aliases
in the form
<i>name=value</i> on standard output.
The
<b>-p</b> option
causes the word
<b>alias</b> to be inserted before each one.
When one or more arguments are given,
an
<i>alias</i> is defined
for each
<i>name</i> whose
<i>value</i> is given.
A trailing space in
<i>value</i> causes the next word to be checked for
alias substitution.
The obsolete
<b>-t</b> option is used to set and list tracked aliases.
The value of a tracked alias is the full pathname
corresponding to the given
<i>name</i>. The value becomes undefined when the value of
<font size="-1"></font> <b>PATH</b> is reset but the alias remains tracked.
Without the
<b>-t</b> option,
for each
<i>name</i> in the argument list
for which no
<i>value</i> is given, the name
and value of the alias is printed.
The obsolete
<b>-x</b> option has no effect.
The exit status is non-zero if a
<i>name</i> is given, but no value, and no alias has been defined for the
<i>name</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>bg</b> [ <i>job</i>... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This command is only on systems that support job control.
Puts each specified
<i>job</i> into the background.
The current job is put in the background
if
<i>job</i> is not specified.
See
<i>Jobs</i> for a description of the format of
<i>job</i>. </td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>break</b> [ <i>n</i> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Exit from the enclosing
<b>for</b>, <b>while</b>, <b>until</b>, or
<b>select</b> loop, if any.
If
<i>n</i> is specified, then break
<i>n</i> levels.
</td></tr>
<tr valign="top"><td colspan="2">
<b>builtin</b> [ <b>-ds</b> ] [ <b>-f</b> <i>file</i> ] [ <i>name</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>name</i> is not specified,
and no
<b>-f</b> option is specified,
the built-ins are printed on standard output.
The
<b>-s</b> option prints only the special built-ins.
Otherwise, each
<i>name</i> represents the pathname whose basename is the name of the built-in.
The entry point function name is determined by prepending
<b>b_</b> to the built-in name.
The ISO C/C++ prototype is
<b>b_</b><i>mycommand</i><b>(int</b> <i>argc</i>, <b>char *</b><i>argv</i><b>[]</b>, <b>void *</b><i>context</i><b>)</b>
for the builtin command
<i>mycommand</i> where
<i>argv</i> is array an of
<i>argc</i> elements and context is an optional pointer to a
<b>Shell_t</b> structure as described in
<b>&lt;ast/shell.h&gt;</b>. <p>
Special built-ins cannot be bound to a pathname or deleted.
The
<b>-d</b> option deletes each of the given built-ins.
On systems that support dynamic loading, the
<b>-f</b> option names a shared library containing the code for built-ins.
The shared library prefix and/or suffix, which depend on the system,
can be omitted.
Once a library is loaded, its symbols become available
for subsequent invocations of
<b>builtin</b>. Multiple libraries can be specified with separate invocations
of the
<b>builtin</b> command.
Libraries are searched in the reverse order in which they are specified.
When a library is loaded, it looks for a function in the library
whose name is
<b>lib_init()</b> and invokes this function with an argument of
<b>0</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>cd</b> [ <b>-LP</b> ] [ <i>arg</i> ]
<!-- Consumed .TP -->
<br />
<b>cd</b> [ <b>-LP</b> ] <i>old</i> <i>new</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This command can be in either of two forms.
In the first form it
changes the current directory to
<i>arg</i>. If
<i>arg</i> is
<b>-</b> the directory is changed to the previous
directory.
The shell
variable
<b></b> <font size="-1">HOME</font> is the default
<i>arg</i>. The variable
<font size="-1"></font> <b>PWD</b> is set to the current directory.
The shell variable
<b></b> <font size="-1">CDPATH</font> defines the search path for
the directory containing
<i>arg</i>. Alternative directory names are separated by
a colon
(<b>:</b>). The default path is
<b>&lt;null&gt;</b> (specifying the current directory).
Note that the current directory is specified by a null path name,
which can appear immediately after the equal sign
or between the colon delimiters anywhere else in the path list.
If
<i>arg</i> begins with a <b>/</b> then the search path
is not used.
Otherwise, each directory in the path is
searched for
<i>arg</i>. <p>
The second form of
<b>cd</b> substitutes the string
<i>new</i> for the string
<i>old</i> in the current directory name,
<font size="-1"></font> <b>PWD</b>, and tries to change to this new directory.
<p>
By default, symbolic link names are treated literally when
finding the directory name.
This is equivalent to the
<b>-L</b> option.
The
<b>-P</b> option causes
symbolic links to be resolved when determining the directory.
The last instance of
<b>-L</b> or
<b>-P</b> on the command line
determines which method is used.
<p>
The
<b>cd</b> command may not be executed by
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
</td></tr>
<tr valign="top"><td colspan="2">
<b>command</b> [ <b>-pvxV</b> ] <i>name</i> [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Without the
<b>-v</b> or
<b>-V</b> options,
<b>command</b> executes
<i>name</i> with the arguments given by
<i>arg</i>. The
<b>-p</b> option causes
a default path to be searched
rather than the one defined by the value of
<font size="-1"></font> <b>PATH</b>. Functions will not be searched for when finding
<i>name</i>. In addition, if
<i>name</i> refers to a special built-in,
none of the special properties associated with the leading
daggers will be honored.
(For example, the predefined alias
<b>redirect=&#39;command exec&#39;</b> prevents a script from terminating when an invalid
redirection is given.)
With the
<b>-x</b> option,
if command execution would result in a failure because
there are too many arguments, errno
<font size="-1"></font> <b>E2BIG</b>, the shell will invoke command
<i>name</i> multiple times with a subset of the arguments on each invocation.
Arguments that occur prior to the first word that
expands to multiple arguments and after the last word
that expands to multiple arguments will be passed on each invocation.
The exit status will be the maximum invocation exit status.
With the
<b>-v</b> option,
<b>command</b> is equivalent to the built-in
<b>whence</b> command described below.
The
<b>-V</b> option causes
<b>command</b> to act like
<b>whence -v</b>. </td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>continue</b> [ <i>n</i> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Resume the next iteration of the enclosing
<b>for</b>, <b>while</b>, <b>until</b>, or
<b>select</b> loop.
If
<i>n</i> is specified, then resume at the
<i>n</i>-th enclosing loop.
</td></tr>
<tr valign="top"><td colspan="2">
<b>disown</b> [ <i>job</i>... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Causes the shell not to send a HUP signal to
each given
<i>job</i>, or all active jobs if
<i>job</i> is omitted,
when a login shell terminates.
</td></tr>
<tr valign="top"><td colspan="2">
<b>echo</b> [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
When the first
<i>arg</i> does not begin with a -, and
none of the arguments contain a &#92;,
then
<b>echo</b> prints each of its arguments separated by a space
and terminated by a new-line.
Otherwise, the behavior of
<b>echo</b> is system dependent
and
<b>print</b> or
<b>printf</b> described below should be used.
See
<b>echo</b>(1)
for usage and description.
</td></tr>
<tr valign="top"><td colspan="2">
&#134;&#134; <b>enum</b> [ <b>-i</b>  ] <i>type</i>[=(<i>value</i> ...) ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Creates a declaration command named <i>type</i> that is an
integer type that allows one of the specifed <i>value</i>s as
enumeration names.  If <b>=(</b><i>value ...</i><b>)</b> is
omitted, then <i>type</i> must be an indexed array variable with at
least two elements and the values are taken from this array variable.
If
<b>-i</b> is specified the values are case insensitive.
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>eval</b> [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The arguments are read as input
to the shell
and the resulting command(s) executed.
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>exec</b> [ <b>-c</b> ] [ <b>-a</b> <i>name</i> ] [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>arg</i> is given,
the command specified by
the arguments is executed in place of this shell
without creating a new process.
The
<b>-c</b> option causes the environment to be cleared before applying
variable assignments associated with the
<b>exec</b> invocation.
The
<b>-a</b> option
causes
<i>name</i> rather than the first
<i>arg</i>, to become
<b>argv[0]</b> for the new process.
Input/output arguments may appear and
affect the current process.
If
<i>arg</i> is not given,
the effect of this command is to
modify file descriptors
as prescribed by the input/output redirection list.
In this case,
any file descriptor numbers greater than 2 that are
opened with this mechanism are closed when invoking
another program.
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>exit</b> [ <i>n</i> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Causes the shell to exit
with the exit status specified by
<i>n</i>. The value will be the least significant 8 bits of the specified status.
If
<i>n</i> is omitted, then the exit status is that of the last command executed.
An end-of-file will also cause the shell to exit
except for a
shell which has the
<b>ignoreeof</b> option (see
<b>set</b> below) turned on.
</td></tr>
<tr valign="top"><td colspan="2">
&#134;&#134; <b>export</b> [ <b>-p</b> ] [ <i>name</i>[<b>=</b><i>value</i>] ] ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>name</i> is not given,
the names and values of each variable with
the export attribute are printed with the values
quoted in a manner that allows them to be re-input.
The
<b>-p</b> option
causes the word
<b>export</b> to be inserted before each one.
Otherwise, the given
<i>name</i>s are marked for automatic
export to the
<i>environment</i> of subsequently-executed commands.
</td></tr>
<tr valign="top"><td>
<b>false</b>
</td><td valign="bottom">
Does nothing, and exits 1. Used with
<b>until</b> for infinite loops.
</td></tr>
<tr valign="top"><td colspan="2">
<b>fg</b> [ <i>job</i>... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This command is only on systems that support job control.
Each
<i>job</i> specified is brought to the foreground and waited for in
the specified order.
Otherwise, the current job is
brought into the foreground.
See
<i>Jobs</i> for a description of the format of
<i>job</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>getconf</b> [ <i>name</i> [ <i>pathname</i> ] ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Prints the current value of the configuration parameter given by
<i>name</i>. The configuration parameters are defined by the IEEE POSIX 1003.1
and IEEE POSIX 1003.2 standards.
(See
<b>pathconf</b>(2)
and
<b>sysconf</b>(2).)
The
<i>pathname</i> argument is required for parameters whose value depends on
the location in the file system.
If no arguments are given,
<b>getconf</b> prints the names and values of the current configuration
parameters.
The pathname
<b>/</b> is used for each of the parameters that requires
<i>pathname</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>getopts</b> [ <b> -a</b> <i>name</i> ] <i>optstring vname</i> [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Checks
<i>arg</i> for legal options.
If
<i>arg</i> is omitted,
the positional parameters are used.
An option argument begins with a
<b>+</b> or a
<b>-</b>. An option not beginning with
<b>+</b> or
<b>-</b> or the argument
<b>--</b> ends the options.
Options beginning with
<b>+</b> are only recognized when
<i>optstring</i> begins with a
<b>+</b>. <i>optstring</i> contains the letters that
<b>getopts</b> recognizes.
If a letter is followed by a
<b>:</b>, that option is expected to have an argument.
The options can be separated from the argument by blanks.
The option
<b>-?</b> causes
<b>getopts</b> to generate a usage message on standard error.
The
<b>-a</b> argument can be used to specify the name to use for the
usage message, which defaults to
<b>$0</b>. <p>
<b></b> getopts
places the next option letter it finds inside variable
<i>vname</i> each time it is invoked.
The option letter will be prepended with a
<b>+</b> when
<i>arg</i> begins with a
<b>+</b>. The index of the next
<i>arg</i> is stored in
<font size="-1"></font> <b>OPTIND</b>. The option argument,
if any,
gets stored in
<font size="-1"></font> <b>OPTARG</b>. <p>
A leading
<b>:</b> in
<i>optstring</i> causes
<b>getopts</b> to store the letter of an invalid
option in
<font size="-1"></font> <b>OPTARG</b>, and to set
<i>vname</i> to
<b>?</b> for an unknown option and to
<b>:</b> when a required option argument is missing.
Otherwise,
<b>getopts</b> prints an error message.
The exit status is non-zero when there are no more options.
<p>
There is no way to specify any of the options
<b>:</b>, <b>+</b>, <b>-</b>, <b>?</b>, <b>[</b>, and
<b>]</b>. The option
<b>#</b> can only be specified as the first option.
</td></tr>
<tr valign="top"><td colspan="2">
<b>hist</b> [ <b>-e</b> <i>ename</i>  ] [ <b>-nlr</b> ] [ <i>first</i> [ <i>last</i> ] ]
<!-- Consumed .TP -->
<br />
<b>hist -s </b> [ <i>old</i><b><blink>\=</blink></b><i>new</i> ] [ <i>command</i> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
In the first form,
a range of commands from
<i>first</i> to
<i>last</i> is selected from the last
<font size="-1"></font> <b>HISTSIZE</b> commands that were typed at the terminal.
The arguments
<i>first</i> and
<i>last</i> may be specified as a number or as a string.
A string is used to locate the most recent command starting with
the given string.
A negative number is used as an offset to the current command number.
If the
<b>-l</b> option
is selected,
the commands are listed on standard output.
Otherwise, the editor program
<i>ename</i> is invoked on a file containing these
keyboard commands.
If
<i>ename</i> is not supplied, then the value of the variable
<font size="-1"></font> <b>HISTEDIT</b> is used.
If
<font size="-1"></font> <b>HISTEDIT</b> is not set, then
<font size="-1"></font> <b>FCEDIT</b> (default
<b>/bin/ed</b>) is used as the editor.
When editing is complete, the edited command(s)
is executed if the changes have been saved.
If
<i>last</i> is not specified,
then it will be set to
<i>first</i>. If
<i>first</i> is not specified,
the default is the previous command
for editing and -16 for listing.
The option
<b>-r</b> reverses the order of the commands and
the option
<b>-n</b> suppresses command numbers when listing.
In the second form,
<i>command</i> is interpreted as
<i>first</i> described above
and defaults to the last command executed.
The resulting command is executed
after the optional substitution
<i>old</i><b>=</b><i>new</i>
is performed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>jobs</b> [ <b>-lnp</b> ] [ <i>job</i> &#46;.. ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Lists information about each given job; or all active jobs if
<i>job</i> is omitted.
The
<b>-l</b> option lists process ids in addition to the normal information.
The
<b>-n</b> option only displays jobs that have stopped or exited since last
notified.
The
<b>-p</b> option causes only the process group to be listed.
See
<i>Jobs</i> for a description of the format of
<i>job</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>kill</b> [ <b>-s</b> <i>signame</i> ] <i>job</i> ...
<!-- Consumed .TP -->
<br />
<b>kill</b> [ <b>-n</b> <i>signum</i> ] <i>job</i> ...
<!-- Consumed .TP -->
<br />
<b>kill</b> <b>-l</b> [ <i>sig</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Sends either the TERM (terminate) signal or the
specified signal to the specified jobs or processes.
Signals are either given by number with the
<b>-n</b> option or by name with the
<b>-s</b> option
(as given in
<b>&lt;signal.h&gt;</b>, stripped of the prefix &#145;&#145;SIG&#146;&#146; with
the exception that SIGCLD is named CHLD).
For backward compatibility, the
<b>n</b> and
<b>s</b> can be omitted and the number or name placed immediately
after the
<b>-</b>. If the signal being sent is TERM (terminate) or HUP (hangup),
then the job or process will be sent a CONT (continue) signal
if it is stopped.
The argument
<i>job</i> can be the process id of a process that is not a member of one of the
active jobs.
See
<i>Jobs</i> for a description of the format of
<i>job</i>. In the third form,
<b>kill -l</b>, if
<i>sig</i> is not specified,
the signal names are listed.
Otherwise, for each
<i>sig</i> that is a name, the corresponding signal number is listed.
For each
<i>sig</i> that is a number, the signal name corresponding to the
least significant 8 bits of
<i>sig</i> is listed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>let</b> <i>arg</i> ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Each
<i>arg</i> is a separate
<i>arithmetic expression</i> to be evaluated.
See
<i>Arithmetic Evaluation</i> above, for a description of arithmetic expression evaluation.
<p>
The exit status is
0 if the value of the last expression
is non-zero, and 1 otherwise.
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>newgrp</b> [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Equivalent to
<b>exec /bin/newgrp</b><i> arg</i> &#46;...
</td></tr>
<tr valign="top"><td colspan="2">
<b>print</b> [ <b>-CRenprsv</b> ] [ <b>-u</b> <i>unit</i>] [ <b>-f</b> <i>format</i> ] [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
With no options or with option
<b>-</b> or
<b>--</b>, each
<i>arg</i> is printed
on standard output.
The
<b>-f</b> option causes the arguments to be printed as
described by
<b>printf</b>. In this case, any
<b>e</b>, <b>n</b>, <b>r</b>, <b>R</b> options are ignored.
Otherwise,
unless the
<b>-C</b>, <b>-R</b>, <b>-r</b>, or
<b>-v</b> are specified, the following
escape conventions will be applied:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>&#92;a</b> </td><td valign="bottom">
The alert character (ascii
<b>07</b>). </td></tr>
<tr valign="top"><td>
<b>&#92;b</b> </td><td valign="bottom">
The backspace character (ascii
<b>010</b>). </td></tr>
<tr valign="top"><td>
<b>&#92;c</b> </td><td valign="bottom">
Causes
<b>print</b> to end without processing more arguments and
not adding a new-line.
</td></tr>
<tr valign="top"><td>
<b>&#92;f</b> </td><td valign="bottom">
The formfeed character (ascii
<b>014</b>). </td></tr>
<tr valign="top"><td>
<b>&#92;n</b> </td><td valign="bottom">
The new-line character (ascii
<b>012</b>). </td></tr>
<tr valign="top"><td>
<b>&#92;r</b> </td><td valign="bottom">
The carriage return character (ascii
<b>015</b>). </td></tr>
<tr valign="top"><td>
<b>&#92;t</b> </td><td valign="bottom">
The tab character (ascii
<b>011</b>). </td></tr>
<tr valign="top"><td>
<b>&#92;v</b> </td><td valign="bottom">
The vertical tab character (ascii
<b>013</b>). </td></tr>
<tr valign="top"><td>
<b>&#92;E</b> </td><td valign="bottom">
The escape character (ascii
<b>033</b>). </td></tr>
<tr valign="top"><td>
<b>&#92;&#92;</b> </td><td valign="bottom">
The backslash character &#92;.
</td></tr>
<tr valign="top"><td>
<b>&#92;0</b><i>x</i> </td><td valign="bottom">
The character defined by the 1, 2, or 3-digit octal
string given by <i>x</i>.
</td></tr>
<!-- PP ends table -->
</table>
The
<b>-R</b> option will print all subsequent arguments and options
other than
<b>-n</b>. The
<b>-e</b> causes the above escape conventions to be applied.
This is the default behavior.
It reverses the effect of an earlier
<b>-r</b>. The
<b>-p</b> option causes the
arguments to be written onto the pipe
of the process spawned with
<b>|&</b> instead of standard output.
The
<b>-v</b> option treats each
<i>arg</i> as a variable name and writes the value in
the
<b>printf</b> <b>%B</b> format.
The
<b>-C</b> option treats each
<i>arg</i> as a variable name and writes the value in
the
<b>printf</b> <b>%#B</b> format.
The
<b>-s</b> option causes the
arguments to be written onto the history file
instead of standard output.
The
<b>-u</b> option can be used to specify a one digit
file descriptor unit number
<i>unit</i> on which the
output will be placed.
The default is 1.
If the option
<b>-n</b> is used, no
<b>new-line</b> is added to the output.
</td></tr>
<tr valign="top"><td colspan="2">
<b>printf</b> <i>format</i> [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The arguments
<i>arg</i> are printed on standard output
in accordance with the ANSI-C
formatting rules associated with the format string
<i>format</i>. If the number of arguments exceeds the number of
format specifications, the
<b>format</b> string is reused to format remaining arguments.
The following extensions can also be used:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>%b</b> </td><td valign="bottom">
A
<b>%b</b> format can be used instead of
<b>%s</b> to cause escape sequences in the corresponding
<i>arg</i> to be expanded as described in
<b>print.</b> </td></tr>
<tr valign="top"><td>
<b>%B</b> </td><td valign="bottom">
A
<b>%B</b> option causes each of the arguments to be treated
as variable names and the binary value of variable
will be printed.
The alternate flag
<b>#</b> causes a compound variable to be output on a single line.
This is most useful for compound variables and variables whose attribute
is
<b>-b</b>. </td></tr>
<tr valign="top"><td>
<b>%H</b> </td><td valign="bottom">
A
<b>%H</b> format can be used instead of
<b>%s</b> to cause characters in
<i>arg</i> that are special in HTML and XML
to be output as their entity name.
</td></tr>
<tr valign="top"><td>
<b>%P</b> </td><td valign="bottom">
A
<b>%P</b> format can be used instead of
<b>%s</b> to cause
<i>arg</i> to be interpreted as an extended regular
expression and be printed as a shell pattern.
</td></tr>
<tr valign="top"><td>
<b>%R</b> </td><td valign="bottom">
A
<b>%R</b> format can be used instead of
<b>%s</b> to cause
<i>arg</i> to be interpreted as a shell pattern
and to be printed as an extended regular expression.
</td></tr>
<tr valign="top"><td>
<b>%q</b> </td><td valign="bottom">
A
<b>%q</b> format can be used instead of
<b>%s</b> to cause the resulting string to be quoted in a manner than can
be reinput to the shell.
</td></tr>
<tr valign="top"><td colspan="2">
<b>%(</b><i>date-format</i><b>)T</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
A
<b>%(</b><i>date-format</i><b>)T</b> format can be use to treat an argument as a date/time string
and to format the date/time according to the
<i>date-format</i> as defined for the
<b>date</b>(1)
command.
</td></tr>
<tr valign="top"><td>
<b>%Z</b> </td><td valign="bottom">
A
<b>%Z</b> format will output a byte whose value is 0.
</td></tr>
<tr valign="top"><td>
<b>%d</b> </td><td valign="bottom">
The precision field of the
<b>%d</b> format can be followed by a
<b>.</b> and the output base.
In this case, the
<b>#</b> flag character causes
<i>base</i><b>#</b> to be prepended.
</td></tr>
<tr valign="top"><td>
<b>#</b> </td><td valign="bottom">
The
<b>#</b> flag when used with the
<b>d</b> specifier without an output base,
causes the output to be displayed in thousands units with one of the suffixes
<b>k M G T P E</b> to indicate the unit.
The
<b>#</b> flag when used with the
<b>i</b> specifier causes the output to be displayed in 1024 with one of the suffixes
<b>Ki Mi Gi Ti Pi Ei</b> to indicate the unit.
</td></tr>
<tr valign="top"><td>
<b>=</b> </td><td valign="bottom">
The
<b>=</b> flag has been added to center the output within the specified field width.
</td></tr>
<!-- PP ends table -->
</table>
</td></tr>
<tr valign="top"><td colspan="2">
<b>pwd</b> [ <b>-LP</b> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Outputs the value of the current working
directory.
The
<b>-L</b> option is the default; it prints the logical name of the current directory.
If the
<b>-P</b> option is given,
all symbolic links are resolved from the name.
The last instance of
<b>-L</b> or
<b>-P</b> on the command line
determines which method is used.
</td></tr>
<tr valign="top"><td colspan="2">
<b>read</b> [ <b>-ACprsv</b> ] [ <b>-d</b> <i>delim</i>] [ <b>-n</b> <i>n</i>] [ [ <b>-N</b> <i>n</i>] [ [ <b>-t</b> <i>timeout</i>] [ <b>-u</b> <i>unit</i>] [ <i>vname</i><b>?</b><i>prompt</i> ] [ <i>vname</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The shell input mechanism.
One line is read and
is broken up into fields using the characters in
<b></b> <font size="-1">IFS</font> as separators.
The escape character,
<b>&#92;</b>, is used to remove any special meaning for the next
character and for line continuation.
The
<b>-d</b> option
causes the read to continue to the first character of
<i>delim</i> rather than new-line.
The
<b>-n</b> option causes at most
<i>n</i> bytes to read rather a full line
but will return when reading from a slow device
as soon as any characters have been read.
The
<b>-N</b> option causes exactly
<i>n</i> to be read unless an end-of-file has been encountered or
the read times out because of the
<b>-t</b> option.
In raw mode,
<b>-r,</b> the
<b>&#92;</b> character is not treated specially.
The first
field is assigned to the first
<i>vname</i>, the second field
to the second
<i>vname</i>, etc., with leftover fields assigned to the last
<i>vname</i>. When
<i>vname</i> has the binary attribute and
<b>-n</b> or
<b>-N</b> is specified, the bytes that are read are stored directly
into the variable.
If the
<b>-v</b> is specified, then the value of the first
<i>vname</i> will be used as a default value when reading from a terminal device.
The
<b>-A</b> option causes the variable
<i>vname</i> to be unset and each field that is read to be stored in
successive elements of the indexed array
<i>vname.</i> The
<b>-C</b> option causes the variable
<i>vname</i> to be read as a compound variable.  Blanks will be ignored when
finding the beginning open parenthesis.
The
<b>-p</b> option causes the input line
to be taken from the input pipe
of a process spawned by the shell
using
<b>|&</b>. If the
<b>-s</b> option is present,
the input will be saved as a command in the history file.
The option
<b>-u</b> can be used to specify a one digit file
descriptor unit
<i>unit</i> to read from.
The file descriptor can be opened with the
<b>exec</b> special built-in command.
The default value of unit
<i>n</i> is 0.
The option
<b>-t</b> is used to specify a timeout in
seconds when reading from a terminal or pipe.
If
<i>vname</i> is omitted, then
<font size="-1"></font> <b>REPLY</b> is used as the default
<i>vname</i>. An end-of-file with the
<b>-p</b> option causes cleanup for this process
so that another can be spawned.
If the first argument contains a
<b>?</b>, the remainder of this word is used as a
<i>prompt</i> on standard error
when the shell is interactive.
The exit status is 0 unless an end-of-file is encountered
or
<b>read</b> has timed out.
</td></tr>
<tr valign="top"><td colspan="2">
&#134;&#134; <b>readonly</b> [ <b>-p</b> ] [ <i>vname</i>[<b>=</b><i>value</i>] ] ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If
<i>vname</i> is not given,
the names and values of each variable with
the readonly attribute is printed with the values
quoted in a manner that allows them to be re-inputted.
The
<b>-p</b> option
causes the word
<b>readonly</b> to be inserted before each one.
Otherwise, the given
<i>vname</i>s are marked
readonly and these
names cannot be changed
by subsequent assignment.
When defining a type, if the value of a readonly sub-variable is not defined
the value is required when creating each instance.
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>return</b> [ <i>n</i> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Causes a shell
<i>function</i> or
<b>.</b>
script to return
to the invoking script
with the exit status specified by
<i>n</i>. The value will be the least significant 8 bits of the specified status.
If
<i>n</i> is omitted, then the return status is that of the last command executed.
If
<b>return</b> is invoked while not in a
<i>function</i> or a
<b>.</b>
script,
then it behaves the same as
<b>exit</b>. </td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>set</b> [ <b>&#177;BCGabefhkmnoprstuvx</b> ] [ <b>&#177;o</b> [ <i>option</i> ] ] ... [ <b>&#177;A</b> <i>vname</i> ]  [ <i>arg</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The options for this command have meaning as follows:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-A</b> </td><td valign="bottom">
Array assignment.
Unset the variable
<i>vname</i> and assign values sequentially from the
<i>arg</i> list.
If
<b>+A</b> is used, the variable
<i>vname</i> is not unset first.
</td></tr>
<tr valign="top"><td>
<b>-B</b> </td><td valign="bottom">
Enable brace pattern field generation.
This is the default behavior.
</td></tr>
<tr valign="top"><td>
<b>-B</b> </td><td valign="bottom">
Enable brace group expansion.  On by default.
</td></tr>
<tr valign="top"><td>
<b>-C</b> </td><td valign="bottom">
Prevents redirection
<b>&gt;</b> from truncating existing files.
Files that are created are opened with the O_EXCL mode.
Requires
<b>&gt;|</b> to truncate a file when turned on.
</td></tr>
<tr valign="top"><td>
<b>-G</b> </td><td valign="bottom">
Causes the pattern
<b>**</b> by itself to match files and zero or more directories and sub-directories
when used for file name generation.
If followed by a
<b>/</b> only directories and sub-directories are matched.
</td></tr>
<tr valign="top"><td>
<b>-a</b> </td><td valign="bottom">
All subsequent variables that are defined are automatically exported.
</td></tr>
<tr valign="top"><td>
<b>-b</b> </td><td valign="bottom">
Prints job completion messages as soon as a background job changes
state rather than waiting for the next prompt.
</td></tr>
<tr valign="top"><td>
<b>-e</b> </td><td valign="bottom">
Unless contained in a
<b>||</b> or
<b>&&</b> command, or the command following an
<b>if</b> <b>while</b> or
<b>until</b> command or in the pipeline following
<b>!</b>, if a command has a non-zero exit status,
execute the
<font size="-1"></font> <b>ERR</b> trap, if set,
and exit.
This mode is disabled while reading profiles.
</td></tr>
<tr valign="top"><td>
<b>-f</b> </td><td valign="bottom">
Disables file name generation.
</td></tr>
<tr valign="top"><td>
<b>-h</b> </td><td valign="bottom">
Each command
becomes a tracked alias when first encountered.
</td></tr>
<tr valign="top"><td>
<b>-k</b> </td><td valign="bottom">
(Obsolete). All variable assignment arguments are placed in the environment for a command,
not just those that precede the command name.
</td></tr>
<tr valign="top"><td>
<b>-m</b> </td><td valign="bottom">
Background jobs will run in a separate process group
and a line will print upon completion.
The exit status of background jobs is reported in a completion message.
On systems with job control,
this option is turned on automatically for
interactive shells.
</td></tr>
<tr valign="top"><td>
<b>-n</b> </td><td valign="bottom">
Read commands and check them for syntax errors, but do not execute them.
Ignored for interactive shells.
</td></tr>
<tr valign="top"><td>
<b>-o</b> </td><td valign="bottom">
The following argument can be one of the following option names:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>allexport</b> </td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Same as
<b>-a</b>. </td></tr>
<tr valign="top"><td>
<b>errexit</b> </td><td valign="bottom">
Same as
<b>-e</b>. </td></tr>
<tr valign="top"><td>
<b>bgnice</b> </td><td valign="bottom">
All background jobs are run at a lower priority.
This is the default mode.
</td></tr>
<tr valign="top"><td colspan="2">
<b>braceexpand</b> </td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Same as
<b>-B</b>. </td></tr>
<tr valign="top"><td>
<b>emacs</b> </td><td valign="bottom">
Puts you in an
<i>emacs</i> style in-line editor for command entry.
</td></tr>
<tr valign="top"><td>
<b>globstar</b> </td><td valign="bottom">
Same as
<b>-G</b>. </td></tr>
<tr valign="top"><td>
<b>gmacs</b> </td><td valign="bottom">
Puts you in a
<i>gmacs</i> style in-line editor for command entry.
</td></tr>
<tr valign="top"><td colspan="2">
<b>ignoreeof</b> </td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
The shell will not exit on end-of-file.
The command
<b>exit</b> must be used.
</td></tr>
<tr valign="top"><td>
<b>keyword</b> </td><td valign="bottom">
Same as
<b>-k</b>. </td></tr>
<tr valign="top"><td>
<b>markdirs</b> </td><td valign="bottom">
All directory names resulting from file name generation have a trailing
<b>/</b> appended.
</td></tr>
<tr valign="top"><td>
<b>monitor</b> </td><td valign="bottom">
Same as
<b>-m</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>multiline</b> </td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
The built-in editors will use multiple lines on the screen for lines
that are longer than the width of the screen.  This may not work
for all terminals.
</td></tr>
<tr valign="top"><td colspan="2">
<b>noclobber</b> </td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Same as
<b>-C</b>. </td></tr>
<tr valign="top"><td>
<b>noexec</b> </td><td valign="bottom">
Same as
<b>-n</b>. </td></tr>
<tr valign="top"><td>
<b>noglob</b> </td><td valign="bottom">
Same as
<b>-f</b>. </td></tr>
<tr valign="top"><td>
<b>nolog</b> </td><td valign="bottom">
Do not save function definitions in the history file.
</td></tr>
<tr valign="top"><td>
<b>notify</b> </td><td valign="bottom">
Same as
<b>-b</b>. </td></tr>
<tr valign="top"><td>
<b>nounset</b> </td><td valign="bottom">
Same as
<b>-u</b>. </td></tr>
<tr valign="top"><td>
<b>pipefail</b> </td><td valign="bottom">
A pipeline will not complete until all components
of the pipeline have completed, and the return value
will be the value of the last non-zero command
to fail or zero if no command has failed.
</td></tr>
<tr valign="top"><td>
<b>showme</b> </td><td valign="bottom">
When enabled, simple commands or pipelines preceded by a semicolon
(<b>;</b>) will be displayed as if the
<b>xtrace</b> option were enabled but will not be executed.
Otherwise, the leading
<b>;</b> will be ignored.
</td></tr>
<tr valign="top"><td colspan="2">
<b>privileged</b> </td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Same as
<b>-p</b>. </td></tr>
<tr valign="top"><td>
<b>verbose</b> </td><td valign="bottom">
Same as
<b>-v</b>. </td></tr>
<tr valign="top"><td>
<b>trackall</b> </td><td valign="bottom">
Same as
<b>-h</b>. </td></tr>
<tr valign="top"><td>
<b>vi</b> </td><td valign="bottom">
Puts you in insert mode of a
<i>vi</i> style in-line editor
until you hit the escape character
<b>033</b>. This puts you in control mode.
A return sends the line.
</td></tr>
<tr valign="top"><td>
<b>viraw</b> </td><td valign="bottom">
Each character is processed as it is typed
in
<i>vi</i> mode.
</td></tr>
<tr valign="top"><td>
<b>xtrace</b> </td><td valign="bottom">
Same as
<b>-x</b>. </td></tr>
<!-- PP ends table -->
</table>
If no option name is supplied, then the current option settings are printed.
</td></tr>
<tr valign="top"><td>
<b>-p</b> </td><td valign="bottom">
Disables processing of the
<b><font size="-1">$HOME</font>/.profile</b> file and uses the file
<b>/etc/suid_profile</b> instead of the
<font size="-1"></font> <b>ENV</b> file.
This mode is on whenever the effective uid (gid)
is not equal to the real uid (gid).
Turning this off causes the effective uid and gid to be
set to the real uid and gid.
</td></tr>
<tr valign="top"><td>
<b>-r</b> </td><td valign="bottom">
Enables the restricted shell.  This option cannot be unset
once set.
</td></tr>
<tr valign="top"><td>
<b>-s</b> </td><td valign="bottom">
Sort the positional parameters lexicographically.
</td></tr>
<tr valign="top"><td>
<b>-t</b> </td><td valign="bottom">
(Obsolete).  Exit after reading and executing one command.
</td></tr>
<tr valign="top"><td>
<b>-u</b> </td><td valign="bottom">
Treat unset parameters as an error when substituting.
</td></tr>
<tr valign="top"><td>
<b>-v</b> </td><td valign="bottom">
Print shell input lines as they are read.
</td></tr>
<tr valign="top"><td>
<b>-x</b> </td><td valign="bottom">
Print commands and their arguments as they are executed.
</td></tr>
<tr valign="top"><td>
<b>--</b> </td><td valign="bottom">
Do not change any of the options; useful in setting
<b>$1</b> to a value beginning with
<b>-</b>. If no arguments follow this option then the positional parameters are unset.
</td></tr>
<!-- PP ends table -->
</table>
As an obsolete feature,
if the first
<i>arg</i> is
<b>-</b> then the
<b>-x</b> and
<b>-v</b> options are turned off and the next
<i>arg</i> is treated as the first argument.
Using
<b>+</b> rather than
<b>-</b> causes these options to be turned off.
These options can also be used upon invocation of the shell.
The current set of options may be found in
<b>$-</b>. Unless
<b>-A</b> is specified,
the remaining arguments are positional
parameters and are assigned, in order, to
<b>$1</b> <b>$2</b> &#46;...
If no arguments are given, then the names and values
of all variables are printed on the standard output.
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>shift</b> [ <i>n</i> ]
</td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
The positional parameters from
<b>$</b><i>n</i><b>+1</b>
&#46;..
are renamed
<b>$1</b> &#46;..
, default
<i>n</i> is 1.
The parameter
<i>n</i> can be any arithmetic expression that evaluates to a non-negative
number less than or equal to
<b>$#</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>sleep</b> <i>seconds</i>
</td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Suspends execution for the number of decimal seconds or fractions of a
second given by
<i>seconds</i>. </td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>trap</b> [ <b>-p</b> ] [ <i>action</i> ] [ <i>sig</i> ] ...
</td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
The
<b>-p</b> option causes the trap
action associated with each trap as specified by the arguments
to be printed with appropriate quoting.
Otherwise,
<i>action</i> will be processed as if it were an argument to
<b>eval</b> when the shell
receives signal(s)
<i>sig</i>. Each
<i>sig</i> can be given as a number or as the name of the signal.
Trap commands are executed in order of signal number.
Any attempt to set a trap on a signal that
was ignored on entry to the current shell
is ineffective.
If
<i>action</i> is omitted and the first
<i>sig</i> is a number, or if
<i>action</i> is
<b>-</b>, then the trap(s) for each
<i>sig</i> are reset
to their original values.
If
<i>action</i> is the null
string then this signal is ignored by the shell and by the commands
it invokes.
If
<i>sig</i> is
<font size="-1"></font> <b>ERR</b> then
<i>action</i> will be executed whenever a command has a non-zero exit status.
If
<i>sig</i> is
<font size="-1"></font> <b>DEBUG</b> then
<i>action</i> will be executed before each command.
The variable
<b>.sh.command</b> will contain the contents of the current command line
when
<i>action</i> is running.
If the exit status of the trap is
<b>2</b> the command will not be executed.
If the exit status of the trap is
<b>255</b> and inside a function or a dot script,
the function or dot script will return.
If
<i>sig</i> is
<b>0</b> or
<font size="-1"></font> <b>EXIT</b> and the
<b>trap</b> statement is executed inside the body of a function defined with the
<b>function</b> <i>name</i> syntax,
then the command
<i>action</i> is executed
after the function completes.
If
<i>sig</i> is
<b>0</b> or
<font size="-1"></font> <b>EXIT</b> for a
<b>trap</b> set outside any function
then the command
<i>action</i> is executed
on exit from the shell.
If
<i>sig</i> is
<font size="-1"></font> <b>KEYBD</b>, then
<i>action</i> will be executed whenever a key is read
while in
<b>emacs</b>, <b>gmacs</b>, or
<b>vi</b> mode.
The
<b>trap</b> command
with no arguments prints a list
of commands associated with each signal number.
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
An
<b>exit</b> or
<b>return</b> without an argument in a trap action will
preserve the exit status of the command that invoked the trap.
</td></tr>
<tr valign="top"><td>
<b>true</b>
</td><td valign="bottom">
Does nothing, and exits 0. Used with
<b>while</b> for infinite loops.
</td></tr>
<tr valign="top"><td>
<b>true</b>
</td><td valign="bottom">
Does nothing, and exits 0. Used with
<b>while</b> for infinite loops.
</td></tr>
<tr valign="top"><td colspan="2">
&#134;&#134; <b>typeset</b> [ <b>&#177;ACHSflbnprtux</b> ] [ <b>&#177;EFLRXZi[</b><i>n</i>] ]  [ <b>-T </b><i>tname</i>=(<i>assign_list</i>) ] [ <b>-h </b><i>str</i> ] [ <b>-a</b> [<i>type</i>] ] [ <i>vname</i>[<b>=</b><i>value</i> ]  ] ...
</td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Sets attributes and values for shell variables and functions.
When invoked inside a function defined with the
<b>function</b> <i>name</i> syntax,
a new instance of the variable
<i>vname</i> is created,
and the variable&#146;s value and type are restored
when the function completes.
The following list of attributes may be specified:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-A</b> </td><td valign="bottom">
Declares
<i>vname</i> to be an associative array.
Subscripts are strings rather than arithmetic
expressions.
</td></tr>
<tr valign="top"><td>
<b>-C</b> </td><td valign="bottom">
causes each
<i>vname</i> to be a compound variable.
<i>value</i> names a compound variable it is copied into
<i>vname</i>. Otherwise, it unsets each
<i>vname</i>. </td></tr>
<tr valign="top"><td>
<b>-a</b> </td><td valign="bottom">
Declares
<i>vname</i> to be an indexed array.
If
<i>type</i> is specified, it must be the name of an enumeration
type created with the
<b>enum</b> command and it allows enumeration constants to be used
as subscripts.
</td></tr>
<tr valign="top"><td>
<b>-E</b> </td><td valign="bottom">
Declares
<i>vname</i> to be a double precision floating point number.
If
<i>n</i> is non-zero, it defines the number of significant figures
that are used when expanding
<i>vname</i>. Otherwise, ten significant figures will be used.
</td></tr>
<tr valign="top"><td>
<b>-F</b> </td><td valign="bottom">
Declares
<i>vname</i> to be a double precision floating point number.
If
<i>n</i> is non-zero, it defines the number of places after the
decimal point that are used when expanding
<i>vname</i>. Otherwise ten places after the decimal point will be used.
</td></tr>
<tr valign="top"><td>
<b>-H</b> </td><td valign="bottom">
This option provides UNIX to host-name file mapping on non-UNIX
machines.
</td></tr>
<tr valign="top"><td>
<b>-L</b> </td><td valign="bottom">
Left justify and remove leading blanks from
<i>value</i>. If
<i>n</i> is non-zero, it defines the width
of the field,
otherwise it is determined by the width of the value of
first assignment.
When the variable is assigned to, it is
filled on the right with blanks or truncated, if necessary, to
fit into the field.
The
<b>-R</b> option is turned off.
</td></tr>
<tr valign="top"><td>
<b>-R</b> </td><td valign="bottom">
Right justify and fill with leading blanks.
If
<i>n</i> is non-zero, it defines the width
of the field,
otherwise it is determined by the width of the value of
first assignment.
The field is left filled with blanks or
truncated from the end if the
variable is reassigned.
The
<b>-L</b> option is turned off.
</td></tr>
<tr valign="top"><td>
<b>-S</b> </td><td valign="bottom">
When used within the
<i>assign_list</i> of a type definition, it causes the specified sub-variable
to be shared by all instances of the type.
When used inside a function defined with the
<b>function</b> reserved word, the specified variables will have
<i>function static</i> scope.
Otherwise, the variable is unset prior to processing the assignment list.
</td></tr>
<tr valign="top"><td>
<b>-T</b> </td><td valign="bottom">
Creates a type named by <i>tname</i> using the compound
assignment
<i>assign_list</i> to <i>tname</i>.
</td></tr>
<tr valign="top"><td>
<b>-X</b> </td><td valign="bottom">
Declares
<i>vname</i> to be a double precision floating point number
and expands using the
<b>%a</b> format of ISO-C99.
If
<i>n</i> is non-zero, it defines the number of hex digits after
the radix point that is used when expanding
<i>vname</i>. The default is 10.
</td></tr>
<tr valign="top"><td>
<b>-Z</b> </td><td valign="bottom">
Right justify and fill with leading zeros if
the first non-blank character is a digit and the
<b>-L</b> option has not been set.
Remove leading zeros if the
<b>-L</b> option is also set.
If
<i>n</i> is non-zero, it defines the width
of the field,
otherwise it is determined by the width of the value of
first assignment.
</td></tr>
<tr valign="top"><td>
<b>-f</b> </td><td valign="bottom">
The names refer to function names rather than
variable names.
No assignments can be made and the only other
valid options are
<b>-t</b>, <b>-u</b> and
<b>-x</b>. The
<b>-t</b> option
turns on execution tracing for this function.
The
<b>-u</b> option
causes this function to be marked undefined.
The
<font size="-1"></font> <b>FPATH</b> variable will be searched to find the function definition
when the function is referenced.
If no options other than
<b>-f</b> is specified, then the function definition will be displayed
on standard output.  If
<b>+f</b> is specified, then a line containing the function name followed
by a shell comment containing the line number and path name of the
file where this function was defined, if any, is displayed.
</td></tr>
<tr valign="top"><td>
<b>-b</b> </td><td valign="bottom">
The variable can hold any number of bytes of data.
The data can be text or binary.
The value is represented by the base64 encoding of the data.
If
<b>-Z</b> is also specified, the size in bytes of the
data in the buffer will be determined by the size associated with the
<b>-Z</b>. If the base64 string assigned results in more data, it will be
truncated.  Otherwise, it will be filled with bytes
whose value is zero.
The
<b>printf</b> format
<b>%B</b> can be used to output the actual data in this buffer instead
of the base64 encoding of the data.
</td></tr>
<tr valign="top"><td>
<b>-h</b> </td><td valign="bottom">
Used within type definitions to add information when generating
information about the sub-variable on the man page.
It is ignored when used outside of a type definition.
When used with
<b>-f</b> the information is associated with the corresponding discipline
function.
</td></tr>
<tr valign="top"><td>
<b>-i</b> </td><td valign="bottom">
Declares
<i>vname</i> to be represented internally as integer.
The right hand side of an assignment is evaluated as an
arithmetic expression when assigning to an integer.
If
<i>n</i> is non-zero, it defines the output arithmetic base,
otherwise the output base will be ten.
</td></tr>
<tr valign="top"><td>
<b>-l</b> </td><td valign="bottom">
All upper-case characters are
converted to lower-case.
The upper-case option,
<b>-u</b>, is turned off.
</td></tr>
<tr valign="top"><td>
<b>-n</b> </td><td valign="bottom">
Declares
<i>vname</i> to be a reference to the variable whose name is
defined by the value of variable
<i>vname</i>. This is usually used to reference a variable inside
a function whose name has been passed as an argument.
</td></tr>
<tr valign="top"><td>
<b>-p</b> </td><td valign="bottom">
The name, attributes and values for the given
<i>vname</i>s are written on standard output in a form that can be
used as shell input.
If
<b>+p</b> is specified, then the values are not displayed.
</td></tr>
<tr valign="top"><td>
<b>-r</b> </td><td valign="bottom">
The given
<i>vname</i>s are marked
readonly and these
names cannot be changed
by subsequent assignment.
</td></tr>
<tr valign="top"><td>
<b>-t</b> </td><td valign="bottom">
Tags the variables.
Tags are user definable and have no special
meaning to the shell.
</td></tr>
<tr valign="top"><td>
<b>-u</b> </td><td valign="bottom">
All lower-case characters are converted
to upper-case.
The lower-case option,
<b>-l</b>, is turned off.
</td></tr>
<tr valign="top"><td>
<b>-x</b> </td><td valign="bottom">
The given
<i>vname</i>s are marked for automatic
export to the
<i>environment</i> of subsequently-executed commands.
Variables whose names contain a <b><font size="2">.</font></b>
cannot be exported.
</td></tr>
<!-- PP ends table -->
</table>
The
<b>-i</b> attribute cannot be specified along with
<b>-R</b>, <b>-L</b>, <b>-Z</b>, or
<b>-f</b>. <p>
Using
<b>+</b> rather than
<b>-</b> causes these options to be turned off.
If no
<i>vname</i> arguments are given,
a list of
<i>vnames</i> (and optionally the
<i>values</i>) of the
<i>variables</i> is printed.
(Using
<b>+</b> rather than
<b>-</b> keeps the
values from being printed.)
The
<b>-p</b> option causes
<b>typeset</b> followed by the option letters
to be printed before each name
rather than the names of the options.
If any option other than
<b>-p</b> is given,
only those variables
which have all of the given
options are printed.
Otherwise, the
<i>vname</i>s and
<i>attributes</i> of all
<i>variables</i> that have attributes
are printed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>ulimit</b> [ <b>-HSacdfmnpstv</b> ] [ <i>limit</i> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set or display a resource limit.
The available resource limits are listed below.
Many systems do not support one or more of these limits.
The limit for a specified resource is set when
<i>limit</i> is specified.
The value of
<i>limit</i> can be a number in the unit specified below with each resource,
or the value
<b>unlimited</b>. The
<b>-H</b> and
<b>-S</b> options specify whether the hard limit or the
soft limit for the given resource is set.
A hard limit cannot be increased once it is set.  A soft
limit can be increased up to the value of the hard limit.
If neither the
<b>H</b> nor
<b>S</b> option is specified, the limit applies to both.
The current resource limit is printed when
<i>limit</i> is omitted.
In this case, the soft limit is printed unless
<b>H</b> is specified.
When more than one resource is specified, then the limit
name and unit is printed before the value.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-a</b> </td><td valign="bottom">
Lists all of the current resource limits.
</td></tr>
<tr valign="top"><td>
<b>-c</b> </td><td valign="bottom">
The number of 512-byte blocks on the size of core dumps.
</td></tr>
<tr valign="top"><td>
<b>-d</b> </td><td valign="bottom">
The number of K-bytes on the size of the data area.
</td></tr>
<tr valign="top"><td>
<b>-f</b> </td><td valign="bottom">
The number of 512-byte blocks on files that can be written by the
current process or by child processes (files of any size may be read).
</td></tr>
<tr valign="top"><td>
<b>-m</b> </td><td valign="bottom">
The number of K-bytes on the size of physical memory.
</td></tr>
<tr valign="top"><td>
<b>-n</b> </td><td valign="bottom">
The number of file descriptors plus 1.
</td></tr>
<tr valign="top"><td>
<b>-p</b> </td><td valign="bottom">
The number of 512-byte blocks for pipe buffering.
</td></tr>
<tr valign="top"><td>
<b>-s</b> </td><td valign="bottom">
The number of K-bytes on the size of the stack area.
</td></tr>
<tr valign="top"><td>
<b>-t</b> </td><td valign="bottom">
The number of CPU seconds to be used by each process.
</td></tr>
<tr valign="top"><td>
<b>-v</b> </td><td valign="bottom">
The number of K-bytes for virtual memory.
</td></tr>
<!-- PP ends table -->
</table>
If no option is given,
<b>-f</b> is assumed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>umask</b> [ <b>-S</b> ] [ <i>mask</i> ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The user file-creation mask is set to
<i>mask</i> (see
<b>umask</b>(2)).
<i>mask</i> can either be an octal number or
a symbolic value as described in
<b>chmod</b>(1).
If a symbolic value is given,
the new
umask value is the complement of the result of
applying
<i>mask</i> to the complement of the previous umask value.
If
<i>mask</i> is omitted, the current value of the mask is printed.
The
<b>-S</b> option causes the mode to be printed as a symbolic
value.  Otherwise, the
mask is printed in octal.
</td></tr>
<tr valign="top"><td colspan="2">
&#134; <b>unalias</b> [ <b>-a</b> ] <i>name</i> ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The aliases
given by the list of
<i>name</i>s are removed from the alias list.
The
<b>-a</b> option causes all the
aliases to be unset.
</td></tr>
<tr valign="top"><td colspan="2">
&#134;<b>unset</b> [ <b>-fnv</b> ] <i>vname</i> ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The variables given by the list of
<i>vname</i>s are unassigned,
i.e.,
except for sub-variables within a type,
their values and attributes are erased.
For sub-variables of a type, the values are reset to the
default value from the type definition.
Readonly variables cannot be unset.
If the
<b>-f</b> option
is set, then the names refer to
<i>function</i> names.
If the
<b>-v</b> option is set, then the names refer to
<i>variable</i> names.
The
<b>-f</b> option overrides
<b>-v</b>. If
<b>-n</b> is set and
<i>name</i> is a name reference, then
<i>name</i> will be unset rather than the variable
that it references.
The default is equivalent to
<b>-v</b>. Unsetting
<font size="-1"></font> <b>LINENO</b>, <font size="-1"></font> <b>MAILCHECK</b>, <font size="-1"></font> <b>OPTARG</b>, <font size="-1"></font> <b>OPTIND</b>, <font size="-1"></font> <b>RANDOM</b>, <font size="-1"></font> <b>SECONDS</b>, <font size="-1"></font> <b>TMOUT</b>, and
<font size="-1"></font> <b>_</b> removes their special meaning even if they are
subsequently assigned to.
</td></tr>
<tr valign="top"><td colspan="2">
<b>wait</b> [ <i>job</i> ... ]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Wait for the specified
<i>job</i> and
report its termination status.
If
<i>job</i> is not given, then all currently active child processes are waited for.
The exit status from this command is that of
the last process waited for if
<i>job</i> is specified; otherwise it is zero.
See
<i>Jobs</i> for a description of the format of
<i>job</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>whence</b> [ <b>-afpv</b> ] <i>name</i> ...
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
For each
<i>name</i>, indicate how it
would be interpreted if used as a command name.
<p>
The
<b>-v</b> option
produces a more verbose report.
The
<b>-f</b> option skips the search for functions.
The
<b>-p</b> option
does a path search for
<i>name</i> even if name is an alias, a function, or a reserved word.
The
<b>-p</b> option turns off the
<b>-v</b> option.
The
<b>-a</b> option
is similar to the
<b>-v</b> option but causes
all interpretations of the given name to be reported.
</td></tr>
</table>
<h2><i>Invocation.</i></h2>
If the shell is invoked by
<b>exec</b>(2),
and the first character of argument zero
(<b>$0</b>) is
<b>-</b>, then the shell is assumed to be a
<i>login</i> shell and
commands are read from
<b>/etc/profile</b> and then from either
<b>.profile</b> in the current directory or
<b><font size="-1">$HOME</font>/.profile</b>, if either file exists.
Next, for interactive shells, commands are read from
the file named by
performing parameter expansion, command substitution,
and arithmetic substitution on
the value of the environment variable
<font size="-1"></font> <b>ENV</b> if the file exists.
If the
<b>-s</b> option is not present and
<i>arg</i> and a file by the name of
<i>arg</i> exists, then it reads and executes this script.
Otherwise, if the first
<i>arg</i> does not contain a
<b>/</b>, a path search is performed on the first
<i>arg</i> to determine the name of the script to execute.
The script
<i>arg</i> must have execute permission and any
<i>setuid</i> and
<i>setgid</i> settings will be ignored.
If the script is not found on the path,
<i>arg</i> is processed as if it named a built-in command or function.
Commands are then read as described below;
the following options are interpreted by the shell
when it is invoked:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-D</b> </td><td valign="bottom">
Do not execute the script, but output the set of double quoted strings
preceded by a
<b>$</b>. These strings are needed for localization of the script to different locales.
</td></tr>
<tr valign="top"><td>
<b>-E</b> </td><td valign="bottom">
Reads the file named by the
<b>ENV</b> variable or by
<font size="-1">$HOME</font>/<b>.</b>kshrc
if not defined after the profiles.
</td></tr>
</table>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-c</b> </td><td valign="bottom">
If the
<b>-c</b> option is present, then
commands are read from the first
<i>arg</i>. Any remaining arguments become
positional parameters starting at
<b>0</b>. </td></tr>
<tr valign="top"><td>
<b>-s</b> </td><td valign="bottom">
If the
<b>-s</b> option is present or if no
arguments remain,
then commands are read from the standard input.
Shell output,
except for the output of the
<i>Special Commands</i> listed above,
is written to
file descriptor 2.
</td></tr>
<tr valign="top"><td>
<b>-i</b> </td><td valign="bottom">
If the
<b>-i</b> option is present or
if the shell input and output are attached to a terminal (as told by
<b>tcgetattr</b>(2)),
then this shell is
<i>interactive</i>. In this case <font size="-1">TERM</font> is ignored (so that <b>kill 0</b>
does not kill an interactive shell) and <font size="-1">INTR</font> is caught and ignored
(so that
<b>wait</b> is interruptible).
In all cases, <font size="-1">QUIT</font> is ignored by the shell.
</td></tr>
<tr valign="top"><td>
<b>-r</b> </td><td valign="bottom">
If the
<b>-r</b> option is present, the shell is a restricted shell.
</td></tr>
<tr valign="top"><td>
<b>-D</b> </td><td valign="bottom">
A list of all double quoted strings that are preceded by a
<b>$</b> will be printed on standard output and the shell will exit.
This set of strings will be subject to language translation
when the locale is not C or POSIX.
No commands will be executed.
</td></tr>
<tr valign="top"><td>
<b>-P</b> </td><td valign="bottom">
If
<b>-P</b> or
<b>-o profile</b> is present, the shell is a profile shell (see
<b>pfexec</b>(1)).
</td></tr>
<tr valign="top"><td>
<b>-R</b><i> filename</i> </td><td valign="bottom">
The
<b>-R</b> <i>filename</i> option is used
to generate a cross reference database
that can be used by a separate utility
to find definitions and references for variables and commands.
The filename argument specifies the generated database. A script file must be
provided on the command line as well.
</td></tr>
<!-- PP ends table -->
</table>
The remaining options and arguments are described under the
<b>set</b> command above.
An optional
<b>-</b> as the first argument is ignored.
<!-- ignored unsupported tag .if -->
<i>Rsh</i> <!-- ignored unsupported tag .if -->
<i>Rksh</i> <!-- ignored unsupported tag .if -->
<i>Rksh93</i> is used to set up login names and execution environments whose
capabilities are more controlled than those of the standard shell.
The actions of
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
are identical to those of
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
except that the following are disallowed:
<p>
Unsetting the restricted option.
<!-- Need break --><br />
changing directory (see
<b>cd</b>(1)),
<!-- Need break --><br />
setting or unsetting the value or attributes of
<font size="-1"></font> <b>SHELL</b>, <font size="-1"></font> <b>ENV</b>, <font size="-1"></font> <b>FPATH</b>, or
<font size="-1"></font> <b>PATH,</b> <!-- Need break --><br />
specifying path or
command names containing
<b>/</b>, <!-- Need break --><br />
redirecting output
(<b>&gt;</b>, <b>&gt;|</b>, <b>&lt;&gt;</b>, and
<b>&gt;&gt;</b>). <!-- Need break --><br />
adding or deleting built-in commands.
<!-- Need break --><br />
using
<b>command -p</b> to invoke a command.
<p>
The restrictions above are enforced
after <b>.profile</b> and the
<font size="-1"></font> <b>ENV</b> files are interpreted.
<p>
When a command to be executed is found to be a shell procedure,
<!-- ignored unsupported tag .if -->
invokes
<i>sh</i> <!-- ignored unsupported tag .if -->
invokes
<i>ksh</i> <!-- ignored unsupported tag .if -->
invokes
<i>ksh93</i> to execute it.
Thus, it is possible to provide to the end-user shell procedures
that have access to the full power of
the standard shell,
while imposing a limited menu of commands;
this scheme assumes that the end-user does not have write and
execute permissions in the same directory.
<p>
The net effect of these rules is that the writer of the
<b>.profile</b> has complete control over user actions,
by performing guaranteed setup actions
and leaving the user in an appropriate directory
(probably
<i>not</i> the login directory).
<p>
The system administrator often sets up a directory
of commands
(e.g.,
<b>/usr/rbin</b>) that can be safely invoked by
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<h1 class="manpages">EXIT STATUS</h1>
Errors detected by the shell, such as syntax errors,
cause the shell
to return a non-zero exit status.
If the shell is being used non-interactively,
then execution of the shell file is abandoned
unless the error occurs inside a subshell in which case
the subshell is abandoned.
Otherwise, the shell returns the exit status of
the last command executed (see also the
<b>exit</b> command above).
Run time errors detected by the shell are reported by
printing the command or function name and the error condition.
If the line number that the error occurred on is greater than one,
then the line number is also printed in square brackets
(<b>[]</b>) after the command or function name.
<h1 class="manpages">FILES</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>/etc/profile</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The system wide initialization file, executed for login shells.
<!-- ignored unsupported tag .if -->
</td></tr>
<tr valign="top"><td colspan="2">
<b>/etc/ksh.kshrc</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The system wide startup file, executed for interactive shells.

</td></tr>
<tr valign="top"><td colspan="2">
<b><font size="-1">$HOME</font>/</b><b>.</b>profile </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The personal initialization file, executed for login shells after /etc/profile.
</td></tr>
<tr valign="top"><td colspan="2">
<font size="-1">$HOME</font>/<b>.</b>.kshrc
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Default personal initialization file, executed for interactive shells when
<font size="-1"></font> <b>ENV</b> is not set.
</td></tr>
<tr valign="top"><td colspan="2">
<b>/etc/suid_profile</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Alternative initialization file, executed when instead of personal initialization file when the real and effective user or group id do not match.
</td></tr>
<tr valign="top"><td colspan="2">
<b>/dev/null</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
NULL device
</td></tr>
</table>
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<a href="../cd.html">cd(1)</a>,
<a href="../chmod.html">chmod(1)</a>,
<a href="../cut.html">cut(1)</a>,
<a href="../egrep.html">egrep(1)</a>,
<a href="../echo.html">echo(1)</a>,
<a href="../emacs.html">emacs(1)</a>,
<a href="../env.html">env(1)</a>,
<a href="../fgrep.html">fgrep(1)</a>,
<a href="../gmacs.html">gmacs(1)</a>,
<a href="../grep.html">grep(1)</a>,
<a href="../newgrp.html">newgrp(1)</a>,
<a href="../pfexec.html">pfexec(1)</a>,
<a href="../stty.html">stty(1)</a>,
<a href="../test.html">test(1)</a>,
<a href="../umask-2.html">umask(1)</a>,
<a href="../vi.html">vi(1)</a>,
<a href="../dup.html">dup(2)</a>,
<a href="../exec.html">exec(2)</a>,
<a href="../fork.html">fork(2)</a>,
<a href="../getpwnam.html">getpwnam(3)</a>,
<a href="../ioctl.html">ioctl(2)</a>,
<a href="../lseek.html">lseek(2)</a>,
<a href="../paste.html">paste(1)</a>,
<a href="../pathconf.html">pathconf(2)</a>,
<a href="../pipe.html">pipe(2)</a>,
<a href="../sysconf.html">sysconf(2)</a>,
<a href="../umask.html">umask(2)</a>,
<a href="../ulimit.html">ulimit(2)</a>,
<a href="../wait.html">wait(2)</a>,
<a href="../rand.html">rand(3)</a>,
<a href="../a.out.html">a.out(5)</a>,
<a href="../profile.html">profile(5)</a>,
<a href="../environ.html">environ(7)</a>.
<p>
Morris I. Bolsky and David G. Korn,
<i>The New KornShell Command and Programming Language</i>, Prentice Hall, 1995.
<p>
<i>POSIX - Part 2: Shell and Utilities,</i> IEEE Std 1003.2-1992, ISO/IEC 9945-2, IEEE, 1993.
<h1 class="manpages">CAVEATS</h1>
<p>
If a command
is executed, and then a command with the same name is
installed in a directory in the search path before the directory where the
original command was found, the shell will continue to
<i>exec</i> the original command.
Use the
<b>-t</b> option of the
<b>alias</b> command to correct this situation.
<p>
Some very old shell scripts contain a
<b>^</b> as a synonym for the pipe character
<b>|</b>. <p>
Using the
<b>hist</b> built-in command within a compound command will cause the whole
command to disappear from the history file.
<p>
The built-in command <b>.</b> <i>file</i>
reads the whole file before any commands are executed.
Therefore,
<b>alias</b> and
<b>unalias</b> commands in the file
will not apply to any commands defined in the file.
<p>
Traps are not processed while a job is waiting for a foreground process.
Thus, a trap on
<b>CHLD</b> won&#146;t be executed until the foreground job terminates.
<p>
It is a good idea to leave a space after the comma operator in
arithmetic expressions to prevent the comma from being interpreted
as the decimal point character in certain locales.
<p>
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion8c23.html?tutorial=unix_commands&amp;file=ksh.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/ksh.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
