<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/fetchmail.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:38 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>fetchmail - Unix, Linux Command</title>
<meta name="Description" Content="fetchmail - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>fetchmail - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
fetchmail - fetch mail from a POP, IMAP, ETRN, or ODMR-capable server
<p>
<h1 class="manpages">SYNOPSIS</h1>
<b>fetchmail</b> [<i>option...</i>] [<i>mailserver...</i>]
<!-- Need break --><br />
<b>fetchmailconf</b>
<p>
<h1 class="manpages">DESCRIPTION</h1>
<i>fetchmail</i> is a mail-retrieval and forwarding utility; it fetches mail from
remote mailservers and forwards it to your local (client) machine&#146;s
delivery system.  You can then handle the retrieved mail using normal
mail user agents such as <i>mutt</i>(1), <i>elm</i>(1) or <i>Mail</i>(1).
The <i>fetchmail</i> utility can be run in a daemon mode to repeatedly
poll one or more systems at a specified interval.
<p>
The
<i>fetchmail</i> program can gather mail from servers supporting any of the common
mail-retrieval protocols: POP2 (legacy, to be removed from future
release), POP3, IMAP2bis, IMAP4, and IMAP4rev1.
It can also use the ESMTP ETRN extension and ODMR.  (The RFCs describing all
these protocols are listed at the end of this manual page.)
<p>
While
<i>fetchmail</i> is primarily intended to be used over on-demand TCP/IP links (such as
SLIP or PPP connections), it may also be useful as a message transfer
agent for sites which refuse for security reasons to permit
(sender-initiated) SMTP transactions with sendmail.
<p>
If
<i>fetchmail</i> is used with a POP or an IMAP server, it has two fundamental modes of
operation for each user account from which it retrieves mail:
<i>singledrop</i>- and <i>multidrop</i>-mode.  In singledrop-mode,
<i>fetchmail</i> assumes that all messages in the user&#146;s account are intended for a single
recipient.  An individual mail message will not be inspected for recipient
information, rather, the identity of the recipient will either default to
the local user currently executing <i>fetchmail</i>,
or else will need to be explicitly specified in the configuration file.
Singledrop-mode is used when the fetchmailrc configuration contains at
most a single local user specification for a given server account.
<p>
With multidrop-mode,
<i>fetchmail</i> is not able to assume that there is only a single recipient, but rather
that the mail server account actually contains mail intended for any
number of different recipients.  Therefore,
<i>fetchmail</i> must attempt to deduce the proper "envelope recipient" from the mail
headers of each message.  In this mode of operation,
<i>fetchmail</i> almost resembles an MTA, however it is important to note that neither
the POP nor IMAP protocols were intended for use in this fashion, and
hence envelope information is often not directly available.  Instead,
<i>fetchmail</i> must resort to a process of informed guess-work in an attempt to
discover the true envelope recipient of a message, unless the ISP stores
the envelope information in some header (not all do).  Even if this
information is present in the headers, the process can
be error-prone and is dependent upon the specific mail server used
for mail retrieval.  Multidrop-mode is used when more than one local
user is specified for a particular server account in the configuration
file.  Note that the forgoing discussion of singledrop- and
multidrop-modes does not apply to the ESMTP ETRN or ODMR retrieval
methods, since they are based upon the SMTP protocol which
specifically provides the envelope recipient to <i>fetchmail</i>.
<p>
As each message is retrieved, <i>fetchmail</i> normally delivers it via SMTP to
port 25 on the machine it is running on (localhost), just as though it
were being passed in over a normal TCP/IP link.  <i>fetchmail</i> provides
the SMTP server with an envelope recipient derived in the manner described
previously.  The mail will then be
delivered locally via your system&#146;s MDA (Mail Delivery Agent, usually
<i>sendmail</i>(8) but your system may use a different one such
as <i>smail</i>, <i>mmdf</i>, <i>exim</i>, <i>postfix</i>, or <i>qmail</i>).  All the
delivery-control mechanisms (such as <i>.forward</i> files) normally
available through your system MDA and local delivery agents will
therefore work automatically.
<p>
If no port 25 listener is available, but your fetchmail configuration
was told about a reliable local MDA, it will use that MDA for local
delivery instead.
<p>
If the program
<i>fetchmailconf</i> is available, it will assist you in setting up and editing a
fetchmailrc configuration.  It runs under the X window system and
requires that the language Python and the Tk toolkit be present on your
system.  If you are first setting up fetchmail for single-user mode, it
is recommended that you use Novice mode.  Expert mode provides complete
control of fetchmail configuration, including the multidrop features.
In either case, the &#146;Autoprobe&#146; button will tell you the most capable
protocol a given mailserver supports, and warn you of potential problems
with that server.
<p>
<h1 class="manpages">GENERAL OPERATION</h1>
The behavior of
<i>fetchmail</i> is controlled by command-line options and a run control file,
<i>~/.fetchmailrc</i>, the syntax of which we describe in a later section (this file is what
the <i>fetchmailconf</i> program edits).  Command-line options override
<i>~/.fetchmailrc</i> declarations.
<p>
Each server name that you specify following the options on the
command line will be queried.  If you don&#146;t specify any servers
on the command line, each &#146;poll&#146; entry in your
<i>~/.fetchmailrc</i> file will be queried.
<p>
To facilitate the use of
<i>fetchmail</i> in scripts and pipelines, it returns an appropriate exit code upon
termination -- see EXIT CODES below.
<p>
The following options modify the behavior of <i>fetchmail</i>.  It is
seldom necessary to specify any of these once you have a
working <i>.fetchmailrc</i> file set up.
<p>
Almost all options have a corresponding keyword which can be used to
declare them in a
<i>.fetchmailrc</i> file.
<p>
Some special options are not covered here, but are documented instead
in sections on AUTHENTICATION and DAEMON MODE which follow.
<h2><i>General Options</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-V | --version</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Displays the version information for your copy of
<i>fetchmail</i>. No mail fetch is performed.
Instead, for each server specified, all the option information
that would be computed if
<i>fetchmail</i> were connecting to that server is displayed.  Any non-printables in
passwords or other string names are shown as backslashed C-like
escape sequences.  This option is useful for verifying that your
options are set the way you want them.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-c | --check</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Return a status code to indicate whether there is mail waiting,
without actually fetching or deleting mail (see EXIT CODES below).
This option turns off daemon mode (in which it would be useless).  It
doesn&#146;t play well with queries to multiple sites, and doesn&#146;t work
with ETRN or ODMR.  It will return a false positive if you leave read but
undeleted mail in your server mailbox and your fetch protocol can&#146;t
tell kept messages from new ones.  This means it will work with IMAP,
not work with POP2, and may occasionally flake out under POP3.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-s | --silent</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Silent mode.  Suppresses all progress/status messages that are
normally echoed to standard output during a fetch (but does not
suppress actual error messages).  The --verbose option overrides this.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-v | --verbose</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Verbose mode.  All control messages passed between
<i>fetchmail</i> and the mailserver are echoed to stdout.  Overrides --silent.
Doubling this option (-v -v) causes extra diagnostic information
to be printed.
</td></tr>
</table>
<h2><i>Disposal Options</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-a | --all | (since v6.3.3) --fetchall</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: fetchall, since v3.0)
Retrieve both old (seen) and new messages from the mailserver.  The
default is to fetch only messages the server has not marked seen.
Under POP3, this option also forces the use of RETR rather than TOP.
Note that POP2 retrieval behaves as though --all is always on (see
RETRIEVAL FAILURE MODES below) and this option does not work with ETRN
or ODMR.  While the -a and --all command-line and fetchall rcfile
options have been supported for a long time, the --fetchall
command-line option was added in v6.3.3.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-k | --keep</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: keep)
Keep retrieved messages on the remote mailserver.  Normally, messages
are deleted from the folder on the mailserver after they have been retrieved.
Specifying the <b>keep</b> option causes retrieved messages to remain in
your folder on the mailserver.  This option does not work with ETRN or
ODMR. If used with POP3, it is recommended to also specify the --uidl
option or uidl keyword.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-K | --nokeep</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: nokeep)
Delete retrieved messages from the remote mailserver.  This
option forces retrieved mail to be deleted.  It may be useful if
you have specified a default of <b>keep</b> in your
<i>.fetchmailrc</i>.  This option is forced on with ETRN and ODMR.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-F | --flush</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
POP3/IMAP only.  This is a dangerous option and can cause mail loss when
used improperly. It deletes old (seen) messages from the mailserver
before retrieving new messages.  <b>Warning:</b> This can cause mail loss if
you check your mail with other clients than fetchmail, and cause
fetchmail to delete a message it had never fetched before.  It can also
cause mail loss if the mail server marks the message seen after
retrieval (IMAP2 servers). You should probably not use this option in your
configuration file. If you use it with POP3, you must use the &#146;uidl&#146;
option. What you probably want is the default setting: if you don&#146;t
specify &#146;-k&#146;, then fetchmail will automatically delete messages after
successful delivery.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--limitflush</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
POP3/IMAP only, since version 6.3.0.  Delete oversized messages from the
mailserver before retrieving new messages. The size limit should be
separately specified with the --limit option.  This option does not
work with ETRN or ODMR.
</td></tr>
</table>
<h2><i>Protocol and Query Options</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-p &lt;proto&gt; | --proto &lt;proto&gt; | --protocol &lt;proto&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: proto[col])
Specify the protocol to use when communicating with the remote
mailserver.  If no protocol is specified, the default is AUTO.
<i>proto</i> may be one of the following:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
AUTO
</td><td>
Tries IMAP, POP3, and POP2 (skipping any of these for which support
has not been compiled in).
</td></tr>
<tr valign="top"><td width=6%>
POP2
</td><td>
Post Office Protocol 2 (legacy, to be removed from future release)
</td></tr>
<tr valign="top"><td width=6%>
POP3
</td><td>
Post Office Protocol 3
</td></tr>
<tr valign="top"><td width=6%>
APOP
</td><td>
Use POP3 with old-fashioned MD5-challenge authentication.
Considered not resistant to man-in-the-middle attacks.
</td></tr>
<tr valign="top"><td width=6%>
RPOP
</td><td>
Use POP3 with RPOP authentication.
</td></tr>
<tr valign="top"><td width=6%>
KPOP
</td><td>
Use POP3 with Kerberos V4 authentication on port 1109.
</td></tr>
<tr valign="top"><td width=6%>
SDPS
</td><td>
Use POP3 with Demon Internet&#146;s SDPS extensions.
</td></tr>
<tr valign="top"><td width=6%>
IMAP
</td><td>
IMAP2bis, IMAP4, or IMAP4rev1 (<i>fetchmail</i> automatically detects their capabilities).
</td></tr>
<tr valign="top"><td width=6%>
ETRN
</td><td>
Use the ESMTP ETRN option.
</td></tr>
<tr valign="top"><td width=6%>
ODMR
</td><td>
Use the the On-Demand Mail Relay ESMTP profile.
</td></tr>
</table>
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
All these alternatives work in basically the same way (communicating
with standard server daemons to fetch mail already delivered to a
mailbox on the server) except ETRN and ODMR.  The ETRN mode
allows you to ask a compliant ESMTP server (such as BSD sendmail at
release 8.8.0 or higher) to immediately open a sender-SMTP connection
to your client machine and begin forwarding any items addressed to
your client machine in the server&#146;s queue of undelivered mail.   The
ODMR mode requires an ODMR-capable server and works similarly to
ETRN, except that it does not require the client machine to have
a static DNS.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-U | --uidl</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: uidl)
Force UIDL use (effective only with POP3).  Force client-side tracking
of &#146;newness&#146; of messages (UIDL stands for "unique ID listing" and is
described in RFC1939).  Use with &#146;keep&#146; to use a mailbox as a baby
news drop for a group of users. The fact that seen messages are skipped
is logged, unless error logging is done through syslog while running in
daemon mode.  Note that fetchmail may automatically enable this option
depending on upstream server capabilities.  Note also that this option
may be removed and forced enabled in a future fetchmail version. See
also: --idfile.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--idle (since 6.3.3)</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: idle, since before 6.0.0)
Enable IDLE use (effective only with IMAP). Note that this works with
only one folder at a given time.  While the idle rcfile keyword had been
supported for a long time, the --idle command-line option was added in
version 6.3.3. IDLE use means that fetchmail tells the IMAP server to
send notice of new messages, so they can be retrieved sooner than would
be possible with regular polls.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-P &lt;portnumber&gt; | --service &lt;servicename&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: service) Since version 6.3.0.
The service option permits you to specify a service name to connect to.
You can specify a decimal port number here, if your services database
lacks the required service-port assignments. See the FAQ item R12 and
the --ssl documentation for details. This replaces the older --port
option.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--port &lt;portnumber&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: port)
Obsolete version of --service that does not take service names.
<b>Note:</b> this option may be removed from a future version.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--principal &lt;principal&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: principal)
The principal option permits you to specify a service principal for
mutual authentication.  This is applicable to POP3 or IMAP with Kerberos
authentication.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-t &lt;seconds&gt; | --timeout &lt;seconds&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: timeout)
The timeout option allows you to set a server-nonresponse
timeout in seconds.  If a mailserver does not send a greeting message
or respond to commands for the given number of seconds,
<i>fetchmail</i> will hang up on it.  Without such a timeout
<i>fetchmail</i> might hang up indefinitely trying to fetch mail from a
down host.  This would be particularly annoying for a <i>fetchmail</i>
running in background.  There is a default timeout which fetchmail~-V
will report.  If a given connection receives too many timeouts in
succession, fetchmail will consider it wedged and stop retrying,
the calling user will be notified by email if this happens.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--plugin &lt;command&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: plugin) The plugin option allows you to use an external
program to establish the TCP connection.  This is useful if you want
to use socks, SSL, ssh, or need some special firewalling setup.  The
program will be looked up in $PATH and can optionally be passed the
hostname and port as arguments using "%h" and "%p" respectively (note
that the interpolation logic is rather primitive, and these token must
be bounded by whitespace or beginning of string or end of string).
Fetchmail will write to the plugin&#146;s stdin and read from the plugin&#146;s
stdout.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--plugout &lt;command&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: plugout)
Identical to the plugin option above, but this one is used for the SMTP
connections (which will probably not need it, so it has been separated
from plugin).
</td></tr>
<tr valign="top"><td colspan="2">
<b>-r &lt;name&gt; | --folder &lt;name&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: folder[s])
Causes a specified non-default mail folder on the mailserver (or
comma-separated list of folders) to be retrieved.  The syntax of the
folder name is server-dependent.  This option is not available under
POP3, ETRN, or ODMR.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--tracepolls</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: tracepolls)
Tell fetchmail to poll trace information in the form &#146;polling %s
account %s&#146; and &#146;folder %s&#146; to the Received line it generates,
where the %s parts are replaced by the user&#146;s remote name, the poll
label, and the folder (mailbox) where available (the Received header
also normally includes the server&#146;s true name).  This can be used to
facilitate mail filtering based on the account it is being received
from. The folder information is written only since version 6.3.4.
</td></tr>
<tr valign="top"><td>
<b>--ssl</b> </td><td valign="bottom">
(Keyword: ssl)
Causes the connection to the mail server to be encrypted via SSL.  Connect
to the server using the specified base protocol over a connection secured
by SSL. This option defeats TLS negotiation. Use --sslcertck to
validate the certificates presented by the server.
<p>
Note that fetchmail may still try to negotiate TLS even if this option
is not given. You can use the --sslproto option to defeat this
behavior or tell fetchmail to negotiate a particular SSL protocol.
<p>
If no port is specified, the connection is attempted to the well known
port of the SSL version of the base protocol.  This is generally a
different port than the port used by the base protocol.  For IMAP, this
is port 143 for the clear protocol and port 993 for the SSL secured
protocol, for POP3, it is port 110 for the clear text and port 995 for
the encrypted variant.
<p>
If your system lacks the corresponding entries from /etc/services, see
the --service option and specify the numeric port number as given in
the previous paragraph (unless your ISP had directed you to different
ports, which is uncommon however).
</td></tr>
<tr valign="top"><td colspan="2">
<b>--sslcert &lt;name&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: sslcert)
Specifies the file name of the client side public SSL certificate.  Some
SSL encrypted servers may require client side keys and certificates for
authentication.  In most cases, this is optional.  This specifies
the location of the public key certificate to be presented to the server
at the time the SSL session is established.  It is not required (but may
be provided) if the server does not require it.  Some servers may
require it, some servers may request it but not require it, and some
servers may not request it at all.  It may be the same file
as the private key (combined key and certificate file) but this is not
recommended.
<p>
<b>NOTE:</b> If you use client authentication, the user name is fetched from the
certificate&#146;s CommonName and overrides the name set with --user.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--sslkey &lt;name&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: sslkey)
Specifies the file name of the client side private SSL key.  Some SSL
encrypted servers may require client side keys and certificates for
authentication.  In most cases, this is optional.  This specifies
the location of the private key used to sign transactions with the server
at the time the SSL session is established.  It is not required (but may
be provided) if the server does not require it.  Some servers may
require it, some servers may request it but not require it, and some
servers may not request it at all.  It may be the same file
as the public key (combined key and certificate file) but this is not
recommended.  If a password is required to unlock the key, it will be
prompted for at the time just prior to establishing the session to the
server.  This can cause some complications in daemon mode.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--sslproto &lt;name&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: sslproto)
Forces an SSL or TLS protocol. Possible values are &#146;<b>SSL2</b>&#146;,
&#146;<b>SSL3</b>&#146;, &#146;<b>SSL23</b>&#146;, and &#146;<b>TLS1</b>&#146;. Try this if the default
handshake does not work for your server. Use this option with
<!-- ignored unsupported tag .\fBTLS1\fR' -->
negotiation when the server advertises STARTTLS or STLS, use <b>&#146;&#146;</b>.
This option, even if the argument is the empty string, will also
suppress the diagnostic &#146;SERVER: opportunistic upgrade to TLS.&#146; message
in verbose mode. The default is to try appropriate protocols depending
on context.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--sslcertck</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: sslcertck)
Causes fetchmail to strictly check the server certificate against a set of
local trusted certificates (see the <b>sslcertpath</b> option). If the server
certificate cannot be obtained or is not signed by one of the trusted ones
(directly or indirectly), the SSL connection will fail, regardless of
the <b>sslfingerprint</b> option.
Note that CRL are only supported in OpenSSL 0.9.7 and newer! Your system
clock should also be reasonably accurate when using this option.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Note that this optional behavior may become default behavior in future
fetchmail versions.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--sslcertpath &lt;directory&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: sslcertpath)
Sets the directory fetchmail uses to look up local certificates. The default
is your OpenSSL default one. The directory must be hashed as OpenSSL expects
it - every time you add or modify a certificate in the directory, you need
to use the <b>c_rehash</b> tool (which comes with OpenSSL in the tools/
subdirectory).
</td></tr>
<tr valign="top"><td colspan="2">
<b>--sslfingerprint &lt;fingerprint&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: sslfingerprint)
Specify the fingerprint of the server key (an MD5 hash of the key) in
hexadecimal notation with colons separating groups of two digits. The letter
hex digits must be in upper case. This is the default format OpenSSL uses,
and the one fetchmail uses to report the fingerprint when an SSL connection
is established. When this is specified, fetchmail will compare the server key
fingerprint with the given one, and the connection will fail if they do not
match regardless of the <b>sslcertck</b> setting. The connection will
also fail if fetchmail cannot obtain an SSL certificate from the server.
This can be used to prevent man-in-the-middle attacks, but the finger
print from the server needs to be obtained or verified over a secure
channel, and certainly not over the same Internet connection that
fetchmail would use.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Using this option will prevent printing certificate verification errors
as long as --sslcertck is unset.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
To obtain the fingerprint of a certificate stored in the file cert.pem,
try:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openssl x509 -in cert.pem -noout -md5 -fingerprint
</pre></td></tr>
</table>
<p>
For details, see
<b>x509</b>(1ssl).
</td></tr>
</table>
<h2><i>Delivery Control Options</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-S &lt;hosts&gt; | --smtphost &lt;hosts&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: smtp[host])
Specify a hunt list of hosts to forward mail to (one or more
hostnames, comma-separated). Hosts are tried in list order; the first
one that is up becomes the forwarding target for the current run.  If
this option is not specified, &#146;localhost&#146; is used as the default.
Each hostname may have a port number following the host name.  The
port number is separated from the host name by a slash; the default
port is "smtp".  If you specify an absolute path name (beginning with
a /), it will be interpreted as the name of a UNIX socket accepting
LMTP connections (such as is supported by the Cyrus IMAP daemon)
Example:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--smtphost server1,server2/2525,server3,/var/imap/socket/lmtp
</pre></td></tr>
</table>
<p>
This option can be used with ODMR, and will make fetchmail a relay
between the ODMR server and SMTP or LMTP receiver.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--fetchdomains &lt;hosts&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: fetchdomains)
In ETRN or ODMR mode, this option specifies the list of domains the
server should ship mail for once the connection is turned around.  The
default is the FQDN of the machine running
<i>fetchmail</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>-D &lt;domain&gt; | --smtpaddress &lt;domain&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: smtpaddress) Specify the domain to be appended to addresses
in RCPT TO lines shipped to SMTP. When this is not specified, the name
of the SMTP server (as specified by --smtphost) is used for SMTP/LMTP
and &#146;localhost&#146; is used for UNIX socket/BSMTP.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--smtpname &lt;user@domain&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: smtpname)
Specify the domain and user to be put in RCPT TO lines shipped to SMTP.
The default user is the current local user.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Z &lt;nnn&gt; | --antispam &lt;nnn[, nnn]...&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: antispam)
Specifies the list of numeric SMTP errors that are to be interpreted
as a spam-block response from the listener.  A value of -1 disables
this option.  For the command-line option, the list values should
be comma-separated.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-m &lt;command&gt; | --mda &lt;command&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: mda) You can force mail to be passed to an MDA directly
(rather than forwarded to port 25) with the --mda or -m option.  To
avoid losing mail, use this option only with MDAs like maildrop or
MTAs like sendmail that return a nonzero status on disk-full and other
resource-exhaustion errors; the nonzero status tells fetchmail that
delivery failed and prevents the message from being deleted off the
server.  If <i>fetchmail</i> is running as root, it sets its user id to
that of the target user while delivering mail through an MDA.  Some
possible MDAs are "/usr/sbin/sendmail -i -f %F -- %T" (<b>Note:</b>
some several older or vendor sendmail versions mistake -- for an
address, rather than an indicator to mark the end of the option arguments),
"/usr/bin/deliver" and "/usr/bin/maildrop -d %T".  Local delivery
addresses will be inserted into the MDA command wherever you place a
%T; the mail message&#146;s From address will be inserted where you place
an %F. <b>DO NOT ENCLOSE THE %F OR %T STRING IN SINGLE QUOTES!</b> For
both %T and %F, fetchmail encloses the addresses in single quotes (&#146;),
after removing any single quotes they may contain, before the MDA
command is passed to the shell.  Do <i>NOT</i> use an MDA invocation
like "sendmail -i -t" that dispatches on the contents of To/Cc/Bcc, it
will create mail loops and bring the just wrath of many postmasters
down upon your head.  Also, do <i>not</i> try to combine multidrop
mode with an MDA such as maildrop that can only accept one
address; you will lose mail.
<p>
A word of warning: the well-known
<b>procmail</b>(1)
package is very hard to configure properly, it has a very nasty "fall
through to the next rule" behavior on delivery errors (even temporary
ones, such as out of disk space if another user&#146;s mail daemon copies the
mailbox around to purge old messages), so your mail will end up in the
wrong mailbox sooner or later. The proper procmail configuration is
outside the scope of this document though. Using
<b>maildrop</b>(1)
is usually much easier, and many users find the filter syntax used by
maildrop easier to understand.
<p>
</td></tr>
<tr valign="top"><td>
<b>--lmtp</b> </td><td valign="bottom">
(Keyword: lmtp)
Cause delivery via LMTP (Local Mail Transfer Protocol).  A service
host and port <b>must</b> be explicitly specified on each host in the
smtphost hunt list (see above) if this option is selected; the default
port 25 will (in accordance with RFC 2033) not be accepted.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--bsmtp &lt;filename&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(keyword: bsmtp)
Append fetched mail to a BSMTP file.  This simply contains the SMTP
commands that would normally be generated by fetchmail when passing
mail to an SMTP listener daemon.  An argument of &#146;-&#146; causes the mail
to be written to standard output.  Note that fetchmail&#146;s
reconstruction of MAIL FROM and RCPT TO lines is not guaranteed
correct; the caveats discussed under THE USE AND ABUSE OF MULTIDROP
MAILBOXES below apply.
</td></tr>
</table>
<h2><i>Resource Limit Control Options</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-l &lt;maxbytes&gt; | --limit &lt;maxbytes&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: limit) Takes a maximum octet size argument.  Messages larger
than this size will not be fetched and will be left on the server (in
foreground sessions, the progress messages will note that they are
"oversized").  If the fetch protocol permits (in particular, under
IMAP or POP3 without the fetchall option) the message will not be
marked seen.
<p>
An explicit --limit of 0 overrides any limits set in your
run control file. This option is intended for those needing to
strictly control fetch time due to expensive and variable phone rates.
<p>
Combined with --limitflush, it can be used to delete oversized
messages waiting on a server.  In daemon mode, oversize notifications
are mailed to the calling user (see the --warnings option). This
option does not work with ETRN or ODMR.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-w &lt;interval&gt; | --warnings &lt;interval&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: warnings)
Takes an interval in seconds.  When you call
<i>fetchmail</i> with a &#146;limit&#146; option in daemon mode, this controls the interval at
which warnings about oversized messages are mailed to the calling user
(or the user specified by the &#146;postmaster&#146; option).  One such
notification is always mailed at the end of the the first poll that
the oversized message is detected.  Thereafter, re-notification is
suppressed until after the warning interval elapses (it will take
place at the end of the first following poll).
</td></tr>
<tr valign="top"><td colspan="2">
<b>-b &lt;count&gt; | --batchlimit &lt;count&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: batchlimit)
Specify the maximum number of messages that will be shipped to an SMTP
listener before the connection is deliberately torn down and rebuilt
(defaults to 0, meaning no limit).  An explicit --batchlimit of 0
overrides any limits set in your run control file.  While
<b>sendmail</b>(8) normally initiates delivery of a message immediately
after receiving the message terminator, some SMTP listeners are not so
prompt.  MTAs like <i>smail</i>(8) may wait till the
delivery socket is shut down to deliver.  This may produce annoying
delays when <i>fetchmail</i> is processing very large batches.  Setting
the batch limit to some nonzero size will prevent these delays.  This
option does not work with ETRN or ODMR.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-B &lt;number&gt; | --fetchlimit &lt;number&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: fetchlimit)
Limit the number of messages accepted from a given server in a single
poll.  By default there is no limit. An explicit --fetchlimit of 0
overrides any limits set in your run control file.
This option does not work with ETRN or ODMR.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--fetchsizelimit &lt;number&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: fetchsizelimit)
Limit the number of sizes of messages accepted from a given server in
a single transaction.  This option is useful in reducing the delay in
downloading the first mail when there are too many mails in the
mailbox.  By default, the limit is 100.  If set to 0, sizes of all
messages are downloaded at the start.
This option does not work with ETRN or ODMR.  For POP3, the only valid
non-zero value is 1.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--fastuidl &lt;number&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: fastuidl)
Do a binary instead of linear search for the first unseen UID. Binary
search avoids downloading the UIDs of all mails. This saves time
(especially in daemon mode) where downloading the same set of UIDs in
each poll is a waste of bandwidth. The number &#146;n&#146; indicates how rarely
a linear search should be done. In daemon mode, linear search is used
once followed by binary searches in &#146;n-1&#146; polls if &#146;n&#146; is greater than
1; binary search is always used if &#146;n&#146; is 1; linear search is always
used if &#146;n&#146; is 0. In non-daemon mode, binary search is used if &#146;n&#146; is
1; otherwise linear search is used. The default value of &#146;n&#146; is 4.
This option works with POP3 only.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-e &lt;count&gt; | --expunge &lt;count&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(keyword: expunge)
Arrange for deletions to be made final after a given number of
messages.  Under POP2 or POP3, fetchmail cannot make deletions final
without sending QUIT and ending the session -- with this option on,
fetchmail will break a long mail retrieval session into multiple
sub-sessions, sending QUIT after each sub-session. This is a good
defense against line drops on POP3 servers.  Under IMAP,
<i>fetchmail</i> normally issues an EXPUNGE command after each deletion in order to
force the deletion to be done immediately.  This is safest when your
connection to the server is flaky and expensive, as it avoids
resending duplicate mail after a line hit.  However, on large
mailboxes the overhead of re-indexing after every message can slam the
server pretty hard, so if your connection is reliable it is good to do
expunges less frequently.  Also note that some servers enforce a delay
of a few seconds after each quit, so fetchmail may not be able to get
back in immediately after an expunge -- you may see "lock busy" errors
if this happens. If you specify this option to an integer N,
it tells
<i>fetchmail</i> to only issue expunges on every Nth delete.  An argument of zero
suppresses expunges entirely (so no expunges at all will be done until
the end of run).  This option does not work with ETRN or ODMR.
</td></tr>
</table>
<h2><i>Authentication Options</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-u &lt;name&gt; | --user &lt;name&gt; | --username &lt;name&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: user[name])
Specifies the user identification to be used when logging in to the mailserver.
The appropriate user identification is both server and user-dependent.
The default is your login name on the client machine that is running
<i>fetchmail</i>. See USER AUTHENTICATION below for a complete description.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-I &lt;specification&gt; | --interface &lt;specification&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: interface)
Require that a specific interface device be up and have a specific local
or remote IPv4 (IPv6 is not supported by this option yet) address (or
range) before polling.  Frequently <i>fetchmail</i>
is used over a transient point-to-point TCP/IP link established directly
to a mailserver via SLIP or PPP.  That is a relatively secure channel.
But when other TCP/IP routes to the mailserver exist (e.g. when the link
is connected to an alternate ISP), your username and password may be
vulnerable to snooping (especially when daemon mode automatically polls
for mail, shipping a clear password over the net at predictable
intervals).  The --interface option may be used to prevent this.  When
the specified link is not up or is not connected to a matching IP
address, polling will be skipped.  The format is:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interface/iii.iii.iii.iii[/mmm.mmm.mmm.mmm]
</pre></td></tr>
</table>
<p>
The field before the first slash is the interface name (i.e. sl0, ppp0
etc.).  The field before the second slash is the acceptable IP address.
The field after the second slash is a mask which specifies a range of
IP addresses to accept.  If no mask is present 255.255.255.255 is
assumed (i.e. an exact match).  This option is currently only supported
under Linux and FreeBSD. Please see the
<b>monitor</b> section for below for FreeBSD specific information.
<p>
Note that this option may be removed from a future fetchmail version.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-M &lt;interface&gt; | --monitor &lt;interface&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: monitor)
Daemon mode can cause transient links which are automatically taken down
after a period of inactivity (e.g. PPP links) to remain up
indefinitely.  This option identifies a system TCP/IP interface to be
monitored for activity.  After each poll interval, if the link is up but
no other activity has occurred on the link, then the poll will be
skipped.  However, when fetchmail is woken up by a signal, the
monitor check is skipped and the poll goes through unconditionally.
This option is currently only supported under Linux and FreeBSD.
For the
<b>monitor</b> and
<b>interface</b> options to work for non root users under FreeBSD, the fetchmail binary
must be installed SGID kmem. This would be a security hole, but
fetchmail runs with the effective GID set to that of the kmem group
<i>only</i> when interface data is being collected.
<p>
Note that this option may be removed from a future fetchmail version.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--auth &lt;type&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: auth[enticate])
This option permits you to specify an authentication type (see USER
AUTHENTICATION below for details).  The possible values are <b>any</b>,
<b>password</b>, <b>kerberos_v5</b>, <b>kerberos</b> (or, for
excruciating exactness, <b>kerberos_v4</b>), <b>gssapi</b>,
<b>cram-md5</b>, <b>otp</b>, <b>ntlm</b>, <b>msn</b> (only for POP3),
<b>external</b> (only IMAP) and <b>ssh</b>.
When <b>any</b> (the default) is specified, fetchmail tries
first methods that don&#146;t require a password (EXTERNAL, GSSAPI, KERBEROS IV,
KERBEROS 5); then it looks for methods that mask your password
(CRAM-MD5, X-OTP - note that NTLM and MSN are not autoprobed for POP3
and MSN is only supported for POP3); and only if the server doesn&#146;t
support any of those will it ship your password en clair.  Other values
may be used to force various authentication methods
(<b>ssh</b> suppresses authentication and is thus useful for IMAP PREAUTH).
(<b>external</b> suppresses authentication and is thus useful for IMAP EXTERNAL).
Any value other than <b>password</b>, <b>cram-md5</b>, <b>ntlm</b>,
<b>msn</b> or <b>otp</b> suppresses fetchmail&#146;s normal inquiry for a
password.  Specify <b>ssh</b> when you are using an end-to-end secure
connection such as an ssh tunnel; specify <b>external</b> when you use
TLS with client authentication and specify <b>gssapi</b> or
<b>kerberos_v4</b> if you are using a protocol variant that employs
GSSAPI or K4.  Choosing KPOP protocol automatically selects Kerberos
authentication.  This option does not work with ETRN.
</td></tr>
</table>
<h2><i>Miscellaneous Options</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-f &lt;pathname&gt; | --fetchmailrc &lt;pathname&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Specify a non-default name for the
<i>~/.fetchmailrc</i> run control file.  The pathname argument must be either "-" (a single
dash, meaning to read the configuration from standard input) or a
filename.  Unless the --version option is also on, a named file
argument must have permissions no more open than 0600 (u=rw,g=,o=) or
else be /dev/null.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-i &lt;pathname&gt; | --idfile &lt;pathname&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: idfile)
Specify an alternate name for the .fetchids file used to save POP3
UIDs. NOTE: since fetchmail 6.3.0, write access to the directory
containing the idfile is required, as fetchmail writes a temporary file
and renames it into the place of the real idfile only if the temporary
file has been written successfully. This avoids the truncation of
idfiles when running out of disk space.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--pidfile &lt;pathname&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: pidfile; since fetchmail v6.3.4)
Override the default location of the PID file. Default: see
"ENVIRONMENT" below.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-n | --norewrite</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: no rewrite)
Normally,
<i>fetchmail</i> edits RFC-822 address headers (To, From, Cc, Bcc, and Reply-To) in
fetched mail so that any mail IDs local to the server are expanded to
full addresses (@ and the mailserver hostname are appended).  This enables
replies on the client to get addressed correctly (otherwise your
mailer might think they should be addressed to local users on the
client machine!).  This option disables the rewrite.  (This option is
provided to pacify people who are paranoid about having an MTA edit
mail headers and want to know they can prevent it, but it is generally
not a good idea to actually turn off rewrite.)
When using ETRN or ODMR, the rewrite option is ineffective.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-E &lt;line&gt; | --envelope &lt;line&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: envelope; Multidrop only)
<!-- Need break --><br />
In the configuration file, an enhanced syntax is used:
<!-- Need break --><br />
<b>envelope [&lt;count&gt;] &lt;line&gt;</b> <p>
This option changes the header
<i>fetchmail</i> assumes will carry a copy of the mail&#146;s envelope address.  Normally
this is &#146;X-Envelope-To&#146;, but as this header is not standard, practice
varies. See the discussion of multidrop address handling below.  As a
special case, &#146;envelope "Received"&#146; enables parsing of sendmail-style
Received lines.  This is the default, and it should not be necessary
unless you have globally disabled Received parsing with &#146;no envelope&#146;
in the <i>.fetchmailrc</i> file.
<p>
The optional count argument (only available in the configuration file)
determines how many header lines of this kind are skipped. A count of 1
means: skip the first, take the second. A count of 2 means: skip the
first and second, take the third, and so on.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Q &lt;prefix&gt; | --qvirtual &lt;prefix&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
(Keyword: qvirtual; Multidrop only)
The string prefix assigned to this option will be removed from the user
name found in the header specified with the <i>envelope</i> option
(<i>before</i> doing multidrop name mapping or localdomain checking,
if either is applicable). This option is useful if you are using
<i>fetchmail</i> to collect the mail for an entire domain and your ISP (or your mail
redirection provider) is using qmail.
One of the basic features of qmail is the
<p>
&#146;Delivered-To:&#146;
<p>
message header.  Whenever qmail delivers a message to a local mailbox
it puts the username and hostname of the envelope recipient on this
line.  The major reason for this is to prevent mail loops.  To set up
qmail to batch mail for a disconnected site the ISP-mailhost will have
normally put that site in its &#146;Virtualhosts&#146; control file so it will
add a prefix to all mail addresses for this site. This results in mail
sent to &#146;username@userhost.userdom.dom.com&#146; having a
&#146;Delivered-To:&#146; line of the form:
<p>
Delivered-To: mbox-userstr-username@userhost.example.com
<p>
The ISP can make the &#146;mbox-userstr-&#146; prefix anything they choose
but a string matching the user host name is likely.
By using the option &#146;envelope Delivered-To:&#146; you can make fetchmail reliably
identify the original envelope recipient, but you have to strip the
&#146;mbox-userstr-&#146; prefix to deliver to the correct user.
This is what this option is for.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--configdump</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Parse the
<i>~/.fetchmailrc</i> file, interpret any command-line options specified, and dump a
configuration report to standard output.  The configuration report is
a data structure assignment in the language Python.  This option
is meant to be used with an interactive
<i>~/.fetchmailrc</i> editor like
<i>fetchmailconf</i>, written in Python.
</td></tr>
</table>
<h2><i>Removed Options</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-T | --netsec</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Removed before version 6.3.0, the required underlying inet6_apps library
had been discontinued and is no longer available.
<p>
</td></tr>
</table>
<h1 class="manpages">USER AUTHENTICATION AND ENCRYPTION</h1>
All modes except ETRN require authentication of the client to the server.
Normal user authentication in
<i>fetchmail</i> is very much like the authentication mechanism of
<b>ftp</b>(1).
The correct user-id and password depend upon the underlying security
system at the mailserver.
<p>
If the mailserver is a Unix machine on which you have an ordinary user
account, your regular login name and password are used with
<i>fetchmail</i>. If you use the same login name on both the server and the client machines,
you needn&#146;t worry about specifying a user-id with the
<b>-u</b> option -- the default behavior is to use your login name on the
client machine as the user-id on the server machine.  If you use a
different login name on the server machine, specify that login name
with the
<b>-u</b> option.  e.g. if your login name is &#146;jsmith&#146; on a machine named &#146;mailgrunt&#146;,
you would start
<i>fetchmail</i> as follows:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>

</td><td>
fetchmail -u jsmith mailgrunt
</td></tr>
<!-- PP ends table -->
</table>
The default behavior of
<i>fetchmail</i> is to prompt you for your mailserver password before the connection is
established.  This is the safest way to use
<i>fetchmail</i> and ensures that your password will not be compromised.  You may also specify
your password in your
<i>~/.fetchmailrc</i> file.  This is convenient when using
<i>fetchmail</i> in daemon mode or with scripts.
<h2><i>Using netrc files</i></h2>
<p>
If you do not specify a password, and
<i>fetchmail</i> cannot extract one from your
<i>~/.fetchmailrc</i> file, it will look for a
<i>~/.netrc</i> file in your home directory before requesting one interactively; if an
entry matching the mailserver is found in that file, the password will
be used.  Fetchmail first looks for a match on poll name; if it finds none,
it checks for a match on via name.  See the
<b>ftp</b>(1)
man page for details of the syntax of the
<i>~/.netrc</i> file.  To show a practical example, a .netrc might look like
this:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>

</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
machine hermes.example.org
login joe
password topsecret
</pre></td></tr>
</table>
</td></tr>
<!-- PP ends table -->
</table>
You can repeat this block with different user information if you need to
provide more than one password.
<p>
This feature may allow you to avoid duplicating password
information in more than one file.
<p>
On mailservers that do not provide ordinary user accounts, your user-id and
password are usually assigned by the server administrator when you apply for
a mailbox on the server.  Contact your server administrator if you don&#146;t know
the correct user-id and password for your mailbox account.
<h1 class="manpages">POP3 VARIANTS</h1>
<p>
Early versions of POP3 (RFC1081, RFC1225) supported a crude form of
independent authentication using the
<i>rhosts</i> file on the mailserver side.  Under this RPOP variant, a fixed
per-user ID equivalent to a password was sent in clear over a link to
a reserved port, with the command RPOP rather than PASS to alert the
server that it should do special checking.  RPOP is supported
by
<i>fetchmail</i> (you can specify &#146;protocol RPOP&#146; to have the program send &#146;RPOP&#146;
rather than &#146;PASS&#146;) but its use is strongly discouraged, and support
will be removed from a future fetchmail version.  This
facility was vulnerable to spoofing and was withdrawn in RFC1460.
<p>
RFC1460 introduced APOP authentication.  In this variant of POP3,
you register an APOP password on your server host (on some servers, the
program to do this is called <i>popauth</i>(8)).  You put the same
password in your <i>~/.fetchmailrc</i> file.  Each time <i>fetchmail</i>
logs in, it sends an MD5 hash of your password and the server greeting
time to the server, which can verify it by checking its authorization
database.
<p>
<b>Note that APOP is no longer considered resistant against
man-in-the-middle attacks.</b>
<h2><i>RETR or TOP</i></h2>
<i>fetchmail</i> makes some efforts to make the server believe messages had not been
retrieved, by using the TOP command with a large number of lines when
possible.  TOP is a command that retrieves the full header and
a <i>fetchmail</i>-specified amount of body lines. It is optional and
therefore not implemented by all servers, and some are known to
implement it improperly. On many servers however, the RETR command which
retrieves the full message with header and body, sets the "seen" flag
(for instance, in a web interface), whereas the TOP command does not do
that.
<p>
<i>fetchmail</i> will always use the RETR command if "fetchall" is set.
<i>fetchmail</i> will also use the RETR command if "keep" is set and "uidl" is unset.
Finally,
<i>fetchmail</i> will use the RETR command on Maillennium POP3/PROXY
servers (used by Comcast) to avoid a deliberate TOP misinterpretation in
this server that causes message corruption.
<p>
In all other cases,
<i>fetchmail</i> will use the TOP command. This implies that in "keep" setups, "uidl"
must be set if "TOP" is desired.
<p>
<b>Note</b> that this description is true for the current version of fetchmail, but
the behavior may change in future versions. In particular, fetchmail may
prefer the RETR command because the TOP command causes much grief on
some servers and is only optional.
<h1 class="manpages">ALTERNATE AUTHENTICATION FORMS</h1>
<p>
If your <i>fetchmail</i> was built with Kerberos support and you specify
Kerberos authentication (either with --auth or the <i>.fetchmailrc</i>
option <b>authenticate kerberos_v4</b>) it will try to get a Kerberos
ticket from the mailserver at the start of each query.  Note: if
either the pollname or via name is &#146;hesiod&#146;, fetchmail will try to use
Hesiod to look up the mailserver.
<p>
If you use POP3 or IMAP with GSSAPI authentication, <i>fetchmail</i> will
expect the server to have RFC1731- or RFC1734-conforming GSSAPI
capability, and will use it.  Currently this has only been tested over
Kerberos V, so you&#146;re expected to already have a ticket-granting
ticket. You may pass a username different from your principal name
using the standard <b>--user</b> command or by the <i>.fetchmailrc</i>
option <b>user</b>.
<p>
If your IMAP daemon returns the PREAUTH response in its greeting line,
fetchmail will notice this and skip the normal authentication step.
This can be useful, e.g. if you start imapd explicitly using ssh.
In this case you can declare the authentication value &#146;ssh&#146; on that
site entry to stop <i>.fetchmail</i> from asking you for a password
when it starts up.
<p>
If you use client authentication with <i>TLS1</i> and your IMAP daemon
returns the <i>AUTH=EXTERNAL</i> response, fetchmail will notice this
and will use the authentication shortcut and will not send the
passphrase. In this case you can declare the authentication value &#146;external&#146;
<br />
 on that site to stop <i>fetchmail</i> from asking you for a password
when it starts up.
<p>
If you are using POP3, and the server issues a one-time-password
challenge conforming to RFC1938, <i>fetchmail</i> will use your
password as a pass phrase to generate the required response. This
avoids sending secrets over the net unencrypted.
<p>
Compuserve&#146;s RPA authentication is supported. If you
compile in the support, <i>fetchmail</i> will try to perform an RPA pass-phrase
authentication instead of sending over the password en clair if it
detects "@compuserve.com" in the hostname.
<p>
If you are using IMAP, Microsoft&#146;s NTLM authentication (used by Microsoft
Exchange) is supported. If you compile in the support, <i>fetchmail</i>
will try to perform an NTLM authentication (instead of sending over the
password en clair) whenever the server returns AUTH=NTLM in its
capability response. Specify a user option value that looks like
&#146;user@domain&#146;: the part to the left of the @ will be passed as the
username and the part to the right as the NTLM domain.
<h2><i>Secure Socket Layers (SSL) and Transport Layer Security (TLS)</i></h2>
<p>
You can access SSL encrypted services by specifying the --ssl option.
You can also do this using the "ssl" user option in the .fetchmailrc
file. With SSL encryption enabled, queries are initiated over a connection
after negotiating an SSL session, and the connection fails if SSL cannot
be negotiated.  Some services, such as POP3 and IMAP, have different
well known ports defined for the SSL encrypted services.  The encrypted
ports will be selected automatically when SSL is enabled and no explicit
port is specified. The --sslproto option can be used to select the SSL
protocols (default: v2 or v3).  The --sslcertck command line or
sslcertck run control file option should be used to force strict
certificate checking - see below.
<p>
If SSL is not configured, fetchmail will usually opportunistically try to use
TLS. TLS can be enforced by using --sslproto "TLS1". TLS
connections use the same port as the unencrypted version of the
protocol and negotiate TLS via special parameter. The --sslcertck
command line or sslcertck run control file option should be used to
force strict certificate checking - see below.
<p>
<b>--sslcheck recommended:</b> When connecting to an SSL or TLS encrypted server, the server presents a certificate
to the client for validation.  The certificate is checked to verify that
the common name in the certificate matches the name of the server being
contacted and that the effective and expiration dates in the certificate
indicate that it is currently valid.  If any of these checks fail, a warning
message is printed, but the connection continues.  The server certificate
does not need to be signed by any specific Certifying Authority and may
be a "self-signed" certificate. If the --sslcertck command line option
or sslcertck run control file option is used, fetchmail will instead
abort if any of these checks fail. Use of the sslcertck or --sslcertck
option is advised.
<p>
Some SSL encrypted servers may request a client side certificate.  A client
side public SSL certificate and private SSL key may be specified.  If
requested by the server, the client certificate is sent to the server for
validation.  Some servers may require a valid client certificate and may
refuse connections if a certificate is not provided or if the certificate
is not valid.  Some servers may require client side certificates be signed
by a recognized Certifying Authority.  The format for the key files and
the certificate files is that required by the underlying SSL libraries
(OpenSSL in the general case).
<p>
A word of care about the use of SSL: While above mentioned
setup with self-signed server certificates retrieved over the wires
can protect you from a passive eavesdropper, it doesn&#146;t help against an
active attacker. It&#146;s clearly an improvement over sending the
passwords in clear, but you should be aware that a man-in-the-middle
attack is trivially possible (in particular with tools such as dsniff,
<a href="http://monkey.org/~dugsong/dsniff">http://monkey.org/~dugsong/dsniff</a>/).  Use of strict certificate checking
with a certification authority recognized by server and client, or
perhaps of an SSH tunnel (see below for some examples) is preferable if
you care seriously about the security of your mailbox and passwords.
<h2><i>ESMTP AUTH</i></h2>
<p>
<b>fetchmail</b> also supports authentication to the ESMTP server on the client side
according to RFC 2554.  You can specify a name/password pair to be
used with the keywords &#146;esmtpname&#146; and &#146;esmtppassword&#146;; the former
defaults to the username of the calling user.
<p>
<h1 class="manpages">DAEMON MODE</h1>
<h2><i>Introducing the daemon mode</i></h2>
In daemon mode,
<i>fetchmail</i> puts itself into the background and runs forever, querying each
specified host and then sleeping for a given polling interval.
<h2><i>Starting the daemon mode</i></h2>
There are several ways to make fetchmail work in daemon mode. On the
command line, <b>--daemon &lt;interval&gt;</b> or <b>-d &lt;interval&gt;</b>
option runs <i>fetchmail</i> in daemon mode.  You must specify a numeric
argument which is a polling interval in seconds.
<p>
Example: simply invoking
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>

</td><td>
fetchmail -d 900
</td></tr>
<!-- PP ends table -->
</table>
will, therefore, poll all the hosts described in your
<i>~/.fetchmailrc</i> file (except those explicitly excluded with the &#146;skip&#146; verb) once
every 15 minutes.
<p>
It is also possible to set a polling interval
in your <i>~/.fetchmailrc</i> file by saying &#146;set daemon &lt;interval&gt;&#146;,
where &lt;interval&gt; is an integer number of seconds.  If you do this,
fetchmail will always start in daemon mode unless you override it with
the command-line option --daemon 0 or -d0.
<p>
Only one daemon process is permitted per user; in daemon mode,
<i>fetchmail</i> sets up a per-user lockfile to guarantee this.
(You can however cheat and set the FETCHMAILHOME environment variable to
overcome this setting, but in that case, it is your responsibility to
make sure you aren&#146;t polling the same server with two processes at the
same time.)
<h2><i>Awakening the background daemon</i></h2>
<p>
Normally, calling fetchmail with a daemon in the background sends a
wake-up signal to the daemon and quits without output. The background
daemon then starts its next poll cycle immediately.  The wake-up signal,
SIGUSR1, can also be sent manually. The wake-up action also clears any
<!-- ignored unsupported tag .wedged' -->
authentication or multiple timeouts.
<h2><i>Terminating the background daemon</i></h2>
<p>
The option
<b>--quit</b> will kill a running daemon process instead of waking it up (if there
is no such process, <i>fetchmail</i> will notify you.
If the --quit option appears last on the command line, <i>fetchmail</i>
will kill the running daemon process and then quit. Otherwise,
<i>fetchmail</i> will first kill a running daemon process and then
continue running with the other options.
<h2><i>Useful options for daemon mode</i></h2>
<p>
The
<b>-L &lt;filename&gt;</b> or
<b>--logfile &lt;filename&gt;</b> option (keyword: set logfile) is only effective when fetchmail is
detached. This option allows you to redirect status messages
into a specified logfile (follow the option with the logfile name).  The
logfile is opened for append, so previous messages aren&#146;t deleted.  This
is primarily useful for debugging configurations. Note that fetchmail
does not detect if the logfile is rotated, the logfile is only opened
once when fetchmail starts. You need to restart fetchmail after rotating
the logfile and before compressing it (if applicable).
<p>
The
<b>--syslog</b> option (keyword: set syslog) allows you to redirect status and error
messages emitted to the
<b>syslog</b>(3)
system daemon if available.
Messages are logged with an id of <b>fetchmail</b>, the facility <b>LOG_MAIL</b>,
and priorities <b>LOG_ERR</b>, <b>LOG_ALERT</b> or <b>LOG_INFO</b>.
This option is intended for logging status and error messages which
indicate the status of the daemon and the results while fetching mail
from the server(s).
Error messages for command line options and parsing the <i>.fetchmailrc</i>
file are still written to stderr, or to the specified log file.
The
<b>--nosyslog</b> option turns off use of
<b>syslog</b>(3),
assuming it&#146;s turned on in the
<i>~/.fetchmailrc</i> file, or that the
<b>-L</b> or
<b>--logfile &lt;file&gt;</b> option was used.
<p>
The
<b>-N</b> or
<b>--nodetach</b> option suppresses backgrounding and detachment of the
daemon process from its control terminal.  This is useful
for debugging or when fetchmail runs as the child of a supervisor
process such as
<b>init</b>(8)
or Gerrit Pape&#146;s
<i>runit.</i> Note that this also causes the logfile option to be
ignored (though perhaps it shouldn&#146;t).
<p>
Note that while running in daemon mode polling a POP2 or IMAP2bis server,
transient errors (such as DNS failures or sendmail delivery refusals)
may force the fetchall option on for the duration of the next polling
cycle.  This is a robustness feature.  It means that if a message is
fetched (and thus marked seen by the mailserver) but not delivered
locally due to some transient error, it will be re-fetched during the
next poll cycle.  (The IMAP logic doesn&#146;t delete messages until
they&#146;re delivered, so this problem does not arise.)
<p>
If you touch or change the
<i>~/.fetchmailrc</i> file while fetchmail is running in daemon mode, this will be detected
at the beginning of the next poll cycle.  When a changed
<i>~/.fetchmailrc</i> is detected, fetchmail rereads it and restarts from scratch (using
exec(2); no state information is retained in the new instance).
Note also that if you break the
<i>~/.fetchmailrc</i> file&#146;s syntax, the new instance will softly and silently vanish away
on startup.
<p>
<h1 class="manpages">ADMINISTRATIVE OPTIONS</h1>
<p>
The
<b>--postmaster &lt;name&gt;</b> option (keyword: set postmaster) specifies the last-resort username to
which multidrop mail is to be forwarded if no matching local recipient
can be found. It is also used as destination of undeliverable mail if
the &#146;bouncemail&#146; global option is off and additionally for spam-blocked
mail if the &#146;bouncemail&#146; global option is off and the &#146;spambounce&#146;
global option is on. This option defaults to the user who invoked
<i>fetchmail</i>. If the invoking user is root, then the default of this option is
the user &#146;postmaster&#146;.  Setting postmaster to the empty string causes
such mail as described above to be discarded - this however is usually a
bad idea.
See also the description of the &#146;FETCHMAILUSER&#146; environment variable in
the ENVIRONMENT section below.
<p>
The
<b>--nobounce</b> behaves like the "set no bouncemail" global option, which see.
<p>
The
<b>--invisible</b> option (keyword: set invisible) tries to make fetchmail invisible.
Normally, fetchmail behaves like any other MTA would -- it generates a
Received header into each message describing its place in the chain of
transmission, and tells the MTA it forwards to that the mail came from
the machine fetchmail itself is running on.  If the invisible option
is on, the Received header is suppressed and fetchmail tries to spoof
the MTA it forwards to into thinking it came directly from the
mailserver host.
<p>
The
<b>--showdots</b> option (keyword: set showdots) forces fetchmail to show progress dots
even if the current tty is not stdout (for example logfiles).
Fetchmail shows the dots by default when run in nodetach mode or when
daemon mode is not enabled.
<p>
By specifying the
<b>--tracepolls</b> option, you can ask fetchmail to add information to the Received
header on the form "polling {label} account {user}", where {label} is
the account label (from the specified rcfile, normally ~/.fetchmailrc)
and {user} is the username which is used to log on to the mail
server. This header can be used to make filtering email where no
useful header information is available and you want mail from
different accounts sorted into different mailboxes (this could, for
example, occur if you have an account on the same server running a
mailing list, and are subscribed to the list using that account). The
default is not adding any such header.  In
<i>.fetchmailrc</i>, this is called &#146;tracepolls&#146;.
<p>
<h1 class="manpages">RETRIEVAL FAILURE MODES</h1>
The protocols <i>fetchmail</i> uses to talk to mailservers are next to
bulletproof.  In normal operation forwarding to port 25, no message is
ever deleted (or even marked for deletion) on the host until the SMTP
listener on the client side has acknowledged to <i>fetchmail</i> that
the message has been either accepted for delivery or rejected due to a
spam block.
<p>
When forwarding to an MDA, however, there is more possibility
of error.  Some MDAs are &#146;safe&#146; and reliably return a nonzero status
on any delivery error, even one due to temporary resource limits.
The
<b>maildrop</b>(1)
program is like this; so are most programs designed as mail transport
agents, such as
<b>sendmail</b>(1),
including the sendmail wrapper of Postfix and
<b>exim</b>(1).
These programs give back a reliable positive acknowledgement and
can be used with the mda option with no risk of mail loss.  Unsafe
MDAs, though, may return 0 even on delivery failure.  If this
happens, you will lose mail.
<p>
The normal mode of <i>fetchmail</i> is to try to download only &#146;new&#146;
messages, leaving untouched (and undeleted) messages you have already
read directly on the server (or fetched with a previous <i>fetchmail
--keep</i>).  But you may find that messages you&#146;ve already read on the
server are being fetched (and deleted) even when you don&#146;t specify
--all.  There are several reasons this can happen.
<p>
One could be that you&#146;re using POP2.  The POP2 protocol includes no
representation of &#146;new&#146; or &#146;old&#146; state in messages, so <i>fetchmail</i>
must treat all messages as new all the time.  But POP2 is obsolete, so
this is unlikely.
<p>
A potential POP3 problem might be servers that insert messages
in the middle of mailboxes (some VMS implementations of mail are
rumored to do this).  The <i>fetchmail</i> code assumes that new
messages are appended to the end of the mailbox; when this is not true
it may treat some old messages as new and vice versa.  Using UIDL whilst
setting fastuidl 0 might fix this, otherwise, consider switching to IMAP.
<p>
Yet another POP3 problem is that if they can&#146;t make tempfiles in the
user&#146;s home directory, some POP3 servers will hand back an
undocumented response that causes fetchmail to spuriously report "No
mail".
<p>
The IMAP code uses the presence or absence of the server flag &#92;Seen
to decide whether or not a message is new.  This isn&#146;t the right thing
to do, fetchmail should check the UIDVALIDITY and use UID, but it
doesn&#146;t do that yet. Under Unix, it counts on your IMAP server to notice
the BSD-style Status flags set by mail user agents and set the &#92;Seen
flag from them when appropriate.  All Unix IMAP servers we know of do
this, though it&#146;s not specified by the IMAP RFCs.  If you ever trip over
a server that doesn&#146;t, the symptom will be that messages you have
already read on your host will look new to the server.  In this
(unlikely) case, only messages you fetched with <i>fetchmail --keep</i>
will be both undeleted and marked old.
<p>
In ETRN and ODMR modes, <i>fetchmail</i> does not actually retrieve messages;
instead, it asks the server&#146;s SMTP listener to start a queue flush
to the client via SMTP.  Therefore it sends only undelivered messages.
<p>
<h1 class="manpages">SPAM FILTERING</h1>
Many SMTP listeners allow administrators to set up &#146;spam filters&#146; that
block unsolicited email from specified domains.  A MAIL FROM or DATA line that
triggers this feature will elicit an SMTP response which
(unfortunately) varies according to the listener.
<p>
Newer versions of
<i>sendmail</i> return an error code of 571.
<p>
According to RFC2821, the correct thing to return in this situation is
550 "Requested action not taken: mailbox unavailable" (the draft adds
"[E.g., mailbox not found, no access, or command rejected for policy
reasons].").
<p>
Older versions of the
<i>exim</i> MTA return 501 "Syntax error in parameters or arguments".
<p>
The
<i>postfix</i> MTA runs 554 as an antispam response.
<p>
<i>Zmailer</i> may reject code with a 500 response (followed by an enhanced status
code that contains more information).
<p>
Return codes which
<i>fetchmail</i> treats as antispam responses and discards
the message can be set with the &#146;antispam&#146; option.  This is one of the
<i>only</i> three circumstance under which fetchmail ever discards mail (the others
are the 552 and 553 errors described below, and the suppression of
multidropped messages with a message-ID already seen).
<p>
If
<i>fetchmail</i> is fetching from an IMAP server, the antispam response will be detected and
the message rejected immediately after the headers have been fetched,
without reading the message body.  Thus, you won&#146;t pay for downloading
spam message bodies.
<p>
By default, the list of antispam responses is empty.
<p>
If the <i>spambounce</i> global option is on, mail that is spam-blocked
triggers an RFC1892/RFC1894 bounce message informing the originator that
we do not accept mail from it. See also BUGS.
<p>
<h1 class="manpages">SMTP/ESMTP ERROR HANDLING</h1>
Besides the spam-blocking described above, fetchmail takes special
actions on the following SMTP/ESMTP error responses
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
452 (insufficient system storage)
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
Leave the message in the server mailbox for later retrieval.
</td></tr>
<tr valign="top"><td colspan="2">
552 (message exceeds fixed maximum message size)
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
Delete the message from the server.  Send bounce-mail to the
originator.
</td></tr>
<tr valign="top"><td colspan="2">
553 (invalid sending domain)
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
Delete the message from the server.  Don&#146;t even try to send
bounce-mail to the originator.
</td></tr>
<!-- PP ends table -->
</table>
Other errors trigger bounce mail back to the originator. See also BUGS.
<p>
<h1 class="manpages">THE RUN CONTROL FILE</h1>
The preferred way to set up fetchmail is to write a
<i>.fetchmailrc</i> file in your home directory (you may do this
directly, with a text editor, or indirectly via <i>fetchmailconf</i>).
When there is a conflict between the command-line arguments and the
arguments in this file, the command-line arguments take precedence.
<p>
To protect the security of your passwords,
your <i>~/.fetchmailrc</i> may not normally have more than 0600 (u=rw,g=,o=) permissions;
<i>fetchmail</i> will complain and exit otherwise (this check is suppressed when
--version is on).
<p>
You may read the <i>.fetchmailrc</i> file as a list of commands to
be executed when
<i>fetchmail</i> is called with no arguments.
<h2><i>Run Control Syntax</i></h2>
<p>
Comments begin with a &#146;#&#146; and extend through the end of the line.
Otherwise the file consists of a series of server entries or global
option statements in a free-format, token-oriented syntax.
<p>
There are four kinds of tokens: grammar keywords, numbers
(i.e. decimal digit sequences), unquoted strings, and quoted strings.
A quoted string is bounded by double quotes and may contain
whitespace (and quoted digits are treated as a string).  Note that
quoted strings will also contain line feed characters if they run across
two or more lines, unless you use a backslash to join lines (see below).
An unquoted string is any whitespace-delimited token that is neither
numeric, string quoted nor contains the special characters &#146;,&#146;, &#146;;&#146;,
&#146;:&#146;, or &#146;=&#146;.
<p>
Any amount of whitespace separates tokens in server entries, but is
otherwise ignored. You may use backslash escape sequences (&#92;n for LF,
&#92;t for HT, &#92;b for BS, &#92;r for CR, &#92;<i>nnn</i> for decimal (where
nnn cannot start with a 0), &#92;0<i>ooo</i> for octal, and &#92;x<i>hh</i> for
hex) to embed non-printable characters or string delimiters in strings.
In quoted strings, a backslash at the very end of a line will cause the
backslash itself and the line feed (LF or NL, new line) character to be
ignored, so that you can wrap long strings. Without the backslash at the
line end, the line feed character would become part of the string.
<p>
<b>Warning:</b> while these resemble C-style escape sequences, they are not the same.
fetchmail only supports these eight styles. C supports more escape
sequences that consist of backslash (&#92;) and a single character, but
does not support decimal codes and does not require the leading 0 in
octal notation.  Example: fetchmail interprets &#92;233 the same as &#92;xE9
(Latin small letter e with acute), where C would interpret &#92;233 as
octal 0233 = &#92;x9B (CSI, control sequence introducer).
<p>
Each server entry consists of one of the keywords &#146;poll&#146; or &#146;skip&#146;,
followed by a server name, followed by server options, followed by any
number of user descriptions.  Note: the most common cause of syntax
errors is mixing up user and server options.
<p>
For backward compatibility, the word &#146;server&#146; is a synonym for &#146;poll&#146;.
<p>
You can use the noise keywords &#146;and&#146;, &#146;with&#146;,
&#146;has&#146;, &#146;wants&#146;, and &#146;options&#146; anywhere in an entry to make
it resemble English.  They&#146;re ignored, but but can make entries much
easier to read at a glance.  The punctuation characters &#146;:&#146;, &#146;;&#146; and
&#146;,&#146; are also ignored.
<p>
<h2><i>Poll vs. Skip</i></h2>
The &#146;poll&#146; verb tells fetchmail to query this host when it is run with
no arguments.  The &#146;skip&#146; verb tells
<i>fetchmail</i> not to poll this host unless it is explicitly named on the command
line.  (The &#146;skip&#146; verb allows you to experiment with test entries
safely, or easily disable entries for hosts that are temporarily down.)
<p>
<h2><i>Keyword/Option Summary</i></h2>
Here are the legal options.  Keyword suffixes enclosed in
square brackets are optional.  Those corresponding to short command-line
options are followed by &#146;-&#146; and the appropriate option letter.  If
option is only relevant to a single mode of operation, it is noted as
&#146;s&#146; or &#146;m&#146; for singledrop- or multidrop-mode, respectively.
<p>
Here are the legal global options:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1"><tr valign="top">
<td>Keyword</td><td>Opt</td><td>Mode</td><td>Function</td></tr>
<tr valign="top">
<td>set daemon</td><td>-d</td><td></td><td>Set a background poll interval in seconds.
</td></tr>
<tr valign="top">
<td>set postmaster</td><td></td><td></td><td>Give the name of the last-resort mail recipient (default: user running
fetchmail, "postmaster" if run by the root user)
</td></tr>
<tr valign="top">
<td>set    bouncemail</td><td></td><td></td><td>Direct error mail to the sender (default)
</td></tr>
<tr valign="top">
<td>set no bouncemail</td><td></td><td></td><td>Direct error mail to the local postmaster (as per the &#146;postmaster&#146;
global option above).
</td></tr>
<tr valign="top">
<td>set no spambounce</td><td></td><td></td><td>Do not bounce spam-blocked mail (default).
</td></tr>
<tr valign="top">
<td>set    spambounce</td><td></td><td></td><td>Bounce blocked spam-blocked mail (as per the &#146;antispam&#146; user option)
back to the destination as indicated by the &#146;bouncemail&#146; global option.
Warning: Do not use this to bounce spam back to the sender - most spam
is sent with false sender address and thus this option hurts innocent
bystanders.
</td></tr>
<tr valign="top">
<td>set logfile</td><td>-L</td><td></td><td>Name of a file to append error and status messages to.
</td></tr>
<tr valign="top">
<td>set idfile</td><td>-i</td><td></td><td>Name of the file to store UID lists in.
</td></tr>
<tr valign="top">
<td>set    syslog</td><td></td><td></td><td>Do error logging through syslog(3).
</td></tr>
<tr valign="top">
<td>set no syslog</td><td></td><td></td><td>Turn off error logging through syslog(3). (default)
</td></tr>
<tr valign="top">
<td>set properties</td><td></td><td></td><td>String value that is ignored by fetchmail (may be used by extension
scripts).
</td></tr>
</table>
<p>
Here are the legal server options:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1"><tr valign="top">
<td>Keyword</td><td>Opt</td><td>Mode</td><td>Function</td></tr>
<tr valign="top">
<td>via</td><td></td><td></td><td>Specify DNS name of mailserver, overriding poll name
</td></tr>
<tr valign="top">
<td>proto[col]</td><td>-p</td><td></td><td>Specify protocol (case insensitive):
POP2, POP3, IMAP, APOP, KPOP
</td></tr>
<tr valign="top">
<td>local[domains]</td><td></td><td>m</td><td>Specify domain(s) to be regarded as local
</td></tr>
<tr valign="top">
<td>port</td><td></td><td></td><td>Specify TCP/IP service port (obsolete, use &#146;service&#146; instead).
</td></tr>
<tr valign="top">
<td>service</td><td>-P</td><td></td><td>Specify service name (a numeric value is also allowed and
considered a TCP/IP port number).
</td></tr>
<tr valign="top">
<td>auth[enticate]</td><td></td><td></td><td>Set authentication type (default &#146;any&#146;)
</td></tr>
<tr valign="top">
<td>timeout</td><td>-t</td><td></td><td>Server inactivity timeout in seconds (default 300)
</td></tr>
<tr valign="top">
<td>envelope</td><td>-E</td><td>m</td><td>Specify envelope-address header name
</td></tr>
<tr valign="top">
<td>no envelope</td><td></td><td>m</td><td>Disable looking for envelope address
</td></tr>
<tr valign="top">
<td>qvirtual</td><td>-Q</td><td>m</td><td>Qmail virtual domain prefix to remove from user name
</td></tr>
<tr valign="top">
<td>aka</td><td></td><td>m</td><td>Specify alternate DNS names of mailserver
</td></tr>
<tr valign="top">
<td>interface</td><td>-I</td><td></td><td>specify IP interface(s) that must be up for server poll to take place
</td></tr>
<tr valign="top">
<td>monitor</td><td>-M</td><td></td><td>Specify IP address to monitor for activity
</td></tr>
<tr valign="top">
<td>plugin</td><td></td><td></td><td>Specify command through which to make server connections.
</td></tr>
<tr valign="top">
<td>plugout</td><td></td><td></td><td>Specify command through which to make listener connections.
</td></tr>
<tr valign="top">
<td>dns</td><td></td><td>m</td><td>Enable DNS lookup for multidrop (default)
</td></tr>
<tr valign="top">
<td>no dns</td><td></td><td>m</td><td>Disable DNS lookup for multidrop
</td></tr>
<tr valign="top">
<td>checkalias</td><td></td><td>m</td><td>Do comparison by IP address for multidrop
</td></tr>
<tr valign="top">
<td>no checkalias</td><td></td><td>m</td><td>Do comparison by name for multidrop (default)
</td></tr>
<tr valign="top">
<td>uidl</td><td>-U</td><td></td><td>Force POP3 to use client-side UIDLs (recommended)
</td></tr>
<tr valign="top">
<td>no uidl</td><td></td><td></td><td>Turn off POP3 use of client-side UIDLs (default)
</td></tr>
<tr valign="top">
<td>interval</td><td></td><td></td><td>Only check this site every N poll cycles; N is a numeric argument.
</td></tr>
<tr valign="top">
<td>tracepolls</td><td></td><td></td><td>Add poll tracing information to the Received header
</td></tr>
<tr valign="top">
<td>principal</td><td></td><td></td><td>Set Kerberos principal (only useful with IMAP and kerberos)
</td></tr>
<tr valign="top">
<td>esmtpname</td><td></td><td></td><td>Set name for RFC2554 authentication to the ESMTP server.
</td></tr>
<tr valign="top">
<td>esmtppassword</td><td></td><td></td><td>Set password for RFC2554 authentication to the ESMTP server.
</td></tr>
</table>
<p>
Here are the legal user options:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1"><tr valign="top">
<td>Keyword</td><td>Opt</td><td>Mode</td><td>Function</td></tr>
<tr valign="top">
<td>user[name]</td><td>-u</td><td></td><td>Set remote user name
(local user name if name followed by &#146;here&#146;)
</td></tr>
<tr valign="top">
<td>is</td><td></td><td></td><td>Connect local and remote user names
</td></tr>
<tr valign="top">
<td>to</td><td></td><td></td><td>Connect local and remote user names
</td></tr>
<tr valign="top">
<td>pass[word]</td><td></td><td></td><td>Specify remote account password
</td></tr>
<tr valign="top">
<td>ssl</td><td></td><td></td><td>Connect to server over the specified base protocol using SSL encryption
</td></tr>
<tr valign="top">
<td>sslcert</td><td></td><td></td><td>Specify file for client side public SSL certificate
</td></tr>
<tr valign="top">
<td>sslkey</td><td></td><td></td><td>Specify file for client side private SSL key
</td></tr>
<tr valign="top">
<td>sslproto</td><td></td><td></td><td>Force ssl protocol for connection
</td></tr>
<tr valign="top">
<td>folder</td><td>-r</td><td></td><td>Specify remote folder to query
</td></tr>
<tr valign="top">
<td>smtphost</td><td>-S</td><td></td><td>Specify smtp host(s) to forward to
</td></tr>
<tr valign="top">
<td>fetchdomains</td><td></td><td>m</td><td>Specify domains for which mail should be fetched
</td></tr>
<tr valign="top">
<td>smtpaddress</td><td>-D</td><td></td><td>Specify the domain to be put in RCPT TO lines
</td></tr>
<tr valign="top">
<td>smtpname</td><td></td><td></td><td>Specify the user and domain to be put in RCPT TO lines
</td></tr>
<tr valign="top">
<td>antispam</td><td>-Z</td><td></td><td>Specify what SMTP returns are interpreted as spam-policy blocks
</td></tr>
<tr valign="top">
<td>mda</td><td>-m</td><td></td><td>Specify MDA for local delivery
</td></tr>
<tr valign="top">
<td>bsmtp</td><td>-o</td><td></td><td>Specify BSMTP batch file to append to
</td></tr>
<tr valign="top">
<td>preconnect</td><td></td><td></td><td>Command to be executed before each connection
</td></tr>
<tr valign="top">
<td>postconnect</td><td></td><td></td><td>Command to be executed after each connection
</td></tr>
<tr valign="top">
<td>keep</td><td>-k</td><td></td><td>Don&#146;t delete seen messages from server (for POP3, uidl is recommended)
</td></tr>
<tr valign="top">
<td>flush</td><td>-F</td><td></td><td>Flush all seen messages before querying (DANGEROUS)
</td></tr>
<tr valign="top">
<td>limitflush</td><td></td><td></td><td>Flush all oversized messages before querying
</td></tr>
<tr valign="top">
<td>fetchall</td><td>-a</td><td></td><td>Fetch all messages whether seen or not
</td></tr>
<tr valign="top">
<td>rewrite</td><td></td><td></td><td>Rewrite destination addresses for reply (default)
</td></tr>
<tr valign="top">
<td>stripcr</td><td></td><td></td><td>Strip carriage returns from ends of lines
</td></tr>
<tr valign="top">
<td>forcecr</td><td></td><td></td><td>Force carriage returns at ends of lines
</td></tr>
<tr valign="top">
<td>pass8bits</td><td></td><td></td><td>Force BODY=8BITMIME to ESMTP listener
</td></tr>
<tr valign="top">
<td>dropstatus</td><td></td><td></td><td>Strip Status and X-Mozilla-Status lines out of incoming mail
</td></tr>
<tr valign="top">
<td>dropdelivered</td><td></td><td></td><td>Strip Delivered-To lines out of incoming mail
</td></tr>
<tr valign="top">
<td>mimedecode</td><td></td><td></td><td>Convert quoted-printable to 8-bit in MIME messages
</td></tr>
<tr valign="top">
<td>idle</td><td></td><td></td><td>Idle waiting for new messages after each poll (IMAP only)
</td></tr>
<tr valign="top">
<td>no keep</td><td>-K</td><td></td><td>Delete seen messages from server (default)
</td></tr>
<tr valign="top">
<td>no flush</td><td></td><td></td><td>Don&#146;t flush all seen messages before querying (default)
</td></tr>
<tr valign="top">
<td>no fetchall</td><td></td><td></td><td>Retrieve only new messages (default)
</td></tr>
<tr valign="top">
<td>no rewrite</td><td></td><td></td><td>Don&#146;t rewrite headers
</td></tr>
<tr valign="top">
<td>no stripcr</td><td></td><td></td><td>Don&#146;t strip carriage returns (default)
</td></tr>
<tr valign="top">
<td>no forcecr</td><td></td><td></td><td>Don&#146;t force carriage returns at EOL (default)
</td></tr>
<tr valign="top">
<td>no pass8bits</td><td></td><td></td><td>Don&#146;t force BODY=8BITMIME to ESMTP listener (default)
</td></tr>
<tr valign="top">
<td>no dropstatus</td><td></td><td></td><td>Don&#146;t drop Status headers (default)
</td></tr>
<tr valign="top">
<td>no dropdelivered</td><td></td><td></td><td>Don&#146;t drop Delivered-To headers (default)
</td></tr>
<tr valign="top">
<td>no mimedecode</td><td></td><td></td><td>Don&#146;t convert quoted-printable to 8-bit in MIME messages (default)
</td></tr>
<tr valign="top">
<td>no idle</td><td></td><td></td><td>Don&#146;t idle waiting for new messages after each poll (IMAP only)
</td></tr>
<tr valign="top">
<td>limit</td><td>-l</td><td></td><td>Set message size limit
</td></tr>
<tr valign="top">
<td>warnings</td><td>-w</td><td></td><td>Set message size warning interval
</td></tr>
<tr valign="top">
<td>batchlimit</td><td>-b</td><td></td><td>Max # messages to forward in single connect
</td></tr>
<tr valign="top">
<td>fetchlimit</td><td>-B</td><td></td><td>Max # messages to fetch in single connect
</td></tr>
<tr valign="top">
<td>fetchsizelimit</td><td></td><td></td><td>Max # message sizes to fetch in single transaction
</td></tr>
<tr valign="top">
<td>fastuidl</td><td></td><td></td><td>Use binary search for first unseen message (POP3 only)
</td></tr>
<tr valign="top">
<td>expunge</td><td>-e</td><td></td><td>Perform an expunge on every #th message (IMAP and POP3 only)
</td></tr>
<tr valign="top">
<td>properties</td><td></td><td></td><td>String value is ignored by fetchmail (may be used by extension scripts)
</td></tr>
</table>
<p>
Remember that all user options must <i>follow</i> all server options.
<p>
In the .fetchmailrc file, the &#146;envelope&#146; string argument may be
preceded by a whitespace-separated number.  This number, if specified,
is the number of such headers to skip over (that is, an argument of 1
selects the second header of the given type).  This is sometime useful
for ignoring bogus envelope headers created by an ISP&#146;s local delivery
agent or internal forwards (through mail inspection systems, for
instance).
<h2><i>Keywords Not Corresponding To Option Switches</i></h2>
<p>
The &#146;folder&#146; and &#146;smtphost&#146; options (unlike their command-line
equivalents) can take a space- or comma-separated list of names
following them.
<p>
All options correspond to the obvious command-line arguments, except
the following: &#146;via&#146;, &#146;interval&#146;, &#146;aka&#146;, &#146;is&#146;, &#146;to&#146;, &#146;dns&#146;/&#146;no dns&#146;,
&#146;checkalias&#146;/&#146;no checkalias&#146;, &#146;password&#146;, &#146;preconnect&#146;, &#146;postconnect&#146;,
&#146;localdomains&#146;, &#146;stripcr&#146;/&#146;no stripcr&#146;, &#146;forcecr&#146;/&#146;no forcecr&#146;,
&#146;pass8bits&#146;/&#146;no pass8bits&#146; &#146;dropstatus/no dropstatus&#146;,
&#146;dropdelivered/no dropdelivered&#146;, &#146;mimedecode/no mimedecode&#146;, &#146;no idle&#146;,
and &#146;no envelope&#146;.
<p>
The &#146;via&#146; option is for if you want to have more
than one configuration pointing at the same site.  If it is present,
the string argument will be taken as the actual DNS name of the
mailserver host to query.
This will override the argument of poll, which can then simply be a
distinct label for the configuration (e.g. what you would give on the
command line to explicitly query this host).
<p>
The &#146;interval&#146; option (which takes a numeric argument) allows you to poll a
server less frequently than the basic poll interval.  If you say
&#146;interval N&#146; the server this option is attached to will only be
queried every N poll intervals.
<h2><i>Singledrop vs. Multidrop options</i></h2>
<p>
The &#146;is&#146; or &#146;to&#146; keywords associate the following local (client)
name(s) (or server-name to client-name mappings separated by =) with
the mailserver user name in the entry.  If an is/to list has &#146;*&#146; as
its last name, unrecognized names are simply passed through. Note that
until <i>fetchmail</i> version 6.3.4 inclusively, these lists could only
contain local parts of user names (fetchmail would only look at the part
before the @ sign). <i>fetchmail</i> versions 6.3.5 and
newer support full addresses on the left hand side of these mappings,
and they take precedence over any &#146;localdomains&#146;, &#146;aka&#146;, &#146;via&#146; or
similar mappings.
<p>
A single local name can be used to support redirecting your mail when
your username on the client machine is different from your name on the
mailserver.  When there is only a single local name, mail is forwarded
to that local username regardless of the message&#146;s Received, To, Cc,
and Bcc headers.  In this case,
<i>fetchmail</i> never does DNS lookups.
<p>
When there is more than one local name (or name mapping),
<i>fetchmail</i> looks at the envelope header, if configured, and
otherwise at the Received, To, Cc, and Bcc headers of retrieved mail
(this is &#146;multidrop mode&#146;).  It looks for addresses with hostname parts
that match your poll name or your &#146;via&#146;, &#146;aka&#146; or &#146;localdomains&#146;
options, and usually also for hostname parts which DNS tells it are
aliases of the mailserver.  See the discussion of &#146;dns&#146;, &#146;checkalias&#146;,
&#146;localdomains&#146;, and &#146;aka&#146; for details on how matching addresses are
handled.
<p>
If <i>fetchmail</i> cannot match any mailserver usernames or
localdomain addresses, the mail will be bounced.
Normally it will be bounced to the sender, but if the &#146;bouncemail&#146;
global option is off, the mail will go to the local postmaster instead.
(see the &#146;postmaster&#146; global option). See also BUGS.
<p>
The &#146;dns&#146; option (normally on) controls the way addresses from
multidrop mailboxes are checked.  On, it enables logic to check each
host address that does not match an &#146;aka&#146; or &#146;localdomains&#146; declaration
by looking it up with DNS.  When a mailserver username is recognized
attached to a matching hostname part, its local mapping is added to
the list of local recipients.
<p>
The &#146;checkalias&#146; option (normally off) extends the lookups performed
by the &#146;dns&#146; keyword in multidrop mode, providing a way to cope with
remote MTAs that identify themselves using their canonical name, while
they&#146;re polled using an alias.
When such a server is polled, checks to extract the envelope address
fail, and
<i>fetchmail</i> reverts to delivery using the To/Cc/Bcc headers (See below
&#146;Header vs. Envelope addresses&#146;).
Specifying this option instructs
<i>fetchmail</i> to retrieve all the IP addresses associated with both the poll name
and the name used by the remote MTA and to do a comparison of the IP
addresses.  This comes in handy in situations where the remote server
undergoes frequent canonical name changes, that would otherwise
require modifications to the rcfile.  &#146;checkalias&#146; has no effect if
&#146;no dns&#146; is specified in the rcfile.
<p>
The &#146;aka&#146; option is for use with multidrop mailboxes.  It allows you
to pre-declare a list of DNS aliases for a server.  This is an
optimization hack that allows you to trade space for speed.  When
<i>fetchmail</i>, while processing a multidrop mailbox, grovels through message headers
looking for names of the mailserver, pre-declaring common ones can
save it from having to do DNS lookups.  Note: the names you give
as arguments to &#146;aka&#146; are matched as suffixes -- if you specify
(say) &#146;aka netaxs.com&#146;, this will match not just a hostname
netaxs.com, but any hostname that ends with &#146;.netaxs.com&#146;; such as
(say) pop3.netaxs.com and mail.netaxs.com.
<p>
The &#146;localdomains&#146; option allows you to declare a list of domains
which fetchmail should consider local.  When fetchmail is parsing
address lines in multidrop modes, and a trailing segment of a host
name matches a declared local domain, that address is passed through
to the listener or MDA unaltered (local-name mappings are <i>not</i>
applied).
<p>
If you are using &#146;localdomains&#146;, you may also need to specify &#146;no
envelope&#146;, which disables <i>fetchmail</i>&#146;s normal attempt to deduce
an envelope address from the Received line or X-Envelope-To header or
whatever header has been previously set by &#146;envelope&#146;.  If you set &#146;no
envelope&#146; in the defaults entry it is possible to undo that in
individual entries by using &#146;envelope &lt;string&gt;&#146;.  As a special case,
&#146;envelope "Received"&#146; restores the default parsing of
Received lines.
<p>
The <b>password</b> option requires a string argument, which is the password
to be used with the entry&#146;s server.
<p>
The &#146;preconnect&#146; keyword allows you to specify a shell command to be
executed just before each time
<i>fetchmail</i> establishes a mailserver connection.  This may be useful if you are
attempting to set up secure POP connections with the aid of
<b>ssh</b>(1).
If the command returns a nonzero status, the poll of that mailserver
will be aborted.
<p>
Similarly, the &#146;postconnect&#146; keyword similarly allows you to specify a
shell command to be executed just after each time a mailserver
connection is taken down.
<p>
The &#146;forcecr&#146; option controls whether lines terminated by LF only are
given CRLF termination before forwarding.  Strictly speaking RFC821
requires this, but few MTAs enforce the requirement it so this option
is normally off (only one such MTA, qmail, is in significant use at
time of writing).
<p>
The &#146;stripcr&#146; option controls whether carriage returns are stripped
out of retrieved mail before it is forwarded.  It is normally not
necessary to set this, because it defaults to &#146;on&#146; (CR stripping
enabled) when there is an MDA declared but &#146;off&#146; (CR stripping
disabled) when forwarding is via SMTP.  If &#146;stripcr&#146; and &#146;forcecr&#146; are
both on, &#146;stripcr&#146; will override.
<p>
The &#146;pass8bits&#146; option exists to cope with Microsoft mail programs that
stupidly slap a "Content-Transfer-Encoding: 7bit" on everything.  With
this option off (the default) and such a header present,
<i>fetchmail</i> declares BODY=7BIT to an ESMTP-capable listener; this causes problems for
messages actually using 8-bit ISO or KOI-8 character sets, which will
be garbled by having the high bits of all characters stripped.  If
&#146;pass8bits&#146; is on,
<i>fetchmail</i> is forced to declare BODY=8BITMIME to any ESMTP-capable listener.  If
the listener is 8-bit-clean (as all the major ones now are) the right
thing will probably result.
<p>
The &#146;dropstatus&#146; option controls whether nonempty Status and
X-Mozilla-Status lines are retained in fetched mail (the default) or
discarded.  Retaining them allows your MUA to see what messages (if
any) were marked seen on the server.  On the other hand, it can
confuse some new-mail notifiers, which assume that anything with a
Status line in it has been seen.  (Note: the empty Status lines
inserted by some buggy POP servers are unconditionally discarded.)
<p>
The &#146;dropdelivered&#146; option controls whether Delivered-To headers will
be kept in fetched mail (the default) or discarded. These headers are
added by Qmail and Postfix mailservers in order to avoid mail loops but
may get in your way if you try to "mirror" a mailserver within the same
domain. Use with caution.
<p>
The &#146;mimedecode&#146; option controls whether MIME messages using the
quoted-printable encoding are automatically converted into pure 8-bit
data. If you are delivering mail to an ESMTP-capable, 8-bit-clean
listener (that includes all of the major MTAs like sendmail), then
this will automatically convert quoted-printable message headers and
data into 8-bit data, making it easier to understand when reading
mail. If your e-mail programs know how to deal with MIME messages,
then this option is not needed.  The mimedecode option is off by
default, because doing RFC2047 conversion on headers throws away
character-set information and can lead to bad results if the encoding
of the headers differs from the body encoding.
<p>
The &#146;idle&#146; option is intended to be used with IMAP servers supporting
the RFC2177 IDLE command extension, but does not strictly require it.
If it is enabled, and fetchmail detects that IDLE is supported, an
IDLE will be issued at the end of each poll.  This will tell the IMAP
server to hold the connection open and notify the client when new mail
is available.  If IDLE is not supported, fetchmail will simulate it by
periodically issuing NOOP. If you need to poll a link frequently, IDLE
can save bandwidth by eliminating TCP/IP connects and LOGIN/LOGOUT
sequences. On the other hand, an IDLE connection will eat almost all
of your fetchmail&#146;s time, because it will never drop the connection
and allow other polls to occur unless the server times out the IDLE.
It also doesn&#146;t work with multiple folders; only the first folder will
ever be polled.
<p>
<p>
The &#146;properties&#146; option is an extension mechanism.  It takes a string
argument, which is ignored by fetchmail itself.  The string argument may be
used to store configuration information for scripts which require it.
In particular, the output of &#146;--configdump&#146; option will make properties
associated with a user entry readily available to a Python script.
<p>
<h2><i>Miscellaneous Run Control Options</i></h2>
The words &#146;here&#146; and &#146;there&#146; have useful English-like
significance.  Normally &#146;user eric is esr&#146; would mean that
mail for the remote user &#146;eric&#146; is to be delivered to &#146;esr&#146;,
but you can make this clearer by saying &#146;user eric there is esr here&#146;,
or reverse it by saying &#146;user esr here is eric there&#146;
<p>
Legal protocol identifiers for use with the &#146;protocol&#146; keyword are:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
    auto (or AUTO) (legacy, to be removed from future release)
    pop2 (or POP2) (legacy, to be removed from future release)
    pop3 (or POP3)
    sdps (or SDPS)
    imap (or IMAP)
    apop (or APOP)
    kpop (or KPOP)
</pre></td></tr>
</table>
<p>
<p>
Legal authentication types are &#146;any&#146;, &#146;password&#146;, &#146;kerberos&#146;,
&#146;kerberos_v4&#146;, &#146;kerberos_v5&#146; and &#146;gssapi&#146;, &#146;cram-md5&#146;, &#146;otp&#146;, &#146;msn&#146;
(only for POP3), &#146;ntlm&#146;, &#146;ssh&#146;, &#146;external&#146; (only IMAP).
The &#146;password&#146; type specifies
authentication by normal transmission of a password (the password may be
plain text or subject to protocol-specific encryption as in CRAM-MD5);
&#146;kerberos&#146; tells <i>fetchmail</i> to try to get a Kerberos ticket at the
start of each query instead, and send an arbitrary string as the
password; and &#146;gssapi&#146; tells fetchmail to use GSSAPI authentication.
See the description of the &#146;auth&#146; keyword for more.
<p>
Specifying &#146;kpop&#146; sets POP3 protocol over port 1109 with Kerberos V4
authentication.  These defaults may be overridden by later options.
<p>
There are some global option statements: &#146;set logfile&#146;
followed by a string sets the same global specified by --logfile.  A
command-line --logfile option will override this. Note that --logfile is
only effective if fetchmail detaches itself from the terminal.  Also,
&#146;set daemon&#146; sets the poll interval as --daemon does.  This can be
overridden by a command-line --daemon option; in particular --daemon~0
can be used to force foreground operation. The &#146;set postmaster&#146;
statement sets the address to which multidrop mail defaults if there are
no local matches.  Finally, &#146;set syslog&#146; sends log messages to
syslogd(8).
<p>
<h1 class="manpages">DEBUGGING FETCHMAIL</h1>
<h2><i>Fetchmail crashing</i></h2>
There are various ways in that fetchmail may "crash", i. e. stop
operation suddenly and unexpectedly. A "crash" usually refers to an
error condition that the software did not handle by itself. A well-known
failure mode is the "segmentation fault" or "signal 11" or "SIGSEGV" or
just "segfault" for short. These can be caused by hardware or by software
problems. Software-induced segfaults can usually be reproduced easily
and in the same place, whereas hardware-induced segfaults can go away if
the computer is rebooted, or powered off for a few hours, and can happen
in random locations even if you use the software the same way.
<p>
For solving hardware-induced segfaults, find the faulty component and repair or
replace it. &lt;<a href="http://www.bitwizard.nl/sig11">http://www.bitwizard.nl/sig11</a>/&gt; may help you with details.
<p>
For solving software-induced segfaults, the developers may need a "stack
backtrace".
<p>
<h2><i>Enabling fetchmail core dumps</i></h2>
By default, fetchmail suppresses core dumps as these might contain
passwords and other sensitive information. For debugging fetchmail
crashes, obtaining a "stack backtrace" from a core dump is often the
quickest way to solve the problem, and when posting your problem on a
mailing list, the developers may ask you for a "backtrace".
<p>
1. To get useful backtraces, fetchmail needs to be installed without
getting stripped of its compilation symbols.  Unfortunately, most
binary packages that are installed are stripped, and core files from
symbol-stripped programs are worthless. So you may need to recompile
fetchmail. On many systems, you can type
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
        file &#145;which fetchmail&#145;
</pre></td></tr>
</table>
<p>
to find out if fetchmail was symbol-stripped or not. If yours was
unstripped, fine, proceed, if it was stripped, you need to recompile the
source code first. You do not usually need to install fetchmail in order
to debug it.
<p>
2. The shell environment that starts fetchmail needs to enable core
dumps. The key is the "maximum core (file) size" that can usually be
configured with a tool named "limit" or "ulimit". See the documentation
for your shell for details. In the popular bash shell, "ulimit -Sc
unlimited" will allow the core dump.
<p>
3. You need to tell fetchmail, too, to allow core dumps. To do
this, run fetchmail with the <b>-d0 -v</b> options.  It is often easier
to also add <b>--nosyslog -N</b> as well.
<p>
Finally, you need to reproduce the crash. You can just start fetchmail
from the directory where you compiled it by typing <b>./fetchmail</b>,
so the complete command line will start with <b>./fetchmail -Nvd0
--nosyslog</b> and perhaps list your other options.
<p>
After the crash, run your debugger to obtain the core dump.  The
debugger will often be GNU GDB, you can then type (adjust paths as
necessary) <b>gdb ./fetchmail fetchmail.core</b> and then, after GDB
has started up and read all its files, type <b>backtrace full</b>, save
the output (copy & paste will do, the backtrace will be read by a human)
and then type <b>quit</b> to leave gdb.
<b>Note:</b> on some systems, the core
files have different names, they might contain a number instead of the
program name, or number and name, but it will usually have "core" as
part of their name.
<p>
<h1 class="manpages">INTERACTION WITH RFC 822</h1>
When trying to determine the originating address of a message,
fetchmail looks through headers in the following order:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
        Return-Path:
        Resent-Sender: (ignored if it doesn&#146;t contain an @ or !)
        Sender: (ignored if it doesn&#146;t contain an @ or !)
        Resent-From:
        From:
        Reply-To:
        Apparently-From:
</pre></td></tr>
</table>
<p>
The originating address is used for logging, and to set the MAIL FROM
address when forwarding to SMTP.  This order is intended to cope
gracefully with receiving mailing list messages in multidrop mode. The
intent is that if a local address doesn&#146;t exist, the bounce message
won&#146;t be returned blindly to the author or to the list itself, but
rather to the list manager (which is less annoying).
<p>
In multidrop mode, destination headers are processed as follows:
First, fetchmail looks for the Received: header (or whichever one is
specified by the &#146;envelope&#146; option) to determine the local
recipient address. If the mail is addressed to more than one recipient,
the Received line won&#146;t contain any information regarding recipient addresses.
<p>
Then fetchmail looks for the Resent-To:, Resent-Cc:, and Resent-Bcc:
lines.  If they exist, they should contain the final recipients and
have precedence over their To:/Cc:/Bcc: counterparts.  If the Resent-*
lines don&#146;t exist, the To:, Cc:, Bcc: and Apparently-To: lines are
looked for. (The presence of a Resent-To: is taken to imply that the
person referred by the To: address has already received the original
copy of the mail.)
<p>
<h1 class="manpages">CONFIGURATION EXAMPLES</h1>
Note that although there are password declarations in a good many
of the examples below, this is mainly for illustrative purposes.
We recommend stashing account/password pairs in your $HOME/.netrc
file, where they can be used not just by fetchmail but by ftp(1) and
other programs.
<p>
Basic format is:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll SERVERNAME protocol PROTOCOL username NAME password PASSWORD
</pre></td></tr>
</table>
<p>
Example:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll pop.provider.net protocol pop3 username "jsmith" password "secret1"
</pre></td></tr>
</table>
<p>
Or, using some abbreviations:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll pop.provider.net proto pop3 user "jsmith" password "secret1"
</pre></td></tr>
</table>
<p>
Multiple servers may be listed:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll pop.provider.net proto pop3 user "jsmith" pass "secret1"
  poll other.provider.net proto pop2 user "John.Smith" pass "My^Hat"
</pre></td></tr>
</table>
<p>
Here&#146;s a version of those two with more whitespace and some noise words:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll pop.provider.net proto pop3
      user "jsmith", with password secret1, is "jsmith" here;
  poll other.provider.net proto pop2:
      user "John.Smith", with password "My^Hat", is "John.Smith" here;
</pre></td></tr>
</table>
<p>
This version is much easier to read and doesn&#146;t cost significantly
more (parsing is done only once, at startup time).
<p>
<p>
If you need to include whitespace in a parameter string, enclose the
string in double quotes.  Thus:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll mail.provider.net with proto pop3:
        user "jsmith" there has password "u can&#146;t krak this"
                    is jws here and wants mda "/bin/mail"
</pre></td></tr>
</table>
<p>
You may have an initial server description headed by the keyword
&#146;defaults&#146; instead of &#146;poll&#146; followed by a name.  Such a record
is interpreted as defaults for all queries to use. It may be overwritten
by individual server descriptions.  So, you could write:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  defaults proto pop3
        user "jsmith"
  poll pop.provider.net
        pass "secret1"
  poll mail.provider.net
        user "jjsmith" there has password "secret2"
</pre></td></tr>
</table>
<p>
It&#146;s possible to specify more than one user per server (this is only
likely to be useful when running fetchmail in daemon mode as root).
The &#146;user&#146; keyword leads off a user description, and every user specification
in a multi-user entry must include it.  Here&#146;s an example:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll pop.provider.net proto pop3 port 3111
        user "jsmith" with pass "secret1" is "smith" here
        user jones with pass "secret2" is "jjones" here keep
</pre></td></tr>
</table>
<p>
This associates the local username &#146;smith&#146; with the pop.provider.net
username &#146;jsmith&#146; and the local username &#146;jjones&#146; with the
pop.provider.net username &#146;jones&#146;.  Mail for &#146;jones&#146; is kept on the
server after download.
<p>
Here&#146;s what a simple retrieval configuration for a multidrop mailbox
looks like:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll pop.provider.net:
        user maildrop with pass secret1 to golux &#146;hurkle&#146;=&#146;happy&#146; snark here
</pre></td></tr>
</table>
<p>
This says that the mailbox of account &#146;maildrop&#146; on the server is a
multidrop box, and that messages in it should be parsed for the
server user names &#146;golux&#146;, &#146;hurkle&#146;, and &#146;snark&#146;.  It further
specifies that &#146;golux&#146; and &#146;snark&#146; have the same name on the
client as on the server, but mail for server user &#146;hurkle&#146; should be
delivered to client user &#146;happy&#146;.
<p>
<b>Note</b> that
<i>fetchmail,</i> until version 6.3.4, did NOT allow full user@domain specifications here,
these would never match. <i>Fetchmail</i> 6.3.5 and newer support
user@domain specifications on the left-hand side of a user mapping.
<p>
Here&#146;s an example of another kind of multidrop connection:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  poll pop.provider.net localdomains loonytoons.org toons.org:
        user maildrop with pass secret1 to * here
</pre></td></tr>
</table>
<p>
This also says that the mailbox of account &#146;maildrop&#146; on the server is
a multidrop box.  It tells fetchmail that any address in the
loonytoons.org or toons.org domains (including sub-domain addresses like
&#146;<a href="mailto:joe@daffy.loonytoons.org">joe@daffy.loonytoons.org</a>&#146;) should be passed through to the local SMTP
listener without modification.  Be careful of mail loops if you do this!
<p>
Here&#146;s an example configuration using ssh and the plugin option.  The
queries are made directly on the stdin and stdout of imapd via ssh.
Note that in this setup, IMAP authentication can be skipped.
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
poll mailhost.net with proto imap:
        plugin "ssh %h /usr/sbin/imapd" auth ssh;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user esr is esr here
</pre></td></tr>
</table>
<p>
<h1 class="manpages">THE USE AND ABUSE OF MULTIDROP MAILBOXES</h1>
Use the multiple-local-recipients feature with caution -- it can bite.
All multidrop features are ineffective in ETRN and ODMR modes.
<p>
Also, note that in multidrop mode duplicate mails are suppressed.  A
piece of mail is considered duplicate if it has the same message-ID as
the message immediately preceding and more than one addressee.  Such
runs of messages may be generated when copies of a message addressed
to multiple users are delivered to a multidrop box.
<p>
<h2><i>Header vs. Envelope addresses</i></h2>
The fundamental problem is that by having your mailserver toss several
peoples&#146; mail in a single maildrop box, you may have thrown away
potentially vital information about who each piece of mail was
actually addressed to (the &#146;envelope address&#146;, as opposed to the
header addresses in the RFC822 To/Cc headers - the Bcc is not available
at the receiving end).  This &#146;envelope address&#146; is the address you need
in order to reroute mail properly.
<p>
Sometimes
<i>fetchmail</i> can deduce the envelope address.  If the mailserver MTA is
<i>sendmail</i> and the item of mail had just one recipient, the MTA will have written
a &#146;by/for&#146; clause that gives the envelope addressee into its Received
header. But this doesn&#146;t work reliably for other MTAs, nor if there is
more than one recipient.  By default, <i>fetchmail</i> looks for
envelope addresses in these lines; you can restore this default with
-E "Received" or &#146;envelope Received&#146;.
<p>
<b>As a better alternative,</b> some SMTP listeners and/or mail servers insert a header
in each message containing a copy of the envelope addresses.  This
header (when it exists) is often &#146;X-Original-To&#146;, &#146;Delivered-To&#146; or
&#146;X-Envelope-To&#146;.  Fetchmail&#146;s assumption about this can be changed with
the -E or &#146;envelope&#146; option.  Note that writing an envelope header of
this kind exposes the names of recipients (including blind-copy
recipients) to all receivers of the messages, so the upstream must store
one copy of the message per recipient to avoid becoming a privacy problem.
<p>
Postfix, since version 2.0, writes an X-Original-To: header which
contains a copy of the envelope as it was received.
<p>
Qmail and Postfix generally write a &#146;Delivered-To&#146; header upon
delivering the message to the mail spool and use it to avoid mail loops.
Qmail virtual domains however will prefix the user name with a string
that normally matches the user&#146;s domain. To remove this prefix you can
use the -Q or &#146;qvirtual&#146; option.
<p>
Sometimes, unfortunately, neither of these methods works.  That is the
point when you should contact your ISP and ask them to provide such an
envelope header, and you should not use multidrop in this situation.
When they all fail, fetchmail must fall back on the contents of To/Cc
headers (Bcc headers are not available - see below) to try to determine
recipient addressees -- and these are unreliable.
In particular, mailing-list software often ships mail with only
the list broadcast address in the To header.
<p>
<b>Note that a future version of </b><i>fetchmail</i> may remove To/Cc parsing! <p>
When
<i>fetchmail</i> cannot deduce a recipient address that is local, and the intended
recipient address was anyone other than fetchmail&#146;s invoking user,
<b>mail will get lost.</b> This is what makes the multidrop feature risky without proper envelope
information.
<p>
A related problem is that when you blind-copy a mail message, the Bcc
information is carried <i>only</i> as envelope address (it&#146;s removed from
the headers by the sending mail server, so fetchmail can see it only if
there is an X-<blink>\E</blink>nvelope-To header).  Thus, blind-copying to someone who
gets mail over a fetchmail multidrop link will fail unless the the
mailserver host routinely writes X-Envelope-To or an equivalent header
into messages in your maildrop.
<p>
<b>In conclusion, mailing lists and Bcc&#146;d mail can only work if the
server you&#146;re fetching from (1) stores one copy of the message per
recipient in </b><i>your</i> domain and (2) records the envelope
information in a special header (X-Original-To, Delivered-To,
X-Envelope-To).
<p>
<h2><i>Good Ways To Use Multidrop Mailboxes</i></h2>
Multiple local names can be used to administer a mailing list from the
client side of a <i>fetchmail</i> collection.  Suppose your name is
&#146;esr&#146;, and you want to both pick up your own mail and maintain a mailing
list called (say) "fetchmail-friends", and you want to keep the alias
list on your client machine.
<p>
On your server, you can alias &#146;fetchmail-friends&#146; to &#146;esr&#146;; then, in
your <i>.fetchmailrc</i>, declare &#146;to esr fetchmail-friends here&#146;.
Then, when mail including &#146;fetchmail-friends&#146; as a local address
gets fetched, the list name will be appended to the list of
recipients your SMTP listener sees.  Therefore it will undergo alias
expansion locally.  Be sure to include &#146;esr&#146; in the local alias
expansion of fetchmail-friends, or you&#146;ll never see mail sent only to
the list.  Also be sure that your listener has the "me-too" option set
(sendmail&#146;s -oXm command-line option or OXm declaration) so your name
isn&#146;t removed from alias expansions in messages you send.
<p>
This trick is not without its problems, however.  You&#146;ll begin to see
this when a message comes in that is addressed only to a mailing list
you do <i>not</i> have declared as a local name.  Each such message
will feature an &#146;X-Fetchmail-Warning&#146; header which is generated
because fetchmail cannot find a valid local name in the recipient
addresses.  Such messages default (as was described above) to being
sent to the local user running
<i>fetchmail</i>, but the program has no way to know that that&#146;s actually the right thing.
<p>
<h2><i>Bad Ways To Abuse Multidrop Mailboxes</i></h2>
Multidrop mailboxes and
<i>fetchmail</i> serving multiple users in daemon mode do not mix.  The problem, again, is
mail from mailing lists, which typically does not have an individual
recipient address on it.   Unless
<i>fetchmail</i> can deduce an envelope address, such mail will only go to the account
running fetchmail (probably root).  Also, blind-copied users are very
likely never to see their mail at all.
<p>
If you&#146;re tempted to use
<i>fetchmail</i> to retrieve mail for multiple users from a single mail drop via POP or
IMAP, think again (and reread the section on header and envelope
addresses above).  It would be smarter to just let the mail sit in the
mailserver&#146;s queue and use fetchmail&#146;s ETRN or ODMR modes to trigger
SMTP sends periodically (of course, this means you have to poll more
frequently than the mailserver&#146;s expiry period).  If you can&#146;t arrange
this, try setting up a UUCP feed.
<p>
If you absolutely <i>must</i> use multidrop for this purpose, make sure
your mailserver writes an envelope-address header that fetchmail can
see.  Otherwise you <i>will</i> lose mail and it <i>will</i> come back
to haunt you.
<p>
<h2><i>Speeding Up Multidrop Checking</i></h2>
Normally, when multiple users are declared
<i>fetchmail</i> extracts recipient addresses as described above and checks each host
part with DNS to see if it&#146;s an alias of the mailserver.  If so, the
name mappings described in the "to ... here" declaration are done and
the mail locally delivered.
<p>
This is a convenient but also slow method.  To speed
it up, pre-declare mailserver aliases with &#146;aka&#146;; these are checked
before DNS lookups are done.  If you&#146;re certain your aka list contains
<b>all</b> DNS aliases of the mailserver (and all MX names pointing at it - note
this may change in a future version)
you can declare &#146;no dns&#146; to suppress DNS lookups entirely and
<i>only</i> match against the aka list.
<p>
<h1 class="manpages">EXIT CODES</h1>
To facilitate the use of
<i>fetchmail</i> in shell scripts, an exit status code is returned to give an indication
of what occurred during a given connection.
<p>
The exit codes returned by
<i>fetchmail</i> are as follows:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
0
</td><td>
One or more messages were successfully retrieved (or, if the -c option
was selected, were found waiting but not retrieved).
</td></tr>
<tr valign="top"><td width=6%>
1
</td><td>
There was no mail awaiting retrieval.  (There may have been old mail still
on the server but not selected for retrieval.)
</td></tr>
<tr valign="top"><td width=6%>
2
</td><td>
An error was encountered when attempting to open a socket to retrieve
mail.  If you don&#146;t know what a socket is, don&#146;t worry about it --
just treat this as an &#146;unrecoverable error&#146;.  This error can also be
because a protocol fetchmail wants to use is not listed in /etc/services.
</td></tr>
<tr valign="top"><td width=6%>
3
</td><td>
The user authentication step failed.  This usually means that a bad
user-id, password, or APOP id was specified.  Or it may mean that you
tried to run fetchmail under circumstances where it did not have
standard input attached to a terminal and could not prompt for a
missing password.
</td></tr>
<tr valign="top"><td width=6%>
4
</td><td>
Some sort of fatal protocol error was detected.
</td></tr>
<tr valign="top"><td width=6%>
5
</td><td>
There was a syntax error in the arguments to
<i>fetchmail</i>. </td></tr>
<tr valign="top"><td width=6%>
6
</td><td>
The run control file had bad permissions.
</td></tr>
<tr valign="top"><td width=6%>
7
</td><td>
There was an error condition reported by the server.  Can also
fire if
<i>fetchmail</i> timed out while waiting for the server.
</td></tr>
<tr valign="top"><td width=6%>
8
</td><td>
Client-side exclusion error.  This means
<i>fetchmail</i> either found another copy of itself already running, or failed in such
a way that it isn&#146;t sure whether another copy is running.
</td></tr>
<tr valign="top"><td width=6%>
9
</td><td>
The user authentication step failed because the server responded "lock
busy".  Try again after a brief pause!  This error is not implemented
for all protocols, nor for all servers.  If not implemented for your
server, "3" will be returned instead, see above.  May be returned when
talking to qpopper or other servers that can respond with "lock busy"
or some similar text containing the word "lock".
</td></tr>
<tr valign="top"><td width=6%>
10
</td><td>
The
<i>fetchmail</i> run failed while trying to do an SMTP port open or transaction.
</td></tr>
<tr valign="top"><td width=6%>
11
</td><td>
Fatal DNS error.  Fetchmail encountered an error while performing
a DNS lookup at startup and could not proceed.
</td></tr>
<tr valign="top"><td width=6%>
12
</td><td>
BSMTP batch file could not be opened.
</td></tr>
<tr valign="top"><td width=6%>
13
</td><td>
Poll terminated by a fetch limit (see the --fetchlimit option).
</td></tr>
<tr valign="top"><td width=6%>
14
</td><td>
Server busy indication.
</td></tr>
<tr valign="top"><td width=6%>
23
</td><td>
Internal error.  You should see a message on standard error with
details.
</td></tr>
<tr valign="top"><td width=6%>
24
</td><td>
These are internal codes and should not appear externally.
</td></tr>
<!-- PP ends table -->
</table>
When
<i>fetchmail</i> queries more than one host, return status is 0 if <i>any</i> query
successfully retrieved mail. Otherwise the returned error status is
that of the last host queried.
<p>
<h1 class="manpages">FILES</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
~/.fetchmailrc
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
default run control file
</td></tr>
<tr valign="top"><td colspan="2">
~/.fetchids
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
default location of file associating hosts with last message IDs seen
(used only with newer RFC1939-compliant POP3 servers supporting the
UIDL command).
</td></tr>
<tr valign="top"><td colspan="2">
~/.fetchmail.pid
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
lock file to help prevent concurrent runs (non-root mode).
</td></tr>
<tr valign="top"><td colspan="2">
~/.netrc
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
your FTP run control file, which (if present) will be searched for
passwords as a last resort before prompting for one interactively.
</td></tr>
<tr valign="top"><td colspan="2">
/var/run/fetchmail.pid
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
lock file to help prevent concurrent runs (root mode, Linux systems).
</td></tr>
<tr valign="top"><td colspan="2">
/etc/fetchmail.pid
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
lock file to help prevent concurrent runs (root mode, systems without /var/run).
<p>
</td></tr>
</table>
<h1 class="manpages">ENVIRONMENT</h1>
If the FETCHMAILUSER variable is set, it is used as the name of the
calling user (default local name) for purposes such as mailing error
notifications.  Otherwise, if either the LOGNAME or USER variable is
correctly set (e.g. the corresponding UID matches the session user ID)
then that name is used as the default local name.  Otherwise
<b>getpwuid</b>(3) must be able to retrieve a password entry for the
session ID (this elaborate logic is designed to handle the case of
multiple names per userid gracefully).
<p>
If the environment variable FETCHMAILHOME is set to a valid and
existing directory name, fetchmail will read $FETCHMAILHOME/fetchmailrc
(the dot is missing in this case), $FETCHMAILHOME/.fetchids and
$FETCHMAILHOME/.fetchmail.pid rather than from the user&#146;s home
directory.  The .netrc file is always looked for in the the invoking
user&#146;s home directory regardless of FETCHMAILHOME&#146;s setting.
<p>
If the HOME_ETC variable is set, fetchmail will read
$HOME_ETC/.fetchmailrc instead of ~/.fetchmailrc.
<p>
If HOME_ETC and FETCHMAILHOME are set, HOME_ETC will be ignored.
<p>
<h1 class="manpages">SIGNALS</h1>
If a
<i>fetchmail</i> daemon is running as root, SIGUSR1 wakes it up from its sleep phase and
forces a poll of all non-skipped servers. For compatibility reasons,
SIGHUP can also be used in 6.3.X but may not be available in future
fetchmail versions.
<p>
If
<i>fetchmail</i> is running in daemon mode as non-root, use SIGUSR1 to wake it (this is
so SIGHUP due to logout can retain the default action of killing it).
<p>
Running
<i>fetchmail</i> in foreground while a background fetchmail is running will do
whichever of these is appropriate to wake it up.
<p>
<h1 class="manpages">BUGS AND KNOWN PROBLEMS</h1>
<p>
Fetchmail cannot handle user names that contain blanks after a "@"
character, for instance "demonstr@ti on". These are rather uncommon and
only hurt when using UID-based --keep setups, so the 6.3.X versions of
fetchmail won&#146;t be fixed.
<p>
Please check the <b>NEWS</b> file that shipped with fetchmail for more
known bugs than those listed here.
<p>
The assumptions that the DNS and in particular the checkalias options
make are not often sustainable. For instance, it has become uncommon for
an MX server to be a POP3 or IMAP server at the same time. Therefore the
MX lookups may go away in a future release.
<p>
The mda and plugin options interact badly.  In order to collect error
status from the MDA, fetchmail has to change its normal signal
handling so that dead plugin processes don&#146;t get reaped until the end
of the poll cycle.  This can cause resource starvation if too many
zombies accumulate.  So either don&#146;t deliver to a MDA using plugins or
risk being overrun by an army of undead.
<p>
The --interface option does not support IPv6 and it is doubtful if it
ever will, since there is no portable way to query interface IPv6
addresses.
<p>
The RFC822 address parser used in multidrop mode chokes on some
@-addresses that are technically legal but bizarre.  Strange uses of
quoting and embedded comments are likely to confuse it.
<p>
In a message with multiple envelope headers, only the last one
processed will be visible to fetchmail.
<p>
Use of some of these protocols requires that the program send
unencrypted passwords over the TCP/IP connection to the mailserver.
This creates a risk that name/password pairs might be snaffled with a
packet sniffer or more sophisticated monitoring software.  Under Linux
and FreeBSD, the --interface option can be used to restrict polling to
availability of a specific interface device with a specific local or
remote IP address, but snooping is still possible if (a) either host
has a network device that can be opened in promiscuous mode, or (b)
the intervening network link can be tapped.  We recommend the use of
<b>ssh</b>(1)
tunnelling to not only shroud your passwords but encrypt the entire
conversation.
<p>
Use of the %F or %T escapes in an mda option could open a security
hole, because they pass text manipulable by an attacker to a shell
command.  Potential shell characters are replaced by &#146;_&#146; before
execution.  The hole is further reduced by the fact that fetchmail
temporarily discards any suid privileges it may have while running the
MDA.  For maximum safety, however, don&#146;t use an mda command containing
%F or %T when fetchmail is run from the root account itself.
<p>
Fetchmail&#146;s method of sending bounces due to errors or spam-blocking and
spam bounces requires that port 25 of localhost be available for sending
mail via SMTP.
<p>
If you modify a
<i>~/.fetchmailrc</i> while a background instance is running and break the syntax, the
background instance will die silently.  Unfortunately, it can&#146;t
die noisily because we don&#146;t yet know whether syslog should be enabled.
On some systems, fetchmail dies quietly even if there is no syntax
error; this seems to have something to do with buggy terminal ioctl
code in the kernel.
<p>
The -f~- option (reading a configuration from stdin) is incompatible
with the plugin option.
<p>
The &#146;principal&#146; option only handles Kerberos IV, not V.
<p>
Interactively entered passwords are truncated after 63 characters. If
you really need to use a longer password, you will have to use a
configuration file.
<p>
A backslash as the last character of a configuration file will be
flagged as a syntax error rather than ignored.
<p>
Send comments, bug reports, gripes, and the like to the
fetchmail-devel list &lt;<a href="mailto:fetchmail-devel@lists.berlios.de">fetchmail-devel@lists.berlios.de</a>&gt;.  An HTML FAQ is
available at the fetchmail home page; surf to
<a href="http://fetchmail.berlios.de/">http://fetchmail.berlios.de</a>/ or do a WWW search for pages with
&#146;fetchmail&#146; in their titles.
<p>
<h1 class="manpages">AUTHOR</h1>
Fetchmail is currently maintained by Matthias Andree and Rob Funk with
major assistance from Sunil Shetye (for code) and Rob MacGregor (for the
mailing lists).
<p>
Most of the code is from Eric S. Raymond &lt;<a href="mailto:esr@snark.thyrsus.com">esr@snark.thyrsus.com</a>&gt;.  Too
many other people to name here have contributed code and patches.
<p>
This program is descended from and replaces
<i>popclient</i>, by Carl Harris &lt;<a href="mailto:ceharris@mal.com">ceharris@mal.com</a>&gt;; the internals have become quite different,
but some of its interface design is directly traceable to that
ancestral program.
<p>
This manual page has been improved by R. Hannes Beinert and H[&#146;e]ctor
Garc[&#146;i]a.
<p>
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<p>
The fetchmail home page: &lt;<a href="http://fetchmail.berlios.de/">http://fetchmail.berlios.de</a>/&gt;
<p>
The maildrop home page: &lt;<a href="http://www.courier-mta.org/maildrop">http://www.courier-mta.org/maildrop</a>/&gt;
<h1 class="manpages">APPLICABLE STANDARDS</h1>
<p>
Note that this list is just a collection of references and not a
statement as to the actual protocol conformance or requirements in
fetchmail.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
SMTP/ESMTP:
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
RFC 821, RFC 2821, RFC 1869, RFC 1652, RFC 1870, RFC 1983, RFC 1985,
RFC 2554.
</td></tr>
<tr valign="top"><td>
mail:
</td><td valign="bottom">
RFC 822, RFC 2822, RFC 1123, RFC 1892, RFC 1894.
</td></tr>
<tr valign="top"><td>
POP2:
</td><td valign="bottom">
RFC 937
</td></tr>
<tr valign="top"><td>
POP3:
</td><td valign="bottom">
RFC 1081, RFC 1225, RFC 1460, RFC 1725, RFC 1734, RFC 1939, RFC 1957,
RFC 2195, RFC 2449.
</td></tr>
<tr valign="top"><td>
APOP:
</td><td valign="bottom">
RFC 1939.
</td></tr>
<tr valign="top"><td>
RPOP:
</td><td valign="bottom">
RFC 1081, RFC 1225.
</td></tr>
<tr valign="top"><td colspan="2">
IMAP2/IMAP2BIS:
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
RFC 1176, RFC 1732.
</td></tr>
<tr valign="top"><td colspan="2">
IMAP4/IMAP4rev1:
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
RFC 1730, RFC 1731, RFC 1732, RFC 2060, RFC 2061, RFC 2195, RFC 2177,
RFC 2683.
</td></tr>
<tr valign="top"><td>
ETRN:
</td><td valign="bottom">
RFC 1985.
</td></tr>
<tr valign="top"><td colspan="2">
ODMR/ATRN:
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
RFC 2645.
</td></tr>
<tr valign="top"><td>
OTP:
</td><td valign="bottom">
RFC 1938.
</td></tr>
<tr valign="top"><td>
LMTP:
</td><td valign="bottom">
RFC 2033.
</td></tr>
<tr valign="top"><td colspan="2">
GSSAPI:
</td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
RFC 1508.
</td></tr>
<tr valign="top"><td>
TLS:
</td><td valign="bottom">
RFC 2595.
</td></tr>
</table>
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion1cde.html?tutorial=unix_commands&amp;file=fetchmail.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/fetchmail.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:38 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
