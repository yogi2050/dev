<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/find.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:39 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>find - Unix, Linux Command</title>
<meta name="Description" Content="find - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>find - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
find - search for files in a directory hierarchy
<h1 class="manpages">SYNOPSIS</h1>
<b>find</b> [-H] [-L] [-P] [path...] [expression]
<h1 class="manpages">DESCRIPTION</h1>
This manual page
documents the GNU version of
<b>find</b>. GNU
<b>find</b> searches the directory tree rooted at each given file name by
evaluating the given expression from left to right, according to the
rules of precedence (see section OPERATORS), until the outcome is
known (the left hand side is false for <i>and</i> operations, true for
<i>or</i>), at which point
<b>find</b> moves on to the next file name.
<p>
If you are using
<b>find</b> in an environment where security is important (for example if you are
using it to seach directories that are writable by other users), you
should read the "Security Considerations" chapter of the findutils
documentation, which is called <b>Finding Files</b> and comes with
findutils.   That document also includes a lot more detail
and discussion than this manual page, so you may find it a more useful
source of information.
<h1 class="manpages">OPTIONS</h1>
The &#145;-H&#146;, &#145;-L&#146; and &#145;-P&#146; options control the treatment of symbolic
links.  Command-line arguments following these are taken to be names
of files or directories to be examined, up to the first argument that
begins with &#145;-&#146;, &#145;(&#146;, &#145;)&#146;, &#145;,&#146;, or &#145;!&#146;.  That argument and any
following arguments are taken to be the expression describing what is
to be searched for.  If no paths are given, the current directory is
used.  If no expression is given, the expression &#145;-print&#146; is used
(but you should probably consider using &#145;-print0&#146; instead, anyway).
<p>
This manual page talks about &#145;options&#146; within the expression list.
These options control the behaviour of
<b>find</b> but are specified immediately after the last path name.  The three
&#145;real&#146; options &#145;-H&#146;, &#145;-L&#146; and &#145;-P&#146; must appear before the first
path name, if at all.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
-P
</td><td>
Never follow symbolic links.  This is the default behaviour.  When
<b>find</b> examines or prints information a file, and the file is a symbolic
link, the information used shall be taken from the properties of the
symbolic link itself. 
<p>
</td></tr>
<tr valign="top"><td width=6%>
-L
</td><td>
Follow symbolic links.  When
<b>find</b> examines or prints information about files, the information used shall
be taken from the properties of the file to which the link points, not
from the link itself (unless it is a broken symbolic link or
<b>find</b> is unable to examine the file to which the link points).  Use of this
option implies -noleaf.  If you later use the -P option, -noleaf
will still be in effect.  If -L is in effect and
<b>find</b> discovers a symbolic link to a subdirectory during its search,
the subdirectory pointed to by the symbolic link will be searched.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
When the -L option is in effect, the -type predicate will always
match against the type of the file that a symbolic link points to
rather than the link itself (unless the symbolic link is broken).
Using -L causes the -lname and -ilname predicates always to return
false.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-H
</td><td>
Do not follow symbolic links, except while processing the command
line arguments.  When
<b>find</b> examines or prints information about files, the information used
shall be taken from the properties of the symbolic link itself.   The
only exception to this behaviour is when a file specified on the
command line is a symbolic link, and the link can be resolved.  For
that situation, the information used is taken from whatever the link
points to (that is, the link is followed).  The information about the
link itself is used as a fallback if the file pointed to by the
symbolic link cannot be examined.  If -H is in effect and one of the
paths specified on the command line is a symbolic link to a directory,
the contents of that directory will be examined (though of course
-maxdepth 0 would prevent this).
</td></tr>
<!-- P ends table -->
</table>
If more than one of -H, -L and -P is specified, each overrides the
others; the last one appearing on the command line takes effect.
Since it is the default, the -P option should be considered to be in
effect unless either -H or -L is specified.
<p>
GNU
<b>find</b> frequently stats files during the processing of the command line
itself, before any searching has begun.  These options also affect how
those arguments are processed.  Specifically, there are a number of
tests that compare files listed on the command line against a file we
are currently considering.  In each case, the file specified on the
command line will have been examined and some of its properties will
have been saved.  If the named file is in fact a symbolic link, and
the -P option is in effect (or if neither -H nor -L were
specified), the information used for the comparison will be taken from
the properties of the symbolic link.  Otherwise, it will be taken from
the properties of the file the link points to.  If
<b>find</b> cannot follow the link (for example because it has insufficient
privileges or the link points to a nonexistent file) the properties of
the link itself will be used.
<p>
When the -H or -L options are in effect, any symbolic links listed
as the argument of -newer will be dereferenced, and the timestamp
will be taken from the file to which the symbolic link points.  The
same consideration applies to -anewer and -cnewer.
<p>
The -follow option has a similar effect to -L, though it takes
effect at the point where it appears (that is, if -L is not used but
-follow is, any symbolic links appearing after -follow on the
command line will be dereferenced, and those before it will not).
<p>
<p>
<h1 class="manpages">EXPRESSIONS</h1>
The expression is made up of options (which affect overall operation
rather than the processing of a specific file, and always return
true), tests (which return a true or false value), and actions (which
have side effects and return a true or false value), all separated by
operators.  -and is assumed where the operator is omitted. 
<p>
If the expression contains no actions other than -prune, -print is
performed on all files for which the expression is true.
<p>
<h2><i>OPTIONS</i></h2>
<p>
All options always return true.  Except for -follow and -daystart,
they always take effect, rather than being processed only when their
place in the expression is reached.  Therefore, for clarity, it is
best to place them at the beginning of the expression.  A warning is
issued if you don&#146;t do this.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
-daystart
</td><td>
Measure times (for -amin, -atime, -cmin, -ctime, -mmin, and -mtime)
from the beginning of today rather than from 24 hours ago.  This
option only affects tests which appear later on the command line.
</td></tr>
<tr valign="top"><td width=6%>
-depth
</td><td>
Process each directory&#146;s contents before the directory itself.
</td></tr>
<tr valign="top"><td width=6%>
-d
</td><td>
A synonym for -depth, for compatibility with FreeBSD, NetBSD, MacOS X and OpenBSD.
</td></tr>
<tr valign="top"><td width=6%>
-follow
</td><td>
Deprecated; use the -L option instead.  Dereference symbolic links.
Implies -noleaf.  The -follow option affects only those tests which
appear after it on the command line.  Unless the -H or -L option has
been specified, the position of the -follow option changes the
behaviour of the -newer predicate; any files listed as the argument
of -newer will be dereferenced if they are symbolic links.  The same
consideration applies to -anewer and -cnewer.  Similarly, the -type
predicate will always match against the type of the file that a
symbolic link points to rather than the link itself.  Using -follow
causes the -lname and -ilname predicates always to return false.
</td></tr>
<tr valign="top"><td width=6%>
-help, --help
</td><td>
Print a summary of the command-line usage of
<b>find</b> and exit.
</td></tr>
<tr valign="top"><td width=6%>
-ignore_readdir_race
</td><td>
Normally, <b>find</b> will emit an error message when it fails to stat a file.
If you give this option and a file is deleted between the time <b>find</b>
reads the name of the file from the directory and the time it tries to stat
the file, no error message will be issued.    This also applies to files
or directories whose names are given on the command line.  This option takes
effect at the time the command line is read, which means that you cannot search
one part of the filesystem with this option on and part of it with this option
off (if you need to do that, you will need to issue two <b>find</b> commands
instead, one with the option and one without it).
</td></tr>
<tr valign="top"><td width=6%>
-maxdepth <i>levels</i>
</td><td>
Descend at most <i>levels</i> (a non-negative integer) levels of
directories below the command line arguments.  &#145;-maxdepth 0&#146; means
only apply the tests and actions to the command line arguments.
</td></tr>
<tr valign="top"><td width=6%>
-mindepth <i>levels</i>
</td><td>
Do not apply any tests or actions at levels less than <i>levels</i> (a
non-negative integer).  &#145;-mindepth 1&#146; means process all files except
the command line arguments.
</td></tr>
<tr valign="top"><td width=6%>
-mount
</td><td>
Don&#146;t descend directories on other filesystems.  An alternate name for
-xdev, for compatibility with some other versions of
<b>find</b>. </td></tr>
<tr valign="top"><td width=6%>
-noignore_readdir_race
</td><td>
Turns off the effect of -ignore_readdir_race.
</td></tr>
<tr valign="top"><td width=6%>
-noleaf
</td><td>
Do not optimize by assuming that directories contain 2 fewer
subdirectories than their hard link count.  This option is needed when
searching filesystems that do not follow the Unix directory-link
convention, such as CD-ROM or MS-DOS filesystems or AFS volume mount
points.  Each directory on a normal Unix filesystem has at least 2
hard links: its name and its &#145;.&#146;  entry.  Additionally, its
subdirectories (if any) each have a &#145;..&#146;  entry linked to that
directory.  When
<b>find</b> is examining a directory, after it has statted 2 fewer subdirectories
than the directory&#146;s link count, it knows that the rest of the entries
in the directory are non-directories (&#145;leaf&#146; files in the directory
tree).  If only the files&#146; names need to be examined, there is no need
to stat them; this gives a significant increase in search speed.
</td></tr>
<tr valign="top"><td width=6%>
-regextype <i>type</i>
</td><td>
Changes the regular expression syntax understood by
<b>-regex</b> and
<b>-iregex</b> tests which occur later on the command line.  Currently-implemented
types are emacs (this is the default), posix-awk, posix-basic,
posix-egrep and posix-extended.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-version, --version
</td><td>
Print the <b>find</b> version number and exit.
</td></tr>
<tr valign="top"><td width=6%>
-warn, -nowarn
</td><td>
Turn warning messages on or off.  These warnings apply only to the
command line usage, not to any conditions that
<b>find</b> might encounter when it searches directories.  The default behaviour
corresponds to -warn if standard input is a tty, and to -nowarn
otherwise.
</td></tr>
<tr valign="top"><td width=6%>
-xautofs
</td><td>
Don&#146;t descend directories on autofs filesystems.
</td></tr>
<tr valign="top"><td width=6%>
-xdev
</td><td>
Don&#146;t descend directories on other filesystems.
<p>
</td></tr>
</table>
<h2><i>TESTS</i></h2>
<p>
Numeric arguments can be specified as
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
<i>+n</i>
</td><td>
for greater than
<i>n</i>, </td></tr>
<tr valign="top"><td width=6%>
<i>-n</i>
</td><td>
for less than
<i>n</i>, </td></tr>
<tr valign="top"><td width=6%>
<i>n</i>
</td><td>
for exactly
<i>n</i>. </td></tr>
<tr valign="top"><td width=6%>
-amin <i>n</i>
</td><td>
File was last accessed <i>n</i> minutes ago.
</td></tr>
<tr valign="top"><td width=6%>
-anewer <i>file</i>
</td><td>
File was last accessed more recently than <i>file</i> was modified.  If
<i>file</i> is a symbolic link and the -H option or the -L option is
in effect, the access time of the file it points to is always
used.
</td></tr>
<tr valign="top"><td width=6%>
-atime <i>n</i>
</td><td>
File was last accessed <i>n</i>*24 hours ago. 
When find figures out how many 24-hour periods ago the file
was last accessed, any fractional part is ignored, so to match
<b>-atime</b> <b>+1</b>, a file has to have been accessed at least
<i>two</i> days ago.
</td></tr>
<tr valign="top"><td width=6%>
-cmin <i>n</i>
</td><td>
File&#146;s status was last changed <i>n</i> minutes ago.
</td></tr>
<tr valign="top"><td width=6%>
-cnewer <i>file</i>
</td><td>
File&#146;s status was last changed more recently than <i>file</i> was
modified.  If <i>file</i> is a symbolic link and the -H option or the
-L option is in effect, the status-change time of the file it points
to is always used.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-ctime <i>n</i>
</td><td>
File&#146;s status was last changed <i>n</i>*24 hours ago.
See the comments for
<b>-atime</b> to understand how rounding affects the interpretation of file status
change times.
</td></tr>
<tr valign="top"><td width=6%>
-empty
</td><td>
File is empty and is either a regular file or a directory.
</td></tr>
<tr valign="top"><td width=6%>
-false
</td><td>
Always false.
</td></tr>
<tr valign="top"><td width=6%>
-fstype <i>type</i>
</td><td>
File is on a filesystem of type <i>type</i>.  The valid filesystem
types vary among different versions of Unix; an incomplete list of
filesystem types that are accepted on some version of Unix or another
is: ufs, 4.2, 4.3, nfs, tmp, mfs, S51K, S52K.  You can use -printf
with the %F directive to see the types of your filesystems.
</td></tr>
<tr valign="top"><td width=6%>
-gid <i>n</i>
</td><td>
File&#146;s numeric group ID is <i>n</i>.
</td></tr>
<tr valign="top"><td width=6%>
-group <i>gname</i>
</td><td>
File belongs to group <i>gname</i> (numeric group ID allowed).
</td></tr>
<tr valign="top"><td width=6%>
-ilname <i>pattern</i>
</td><td>
Like -lname, but the match is case insensitive.
If the -L option or the -follow option is in effect, this test
returns false unless the symbolic link is broken.
</td></tr>
<tr valign="top"><td width=6%>
-iname <i>pattern</i>
</td><td>
Like -name, but the match is case insensitive.  For example, the
patterns &#145;fo*&#146; and &#145;F??&#146; match the file names &#145;Foo&#146;, &#145;FOO&#146;, &#145;foo&#146;,
&#145;fOo&#146;, etc.   In these patterns, unlike filename expansion by the
shell, an initial &#146;.&#146; can be matched by &#146;*&#146;.  That is,
<b>find -name *bar</b> will match the file &#145;.foobar&#146;.   Please note that you should quote
patterns as a matter of course, otherwise the shell will expand any
wildcard characters in them.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-inum <i>n</i>
</td><td>
File has inode number <i>n</i>.  It is normally easier to use the
<b>-samefile</b> test instead.
</td></tr>
<tr valign="top"><td width=6%>
-ipath <i>pattern</i>
</td><td>
Behaves in the same way as -iwholename.  This option is deprecated,
so please do not use it.
</td></tr>
<tr valign="top"><td width=6%>
-iregex <i>pattern</i>
</td><td>
Like -regex, but the match is case insensitive.
</td></tr>
<tr valign="top"><td width=6%>
-iwholename <i>pattern</i>
</td><td>
Like -wholename, but the match is case insensitive.
</td></tr>
<tr valign="top"><td width=6%>
-links <i>n</i>
</td><td>
File has <i>n</i> links.
</td></tr>
<tr valign="top"><td width=6%>
-lname <i>pattern</i>
</td><td>
File is a symbolic link whose contents match shell pattern
<i>pattern</i>.  The metacharacters do not treat &#145;/&#146; or &#145;.&#146; specially.
If the -L option or the -follow option is in effect, this test
returns false unless the symbolic link is broken.
</td></tr>
<tr valign="top"><td width=6%>
-mmin <i>n</i>
</td><td>
File&#146;s data was last modified <i>n</i> minutes ago.
</td></tr>
<tr valign="top"><td width=6%>
-mtime <i>n</i>
</td><td>
File&#146;s data was last modified <i>n</i>*24 hours ago.
See the comments for
<b>-atime</b> to understand how rounding affects the interpretation of file
modification times.
</td></tr>
<tr valign="top"><td width=6%>
-name <i>pattern</i>
</td><td>
Base of file name (the path with the leading directories removed)
matches shell pattern <i>pattern</i>.  The metacharacters (&#145;*&#146;, &#145;?&#146;,
and &#145;[]&#146;) match a &#145;.&#146; at the start of the base name (this is a change
in findutils-4.2.2; see section STANDARDS CONFORMANCE below).  To ignore a
directory and the files under it, use -prune; see an example in the
description of -wholename.  Braces are not recognised as being
special, despite the fact that some shells including Bash imbue braces
with a special meaning in shell patterns.  The filename matching is
performed with the use of the
<b>fnmatch</b>(3)
library function.   Don&#146;t forget to enclose the pattern in quotes
in order to protect it from expansion by the shell.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-newer <i>file</i>
</td><td>
File was modified more recently than <i>file</i>.  If <i>file</i> is a
symbolic link and the -H option or the -L option is in effect, the
modification time of the file it points to is always used.
</td></tr>
<tr valign="top"><td width=6%>
-nouser
</td><td>
No user corresponds to file&#146;s numeric user ID.
</td></tr>
<tr valign="top"><td width=6%>
-nogroup
</td><td>
No group corresponds to file&#146;s numeric group ID.
</td></tr>
<tr valign="top"><td width=6%>
-path <i>pattern</i>
</td><td>
See -wholename.   The predicate -path is also supported by HP-UX
<b>find</b>. </td></tr>
<tr valign="top"><td width=6%>
-perm <i>mode</i>
</td><td>
File&#146;s permission bits are exactly <i>mode</i> (octal or symbolic).
Since an exact match is required, if you want to use this form for
symbolic modes, you may have to specify a rather complex mode string.
For example &#146;-perm g=w&#146; will only match files which have mode 0020
(that is, ones for which group write permission is the only permission
set).  It is more likely that you will want to use the &#146;/&#146; or &#146;-&#146;
forms, for example &#146;-perm -g=w&#146;, which matches any file with group
write permission.  See the
<b>EXAMPLES</b> section for some illustrative examples.
</td></tr>
<tr valign="top"><td width=6%>
-perm -<i>mode</i>
</td><td>
All of the permission bits <i>mode</i> are set for the file.
Symbolic modes are accepted in this form, and this is usually the way
in which would want to use them.  You must specify &#146;u&#146;, &#146;g&#146; or &#146;o&#146; if
you use a symbolic mode.   See the
<b>EXAMPLES</b> section for some illustrative examples.
</td></tr>
<tr valign="top"><td width=6%>
-perm /<i>mode</i>
</td><td>
Any of the permission bits <i>mode</i> are set for the file.  Symbolic
modes are accepted in this form.  You must specify &#146;u&#146;, &#146;g&#146; or &#146;o&#146; if
you use a symbolic mode.  See the
<b>EXAMPLES</b> section for some illustrative examples.  If no permission bits in
<i>mode</i> are set, this test currently matches no files.  However, it will soon
be changed to match any file (the idea is to be more consistent with
the behaviour of
<b>perm</b> <b>-000</b>). </td></tr>
<tr valign="top"><td width=6%>
-perm +<i>mode</i>
</td><td>
Deprecated, old way of searching for files with any of the permission
bits in <i>mode</i> set.  You should use
<b>-perm </b><i>/mode</i> instead. Trying to use the &#146;+&#146; syntax with symbolic modes will yield
surprising results.  For example, &#146;+u+x&#146; is a valid symbolic mode
(equivalent to +u,+x, i.e. 0111) and will therefore not be evaluated
as
<b>-perm +</b><i>mode</i> but instead as the exact mode specifier
<b>-perm </b><i>mode</i> and so it matches files with exact permissions 0111 instead of files with any
execute bit set.  If you found this paragraph confusing, you&#146;re not
alone - just use
<b>-perm /</b><i>mode</i>. This form of the
<b>-perm</b> test is deprecated because the POSIX specification requires the
interpretation of a leading &#146;+&#146; as being part of a symbolic mode, and
so we switched to using &#146;/&#146; instead.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-regex <i>pattern</i>
</td><td>
File name matches regular expression <i>pattern</i>.  This is a match
on the whole path, not a search.  For example, to match a file named
&#145;./fubar3&#146;, you can use the regular expression &#145;.*bar.&#146; or &#145;.*b.*3&#146;,
but not &#145;f.*r3&#146;.  The regular expressions understood by
<b>find</b> are by default Emacs Regular Expressions, but this can be
changed with the
<b>-regextype</b> option.
</td></tr>
<tr valign="top"><td width=6%>
-samefile <i>name</i>
</td><td>
File refers to the same inode as <i>name</i>.   When -L is in effect,
this can include symbolic links.
</td></tr>
<tr valign="top"><td width=6%>
-size <i>n</i>[cwbkMG]
</td><td>
File uses <i>n</i> units of space.  The following suffixes
can be used:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
&#145;b&#146;
</td><td>
for 512-byte blocks (this is the default if no suffix is used)
</td></tr>
<tr valign="top"><td width=6%>
&#145;c&#146;
</td><td>
for bytes
</td></tr>
<tr valign="top"><td width=6%>
&#145;w&#146;
</td><td>
for two-byte words
</td></tr>
<tr valign="top"><td width=6%>
&#145;k&#146;
</td><td>
for Kilobytes (units of 1024 bytes)
</td></tr>
<tr valign="top"><td width=6%>
&#145;M&#146;
</td><td>
for Megabytes (units of 1048576 bytes)
</td></tr>
<tr valign="top"><td width=6%>
&#145;G&#146;
</td><td>
for Gigabytes (units of 1073741824 bytes)
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
The size does not count indirect blocks, but it does count blocks in
sparse files that are not actually allocated.  Bear in mind that the
&#145;%k&#146; and &#145;%b&#146; format specifiers of -printf handle sparse files
differently.  The &#145;b&#146; suffix always denotes 512-byte blocks and never
1 Kilobyte blocks, which is different to the behaviour of -ls.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-true
</td><td>
Always true.
</td></tr>
<tr valign="top"><td width=6%>
-type <i>c</i>
</td><td>
File is of type <i>c</i>:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
b
</td><td>
block (buffered) special
</td></tr>
<tr valign="top"><td width=6%>
c
</td><td>
character (unbuffered) special
</td></tr>
<tr valign="top"><td width=6%>
d
</td><td>
directory
</td></tr>
<tr valign="top"><td width=6%>
p
</td><td>
named pipe (FIFO)
</td></tr>
<tr valign="top"><td width=6%>
f
</td><td>
regular file
</td></tr>
<tr valign="top"><td width=6%>
l
</td><td>
symbolic link; this is never true if the -L option or the -follow
option is in effect, unless the symbolic link is broken.  If you want
to search for symbolic links when -L is in effect, use -xtype.
</td></tr>
<tr valign="top"><td width=6%>
s
</td><td>
socket
</td></tr>
<tr valign="top"><td width=6%>
D
</td><td>
door (Solaris)
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=6%>
-uid <i>n</i>
</td><td>
File&#146;s numeric user ID is <i>n</i>.
</td></tr>
<tr valign="top"><td width=6%>
-used <i>n</i>
</td><td>
File was last accessed <i>n</i> days after its status was last changed.
</td></tr>
<tr valign="top"><td width=6%>
-user <i>uname</i>
</td><td>
File is owned by user <i>uname</i> (numeric user ID allowed).
</td></tr>
<tr valign="top"><td width=6%>
-wholename <i>pattern</i>
</td><td>
File name matches shell pattern <i>pattern</i>.  The metacharacters do
not treat &#145;/&#146; or &#145;.&#146; specially; so, for example,
<!-- ignored unsupported tag .in -->
<!-- Need break --><br />
find . -wholename &#146;./sr*sc&#146;
<!-- ignored unsupported tag .in -->
<!-- Need break --><br />
will print an entry for a directory called &#146;./src/misc&#146; (if one
exists).  To ignore a whole directory tree, use -prune rather than
checking every file in the tree.  For example, to skip the
directory &#145;src/emacs&#146; and all files and directories under it, and
print the names of the other files found, do something like this:
<!-- ignored unsupported tag .in -->
<!-- Need break --><br />
find . -wholename &#146;./src/emacs&#146; -prune -o -print
<!-- ignored unsupported tag .in -->
</td></tr>
<tr valign="top"><td width=6%>
-xtype <i>c</i>
</td><td>
The same as -type unless the file is a symbolic link.  For symbolic
links: if the -H or -P option was specified, true if the file is a
link to a file of type <i>c</i>; if the -L option has been given, true
if <i>c</i> is &#145;l&#146;.  In other words, for symbolic links, -xtype checks
the type of the file that -type does not check.
</td></tr>
<tr valign="top"><td width=6%>
-context <i>pattern</i>
</td><td>
(SELinux only) Security context of the file matches glob <i>pattern</i>.
<p>
</td></tr>
</table>
<h2><i>ACTIONS</i></h2>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
-delete
</td><td>
Delete files; true if removal succeeded.  If the removal failed, an
error message is issued.  Use of this action automatically turns on
the &#146;-depth&#146; option.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-exec <i>command</i> ;
</td><td>
Execute <i>command</i>; true if 0 status is returned.  All following
arguments to
<b>find</b> are taken to be arguments to the command until an argument consisting
of &#145;;&#146; is encountered.  The string &#145;{}&#146; is replaced by the current
file name being processed everywhere it occurs in the arguments to the
command, not just in arguments where it is alone, as in some versions
of
<b>find</b>. Both of these constructions might need to be escaped (with a &#145;&#92;&#146;) or
quoted to protect them from expansion by the shell.  See the
<b>EXAMPLES</b> section for examples of the use of the &#145;-exec&#146; option.  The specified
command is run once for each matched file.
The command is executed in the starting directory.   There are
unavoidable security problems surrounding use of the -exec option;
you should use the -execdir option instead. 
<p>
</td></tr>
<tr valign="top"><td width=6%>
-exec <i>command</i> {} +
</td><td>
This variant of the -exec option runs the specified command on the
selected files, but the command line is built by appending each
selected file name at the end; the total number of invocations of the
command will be much less than the number of matched files.  The
command line is built in much the same way that
<b>xargs</b> builds its command lines.  Only one instance of &#146;{}&#146; is allowed within
the command.  The command is executed in the starting directory.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-execdir <i>command</i> ;
</td><td>
</td></tr>
<tr valign="top"><td width=6%>
-execdir <i>command</i> {} +
</td><td>
Like -exec, but the specified command is run from the subdirectory
containing the matched file, which is not normally the directory in
which you started
<b>find</b>. This a much more secure method for invoking commands, as it avoids
race conditions during resolution of the paths to the matched files.
As with the -exec option, the &#146;+&#146; form of -execdir will build a
command line to process more than one matched file, but any given
invocation of
<i>command</i> will only list files that exist in the same subdirectory.  If you use
this option, you must ensure that your
<b>$PATH</b> environment variable does not reference the current directory;
otherwise, an attacker can run any commands they like by leaving an
appropriately-named file in a directory in which you will run
-execdir.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-fls <i>file</i>
</td><td>
True; like -ls but write to <i>file</i> like -fprint.
The output file is always created, even if the predicate is never
matched. 
See the
<b><a href=#8>UNUSUAL FILENAMES</a></b> section for information about how unusual characters in filenames are handled.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-fprint <i>file</i>
</td><td>
True; print the full file name into file <i>file</i>.  If <i>file</i>
does not exist when <b>find</b> is run, it is created; if it does
exist, it is truncated.  The file names &#145;&#145;/dev/stdout&#146;&#146; and
&#145;&#145;/dev/stderr&#146;&#146; are handled specially; they refer to the standard
output and standard error output, respectively.
The output file is always created, even if the predicate is never matched.
See the
<b><a href=#8>UNUSUAL FILENAMES</a></b> section for information about how unusual characters in filenames are handled.
</td></tr>
<tr valign="top"><td width=6%>
-fprint0 <i>file</i>
</td><td>
True; like -print0 but write to <i>file</i> like -fprint.
The output file is always created, even if the predicate is never matched.
See the
<b><a href=#8>UNUSUAL FILENAMES</a></b> section for information about how unusual characters in filenames are handled.
</td></tr>
<tr valign="top"><td width=6%>
-fprintf <i>file</i> <i>format</i>
</td><td>
True; like -printf but write to <i>file</i> like -fprint.
The output file is always created, even if the predicate is never matched.
See the
<b><a href=#8>UNUSUAL FILENAMES</a></b> section for information about how unusual characters in filenames are handled.
</td></tr>
<tr valign="top"><td width=6%>
-ok <i>command</i> ;
</td><td>
Like -exec but ask the user first (on the standard input); if the
response does not start with &#145;y&#146; or &#145;Y&#146;, do not run the command, and
return false.  If the command is run, its standard input is redirected
from
<b>/dev/null</b>. <p>
</td></tr>
<tr valign="top"><td width=6%>
-print
</td><td>
True; print the full file name on the standard output, followed by a
newline.   If you are piping the output of
<b>find</b> into another program and there is the faintest possibility that the files
which you are searching for might contain a newline, then you should
seriously consider using the &#145;-print0&#146; option instead of &#145;-print&#146;.
See the
<b><a href=#8>UNUSUAL FILENAMES</a></b> section for information about how unusual characters in filenames are handled.
</td></tr>
<tr valign="top"><td width=6%>
-okdir <i>command</i> ;
</td><td>
Like -execdir but ask the user first (on the standard input); if the
response does not start with &#145;y&#146; or &#145;Y&#146;, do not run the command, and
return false.  If the command is run, its standard input is redirected
from
<b>/dev/null</b>. </td></tr>
<tr valign="top"><td width=6%>
-print0
</td><td>
True; print the full file name on the standard output, followed by a
null character (instead of the newline character that &#145;-print&#146; uses).
This allows file names that contain newlines or other types of white
space to be correctly interpreted by programs that process the
<b>find</b> output.  This option corresponds to the &#145;-0&#146; option of
<b>xargs</b>. </td></tr>
<tr valign="top"><td width=6%>
-printf <i>format</i>
</td><td>
True; print <i>format</i> on the standard output, interpreting &#145;&#92;&#146;
escapes and &#145;%&#146; directives.  Field widths and precisions can be
specified as with the &#145;printf&#146; C function.  Please note that many of
the fields are printed as %s rather than %d, and this may mean that
flags don&#146;t work as you might expect.  This also means that the &#145;-&#146;
flag does work (it forces fields to be left-aligned).  Unlike -print,
-printf does not add a newline at the end of the string.  The escapes
and directives are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
&#92;a
</td><td>
Alarm bell.
</td></tr>
<tr valign="top"><td width=6%>
&#92;b
</td><td>
Backspace.
</td></tr>
<tr valign="top"><td width=6%>
&#92;c
</td><td>
Stop printing from this format immediately and flush the output.
</td></tr>
<tr valign="top"><td width=6%>
&#92;f
</td><td>
Form feed.
</td></tr>
<tr valign="top"><td width=6%>
&#92;n
</td><td>
Newline.
</td></tr>
<tr valign="top"><td width=6%>
&#92;r
</td><td>
Carriage return.
</td></tr>
<tr valign="top"><td width=6%>
&#92;t
</td><td>
Horizontal tab.
</td></tr>
<tr valign="top"><td width=6%>
&#92;v
</td><td>
Vertical tab.
</td></tr>
<tr valign="top"><td width=6%>
&#92;&nbsp;
</td><td>
ASCII NUL.
</td></tr>
<tr valign="top"><td width=6%>
&#92;&#92;
</td><td>
A literal backslash (&#145;&#92;&#146;).
</td></tr>
<tr valign="top"><td width=6%>
&#92;NNN
</td><td>
The character whose ASCII code is NNN (octal).
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
A &#145;&#92;&#146; character followed by any other character is treated as an
ordinary character, so they both are printed.
</td></tr>
<tr valign="top"><td width=6%>
%%
</td><td>
A literal percent sign.
</td></tr>
<tr valign="top"><td width=6%>
%a
</td><td>
File&#146;s last access time in the format returned by the C &#145;ctime&#146; function.
</td></tr>
<tr valign="top"><td width=6%>
%A<i>k</i>
</td><td>
File&#146;s last access time in the format specified by <i>k</i>, which is
either &#145;@&#146; or a directive for the C &#145;strftime&#146; function.  The possible
values for <i>k</i> are listed below; some of them might not be
available on all systems, due to differences in &#145;strftime&#146; between
systems. 
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
@
</td><td>
seconds since Jan. 1, 1970, 00:00 GMT.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Time fields:
</td></tr>
<tr valign="top"><td width=6%>
H
</td><td>
hour (00..23)
</td></tr>
<tr valign="top"><td width=6%>
I
</td><td>
hour (01..12)
</td></tr>
<tr valign="top"><td width=6%>
k
</td><td>
hour ( 0..23)
</td></tr>
<tr valign="top"><td width=6%>
l
</td><td>
hour ( 1..12)
</td></tr>
<tr valign="top"><td width=6%>
M
</td><td>
minute (00..59)
</td></tr>
<tr valign="top"><td width=6%>
p
</td><td>
locale&#146;s AM or PM
</td></tr>
<tr valign="top"><td width=6%>
r
</td><td>
time, 12-hour (hh:mm:ss [AP]M)
</td></tr>
<tr valign="top"><td width=6%>
S
</td><td>
second (00..61)
</td></tr>
<tr valign="top"><td width=6%>
T
</td><td>
time, 24-hour (hh:mm:ss)
</td></tr>
<tr valign="top"><td width=6%>
+
</td><td>
Date and time, separated by &#146;+&#146;, for example &#145;2004-04-28+22:22:05&#146;.
The time is given in the current timezone (which may be affected by
setting the TZ environment variable).  This is a GNU extension.
</td></tr>
<tr valign="top"><td width=6%>
X
</td><td>
locale&#146;s time representation (H:M:S)
</td></tr>
<tr valign="top"><td width=6%>
Z
</td><td>
time zone (e.g., EDT), or nothing if no time zone is determinable
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Date fields:
</td></tr>
<tr valign="top"><td width=6%>
a
</td><td>
locale&#146;s abbreviated weekday name (Sun..Sat)
</td></tr>
<tr valign="top"><td width=6%>
A
</td><td>
locale&#146;s full weekday name, variable length (Sunday..Saturday)
</td></tr>
<tr valign="top"><td width=6%>
b
</td><td>
locale&#146;s abbreviated month name (Jan..Dec)
</td></tr>
<tr valign="top"><td width=6%>
B
</td><td>
locale&#146;s full month name, variable length (January..December)
</td></tr>
<tr valign="top"><td width=6%>
c
</td><td>
locale&#146;s date and time (Sat Nov 04 12:02:33 EST 1989)
</td></tr>
<tr valign="top"><td width=6%>
d
</td><td>
day of month (01..31)
</td></tr>
<tr valign="top"><td width=6%>
D
</td><td>
date (mm/dd/yy)
</td></tr>
<tr valign="top"><td width=6%>
h
</td><td>
same as b
</td></tr>
<tr valign="top"><td width=6%>
j
</td><td>
day of year (001..366)
</td></tr>
<tr valign="top"><td width=6%>
m
</td><td>
month (01..12)
</td></tr>
<tr valign="top"><td width=6%>
U
</td><td>
week number of year with Sunday as first day of week (00..53)
</td></tr>
<tr valign="top"><td width=6%>
w
</td><td>
day of week (0..6)
</td></tr>
<tr valign="top"><td width=6%>
W
</td><td>
week number of year with Monday as first day of week (00..53)
</td></tr>
<tr valign="top"><td width=6%>
x
</td><td>
locale&#146;s date representation (mm/dd/yy)
</td></tr>
<tr valign="top"><td width=6%>
y
</td><td>
last two digits of year (00..99)
</td></tr>
<tr valign="top"><td width=6%>
Y
</td><td>
year (1970...)
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=6%>
%b
</td><td>
The amount of disk space used for this file in 512-byte blocks. Since disk
space is allocated in multiples of the filesystem block size this is usually
greater than %s/1024, but it can also be smaller if the file is a sparse file.
</td></tr>
<tr valign="top"><td width=6%>
%c
</td><td>
File&#146;s last status change time in the format returned by the C &#145;ctime&#146;
function.
</td></tr>
<tr valign="top"><td width=6%>
%C<i>k</i>
</td><td>
File&#146;s last status change time in the format specified by <i>k</i>,
which is the same as for %A.
</td></tr>
<tr valign="top"><td width=6%>
%d
</td><td>
File&#146;s depth in the directory tree; 0 means the file is a command line
argument.
</td></tr>
<tr valign="top"><td width=6%>
%D
</td><td>
The device number on which the file exists (the st_dev field of struct
stat), in decimal.
</td></tr>
<tr valign="top"><td width=6%>
%f
</td><td>
File&#146;s name with any leading directories removed (only the last element).
</td></tr>
<tr valign="top"><td width=6%>
%F
</td><td>
Type of the filesystem the file is on; this value can be used for
-fstype.
</td></tr>
<tr valign="top"><td width=6%>
%g
</td><td>
File&#146;s group name, or numeric group ID if the group has no name.
</td></tr>
<tr valign="top"><td width=6%>
%G
</td><td>
File&#146;s numeric group ID.
</td></tr>
<tr valign="top"><td width=6%>
%h
</td><td>
Leading directories of file&#146;s name (all but the last element).
If the file name contains no slashes (since it is in the current
directory) the %h specifier expands to ".".
</td></tr>
<tr valign="top"><td width=6%>
%H
</td><td>
Command line argument under which file was found.
</td></tr>
<tr valign="top"><td width=6%>
%i
</td><td>
File&#146;s inode number (in decimal).
</td></tr>
<tr valign="top"><td width=6%>
%k
</td><td>
The amount of disk space used for this file in 1K blocks. Since disk space is
allocated in multiples of the filesystem block size this is usually greater
than %s/1024, but it can also be smaller if the file is a sparse file.
</td></tr>
<tr valign="top"><td width=6%>
%l
</td><td>
Object of symbolic link (empty string if file is not a symbolic link).
</td></tr>
<tr valign="top"><td width=6%>
%m
</td><td>
File&#146;s permission bits (in octal).  This option uses the &#146;traditional&#146;
numbers which most Unix implementations use, but if your particular
implementation uses an unusual ordering of octal permissions bits, you
will see a difference between the actual value of the file&#146;s mode and
the output of %m.   Normally you will want to have a leading
zero on this number, and to do this, you should use the
<b>#</b> flag (as in, for example, &#146;%#m&#146;).
</td></tr>
<tr valign="top"><td width=6%>
%M
</td><td>
File&#146;s permissions (in symbolic form, as for
<b>ls</b>). This directive is supported in findutils 4.2.5 and later.
</td></tr>
<tr valign="top"><td width=6%>
%n
</td><td>
Number of hard links to file.
</td></tr>
<tr valign="top"><td width=6%>
%p
</td><td>
File&#146;s name.
</td></tr>
<tr valign="top"><td width=6%>
%P
</td><td>
File&#146;s name with the name of the command line argument under which
it was found removed.
</td></tr>
<tr valign="top"><td width=6%>
%s
</td><td>
File&#146;s size in bytes.
</td></tr>
<tr valign="top"><td width=6%>
%t
</td><td>
File&#146;s last modification time in the format returned by the C &#145;ctime&#146;
function.
</td></tr>
<tr valign="top"><td width=6%>
%T<i>k</i>
</td><td>
File&#146;s last modification time in the format specified by <i>k</i>,
which is the same as for %A.
</td></tr>
<tr valign="top"><td width=6%>
%u
</td><td>
File&#146;s user name, or numeric user ID if the user has no name.
</td></tr>
<tr valign="top"><td width=6%>
%U
</td><td>
File&#146;s numeric user ID.
</td></tr>
<tr valign="top"><td width=6%>
%y
</td><td>
File&#146;s type (like in ls -l), U=unknown type (shouldn&#146;t happen)
</td></tr>
<tr valign="top"><td width=6%>
%Y
</td><td>
File&#146;s type (like %y), plus follow symlinks: L=loop, N=nonexistent
</td></tr>
<tr valign="top"><td width=6%>
%Z
</td><td>
(SELinux only) file&#146;s security context.
</td></tr>
<!-- PP ends table -->
</table>
A &#145;%&#146; character followed by any other character is discarded (but the
other character is printed).
<p>
The %m and %d directives support the
<b>#</b> ,
<b>0</b> and
<b>+</b> flags, but the other directives do not, even if they
print numbers.  Numeric directives that do not support these flags
include
<b>G</b>, <b>U</b>, <b>b</b>, <b>D</b>, <b>k</b> and
<b>n</b>. The &#145;-&#146; format flag is supported and changes the alignment of a field
from right-justified (which is the default) to left-justified.
<p>
See the
<b><a href=#8>UNUSUAL FILENAMES</a></b> section for information about how unusual characters in filenames are handled.
<p>
<p>
</td></tr>
<tr valign="top"><td width=6%>
-prune
</td><td>
If -depth is not given, true; if the file is a directory, do not descend
into it.
<!-- Need break --><br />
If -depth is given, false; no effect.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-quit
</td><td>
Exit immediately.  No child processes will be left running, but no more
paths specified on the command line will be processed.  For example,
<b>find /tmp/foo /tmp/bar -print -quit</b> will print only
<b>/tmp/foo</b>. Any command lines which have been built up with
<b>-execdir ... {} +</b> will be invoked before
<b>find</b> exits.   The exit status may or may not be zero, depending on whether
an error has already occurred. 
<p>
</td></tr>
<tr valign="top"><td width=6%>
-ls
</td><td>
True; list current file in &#145;ls -dils&#146; format on standard output.
The block counts are of 1K blocks, unless the environment variable
POSIXLY_CORRECT is set, in which case 512-byte blocks are used.
See the
<b><a href=#8>UNUSUAL FILENAMES</a></b> section for information about how unusual characters in filenames are handled.
<p>
<p>
</td></tr>
</table>
<h2><i>UNUSUAL FILENAMES</i></h2>
Many of the actions of
<b>find</b> result in the printing of data which is under the control of other
users.  This includes file names, sizes, modification times and so
forth.  File names are a potential problem since they can contain any
character except &#146;\0&#146; and &#146;/&#146;.  Unusual characters in file names can
do unexpected and often undesirable things to your terminal (for
example, changing the settings of your function keys on some
terminals).  Unusual characters are handled differently by various
actions, as described below.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
-print0,
</td><td>
Always print the exact filename, unchanged, even if the output is
going to a terminal.
</td></tr>
<tr valign="top"><td width=6%>
-ls, -fls
</td><td>
Unusual characters are always escaped.  White space, backslash, and
double quote characters are printed using C-style escaping (for
example &#146;\f&#146;, &#146;\"&#146;).  Other unusual characters are printed using an
octal escape.  Other printable characters (for -ls and -fls these are
the characters between octal 041 and 0176) are printed as-is.
</td></tr>
<tr valign="top"><td width=6%>
-printf, -fprintf
</td><td>
If the output is not going to a terminal, it is printed as-is.
Otherwise, the result depends on which directive is in use.  The
directives %D, %F, %g, %G, %H, %Y, and %y expand to values which are
not under control of files&#146; owners, and so are printed as-is.  The
directives %a, %b, %c, %d, %i, %k, %m, %M, %n, %s, %t, %u and %U have
values which are under the control of files&#146; owners but which cannot
be used to send arbitrary data to the terminal, and so these are
printed as-is.  The directives %f, %h, %l, %p and %P are quoted.  This
quoting is performed in the same way as for GNU
<b>ls</b>. This is not the same quoting mechanism as the one used for  -ls and
-fls.   If you are able to decide what format to use for the output
of
<b>find</b> then it is normally better to use &#146;\0&#146; as a terminator
than to use newline, as file names can contain white space and newline
characters.
</td></tr>
<tr valign="top"><td width=6%>
-print, -fprint
</td><td>
Quoting is handled in the same way as for -printf and -fprintf.
If you are using
<b>find</b> in a script or in a situation where the matched files might have
arbitrary names, you should consider using -print0 instead of
-print.
</td></tr>
<!-- P ends table -->
</table>
The -ok and -okdir actions print the current filename as-is.  This
may change in a future release.
<h2><i>OPERATORS</i></h2>
<p>
Listed in order of decreasing precedence:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
( <i>expr</i> )
</td><td>
Force precedence.
</td></tr>
<tr valign="top"><td width=6%>
! <i>expr</i>
</td><td>
True if <i>expr</i> is false.
</td></tr>
<tr valign="top"><td width=6%>
-not <i>expr</i>
</td><td>
Same as ! <i>expr</i>, but not POSIX compliant.
</td></tr>
<tr valign="top"><td width=6%>
<i>expr1 expr2</i>
</td><td>
Two expressions in a row are taken to be joined with an
implied "and"; <i>expr2</i> is not evaluated if <i>expr1</i> is false.
</td></tr>
<tr valign="top"><td width=6%>
<i>expr1</i> -a <i>expr2</i>
</td><td>
Same as <i>expr1 expr2</i>.
</td></tr>
<tr valign="top"><td width=6%>
<i>expr1</i> -and <i>expr2</i>
</td><td>
Same as <i>expr1 expr2</i>, but not POSIX compliant.
</td></tr>
<tr valign="top"><td width=6%>
<i>expr1</i> -o <i>expr2</i>
</td><td>
Or; <i>expr2</i> is not evaluated if <i>expr1</i> is true.
</td></tr>
<tr valign="top"><td width=6%>
<i>expr1</i> -or <i>expr2</i>
</td><td>
Same as <i>expr1</i> -o <i>expr2</i>, but not POSIX compliant.
</td></tr>
<tr valign="top"><td width=6%>
<i>expr1</i> , <i>expr2</i>
</td><td>
List; both <i>expr1</i> and <i>expr2</i> are always evaluated.
The value of <i>expr1</i> is discarded; the value of the list is the
value of <i>expr2</i>.&nbsp;
The comma operator can be useful for searching for several
different types of thing, but traversing the filesystem hierarchy only
once.   The
<b>-fprintf</b> action can be used to list the various matched items into several
different output files.
<p>
<p>
</td></tr>
</table>
<h1 class="manpages">STANDARDS CONFORMANCE</h1>
The following options are specified in the POSIX standard
(IEEE Std 1003.1, 2003 Edition):
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
-H
</td><td>
This option is supported.
</td></tr>
<tr valign="top"><td width=6%>
-L
</td><td>
This option is supported.
</td></tr>
<tr valign="top"><td width=6%>
-name
</td><td>
This option is supported, but POSIX conformance depends on the
POSIX conformance of the system&#146;s
<b>fnmatch</b>(3)
library function.  As of findutils-4.2.2, shell metacharacters
(&#146;*&#146;. &#146;?&#146; or &#146;[]&#146; for example) will match a leading &#146;.&#146;, because
IEEE PASC interpretation 126 requires this.   This is a change from
previous versions of findutils.
</td></tr>
<tr valign="top"><td width=6%>
-type
</td><td>
Supported.   POSIX specifies &#145;b&#146;, &#145;c&#146;, &#145;d&#146;, &#145;l&#146;, &#145;p&#146;, &#145;f&#146; and &#145;s&#146;.
GNU find also supports &#145;D&#146;, representing a Door, where the OS provides these.
<p>
</td></tr>
<tr valign="top"><td width=6%>
-ok
</td><td>
Supported.   Interpretation of the response is not locale-dependent
(see ENVIRONMENT VARIABLES).
<p>
</td></tr>
<tr valign="top"><td width=6%>
-newer
</td><td>
Supported.  If the file specified is a symbolic link, it is always
dereferenced.  This is a change from previous behaviour, which used to
take the relevant time from the symbolic link; see the HISTORY section
below.
<p>
</td></tr>
<tr valign="top"><td width=6%>
Other predicates
</td><td>
The predicates
&#145;-atime&#146;,
&#145;-ctime&#146;,
&#145;-depth&#146;,
&#145;-group&#146;,
&#145;-links&#146;,
&#145;-mtime&#146;,
&#145;-nogroup&#146;,
&#145;-nouser&#146;,
&#145;-perm&#146;,
&#145;-print&#146;,
&#145;-prune&#146;,
&#145;-size&#146;,
&#145;-user&#146; and
&#145;-xdev&#146;,
are all supported.
<p>
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
The POSIX standard specifies parentheses &#145;(&#146;, &#145;)&#146;, negation &#145;!&#146; and the
&#145;and&#146; and &#145;or&#146; operators (&#145;-a&#146;, &#145;-o&#146;).  
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
All other options, predicates, expressions and so forth are extensions
beyond the POSIX standard.  Many of these extensions are not unique to
GNU find, however.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
The POSIX standard requires that
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
The
<b>find</b> utility shall detect infinite loops; that is, entering a
previously visited directory that is an ancestor of the last file
encountered. When it detects an infinite loop, find shall write a
diagnostic message to standard error and shall either recover its
position in the hierarchy or terminate.
</td></tr>
<!-- P ends table -->
</table>
The link count of directories which contain entries which are hard
links to an ancestor will often be lower than they otherwise should
be.  This can mean that GNU find will sometimes optimise away the
visiting of a subdirectory which is actually a link to an ancestor.
Since
<b>find</b> does not actually enter such a subdirectory, it is allowed to avoid
emitting a diagnostic message.  Although this behaviour may be
somewhat confusing, it is unlikely that anybody actually depends on
this behaviour.  If the leaf optimisation has been turned off with
<b>-noleaf</b>, the directory entry will always be examined and the diagnostic message
will be issued where it is appropriate.  Symbolic links cannot be used
to create filesystem cycles as such, but if the -L option or the
-follow option is in use, a diagnostic message is issued when
<b>find</b> encounters a loop of symbolic links.  As with loops containing hard
links, the leaf optimisation will often mean that
<b>find</b> knows that it doesn&#146;t need to call
<i>stat()</i> or
<i>chdir()</i> on the symbolic link, so this diagnostic is frequently not necessary.
<p>
The -d option is supported for compatibility with various BSD systems,
but you should use the POSIX-compliant option -depth instead.
<p>
The POSIXLY_CORRECT environment variable does not affect the behaviour
of the -regex or -iregex tests because those tests aren&#146;t specified in
the POSIX standard.
<h1 class="manpages">ENVIRONMENT VARIABLES</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
LANG
</td><td>
Provides a default value for the internationalization variables that
are unset or null.
</td></tr>
<tr valign="top"><td width=6%>
LC_ALL
</td><td>
If set to a non-empty string value, override the values of all the
other internationalization variables.
</td></tr>
<tr valign="top"><td width=6%>
LC_COLLATE
</td><td>
The POSIX standard specifies that this variable affects the pattern
matching to be used for the &#145;-name&#146; option.   GNU find uses the
<b>fnmatch</b>(3)
library function, and so support for &#145;LC_COLLATE&#146; depends on the
system library.   
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
POSIX also specifies that the &#145;LC_COLLATE&#146; environment
variable affects the interpretation of the user&#146;s response to the
query issued by &#145;-ok&#146;, but this is not the case for GNU find.
</td></tr>
<tr valign="top"><td width=6%>
LC_CTYPE
</td><td>
This variable affects the treatment of character classes used with
the &#145;-name&#146; test, if the system&#146;s
<b>fnmatch</b>(3)
library function supports this.   It has no effect on the behaviour
of the &#145;-ok&#146; expression.
</td></tr>
<tr valign="top"><td width=6%>
LC_MESSAGES
</td><td>
Determines the locale to be used for internationalised messages.
</td></tr>
<tr valign="top"><td width=6%>
NLSPATH
</td><td>
Determines the location of the internationalisation message catalogues.
</td></tr>
<tr valign="top"><td width=6%>
PATH
</td><td>
Affects the directories which are searched to find the executables
invoked by &#145;-exec&#146;, &#145;-execdir&#146;, &#145;-ok&#146; and &#145;-okdir&#146;.
</td></tr>
<tr valign="top"><td width=6%>
POSIXLY_CORRECT
</td><td>
Determines the block size used by &#145;-ls&#146; and &#145;-fls&#146;. 
If &#145;POSIXLY_CORRECT&#146; is set, blocks are units of 512 bytes.  Otherwise
they are units of 1024 bytes.
</td></tr>
<tr valign="top"><td width=6%>
TZ
</td><td>
Affects the time zone used for some of the time-related format
directives of -printf and -fprintf.
</td></tr>
</table>
<h1 class="manpages">EXAMPLES</h1>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find /tmp -name core -type f -print | xargs /bin/rm -f</b> 
<p>
</pre></td></tr>
</table>
Find files named
<b>core</b> in or below the directory
<b>/tmp</b> and delete them.  Note that this will work incorrectly if there are
any filenames containing newlines, single or double quotes, or spaces.
<p>
<b>find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f</b> <p>
Find files named
<b>core</b> in or below the directory
<b>/tmp</b> and delete them, processing filenames in such a way that file or
directory names containing single or double quotes, spaces or newlines
are correctly handled.  The
<b>-name</b> test comes before the
<b>-type</b> test in order to avoid having to call
<b>stat(2)</b> on every file.
<p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find . -type f -exec file &#146;{}&#146; &#92;<blink>\;</blink></b> 
<p>
</pre></td></tr>
</table>
Runs &#145;file&#146; on every file in or below the current directory.  Notice
that the braces are enclosed in single quote marks to protect them
from interpretation as shell script punctuation.   The semicolon is
similarly protected by the use of a backslash, though &#146;;&#146; could have
been used in that case also.
<p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find / &nbsp;&#92;( -perm -4000 -fprintf /root/suid.txt &#146;%#m %u %p&#92;n&#146; &#92;) , &#92;</b> 
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#92;( -size +100M -fprintf /root/big.txt &#146;%-10s %p&#92;n&#146; &#92;)</b> 
<p>
</pre></td></tr>
</table>
Traverse the filesystem just once, listing setuid files and
directories into
<b>/root/suid.txt</b> and large files into
<b>/root/big.txt</b>. <p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find $HOME -mtime 0</b> 
<p>
</pre></td></tr>
</table>
Search for files in your home directory which have been modified in
the last twenty-four hours.  This command works this way because the
time since each file was last modified is divided by 24 hours and any
remainder is discarded.  That means that to match
<b>-mtime</b> <b>0</b>, a file will have to have a modification in the past which is less than
24 hours ago.
<p>
<p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find . -perm 664</b> 
<p>
</pre></td></tr>
</table>
Search for files which have read and write permission for their owner,
and group, but which other users can read but not write to.  Files
which meet these criteria but have other permissions bits set (for
example if someone can execute the file) will not be matched.
<p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find . -perm -664</b> 
<p>
</pre></td></tr>
</table>
Search for files which have read and write permission for their owner
and group, and which other users can read, without regard to the
presence of any extra permission bits (for example the executable
bit).  This will match a file which has mode 0777, for example.
<p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find . -perm /222</b> 
<p>
</pre></td></tr>
</table>
Search for files which are writable by somebody (their owner, or
their group, or anybody else).
<p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find . -perm /220</b> 
<b>find . -perm /u+w,g+w</b> 
<b>find . -perm /u=w,g=w</b> 
<p>
</pre></td></tr>
</table>
All three of these commands do the same thing, but the first one uses
the octal representation of the file mode, and the other two use the
symbolic form.  These commands all search for files which are
writable by either their owner or their group.  The files don&#146;t have
to be writable by both the owner and group to be matched; either will
do.
<p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find . -perm -220</b> 
<b>find . -perm -g+w,u+w</b> 
<p>
</pre></td></tr>
</table>
Both these commands do the same thing; search for files which are
writable by both their owner and their group.
<p>
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>find . -perm -444 -perm /222 ! -perm /111</b> 
<b>find . -perm -a+r -perm /a+w ! -perm /a+x</b> 
<p>
</pre></td></tr>
</table>
These two commands both search for files that are readable for
everybody (-perm -444 or -perm -a+r), have at least on write bit
set (-perm /222 or -perm /a+w) but are not executable for anybody (!
-perm /111 and ! -perm /a+x respectively)
<p>
<h1 class="manpages">EXIT STATUS</h1>
<p>
<b>find</b> exits with status 0 if all files are processed successfully, greater
than 0 if errors occur.   This is deliberately a very broad
description, but if the return value is non-zero, you should not rely
on the correctness of the results of
<b>find</b>. <p>
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<b>chmod</b>(1), <b>fnmatch</b>(3), <b>regex</b>(7), <b>stat</b>(2),
<b>lstat</b>(2), <b>ls</b>(1), <b>printf</b>(3), <b>strftime</b>(3),
<b>ctime</b>(3), <b>Finding Files</b> (on-line in Info, or printed).
<h1 class="manpages">HISTORY</h1>
As of findutils-4.2.2, shell metacharacters (&#146;*&#146;. &#146;?&#146; or &#146;[]&#146; for
example) used in filename patterns will match a leading &#146;.&#146;, because
IEEE POSIX interpretation 126 requires this.
<h1 class="manpages">NON-BUGS</h1>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>$ find . -name *.c -print</b> 
find: paths must precede expression
Usage: find [-H] [-L] [-P] [path...] [expression]
</pre></td></tr>
</table>
<p>
This happens because
<i>*.c</i> has been expanded by the shell
resulting in
<b>find</b> actually receiving a command line like this:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<b>find . -name bigram.c code.c frcode.c locate.c -print</b> 
<p>
</pre></td></tr>
</table>
That command is of course not going to work.  Instead of doing things
this way, you should enclose the pattern in quotes:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>$ find . -name &#39;*.c&#39; -print</b> 
</pre></td></tr>
</table>
<p>
<h1 class="manpages">BUGS</h1>
<p>
The test
<b>-perm /000</b> currently matches no files, but for greater consistency with
<b>-perm</b> <b>-000</b>, this will be changed to match all files; this change will probably be
made in early 2006.  Meanwhile, a warning message is given if you do this.
<p>
There are security problems inherent in the behaviour that the POSIX
standard specifies for
<b>find</b>, which therefore cannot be fixed.  For example, the -exec action is
inherently insecure, and -execdir should be used instead. 
Please see <b>Finding Files</b> for more information.
<p>
The best way to report a bug is to use the form at
<a href="http://savannah.gnu.org/bugs">http://savannah.gnu.org/bugs</a>/?group=findutils. 
The reason for this is that you will then be able to track progress in
fixing the problem.   Other comments about <b>find</b>(1) and about
the findutils package in general can be sent to the
<i>bug-findutils</i> mailing list.  To join the list, send email to
<i><a href="mailto:bug-findutils-request@gnu.org">bug-findutils-request@gnu.org</a></i>. <br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversionf1ed.html?tutorial=unix_commands&amp;file=find.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/find.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:39 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
