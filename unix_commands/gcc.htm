<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/gcc.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:40 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>gcc - Unix, Linux Command</title>
<meta name="Description" Content="gcc - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>gcc - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<!-- Not defining reserved macro 'Sh' ! -->
<!-- ignored unsupported tag .tr -->
<!-- ignored unsupported tag .ie -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .br\} -->
<!-- ignored unsupported tag .el\{ -->
<!-- ignored unsupported tag .br\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .rr -->
<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .hy -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->

<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->

<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->

<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .tm -->
<h1 class="manpages">NAME</h1>
gcc - GNU project C and C++ compiler
<h1 class="manpages">SYNOPSIS</h1>
<!-- ignored unsupported tag .tm -->
gcc [<b>-c</b>|<b>-S</b>|<b>-E</b>] [<b>-std=</b><i>standard</i>]
<br />
    [<b>-g</b>] [<b>-pg</b>] [<b>-O</b><i>level</i>]
<br />
    [<b>-W</b><i>warn</i>...] [<b>-pedantic</b>]
<br />
    [<b>-I</b><i>dir</i>...] [<b>-L</b><i>dir</i>...]
<br />
    [<b>-D</b><i>macro</i>[=<i>defn</i>]...] [<b>-U</b><i>macro</i>]
<br />
    [<b>-f</b><i>option</i>...] [<b>-m</b><i>machine-option</i>...]
<br />
    [<b>-o</b> <i>outfile</i>] <i>infile</i>...
<p>
Only the most useful options are listed here; see below for the
remainder.  <b>g++</b> accepts mostly the same options as <b>gcc</b>.
<h1 class="manpages">DESCRIPTION</h1>
<!-- ignored unsupported tag .tm -->
When you invoke <font size="-1">GCC</font>, it normally does preprocessing, compilation,
assembly and linking.  The overall options allow you to stop this
process at an intermediate stage.  For example, the <b>-c</b> option
says not to run the linker.  Then the output consists of object files
output by the assembler.
<p>
Other options are passed on to one stage of processing.  Some options
control the preprocessor and others the compiler itself.  Yet other
options control the assembler and linker; most of these are not
documented here, since you rarely need to use any of them.
<p>
Most of the command line options that you can use with <font size="-1">GCC</font> are useful
for C programs; when an option is only useful with another language
(usually C<font size="-2">++</font>), the explanation says so explicitly.  If the description
for a particular option does not mention a source language, you can use
that option with all supported languages.
<p>
The <b>gcc</b> program accepts options and file names as operands.  Many
options have multi-letter names; therefore multiple single-letter options
may <i>not</i> be grouped: <b>-dr</b> is very different from <b>-d -r</b>.
<p>
You can mix options and other arguments.  For the most part, the order
you use doesn&#146;t matter.  Order does matter when you use several options
of the same kind; for example, if you specify <b>-L</b> more than once,
the directories are searched in the order specified.
<p>
Many options have long names starting with <b>-f</b> or with
<b>-W</b>---for example,
<b>-fstrength-reduce</b>, <b>-Wformat</b> and so on.  Most of
these have both positive and negative forms; the negative form of
<b>-ffoo</b> would be <b>-fno-foo</b>.  This manual documents
only one of these two forms, whichever one is not the default.
<h1 class="manpages">OPTIONS</h1>
<!-- ignored unsupported tag .tm -->
<h1 class="manpages">Option Summary</h1>
<!-- ignored unsupported tag .tm -->
Here is a summary of all the options, grouped by type.  Explanations are
in the following sections.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<i>Overall Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-c  -S  -E  -o</b> <i>file</i>  <b>-combine -pipe  -pass-exit-codes 
-x</b> <i>language</i>  <b>-v  -###  --help  --target-help  --version</b>
</td></tr>
<tr valign="top"><td width=4%>
<i>C Language Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-ansi  -std=</b><i>standard</i>  <b>-fgnu89-inline
-aux-info</b> <i>filename</i>
<b>-fno-asm  -fno-builtin  -fno-builtin-</b><i>function</i>
<b>-fhosted  -ffreestanding  -fms-extensions
-trigraphs  -no-integrated-cpp  -traditional  -traditional-cpp
-fallow-single-precision  -fcond-mismatch
-fsigned-bitfields  -fsigned-char
-funsigned-bitfields  -funsigned-char</b>
</td></tr>
<tr valign="top"><td width=4%>
<i>C<font size="-2">++</font> Language Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-fabi-version=</b><i>n</i>  <b>-fno-access-control  -fcheck-new
-fconserve-space  -ffriend-injection  -fno-const-strings
-fno-elide-constructors
-fno-enforce-eh-specs
-ffor-scope  -fno-for-scope  -fno-gnu-keywords
-fno-implicit-templates
-fno-implicit-inline-templates
-fno-implement-inlines  -fms-extensions
-fno-nonansi-builtins  -fno-operator-names
-fno-optional-diags  -fpermissive
-frepo  -fno-rtti  -fstats  -ftemplate-depth-</b><i>n</i>
<b>-fno-threadsafe-statics -fuse-cxa-atexit  -fno-weak  -nostdinc++
-fno-default-inline  -fvisibility-inlines-hidden
-Wabi  -Wctor-dtor-privacy
-Wnon-virtual-dtor  -Wreorder
-Weffc++  -Wno-deprecated  -Wstrict-null-sentinel
-Wno-non-template-friend  -Wold-style-cast
-Woverloaded-virtual  -Wno-pmf-conversions
-Wsign-promo</b>
</td></tr>
<tr valign="top"><td width=4%>
<i>Objective-C and Objective-C<font size="-2">++</font> Language Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-fconstant-string-class=</b><i>class-name</i>
<b>-fgnu-runtime  -fnext-runtime
-fno-nil-receivers
-fobjc-call-cxx-cdtors
-fobjc-direct-dispatch
-fobjc-exceptions
-fobjc-gc
-freplace-objc-classes
-fzero-link
-gen-decls
-Wassign-intercept
-Wno-protocol  -Wselector
-Wstrict-selector-match
-Wundeclared-selector</b>
</td></tr>
<tr valign="top"><td width=4%>
<i>Language Independent Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-fmessage-length=</b><i>n</i> 
<b>-fdiagnostics-show-location=</b>[<b>once</b>|<b>every-line</b>]
-fdiagnostics-show-options
</td></tr>
<tr valign="top"><td width=4%>
<i>Warning Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-fsyntax-only  -pedantic  -pedantic-errors
-w  -Wextra  -Wall  -Waggregate-return -Wno-attributes
-Wc++-compat -Wcast-align  -Wcast-qual  -Wchar-subscripts  -Wcomment
-Wconversion  -Wno-deprecated-declarations
-Wdisabled-optimization  -Wno-div-by-zero  -Wno-endif-labels
-Werror  -Werror-implicit-function-declaration
-Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2
-Wno-format-extra-args -Wformat-nonliteral
-Wformat-security  -Wformat-y2k
-Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int
-Wimport  -Wno-import  -Winit-self  -Winline
-Wno-int-to-pointer-cast
-Wno-invalid-offsetof  -Winvalid-pch
-Wlarger-than-</b><i>len</i>  <b>-Wunsafe-loop-optimizations  -Wlong-long
-Wmain  -Wmissing-braces  -Wmissing-field-initializers
-Wmissing-format-attribute  -Wmissing-include-dirs
-Wmissing-noreturn
-Wno-multichar  -Wnonnull  -Wpacked  -Wpadded
-Wparentheses  -Wpointer-arith  -Wno-pointer-to-int-cast
-Wredundant-decls
-Wreturn-type  -Wsequence-point  -Wshadow
-Wsign-compare  -Wstack-protector
-Wstrict-aliasing -Wstrict-aliasing=2
-Wswitch  -Wswitch-default  -Wswitch-enum
-Wsystem-headers  -Wtrigraphs  -Wundef  -Wuninitialized
-Wunknown-pragmas  -Wno-pragmas -Wunreachable-code
-Wunused  -Wunused-function  -Wunused-label  -Wunused-parameter
-Wunused-value  -Wunused-variable  -Wvariadic-macros
-Wvolatile-register-var  -Wwrite-strings</b>
</td></tr>
<tr valign="top"><td width=4%>
<i>C-only Warning Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-Wbad-function-cast  -Wmissing-declarations
-Wmissing-prototypes  -Wnested-externs  -Wold-style-definition
-Wstrict-prototypes  -Wtraditional
-Wdeclaration-after-statement -Wpointer-sign</b>
</td></tr>
<tr valign="top"><td width=4%>
<i>Debugging Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-d</b><i>letters</i>  <b>-dumpspecs  -dumpmachine  -dumpversion
-fdump-unnumbered  -fdump-translation-unit</b>[<b>-</b><i>n</i>]
<b>-fdump-class-hierarchy</b>[<b>-</b><i>n</i>]
<b>-fdump-ipa-all -fdump-ipa-cgraph
-fdump-tree-all
-fdump-tree-original</b>[<b>-</b><i>n</i>] 
<b>-fdump-tree-optimized</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-inlined</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-cfg -fdump-tree-vcg -fdump-tree-alias
-fdump-tree-ch
-fdump-tree-ssa</b>[<b>-</b><i>n</i>] <b>-fdump-tree-pre</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-ccp</b>[<b>-</b><i>n</i>] <b>-fdump-tree-dce</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-gimple</b>[<b>-raw</b>] <b>-fdump-tree-mudflap</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-dom</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-dse</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-phiopt</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-forwprop</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-copyrename</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-nrv -fdump-tree-vect
-fdump-tree-sink
-fdump-tree-sra</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-salias
-fdump-tree-fre</b>[<b>-</b><i>n</i>]
<b>-fdump-tree-vrp</b>[<b>-</b><i>n</i>]
<b>-ftree-vectorizer-verbose=</b><i>n</i>
<b>-fdump-tree-storeccp</b>[<b>-</b><i>n</i>]
<b>-feliminate-dwarf2-dups -feliminate-unused-debug-types
-feliminate-unused-debug-symbols -fmem-report -fprofile-arcs
-frandom-seed=</b><i>string</i> <b>-fsched-verbose=</b><i>n</i>
<b>-ftest-coverage  -ftime-report -fvar-tracking
-g  -g</b><i>level</i>  <b>-gcoff -gdwarf-2
-ggdb  -gstabs  -gstabs+  -gvms  -gxcoff  -gxcoff+
-p  -pg  -print-file-name=</b><i>library</i>  <b>-print-libgcc-file-name
-print-multi-directory  -print-multi-lib
-print-prog-name=</b><i>program</i>  <b>-print-search-dirs  -Q
-save-temps  -time</b>
</td></tr>
<tr valign="top"><td width=4%>
<i>Optimization Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-falign-functions[=</b><i>n</i><b>]  -falign-jumps[=</b><i>n</i><b>]
-falign-labels[=</b><i>n</i><b>]  -falign-loops[=</b><i>n</i><b>] 
-fmudflap -fmudflapth -fmudflapir
-fbranch-probabilities -fprofile-values -fvpt
-fbranch-target-load-optimize
-fbranch-target-load-optimize2 -fbtr-bb-exclusive
-fcaller-saves  -fcprop-registers  -fcse-follow-jumps
-fcse-skip-blocks  -fcx-limited-range  -fdata-sections
-fdelayed-branch  -fdelete-null-pointer-checks -fearly-inlining
-fexpensive-optimizations  -ffast-math  -ffloat-store
-fforce-addr  -ffunction-sections
-fgcse  -fgcse-lm  -fgcse-sm  -fgcse-las  -fgcse-after-reload
-floop-optimize -fcrossjumping  -fif-conversion  -fif-conversion2
-finline-functions  -finline-functions-called-once
-finline-limit=</b><i>n</i>  <b>-fkeep-inline-functions
-fkeep-static-consts  -fmerge-constants  -fmerge-all-constants
-fmodulo-sched -fno-branch-count-reg
-fno-default-inline  -fno-defer-pop -floop-optimize2 -fmove-loop-invariants
-fno-function-cse  -fno-guess-branch-probability
-fno-inline  -fno-math-errno  -fno-peephole  -fno-peephole2
-funsafe-math-optimizations  -funsafe-loop-optimizations  -ffinite-math-only
-fno-trapping-math  -fno-zero-initialized-in-bss
-fomit-frame-pointer  -foptimize-register-move
-foptimize-sibling-calls  -fprefetch-loop-arrays
-fprofile-generate -fprofile-use
-fregmove  -frename-registers
-freorder-blocks  -freorder-blocks-and-partition -freorder-functions
-frerun-cse-after-loop  -frerun-loop-opt
-frounding-math -fschedule-insns  -fschedule-insns2
-fno-sched-interblock  -fno-sched-spec  -fsched-spec-load
-fsched-spec-load-dangerous 
-fsched-stalled-insns[=</b><i>n</i><b>] -fsched-stalled-insns-dep[=</b><i>n</i><b>]
-fsched2-use-superblocks
-fsched2-use-traces -freschedule-modulo-scheduled-loops
-fsignaling-nans -fsingle-precision-constant 
-fstack-protector  -fstack-protector-all
-fstrength-reduce  -fstrict-aliasing  -ftracer  -fthread-jumps
-funroll-all-loops  -funroll-loops  -fpeel-loops
-fsplit-ivs-in-unroller -funswitch-loops
-fvariable-expansion-in-unroller
-ftree-pre  -ftree-ccp  -ftree-dce -ftree-loop-optimize
-ftree-loop-linear -ftree-loop-im -ftree-loop-ivcanon -fivopts
-ftree-dominator-opts -ftree-dse -ftree-copyrename -ftree-sink
-ftree-ch -ftree-sra -ftree-ter -ftree-lrs -ftree-fre -ftree-vectorize
-ftree-vect-loop-version -ftree-salias -fweb
-ftree-copy-prop -ftree-store-ccp -ftree-store-copy-prop -ftree-vrp
-funit-at-a-time -fwhole-program
--param</b> <i>name</i><b>=</b><i>value</i>
<b>-O  -O0  -O1  -O2  -O3  -Os</b>
</td></tr>
<tr valign="top"><td width=4%>
<i>Preprocessor Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-A</b><i>question</i><b>=</b><i>answer</i>
<b>-A-</b><i>question</i>[<b>=</b><i>answer</i>]
<b>-C  -dD  -dI  -dM  -dN
-D</b><i>macro</i>[<b>=</b><i>defn</i>]  <b>-E  -H
-idirafter</b> <i>dir</i>
<b>-include</b> <i>file</i>  <b>-imacros</b> <i>file</i>
<b>-iprefix</b> <i>file</i>  <b>-iwithprefix</b> <i>dir</i>
<b>-iwithprefixbefore</b> <i>dir</i>  <b>-isystem</b> <i>dir</i>
<b>-isysroot</b> <i>dir</i>
<b>-M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc 
-P  -fworking-directory  -remap
-trigraphs  -undef  -U</b><i>macro</i>  <b>-Wp,</b><i>option</i>
<b>-Xpreprocessor</b> <i>option</i>
</td></tr>
<tr valign="top"><td width=4%>
<i>Assembler Option</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-Wa,</b><i>option</i>  <b>-Xassembler</b> <i>option</i>
</td></tr>
<tr valign="top"><td width=4%>
<i>Linker Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<i>object-file-name</i>  <b>-l</b><i>library</i>
<b>-nostartfiles  -nodefaultlibs  -nostdlib -pie -rdynamic
-s  -static  -static-libgcc  -shared  -shared-libgcc  -symbolic
-Wl,</b><i>option</i>  <b>-Xlinker</b> <i>option</i>
<b>-u</b> <i>symbol</i>
</td></tr>
<tr valign="top"><td width=4%>
<i>Directory Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-B</b><i>prefix</i>  <b>-I</b><i>dir</i>  <b>-iquote</b><i>dir</i>  <b>-L</b><i>dir</i>
<b>-specs=</b><i>file</i>  <b>-I- --sysroot=</b><i>dir</i>
</td></tr>
<tr valign="top"><td width=4%>
<i>Target Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-V</b> <i>version</i>  <b>-b</b> <i>machine</i>
</td></tr>
<tr valign="top"><td width=4%>
<i>Machine Dependent Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<i><font size="-1">ARC</font> Options</i>
<b>-EB  -EL
-mmangle-cpu  -mcpu=</b><i>cpu</i>  <b>-mtext=</b><i>text-section</i>
<b>-mdata=</b><i>data-section</i>  <b>-mrodata=</b><i>readonly-data-section</i>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">ARM</font> Options</i>
<b>-mapcs-frame  -mno-apcs-frame
-mabi=</b><i>name</i>
<b>-mapcs-stack-check  -mno-apcs-stack-check
-mapcs-float  -mno-apcs-float
-mapcs-reentrant  -mno-apcs-reentrant
-msched-prolog  -mno-sched-prolog
-mlittle-endian  -mbig-endian  -mwords-little-endian
-mfloat-abi=</b><i>name</i>  <b>-msoft-float  -mhard-float  -mfpe
-mthumb-interwork  -mno-thumb-interwork
-mcpu=</b><i>name</i>  <b>-march=</b><i>name</i>  <b>-mfpu=</b><i>name</i> 
<b>-mstructure-size-boundary=</b><i>n</i>
<b>-mabort-on-noreturn
-mlong-calls  -mno-long-calls
-msingle-pic-base  -mno-single-pic-base
-mpic-register=</b><i>reg</i>
<b>-mnop-fun-dllimport
-mcirrus-fix-invalid-insns -mno-cirrus-fix-invalid-insns
-mpoke-function-name
-mthumb  -marm
-mtpcs-frame  -mtpcs-leaf-frame
-mcaller-super-interworking  -mcallee-super-interworking
-mtp=</b><i>name</i>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">AVR</font> Options</i>
<b>-mmcu=</b><i>mcu</i>  <b>-msize  -minit-stack=</b><i>n</i>  <b>-mno-interrupts
-mcall-prologues  -mno-tablejump  -mtiny-stack  -mint8</b>
<p>
<!-- ignored unsupported tag .if -->
<i>Blackfin Options</i>
<b>-momit-leaf-frame-pointer -mno-omit-leaf-frame-pointer
-mspecld-anomaly -mno-specld-anomaly -mcsync-anomaly -mno-csync-anomaly
-mlow-64k -mno-low64k -mid-shared-library
-mno-id-shared-library -mshared-library-id=</b><i>n</i>
<b>-mlong-calls  -mno-long-calls</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">CRIS</font> Options</i>
<b>-mcpu=</b><i>cpu</i>  <b>-march=</b><i>cpu</i>  <b>-mtune=</b><i>cpu</i>
<b>-mmax-stack-frame=</b><i>n</i>  <b>-melinux-stacksize=</b><i>n</i>
<b>-metrax4  -metrax100  -mpdebug  -mcc-init  -mno-side-effects
-mstack-align  -mdata-align  -mconst-align
-m32-bit  -m16-bit  -m8-bit  -mno-prologue-epilogue  -mno-gotplt
-melf  -maout  -melinux  -mlinux  -sim  -sim2
-mmul-bug-workaround  -mno-mul-bug-workaround</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">CRX</font> Options</i>
<b>-mmac -mpush-args</b>
<p>
<!-- ignored unsupported tag .if -->
<i>Darwin Options</i>
<b>-all_load  -allowable_client  -arch  -arch_errors_fatal
-arch_only  -bind_at_load  -bundle  -bundle_loader
-client_name  -compatibility_version  -current_version
-dead_strip
-dependency-file  -dylib_file  -dylinker_install_name
-dynamic  -dynamiclib  -exported_symbols_list
-filelist  -flat_namespace  -force_cpusubtype_ALL
-force_flat_namespace  -headerpad_max_install_names
-image_base  -init  -install_name  -keep_private_externs
-multi_module  -multiply_defined  -multiply_defined_unused
-noall_load   -no_dead_strip_inits_and_terms
-nofixprebinding -nomultidefs  -noprebind  -noseglinkedit
-pagezero_size  -prebind  -prebind_all_twolevel_modules
-private_bundle  -read_only_relocs  -sectalign
-sectobjectsymbols  -whyload  -seg1addr
-sectcreate  -sectobjectsymbols  -sectorder
-segaddr -segs_read_only_addr -segs_read_write_addr
-seg_addr_table  -seg_addr_table_filename  -seglinkedit
-segprot  -segs_read_only_addr  -segs_read_write_addr
-single_module  -static  -sub_library  -sub_umbrella
-twolevel_namespace  -umbrella  -undefined
-unexported_symbols_list  -weak_reference_mismatches
-whatsloaded -F -gused -gfull -mmacosx-version-min=</b><i>version</i>
<b>-mone-byte-bool</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">DEC</font> Alpha Options</i>
<b>-mno-fp-regs  -msoft-float  -malpha-as  -mgas
-mieee  -mieee-with-inexact  -mieee-conformant
-mfp-trap-mode=</b><i>mode</i>  <b>-mfp-rounding-mode=</b><i>mode</i>
<b>-mtrap-precision=</b><i>mode</i>  <b>-mbuild-constants
-mcpu=</b><i>cpu-type</i>  <b>-mtune=</b><i>cpu-type</i>
<b>-mbwx  -mmax  -mfix  -mcix
-mfloat-vax  -mfloat-ieee
-mexplicit-relocs  -msmall-data  -mlarge-data
-msmall-text  -mlarge-text
-mmemory-latency=</b><i>time</i>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">DEC</font> Alpha/VMS Options</i>
<b>-mvms-return-codes</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">FRV</font> Options</i>
<b>-mgpr-32  -mgpr-64  -mfpr-32  -mfpr-64
-mhard-float  -msoft-float
-malloc-cc  -mfixed-cc  -mdword  -mno-dword
-mdouble  -mno-double
-mmedia  -mno-media  -mmuladd  -mno-muladd
-mfdpic  -minline-plt -mgprel-ro  -multilib-library-pic
-mlinked-fp  -mlong-calls  -malign-labels
-mlibrary-pic  -macc-4  -macc-8
-mpack  -mno-pack  -mno-eflags  -mcond-move  -mno-cond-move
-moptimize-membar -mno-optimize-membar
-mscc  -mno-scc  -mcond-exec  -mno-cond-exec
-mvliw-branch  -mno-vliw-branch
-mmulti-cond-exec  -mno-multi-cond-exec  -mnested-cond-exec
-mno-nested-cond-exec  -mtomcat-stats
-mTLS -mtls
-mcpu=</b><i>cpu</i>
<p>
<!-- ignored unsupported tag .if -->
<i>H8/300 Options</i>
<b>-mrelax  -mh  -ms  -mn  -mint32  -malign-300</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">HPPA</font> Options</i>
<b>-march=</b><i>architecture-type</i>
<b>-mbig-switch  -mdisable-fpregs  -mdisable-indexing
-mfast-indirect-calls  -mgas  -mgnu-ld   -mhp-ld
-mfixed-range=</b><i>register-range</i>
<b>-mjump-in-delay -mlinker-opt -mlong-calls
-mlong-load-store  -mno-big-switch  -mno-disable-fpregs
-mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas
-mno-jump-in-delay  -mno-long-load-store
-mno-portable-runtime  -mno-soft-float
-mno-space-regs  -msoft-float  -mpa-risc-1-0
-mpa-risc-1-1  -mpa-risc-2-0  -mportable-runtime
-mschedule=</b><i>cpu-type</i>  <b>-mspace-regs  -msio  -mwsio
-munix=</b><i>unix-std</i>  <b>-nolibdld  -static  -threads</b>
<p>
<!-- ignored unsupported tag .if -->
<i>i386 and x86-64 Options</i>
<b>-mtune=</b><i>cpu-type</i>  <b>-march=</b><i>cpu-type</i>
<b>-mfpmath=</b><i>unit</i>
<b>-masm=</b><i>dialect</i>  <b>-mno-fancy-math-387
-mno-fp-ret-in-387  -msoft-float  -msvr3-shlib
-mno-wide-multiply  -mrtd  -malign-double
-mpreferred-stack-boundary=</b><i>num</i>
<b>-mmmx  -msse  -msse2 -msse3 -mssse3 -msse4a -msse5 -m3dnow -mpopcnt -mabm
-mthreads  -mno-align-stringops  -minline-all-stringops
-mpush-args  -maccumulate-outgoing-args  -m128bit-long-double
-m96bit-long-double  -mregparm=</b><i>num</i>  <b>-msseregparm
-momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs
-mcmodel=</b><i>code-model</i>
<b>-m32  -m64 -mlarge-data-threshold=</b><i>num</i>
<b>-mfused-madd -mno-fused-madd</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">IA-64</font> Options</i>
<b>-mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic
-mvolatile-asm-stop  -mregister-names  -mno-sdata
-mconstant-gp  -mauto-pic  -minline-float-divide-min-latency
-minline-float-divide-max-throughput
-minline-int-divide-min-latency
-minline-int-divide-max-throughput 
-minline-sqrt-min-latency -minline-sqrt-max-throughput
-mno-dwarf2-asm -mearly-stop-bits
-mfixed-range=</b><i>register-range</i> <b>-mtls-size=</b><i>tls-size</i>
<b>-mtune=</b><i>cpu-type</i> <b>-mt -pthread -milp32 -mlp64</b>
<p>
<!-- ignored unsupported tag .if -->
<i>M32R/D Options</i>
<b>-m32r2 -m32rx -m32r
-mdebug
-malign-loops -mno-align-loops
-missue-rate=</b><i>number</i>
<b>-mbranch-cost=</b><i>number</i>
<b>-mmodel=</b><i>code-size-model-type</i>
<b>-msdata=</b><i>sdata-type</i>
<b>-mno-flush-func -mflush-func=</b><i>name</i>
<b>-mno-flush-trap -mflush-trap=</b><i>number</i>
<b>-G</b> <i>num</i>
<p>
<!-- ignored unsupported tag .if -->
<i>M32C Options</i>
<b>-mcpu=</b><i>cpu</i> <b>-msim -memregs=</b><i>number</i>
<p>
<!-- ignored unsupported tag .if -->
<i>M680x0 Options</i>
<b>-m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040
-m68060  -mcpu32  -m5200  -m68881  -mbitfield  -mc68000  -mc68020  
-mnobitfield  -mrtd  -mshort  -msoft-float  -mpcrel
-malign-int  -mstrict-align  -msep-data  -mno-sep-data
-mshared-library-id=n  -mid-shared-library  -mno-id-shared-library</b>
<p>
<!-- ignored unsupported tag .if -->
<i>M68hc1x Options</i>
<b>-m6811  -m6812  -m68hc11  -m68hc12   -m68hcs12
-mauto-incdec  -minmax  -mlong-calls  -mshort
-msoft-reg-count=</b><i>count</i>
<p>
<!-- ignored unsupported tag .if -->
<i>MCore Options</i>
<b>-mhardlit  -mno-hardlit  -mdiv  -mno-div  -mrelax-immediates
-mno-relax-immediates  -mwide-bitfields  -mno-wide-bitfields
-m4byte-functions  -mno-4byte-functions  -mcallgraph-data
-mno-callgraph-data  -mslow-bytes  -mno-slow-bytes  -mno-lsim
-mlittle-endian  -mbig-endian  -m210  -m340  -mstack-increment</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">MIPS</font> Options</i>
<b>-EL  -EB  -march=</b><i>arch</i>  <b>-mtune=</b><i>arch</i>
<b>-mips1  -mips2  -mips3  -mips4  -mips32  -mips32r2  -mips64
-mips16  -mno-mips16  -mabi=</b><i>abi</i>  <b>-mabicalls  -mno-abicalls
-mxgot  -mno-xgot  -mgp32  -mgp64  -mfp32  -mfp64
-mhard-float  -msoft-float  -msingle-float  -mdouble-float
-mdsp  -mpaired-single  -mips3d
-mlong64  -mlong32  -msym32  -mno-sym32
-G</b><i>num</i>  <b>-membedded-data  -mno-embedded-data
-muninit-const-in-rodata  -mno-uninit-const-in-rodata
-msplit-addresses  -mno-split-addresses 
-mexplicit-relocs  -mno-explicit-relocs 
-mcheck-zero-division  -mno-check-zero-division
-mdivide-traps  -mdivide-breaks
-mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls
-mmad  -mno-mad  -mfused-madd  -mno-fused-madd  -nocpp
-mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400
-mfix-vr4120  -mno-fix-vr4120  -mfix-vr4130
-mfix-sb1  -mno-fix-sb1
-mflush-func=</b><i>func</i>  <b>-mno-flush-func
-mbranch-likely  -mno-branch-likely
-mfp-exceptions -mno-fp-exceptions
-mvr4130-align -mno-vr4130-align</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">MMIX</font> Options</i>
<b>-mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon  -mabi=gnu
-mabi=mmixware  -mzero-extend  -mknuthdiv  -mtoplevel-symbols
-melf  -mbranch-predict  -mno-branch-predict  -mbase-addresses
-mno-base-addresses  -msingle-exit  -mno-single-exit</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">MN10300</font> Options</i>
<b>-mmult-bug  -mno-mult-bug
-mam33  -mno-am33
-mam33-2  -mno-am33-2
-mreturn-pointer-on-d0
-mno-crt0  -mrelax</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">MT</font> Options</i>
<b>-mno-crt0 -mbacc -msim
-march=</b><i>cpu-type</i><b> </b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">PDP-11</font> Options</i>
<b>-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10
-mbcopy  -mbcopy-builtin  -mint32  -mno-int16
-mint16  -mno-int32  -mfloat32  -mno-float64
-mfloat64  -mno-float32  -mabshi  -mno-abshi
-mbranch-expensive  -mbranch-cheap
-msplit  -mno-split  -munix-asm  -mdec-asm</b>
<p>
<!-- ignored unsupported tag .if -->
<i>PowerPC Options</i>
See <font size="-1">RS/6000</font> and PowerPC Options.
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">RS/6000</font> and PowerPC Options</i>
<b>-mcpu=</b><i>cpu-type</i>
<b>-mtune=</b><i>cpu-type</i>
<b>-mpower  -mno-power  -mpower2  -mno-power2
-mpowerpc  -mpowerpc64  -mno-powerpc
-maltivec  -mno-altivec
-mpowerpc-gpopt  -mno-powerpc-gpopt
-mpowerpc-gfxopt  -mno-powerpc-gfxopt
-mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb  -mfprnd  -mno-fprnd
-mmfpgpr -mno-mfpgpr
-mnew-mnemonics  -mold-mnemonics
-mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc
-m64  -m32  -mxl-compat  -mno-xl-compat  -mpe
-malign-power  -malign-natural
-msoft-float  -mhard-float  -mmultiple  -mno-multiple
-mstring  -mno-string  -mupdate  -mno-update
-mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align
-mstrict-align  -mno-strict-align  -mrelocatable
-mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib
-mtoc  -mno-toc  -mlittle  -mlittle-endian  -mbig  -mbig-endian
-mdynamic-no-pic  -maltivec  -mswdiv
-mprioritize-restricted-insns=</b><i>priority</i>
<b>-msched-costly-dep=</b><i>dependence_type</i>
<b>-minsert-sched-nops=</b><i>scheme</i>
<b>-mcall-sysv  -mcall-netbsd
-maix-struct-return  -msvr4-struct-return
-mabi=</b><i>abi-type</i> <b>-msecure-plt -mbss-plt
-misel -mno-isel
-misel=yes  -misel=no
-mspe -mno-spe
-mspe=yes  -mspe=no
-mvrsave -mno-vrsave
-mfloat-gprs=yes  -mfloat-gprs=no -mfloat-gprs=single -mfloat-gprs=double
-mprototype  -mno-prototype
-msim  -mmvme  -mads  -myellowknife  -memb  -msdata
-msdata=</b><i>opt</i>  <b>-mvxworks  -mwindiss  -G</b> <i>num</i>  <b>-pthread</b>
<p>
<!-- ignored unsupported tag .if -->
<i>S/390 and zSeries Options</i>
<b>-mtune=</b><i>cpu-type</i>  <b>-march=</b><i>cpu-type</i>
<b>-mhard-float  -msoft-float -mlong-double-64 -mlong-double-128
-mbackchain  -mno-backchain -mpacked-stack  -mno-packed-stack
-msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle
-m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch
-mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd
-mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">SH</font> Options</i>
<b>-m1  -m2  -m2e  -m3  -m3e
-m4-nofpu  -m4-single-only  -m4-single  -m4
-m4a-nofpu -m4a-single-only -m4a-single -m4a -m4al
-m5-64media  -m5-64media-nofpu
-m5-32media  -m5-32media-nofpu
-m5-compact  -m5-compact-nofpu
-mb  -ml  -mdalign  -mrelax
-mbigtable  -mfmovd  -mhitachi -mrenesas -mno-renesas -mnomacsave
-mieee  -misize  -mpadstruct  -mspace
-mprefergot  -musermode -multcost=</b><i>number</i> <b>-mdiv=</b><i>strategy</i>
<b>-mdivsi3_libfunc=</b><i>name</i> 
<b>-madjust-unroll -mindexed-addressing -mgettrcost=</b><i>number</i> <b>-mpt-fixed
<br />
 -minvalid-symbols</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">SPARC</font> Options</i>
<b>-mcpu=</b><i>cpu-type</i>
<b>-mtune=</b><i>cpu-type</i>
<b>-mcmodel=</b><i>code-model</i>
<b>-m32  -m64  -mapp-regs  -mno-app-regs
-mfaster-structs  -mno-faster-structs
-mfpu  -mno-fpu  -mhard-float  -msoft-float
-mhard-quad-float  -msoft-quad-float
-mimpure-text  -mno-impure-text  -mlittle-endian
-mstack-bias  -mno-stack-bias
-munaligned-doubles  -mno-unaligned-doubles
-mv8plus  -mno-v8plus  -mvis  -mno-vis
-threads -pthreads -pthread</b>
<p>
<!-- ignored unsupported tag .if -->
<i>System V Options</i>
<b>-Qy  -Qn  -YP,</b><i>paths</i>  <b>-Ym,</b><i>dir</i>
<p>
<!-- ignored unsupported tag .if -->
<i>TMS320C3x/C4x Options</i>
<b>-mcpu=</b><i>cpu</i>  <b>-mbig  -msmall  -mregparm  -mmemparm
-mfast-fix  -mmpyi  -mbk  -mti  -mdp-isr-reload
-mrpts=</b><i>count</i>  <b>-mrptb  -mdb  -mloop-unsigned
-mparallel-insns  -mparallel-mpy  -mpreserve-float</b>
<p>
<!-- ignored unsupported tag .if -->
<i>V850 Options</i>
<b>-mlong-calls  -mno-long-calls  -mep  -mno-ep
-mprolog-function  -mno-prolog-function  -mspace
-mtda=</b><i>n</i>  <b>-msda=</b><i>n</i>  <b>-mzda=</b><i>n</i>
<b>-mapp-regs  -mno-app-regs
-mdisable-callt  -mno-disable-callt
-mv850e1
-mv850e
-mv850  -mbig-switch</b>
<p>
<!-- ignored unsupported tag .if -->
<i><font size="-1">VAX</font> Options</i>
<b>-mg  -mgnu  -munix</b>
<p>
<!-- ignored unsupported tag .if -->
<i>x86-64 Options</i>
See i386 and x86-64 Options.
<p>
<!-- ignored unsupported tag .if -->
<i>Xstormy16 Options</i>
<b>-msim</b>
<p>
<!-- ignored unsupported tag .if -->
<i>Xtensa Options</i>
<b>-mconst16 -mno-const16
-mfused-madd  -mno-fused-madd
-mtext-section-literals  -mno-text-section-literals
-mtarget-align  -mno-target-align
-mlongcalls  -mno-longcalls</b>
<p>
<!-- ignored unsupported tag .if -->
<i>zSeries Options</i>
See S/390 and zSeries Options.
</td></tr>
<tr valign="top"><td width=4%>
<i>Code Generation Options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-fcall-saved-</b><i>reg</i>  <b>-fcall-used-</b><i>reg</i>
<b>-ffixed-</b><i>reg</i>  <b>-fexceptions
-fnon-call-exceptions  -funwind-tables
-fasynchronous-unwind-tables
-finhibit-size-directive  -finstrument-functions
-fno-common  -fno-ident
-fpcc-struct-return  -fpic  -fPIC -fpie -fPIE
-fno-jump-tables
-freg-struct-return  -fshared-data  -fshort-enums
-fshort-double  -fshort-wchar
-fverbose-asm  -fpack-struct[=</b><i>n</i><b>]  -fstack-check
-fstack-limit-register=</b><i>reg</i>  <b>-fstack-limit-symbol=</b><i>sym</i>
<b>-fno-stack-limit  -fargument-alias  -fargument-noalias
-fargument-noalias-global  -fleading-underscore
-ftls-model=</b><i>model</i>
<b>-ftrapv  -fwrapv  -fbounds-check
-fvisibility  -fopenmp</b>
</td></tr>
</table>
<h1 class="manpages">Options Controlling the Kind of Output</h1>
<!-- ignored unsupported tag .tm -->
Compilation can involve up to four stages: preprocessing, compilation
proper, assembly and linking, always in that order.  <font size="-1">GCC</font> is capable of
preprocessing and compiling several files either into several
assembler input files, or into one assembler input file; then each
assembler input file produces an object file, and linking combines all
the object files (those newly compiled, and those specified as input)
into an executable file.
<p>
For any given input file, the file name suffix determines what kind of
compilation is done:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.c</b>
</td><td>
<!-- ignored unsupported tag .tm -->
C source code which must be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.i</b>
</td><td>
<!-- ignored unsupported tag .tm -->
C source code which should not be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.ii</b>
</td><td>
<!-- ignored unsupported tag .tm -->
C<font size="-2">++</font> source code which should not be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.m</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Objective-C source code.  Note that you must link with the <i>libobjc</i>
library to make an Objective-C program work.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.mi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Objective-C source code which should not be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.mm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.M</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Objective-C<font size="-2">++</font> source code.  Note that you must link with the <i>libobjc</i>
library to make an Objective-C<font size="-2">++</font> program work.  Note that <b>.M</b> refers
to a literal capital M.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.mii</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Objective-C<font size="-2">++</font> source code which should not be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.h</b>
</td><td>
<!-- ignored unsupported tag .tm -->
C, C<font size="-2">++</font>, Objective-C or Objective-C<font size="-2">++</font> header file to be turned into a
precompiled header.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.cc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.cp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.cxx</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.cpp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.CPP</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.c++</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.C</b>
</td><td>
<!-- ignored unsupported tag .tm -->
C<font size="-2">++</font> source code which must be preprocessed.  Note that in <b>.cxx</b>,
the last two letters must both be literally <b>x</b>.  Likewise,
<b>.C</b> refers to a literal capital C.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.mm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.M</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Objective-C<font size="-2">++</font> source code which must be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.mii</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Objective-C<font size="-2">++</font> source code which should not be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.hh</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.H</b>
</td><td>
<!-- ignored unsupported tag .tm -->
C<font size="-2">++</font> header file to be turned into a precompiled header.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.f</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.for</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.FOR</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Fixed form Fortran source code which should not be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.F</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.fpp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.FPP</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Fixed form Fortran source code which must be preprocessed (with the traditional
preprocessor).
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.f90</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.f95</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Free form Fortran source code which should not be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.F90</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.F95</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Free form Fortran source code which must be preprocessed (with the
traditional preprocessor).
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.ads</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Ada source code file which contains a library unit declaration (a
declaration of a package, subprogram, or generic, or a generic
instantiation), or a library unit renaming declaration (a package,
generic, or subprogram renaming declaration).  Such files are also
called <i>specs</i>.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.adb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Ada source code file containing a library unit body (a subprogram or
package body).  Such files are also called <i>bodies</i>.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.s</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assembler code.
</td></tr>
<tr valign="top"><td width=4%>
<i>file</i><b>.S</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assembler code which must be preprocessed.
</td></tr>
<tr valign="top"><td width=4%>
<i>other</i>
</td><td>
<!-- ignored unsupported tag .tm -->
An object file to be fed straight into linking.
Any file name with no recognized suffix is treated this way.
</td></tr>
<!-- PP ends table -->
</table>
You can specify the input language explicitly with the <b>-x</b> option:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-x</b> <i>language</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify explicitly the <i>language</i> for the following input files
(rather than letting the compiler choose a default based on the file
name suffix).  This option applies to all following input files until
the next <b>-x</b> option.  Possible values for <i>language</i> are:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        c  c-header  c-cpp-output
        c++  c++-header  c++-cpp-output
        objective-c  objective-c-header  objective-c-cpp-output
        objective-c++ objective-c++-header objective-c++-cpp-output
        assembler  assembler-with-cpp
        ada
        f95  f95-cpp-input
        java
        treelang
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-x none</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Turn off any specification of a language, so that subsequent files are
handled according to their file name suffixes (as they are if <b>-x</b>
has not been used at all).
</td></tr>
<tr valign="top"><td width=4%>
<b>-pass-exit-codes</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Normally the <b>gcc</b> program will exit with the code of 1 if any
phase of the compiler returns a non-success return code.  If you specify
<b>-pass-exit-codes</b>, the <b>gcc</b> program will instead return with
numerically highest error produced by any phase that returned an error
indication.
</td></tr>
<!-- PP ends table -->
</table>
If you only want some of the stages of compilation, you can use
<b>-x</b> (or filename suffixes) to tell <b>gcc</b> where to start, and
one of the options <b>-c</b>, <b>-S</b>, or <b>-E</b> to say where
<b>gcc</b> is to stop.  Note that some combinations (for example,
<b>-x cpp-output -E</b>) instruct <b>gcc</b> to do nothing at all.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-c</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compile or assemble the source files, but do not link.  The linking
stage simply is not done.  The ultimate output is in the form of an
object file for each source file.
<p>
<!-- ignored unsupported tag .if -->
By default, the object file name for a source file is made by replacing
the suffix <b>.c</b>, <b>.i</b>, <b>.s</b>, etc., with <b>.o</b>.
<p>
<!-- ignored unsupported tag .if -->
Unrecognized input files, not requiring compilation or assembly, are
ignored.
</td></tr>
<tr valign="top"><td width=4%>
<b>-S</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Stop after the stage of compilation proper; do not assemble.  The output
is in the form of an assembler code file for each non-assembler input
file specified.
<p>
<!-- ignored unsupported tag .if -->
By default, the assembler file name for a source file is made by
replacing the suffix <b>.c</b>, <b>.i</b>, etc., with <b>.s</b>.
<p>
<!-- ignored unsupported tag .if -->
Input files that don&#146;t require compilation are ignored.
</td></tr>
<tr valign="top"><td width=4%>
<b>-E</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Stop after the preprocessing stage; do not run the compiler proper.  The
output is in the form of preprocessed source code, which is sent to the
standard output.
<p>
<!-- ignored unsupported tag .if -->
Input files which don&#146;t require preprocessing are ignored.
</td></tr>
<tr valign="top"><td width=4%>
<b>-o</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Place output in file <i>file</i>.  This applies regardless to whatever
sort of output is being produced, whether it be an executable file,
an object file, an assembler file or preprocessed C code.
<p>
<!-- ignored unsupported tag .if -->
If <b>-o</b> is not specified, the default is to put an executable
file in <i>a.out</i>, the object file for
<i></i><i>source</i><i>.</i><i>suffix</i><i></i> in <i></i><i>source</i><i>.o</i>, its
assembler file in <i></i><i>source</i><i>.s</i>, a precompiled header file in
<i></i><i>source</i><i>.</i><i>suffix</i><i>.gch</i>, and all preprocessed C source on
standard output.
</td></tr>
<tr valign="top"><td width=4%>
<b>-v</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print (on standard error output) the commands executed to run the stages
of compilation.  Also print the version number of the compiler driver
program and of the preprocessor and the compiler proper.
</td></tr>
<tr valign="top"><td width=4%>
<b>-###</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>-v</b> except the commands are not executed and all command
arguments are quoted.  This is useful for shell scripts to capture the
driver-generated command lines.
</td></tr>
<tr valign="top"><td width=4%>
<b>-pipe</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use pipes rather than temporary files for communication between the
various stages of compilation.  This fails to work on some systems where
the assembler is unable to read from a pipe; but the <font size="-1">GNU</font> assembler has
no trouble.
</td></tr>
<tr valign="top"><td width=4%>
<b>-combine</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If you are compiling multiple source files, this option tells the driver
to pass all the source files to the compiler at once (for those
languages for which the compiler can handle this).  This will allow
intermodule analysis (<font size="-1">IMA</font>) to be performed by the compiler.  Currently the only
language for which this is supported is C.  If you pass source files for
multiple languages to the driver, using this option, the driver will invoke
the compiler(s) that support <font size="-1">IMA</font> once each, passing each compiler all the
source files appropriate for it.  For those languages that do not support
<font size="-1">IMA</font> this option will be ignored, and the compiler will be invoked once for
each source file in that language.  If you use this option in conjunction
with <b>-save-temps</b>, the compiler will generate multiple
pre-processed files
(one for each source file), but only one (combined) <i>.o</i> or
<i>.s</i> file.
</td></tr>
<tr valign="top"><td width=4%>
<b>--help</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print (on the standard output) a description of the command line options
understood by <b>gcc</b>.  If the <b>-v</b> option is also specified
then <b>--help</b> will also be passed on to the various processes
invoked by <b>gcc</b>, so that they can display the command line options
they accept.  If the <b>-Wextra</b> option is also specified then command
line options which have no documentation associated with them will also
be displayed.
</td></tr>
<tr valign="top"><td width=4%>
<b>--target-help</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print (on the standard output) a description of target specific command
line options for each tool.
</td></tr>
<tr valign="top"><td width=4%>
<b>--version</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Display the version number and copyrights of the invoked <font size="-1">GCC</font>.
</td></tr>
</table>
<h1 class="manpages">Compiling C<font size="-2">++</font> Programs</h1>
<!-- ignored unsupported tag .tm -->
C<font size="-2">++</font> source files conventionally use one of the suffixes <b>.C</b>,
<b>.cc</b>, <b>.cpp</b>, <b>.CPP</b>, <b>.c++</b>, <b>.cp</b>, or
<b>.cxx</b>; C<font size="-2">++</font> header files often use <b>.hh</b> or <b>.H</b>; and
preprocessed C<font size="-2">++</font> files use the suffix <b>.ii</b>.  <font size="-1">GCC</font> recognizes
files with these names and compiles them as C<font size="-2">++</font> programs even if you
call the compiler the same way as for compiling C programs (usually
with the name <b>gcc</b>).
<p>
However, C<font size="-2">++</font> programs often require class libraries as well as a
compiler that understands the C<font size="-2">++</font> language---and under some
circumstances, you might want to compile programs or header files from
standard input, or otherwise without a suffix that flags them as C<font size="-2">++</font>
programs.  You might also like to precompile a C header file with a
<b>.h</b> extension to be used in C<font size="-2">++</font> compilations.  <b>g++</b> is a
program that calls <font size="-1">GCC</font> with the default language set to C<font size="-2">++</font>, and
automatically specifies linking against the C<font size="-2">++</font> library.  On many
systems, <b>g++</b> is also installed with the name <b>c++</b>.
<p>
When you compile C<font size="-2">++</font> programs, you may specify many of the same
command-line options that you use for compiling programs in any
language; or command-line options meaningful for C and related
languages; or options that are meaningful only for C<font size="-2">++</font> programs.
<h1 class="manpages">Options Controlling C Dialect</h1>
<!-- ignored unsupported tag .tm -->
The following options control the dialect of C (or languages derived
from C, such as C<font size="-2">++</font>, Objective-C and Objective-C<font size="-2">++</font>) that the compiler
accepts:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-ansi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
In C mode, support all <font size="-1">ISO</font> C90 programs.  In C<font size="-2">++</font> mode,
remove <font size="-1">GNU</font> extensions that conflict with <font size="-1">ISO</font> C<font size="-2">++</font>.
<p>
<!-- ignored unsupported tag .if -->
This turns off certain features of <font size="-1">GCC</font> that are incompatible with <font size="-1">ISO</font>
C90 (when compiling C code), or of standard C<font size="-2">++</font> (when compiling C<font size="-2">++</font> code),
such as the <tt>asm</tt> and <tt>typeof</tt> keywords, and
predefined macros such as <tt>unix</tt> and <tt>vax</tt> that identify the
type of system you are using.  It also enables the undesirable and
rarely used <font size="-1">ISO</font> trigraph feature.  For the C compiler,
it disables recognition of C<font size="-2">++</font> style <b>//</b> comments as well as
the <tt>inline</tt> keyword.
<p>
<!-- ignored unsupported tag .if -->
The alternate keywords <tt>__asm__</tt>, <tt>__extension__</tt>,
<tt>__inline__</tt> and <tt>__typeof__</tt> continue to work despite
<b>-ansi</b>.  You would not want to use them in an <font size="-1">ISO</font> C program, of
course, but it is useful to put them in header files that might be included
in compilations done with <b>-ansi</b>.  Alternate predefined macros
such as <tt>__unix__</tt> and <tt>__vax__</tt> are also available, with or
without <b>-ansi</b>.
<p>
<!-- ignored unsupported tag .if -->
The <b>-ansi</b> option does not cause non-ISO programs to be
rejected gratuitously.  For that, <b>-pedantic</b> is required in
addition to <b>-ansi</b>. 
<p>
<!-- ignored unsupported tag .if -->
The macro <tt>__STRICT_ANSI__</tt> is predefined when the <b>-ansi</b>
option is used.  Some header files may notice this macro and refrain
from declaring certain functions or defining certain macros that the
<font size="-1">ISO</font> standard doesn&#146;t call for; this is to avoid interfering with any
programs that might use these names for other things.
<p>
<!-- ignored unsupported tag .if -->
Functions which would normally be built in but do not have semantics
defined by <font size="-1">ISO</font> C (such as <tt>alloca</tt> and <tt>ffs</tt>) are not built-in
functions with <b>-ansi</b> is used. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-std=</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Determine the language standard.  This option is currently only
supported when compiling C or C<font size="-2">++</font>.  A value for this option must be
provided; possible values are
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>c89</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>iso9899:1990</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">ISO</font> C90 (same as <b>-ansi</b>).
</td></tr>
<tr valign="top"><td width=4%>
<b>iso9899:199409</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">ISO</font> C90 as modified in amendment 1.
</td></tr>
<tr valign="top"><td width=4%>
<b>c99</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>c9x</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>iso9899:1999</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>iso9899:199x</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">ISO</font> C99.  Note that this standard is not yet fully supported; see
&lt;<b><a href="http://gcc.gnu.org/gcc-4.1/c99status.html">http://gcc.gnu.org/gcc-4.1/c99status.html</a></b>&gt; for more information.  The
names <b>c9x</b> and <b>iso9899:199x</b> are deprecated.
</td></tr>
<tr valign="top"><td width=4%>
<b>gnu89</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Default, <font size="-1">ISO</font> C90 plus <font size="-1">GNU</font> extensions (including some C99 features).
</td></tr>
<tr valign="top"><td width=4%>
<b>gnu99</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>gnu9x</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">ISO</font> C99 plus <font size="-1">GNU</font> extensions.  When <font size="-1">ISO</font> C99 is fully implemented in <font size="-1">GCC</font>,
this will become the default.  The name <b>gnu9x</b> is deprecated.
</td></tr>
<tr valign="top"><td width=4%>
<b>c++98</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The 1998 <font size="-1">ISO</font> C<font size="-2">++</font> standard plus amendments.
</td></tr>
<tr valign="top"><td width=4%>
<b>gnu++98</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The same as <b>-std=c++98</b> plus <font size="-1">GNU</font> extensions.  This is the
default for C<font size="-2">++</font> code.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Even when this option is not specified, you can still use some of the
features of newer standards in so far as they do not conflict with
previous C standards.  For example, you may use <tt>__restrict__</tt> even
when <b>-std=c99</b> is not specified.
<p>
<!-- ignored unsupported tag .if -->
The <b>-std</b> options specifying some version of <font size="-1">ISO</font> C have the same
effects as <b>-ansi</b>, except that features that were not in <font size="-1">ISO</font> C90
but are in the specified version (for example, <b>//</b> comments and
the <tt>inline</tt> keyword in <font size="-1">ISO</font> C99) are not disabled.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fgnu89-inline</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The option <b>-fgnu89-inline</b> tells <font size="-1">GCC</font> to use the traditional
<font size="-1">GNU</font> semantics for <tt>inline</tt> functions when in C99 mode.
<br />
  Using this
option is roughly equivalent to adding the <tt>gnu_inline</tt> function
attribute to all inline functions.
<p>
<!-- ignored unsupported tag .if -->
This option is accepted by <font size="-1">GCC</font> versions 4.1.3 and up.  In <font size="-1">GCC</font> versions
prior to 4.3, C99 inline semantics are not supported, and thus this
option is effectively assumed to be present regardless of whether or not
it is specified; the only effect of specifying it explicitly is to
disable warnings about using inline functions in C99 mode.  Likewise,
the option <b>-fno-gnu89-inline</b> is not supported in versions of
<font size="-1">GCC</font> before 4.3.  It will be supported only in C99 or gnu99 mode, not in
C89 or gnu89 mode.
<p>
<!-- ignored unsupported tag .if -->
The preprocesor macros <tt>__GNUC_GNU_INLINE__</tt> and
<tt>__GNUC_STDC_INLINE__</tt> may be used to check which semantics are
in effect for <tt>inline</tt> functions. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-aux-info</b> <i>filename</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Output to the given filename prototyped declarations for all functions
declared and/or defined in a translation unit, including those in header
files.  This option is silently ignored in any language other than C.
<p>
<!-- ignored unsupported tag .if -->
Besides declarations, the file indicates, in comments, the origin of
each declaration (source file and line), whether the declaration was
implicit, prototyped or unprototyped (<b>I</b>, <b>N</b> for new or
<b>O</b> for old, respectively, in the first character after the line
number and the colon), and whether it came from a declaration or a
definition (<b>C</b> or <b>F</b>, respectively, in the following
character).  In the case of function definitions, a K&R-style list of
arguments followed by their declarations is also provided, inside
comments, after the declaration.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-asm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not recognize <tt>asm</tt>, <tt>inline</tt> or <tt>typeof</tt> as a
keyword, so that code can use these words as identifiers.  You can use
the keywords <tt>__asm__</tt>, <tt>__inline__</tt> and <tt>__typeof__</tt>
instead.  <b>-ansi</b> implies <b>-fno-asm</b>.
<p>
<!-- ignored unsupported tag .if -->
In C<font size="-2">++</font>, this switch only affects the <tt>typeof</tt> keyword, since
<tt>asm</tt> and <tt>inline</tt> are standard keywords.  You may want to
use the <b>-fno-gnu-keywords</b> flag instead, which has the same
effect.  In C99 mode (<b>-std=c99</b> or <b>-std=gnu99</b>), this
switch only affects the <tt>asm</tt> and <tt>typeof</tt> keywords, since
<tt>inline</tt> is a standard keyword in <font size="-1">ISO</font> C99.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-builtin</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-builtin-</b><i>function</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t recognize built-in functions that do not begin with
<b>__builtin_</b> as prefix. 
<p>
<!-- ignored unsupported tag .if -->
<font size="-1">GCC</font> normally generates special code to handle certain built-in functions
more efficiently; for instance, calls to <tt>alloca</tt> may become single
instructions that adjust the stack directly, and calls to <tt>memcpy</tt>
may become inline copy loops.  The resulting code is often both smaller
and faster, but since the function calls no longer appear as such, you
cannot set a breakpoint on those calls, nor can you change the behavior
of the functions by linking with a different library.  In addition,
when a function is recognized as a built-in function, <font size="-1">GCC</font> may use
information about that function to warn about problems with calls to
that function, or to generate more efficient code, even if the
resulting code still contains calls to that function.  For example,
warnings are given with <b>-Wformat</b> for bad calls to
<tt>printf</tt>, when <tt>printf</tt> is built in, and <tt>strlen</tt> is
known not to modify global memory.
<p>
<!-- ignored unsupported tag .if -->
With the <b>-fno-builtin-</b><i>function</i> option
only the built-in function <i>function</i> is
disabled.  <i>function</i> must not begin with <b>__builtin_</b>.  If a
function is named this is not built-in in this version of <font size="-1">GCC</font>, this
option is ignored.  There is no corresponding
<b>-fbuiltin-</b><i>function</i> option; if you wish to enable
built-in functions selectively when using <b>-fno-builtin</b> or
<b>-ffreestanding</b>, you may define macros such as:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        #define abs(n)          __builtin_abs ((n))
        #define strcpy(d, s)    __builtin_strcpy ((d), (s))
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-fhosted</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assert that compilation takes place in a hosted environment.  This implies
<b>-fbuiltin</b>.  A hosted environment is one in which the
entire standard library is available, and in which <tt>main</tt> has a return
type of <tt>int</tt>.  Examples are nearly everything except a kernel.
This is equivalent to <b>-fno-freestanding</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ffreestanding</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assert that compilation takes place in a freestanding environment.  This
implies <b>-fno-builtin</b>.  A freestanding environment
is one in which the standard library may not exist, and program startup may
not necessarily be at <tt>main</tt>.  The most obvious example is an <font size="-1">OS</font> kernel.
This is equivalent to <b>-fno-hosted</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fms-extensions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Accept some non-standard constructs used in Microsoft header files.
<p>
<!-- ignored unsupported tag .if -->
Some cases of unnamed fields in structures and unions are only
accepted with this option. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-trigraphs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Support <font size="-1">ISO</font> C trigraphs.  The <b>-ansi</b> option (and <b>-std</b>
options for strict <font size="-1">ISO</font> C conformance) implies <b>-trigraphs</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-no-integrated-cpp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Performs a compilation in two passes: preprocessing and compiling.  This
option allows a user supplied cc1, cc1plus, or cc1obj via the
<b>-B</b> option.  The user supplied compilation step can then add in
an additional preprocessing step after normal preprocessing but before
compiling.  The default is to use the integrated cpp (internal cpp)
<p>
<!-- ignored unsupported tag .if -->
The semantics of this option will change if cc1, cc1plus, and
cc1obj are merged.
</td></tr>
<tr valign="top"><td width=4%>
<b>-traditional</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-traditional-cpp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Formerly, these options caused <font size="-1">GCC</font> to attempt to emulate a pre-standard
C compiler.  They are now only supported with the <b>-E</b> switch.
The preprocessor continues to support a pre-standard mode.  See the <font size="-1">GNU</font>
<font size="-1">CPP</font> manual for details.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcond-mismatch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow conditional expressions with mismatched types in the second and
third arguments.  The value of such an expression is void.  This option
is not supported for C<font size="-2">++</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funsigned-char</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Let the type <tt>char</tt> be unsigned, like <tt>unsigned char</tt>.
<p>
<!-- ignored unsupported tag .if -->
Each kind of machine has a default for what <tt>char</tt> should
be.  It is either like <tt>unsigned char</tt> by default or like
<tt>signed char</tt> by default.
<p>
<!-- ignored unsupported tag .if -->
Ideally, a portable program should always use <tt>signed char</tt> or
<tt>unsigned char</tt> when it depends on the signedness of an object.
But many programs have been written to use plain <tt>char</tt> and
expect it to be signed, or expect it to be unsigned, depending on the
machines they were written for.  This option, and its inverse, let you
make such a program work with the opposite default.
<p>
<!-- ignored unsupported tag .if -->
The type <tt>char</tt> is always a distinct type from each of
<tt>signed char</tt> or <tt>unsigned char</tt>, even though its behavior
is always just like one of those two.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsigned-char</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Let the type <tt>char</tt> be signed, like <tt>signed char</tt>.
<p>
<!-- ignored unsupported tag .if -->
Note that this is equivalent to <b>-fno-unsigned-char</b>, which is
the negative form of <b>-funsigned-char</b>.  Likewise, the option
<b>-fno-signed-char</b> is equivalent to <b>-funsigned-char</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsigned-bitfields</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-funsigned-bitfields</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-signed-bitfields</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-unsigned-bitfields</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These options control whether a bit-field is signed or unsigned, when the
declaration does not use either <tt>signed</tt> or <tt>unsigned</tt>.  By
default, such a bit-field is signed, because this is consistent: the
basic integer types such as <tt>int</tt> are signed types.
</td></tr>
</table>
<h1 class="manpages">Options Controlling C<font size="-2">++</font> Dialect</h1>
<!-- ignored unsupported tag .tm -->
This section describes the command-line options that are only meaningful
for C<font size="-2">++</font> programs; but you can also use most of the <font size="-1">GNU</font> compiler options
regardless of what language your program is in.  For example, you
might compile a file <tt>firstClass.C</tt> like this:
<p>
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        g++ -g -frepo -O -c firstClass.C
</tt></pre></td></tr>
</table>
<p>
In this example, only <b>-frepo</b> is an option meant
only for C<font size="-2">++</font> programs; you can use the other options with any
language supported by <font size="-1">GCC</font>.
<p>
Here is a list of options that are <i>only</i> for compiling C<font size="-2">++</font> programs:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-fabi-version=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use version <i>n</i> of the C<font size="-2">++</font> <font size="-1">ABI</font>.  Version 2 is the version of the
C<font size="-2">++</font> <font size="-1">ABI</font> that first appeared in G++ 3.4.  Version 1 is the version of
the C<font size="-2">++</font> <font size="-1">ABI</font> that first appeared in G++ 3.2.  Version 0 will always be
the version that conforms most closely to the C<font size="-2">++</font> <font size="-1">ABI</font> specification.
Therefore, the <font size="-1">ABI</font> obtained using version 0 will change as <font size="-1">ABI</font> bugs
are fixed.
<p>
<!-- ignored unsupported tag .if -->
The default is version 2.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-access-control</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Turn off all access checking.  This switch is mainly useful for working
around bugs in the access control code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcheck-new</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Check that the pointer returned by <tt>operator new</tt> is non-null
before attempting to modify the storage allocated.  This check is
normally unnecessary because the C<font size="-2">++</font> standard specifies that
<tt>operator new</tt> will only return <tt>0</tt> if it is declared
<b></b><tt>throw()</tt><b></b>, in which case the compiler will always check the
return value even without this option.  In all other cases, when
<tt>operator new</tt> has a non-empty exception specification, memory
exhaustion is signalled by throwing <tt>std::bad_alloc</tt>.  See also
<b>new (nothrow)</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fconserve-space</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Put uninitialized or runtime-initialized global variables into the
common segment, as C does.  This saves space in the executable at the
cost of not diagnosing duplicate definitions.  If you compile with this
flag and your program mysteriously crashes after <tt>main()</tt> has
completed, you may have an object that is being destroyed twice because
two definitions were merged.
<p>
<!-- ignored unsupported tag .if -->
This option is no longer useful on most targets, now that support has
been added for putting variables into <font size="-1">BSS</font> without making them common.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ffriend-injection</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Inject friend functions into the enclosing namespace, so that they are
visible outside the scope of the class in which they are declared.
Friend functions were documented to work this way in the old Annotated
C<font size="-2">++</font> Reference Manual, and versions of G++ before 4.1 always worked
that way.  However, in <font size="-1">ISO</font> C<font size="-2">++</font> a friend function which is not declared
in an enclosing scope can only be found using argument dependent
lookup.  This option causes friends to be injected as they were in
earlier releases.
<p>
<!-- ignored unsupported tag .if -->
This option is for compatibility, and may be removed in a future
release of G++.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-const-strings</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Give string constants type <tt>char *</tt> instead of type <tt>const
char *</tt>.  By default, G++ uses type <tt>const char *</tt> as required by
the standard.  Even if you use <b>-fno-const-strings</b>, you cannot
actually modify the value of a string constant.
<p>
<!-- ignored unsupported tag .if -->
This option might be removed in a future release of G++.  For maximum
portability, you should structure your code so that it works with
string constants that have type <tt>const char *</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-elide-constructors</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The C<font size="-2">++</font> standard allows an implementation to omit creating a temporary
which is only used to initialize another object of the same type.
Specifying this option disables that optimization, and forces G++ to
call the copy constructor in all cases.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-enforce-eh-specs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t generate code to check for violation of exception specifications
at runtime.  This option violates the C<font size="-2">++</font> standard, but may be useful
for reducing code size in production builds, much like defining
<b><font size="-1">NDEBUG</font></b>.  This does not give user code permission to throw
exceptions in violation of the exception specifications; the compiler
will still optimize based on the specifications, so throwing an
unexpected exception will result in undefined behavior.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ffor-scope</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-for-scope</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If <b>-ffor-scope</b> is specified, the scope of variables declared in
a <i>for-init-statement</i> is limited to the <b>for</b> loop itself,
as specified by the C<font size="-2">++</font> standard.
If <b>-fno-for-scope</b> is specified, the scope of variables declared in
a <i>for-init-statement</i> extends to the end of the enclosing scope,
as was the case in old versions of G++, and other (traditional)
implementations of C<font size="-2">++</font>.
<p>
<!-- ignored unsupported tag .if -->
The default if neither flag is given to follow the standard,
but to allow and give a warning for old-style code that would
otherwise be invalid, or have different behavior.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-gnu-keywords</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not recognize <tt>typeof</tt> as a keyword, so that code can use this
word as an identifier.  You can use the keyword <tt>__typeof__</tt> instead.
<b>-ansi</b> implies <b>-fno-gnu-keywords</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-implicit-templates</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Never emit code for non-inline templates which are instantiated
implicitly (i.e. by use); only emit code for explicit instantiations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-implicit-inline-templates</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t emit code for implicit instantiations of inline templates, either.
The default is to handle inlines differently so that compiles with and
without optimization will need the same set of explicit instantiations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-implement-inlines</b>
</td><td>
<!-- ignored unsupported tag .tm -->
To save space, do not emit out-of-line copies of inline functions
controlled by <b>#pragma implementation</b>.  This will cause linker
errors if these functions are not inlined everywhere they are called.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fms-extensions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable pedantic warnings about constructs used in <font size="-1">MFC</font>, such as implicit
int and getting a pointer to member function via non-standard syntax.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-nonansi-builtins</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable built-in declarations of functions that are not mandated by
<font size="-1">ANSI/ISO</font> C.  These include <tt>ffs</tt>, <tt>alloca</tt>, <tt>_exit</tt>,
<tt>index</tt>, <tt>bzero</tt>, <tt>conjf</tt>, and other related functions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-operator-names</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not treat the operator name keywords <tt>and</tt>, <tt>bitand</tt>,
<tt>bitor</tt>, <tt>compl</tt>, <tt>not</tt>, <tt>or</tt> and <tt>xor</tt> as
synonyms as keywords.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-optional-diags</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable diagnostics that the standard says a compiler does not need to
issue.  Currently, the only such diagnostic issued by G++ is the one for
a name having multiple meanings within a class.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpermissive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Downgrade some diagnostics about nonconformant code from errors to
warnings.  Thus, using <b>-fpermissive</b> will allow some
nonconforming code to compile.
</td></tr>
<tr valign="top"><td width=4%>
<b>-frepo</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable automatic template instantiation at link time.  This option also
implies <b>-fno-implicit-templates</b>. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-rtti</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable generation of information about every class with virtual
functions for use by the C<font size="-2">++</font> runtime type identification features
(<b>dynamic_cast</b> and <b>typeid</b>).  If you don&#146;t use those parts
of the language, you can save some space by using this flag.  Note that
exception handling uses the same information, but it will generate it as
needed.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fstats</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit statistics about front-end processing at the end of the compilation.
This information is generally only useful to the G++ development team.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftemplate-depth-</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the maximum instantiation depth for template classes to <i>n</i>.
A limit on the template instantiation depth is needed to detect
endless recursions during template class instantiation.  <font size="-1">ANSI/ISO</font> C<font size="-2">++</font>
conforming programs must not rely on a maximum depth greater than 17.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-threadsafe-statics</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not emit the extra code to use the routines specified in the C<font size="-2">++</font>
<font size="-1">ABI</font> for thread-safe initialization of local statics.  You can use this
option to reduce code size slightly in code that doesn&#146;t need to be
thread-safe.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fuse-cxa-atexit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Register destructors for objects with static storage duration with the
<tt>__cxa_atexit</tt> function rather than the <tt>atexit</tt> function.
This option is required for fully standards-compliant handling of static
destructors, but will only work if your C library supports
<tt>__cxa_atexit</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fvisibility-inlines-hidden</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Causes all inlined methods to be marked with
<tt>__attribute__ ((visibility ("hidden")))</tt> so that they do not
appear in the export table of a <font size="-1">DSO</font> and do not require a <font size="-1">PLT</font> indirection
when used within the <font size="-1">DSO</font>.  Enabling this option can have a dramatic effect
on load and link times of a <font size="-1">DSO</font> as it massively reduces the size of the
dynamic export table when the library makes heavy use of templates.
<p>
<!-- ignored unsupported tag .if -->
You may mark a method as having a visibility explicitly to negate the
effect of the switch for that method.  For example, if you do want to
compare pointers to a particular inline method, or the method has
local static data, you might mark it as having default visibility.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-weak</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use weak symbol support, even if it is provided by the linker.
By default, G++ will use weak symbols if they are available.  This
option exists only for testing, and should not be used by end-users;
it will result in inferior code and has no benefits.  This option may
be removed in a future release of G++.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nostdinc++</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not search for header files in the standard directories specific to
C<font size="-2">++</font>, but do still search the other standard directories.  (This option
is used when building the C<font size="-2">++</font> library.)
</td></tr>
<!-- PP ends table -->
</table>
In addition, these optimization, warning, and code generation options
have meanings only for C<font size="-2">++</font> programs:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-fno-default-inline</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not assume <b>inline</b> for functions defined inside a class scope.
<br />
  Note that these
functions will have linkage like inline functions; they just won&#146;t be
inlined by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wabi</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when G++ generates code that is probably not compatible with the
vendor-neutral C<font size="-2">++</font> <font size="-1">ABI</font>.  Although an effort has been made to warn about
all such cases, there are probably some cases that are not warned about,
even though G++ is generating incompatible code.  There may also be
cases where warnings are emitted even though the code that is generated
will be compatible.
<p>
<!-- ignored unsupported tag .if -->
You should rewrite your code to avoid these warnings if you are
concerned about the fact that code generated by G++ may not be binary
compatible with code generated by other compilers.
<p>
<!-- ignored unsupported tag .if -->
The known incompatibilities at this point include:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Incorrect handling of tail-padding for bit-fields.  G++ may attempt to
pack data into the same byte as a base class.  For example:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct A { virtual void f(); int f1 : 1; };
        struct B : public A { int f2 : 1; };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
In this case, G++ will place <tt>B::f2</tt> into the same byte
as<tt>A::f1</tt>; other compilers will not.  You can avoid this problem
by explicitly padding <tt>A</tt> so that its size is a multiple of the
byte size on your platform; that will cause G++ and other compilers to
layout <tt>B</tt> identically.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Incorrect handling of tail-padding for virtual bases.  G++ does not use
tail padding when laying out virtual bases.  For example:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct A { virtual void f(); char c1; };
        struct B { B(); char c2; };
        struct C : public A, public virtual B {};
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
In this case, G++ will not place <tt>B</tt> into the tail-padding for
<tt>A</tt>; other compilers will.  You can avoid this problem by
explicitly padding <tt>A</tt> so that its size is a multiple of its
alignment (ignoring virtual base classes); that will cause G++ and other
compilers to layout <tt>C</tt> identically.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Incorrect handling of bit-fields with declared widths greater than that
of their underlying types, when the bit-fields appear in a union.  For
example:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        union U { int i : 4096; };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Assuming that an <tt>int</tt> does not have 4096 bits, G++ will make the
union too small by the number of bits in an <tt>int</tt>.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Empty classes can be placed at incorrect offsets.  For example:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct A {};
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct B {
          A a;
          virtual void f ();
        };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct C : public B, public A {};
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
G++ will place the <tt>A</tt> base class of <tt>C</tt> at a nonzero offset;
it should be placed at offset zero.  G++ mistakenly believes that the
<tt>A</tt> data member of <tt>B</tt> is already at offset zero.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Names of template functions whose types involve <tt>typename</tt> or
template template parameters can be mangled incorrectly.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        template &lt;typename Q&gt;
        void f(typename Q::X) {}
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        template &lt;template &lt;typename&gt; class Q&gt;
        void f(typename Q&lt;int&gt;::X) {}
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Instantiations of these templates may be mangled incorrectly.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wctor-dtor-privacy</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when a class seems unusable because all the constructors or
destructors in that class are private, and it has neither friends nor
public static member functions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wnon-virtual-dtor</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when a class appears to be polymorphic, thereby requiring a virtual
destructor, yet it declares a non-virtual one.
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wreorder</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when the order of member initializers given in the code does not
match the order in which they must be executed.  For instance:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct A {
          int i;
          int j;
          A(): j (0), i (1) { }
        };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The compiler will rearrange the member initializers for <b>i</b>
and <b>j</b> to match the declaration order of the members, emitting
a warning to that effect.  This warning is enabled by <b>-Wall</b>.
</td></tr>
<!-- PP ends table -->
</table>
The following <b>-W...</b> options are not affected by <b>-Wall</b>.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-Weffc++</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about violations of the following style guidelines from Scott Meyers&#146;
<i>Effective C<font size="-2">++</font></i> book:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Item 11:  Define a copy constructor and an assignment operator for classes
with dynamically allocated memory.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Item 12:  Prefer initialization to assignment in constructors.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Item 14:  Make destructors virtual in base classes.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Item 15:  Have <tt>operator=</tt> return a reference to <tt>*this</tt>.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Item 23:  Don&#146;t try to return a reference when you must return an object.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Also warn about violations of the following style guidelines from
Scott Meyers&#146; <i>More Effective C<font size="-2">++</font></i> book:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Item 6:  Distinguish between prefix and postfix forms of increment and
decrement operators.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Item 7:  Never overload <tt>&&</tt>, <tt>||</tt>, or <tt>,</tt>.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
When selecting this option, be aware that the standard library
headers do not obey all of these guidelines; use <b>grep -v</b>
to filter out those warnings.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-deprecated</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Do not warn about usage of deprecated features. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wstrict-null-sentinel</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn also about the use of an uncasted <tt>NULL</tt> as sentinel.  When
compiling only with <font size="-1">GCC</font> this is a valid sentinel, as <tt>NULL</tt> is defined
to <tt>__null</tt>.  Although it is a null pointer constant not a null pointer,
it is guaranteed to of the same size as a pointer.  But this use is
not portable across different compilers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-non-template-friend</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Disable warnings when non-templatized friend functions are declared
within a template.  Since the advent of explicit template specification
support in G++, if the name of the friend is an unqualified-id (i.e.,
<b>friend foo(int)</b>), the C<font size="-2">++</font> language specification demands that the
friend declare or define an ordinary, nontemplate function.  (Section
14.5.3).  Before G++ implemented explicit specification, unqualified-ids
could be interpreted as a particular specialization of a templatized
function.  Because this non-conforming behavior is no longer the default
behavior for G++, <b>-Wnon-template-friend</b> allows the compiler to
check existing code for potential trouble spots and is on by default.
This new compiler behavior can be turned off with
<b>-Wno-non-template-friend</b> which keeps the conformant compiler code
but disables the helpful warning.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wold-style-cast</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if an old-style (C-style) cast to a non-void type is used within
a C<font size="-2">++</font> program.  The new-style casts (<b>dynamic_cast</b>,
<b>static_cast</b>, <b>reinterpret_cast</b>, and <b>const_cast</b>) are
less vulnerable to unintended effects and much easier to search for.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Woverloaded-virtual</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when a function declaration hides virtual functions from a
base class.  For example, in:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct A {
          virtual void f();
        };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct B: public A {
          void f(int);
        };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
the <tt>A</tt> class version of <tt>f</tt> is hidden in <tt>B</tt>, and code
like:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        B* b;
        b-&gt;f();
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
will fail to compile.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-pmf-conversions</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Disable the diagnostic for converting a bound pointer to member function
to a plain pointer.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wsign-promo</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when overload resolution chooses a promotion from unsigned or
enumerated type to a signed type, over a conversion to an unsigned type of
the same size.  Previous versions of G++ would try to preserve
unsignedness, but the standard mandates the current behavior.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct A {
          operator int ();
          A& operator = (int);
        };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        main ()
        {
          A a,b;
          a = b;
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
In this example, G++ will synthesize a default <b>A& operator =
(const A&);</b>, while cfront will use the user-defined <b>operator =</b>.
</td></tr>
</table>
<h1 class="manpages">Options Controlling Objective-C and Objective-C<font size="-2">++</font> Dialects</h1>
<!-- ignored unsupported tag .tm -->
(<font size="-1">NOTE:</font> This manual does not describe the Objective-C and Objective-C<font size="-2">++</font>
languages themselves.  See
<p>
This section describes the command-line options that are only meaningful
for Objective-C and Objective-C<font size="-2">++</font> programs, but you can also use most of
the language-independent <font size="-1">GNU</font> compiler options.
For example, you might compile a file <tt>some_class.m</tt> like this:
<p>
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        gcc -g -fgnu-runtime -O -c some_class.m
</tt></pre></td></tr>
</table>
<p>
In this example, <b>-fgnu-runtime</b> is an option meant only for
Objective-C and Objective-C<font size="-2">++</font> programs; you can use the other options with
any language supported by <font size="-1">GCC</font>.
<p>
Note that since Objective-C is an extension of the C language, Objective-C
compilations may also use options specific to the C front-end (e.g.,
<b>-Wtraditional</b>).  Similarly, Objective-C<font size="-2">++</font> compilations may use
C<font size="-2">++</font>-specific options (e.g., <b>-Wabi</b>).
<p>
Here is a list of options that are <i>only</i> for compiling Objective-C
and Objective-C<font size="-2">++</font> programs:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-fconstant-string-class=</b><i>class-name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <i>class-name</i> as the name of the class to instantiate for each
literal string specified with the syntax <tt>@"..."</tt>.  The default
class name is <tt>NXConstantString</tt> if the <font size="-1">GNU</font> runtime is being used, and
<tt>NSConstantString</tt> if the NeXT runtime is being used (see below).  The
<b>-fconstant-cfstrings</b> option, if also present, will override the
<b>-fconstant-string-class</b> setting and cause <tt>@"..."</tt> literals
to be laid out as constant CoreFoundation strings.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fgnu-runtime</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate object code compatible with the standard <font size="-1">GNU</font> Objective-C
runtime.  This is the default for most types of systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fnext-runtime</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output compatible with the NeXT runtime.  This is the default
for NeXT-based systems, including Darwin and Mac <font size="-1">OS</font> X.  The macro
<tt>__NEXT_RUNTIME__</tt> is predefined if (and only if) this option is
used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-nil-receivers</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that all Objective-C message dispatches (e.g.,
<tt>[receiver message:arg]</tt>) in this translation unit ensure that the receiver
is not <tt>nil</tt>.  This allows for more efficient entry points in the runtime
to be used.  Currently, this option is only available in conjunction with
the NeXT runtime on Mac <font size="-1">OS</font> X 10.3 and later.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fobjc-call-cxx-cdtors</b>
</td><td>
<!-- ignored unsupported tag .tm -->
For each Objective-C class, check if any of its instance variables is a
C<font size="-2">++</font> object with a non-trivial default constructor.  If so, synthesize a
special <tt>- (id) .cxx_construct</tt> instance method that will run
non-trivial default constructors on any such instance variables, in order,
and then return <tt>self</tt>.  Similarly, check if any instance variable
is a C<font size="-2">++</font> object with a non-trivial destructor, and if so, synthesize a
special <tt>- (void) .cxx_destruct</tt> method that will run
all such default destructors, in reverse order.
<p>
<!-- ignored unsupported tag .if -->
The <tt>- (id) .cxx_construct</tt> and/or <tt>- (void) .cxx_destruct</tt> methods
thusly generated will only operate on instance variables declared in the
current Objective-C class, and not those inherited from superclasses.  It
is the responsibility of the Objective-C runtime to invoke all such methods
in an object&#146;s inheritance hierarchy.  The <tt>- (id) .cxx_construct</tt> methods
will be invoked by the runtime immediately after a new object
instance is allocated; the <tt>- (void) .cxx_destruct</tt> methods will
be invoked immediately before the runtime deallocates an object instance.
<p>
<!-- ignored unsupported tag .if -->
As of this writing, only the NeXT runtime on Mac <font size="-1">OS</font> X 10.4 and later has
support for invoking the <tt>- (id) .cxx_construct</tt> and
<tt>- (void) .cxx_destruct</tt> methods.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fobjc-direct-dispatch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow fast jumps to the message dispatcher.  On Darwin this is
accomplished via the comm page.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fobjc-exceptions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable syntactic support for structured exception handling in Objective-C,
similar to what is offered by C<font size="-2">++</font> and Java.  Currently, this option is only
available in conjunction with the NeXT runtime on Mac <font size="-1">OS</font> X 10.3 and later.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
          @try {
            ...
               @throw expr;
            ...
          }
          @catch (AnObjCClass *exc) {
            ...
              @throw expr;
            ...
              @throw;
            ...
          }
          @catch (AnotherClass *exc) {
            ...
          }
          @catch (id allOthers) {
            ...
          }
          @finally {
            ...
              @throw expr;
            ...
          }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The <tt>@throw</tt> statement may appear anywhere in an Objective-C or
Objective-C<font size="-2">++</font> program; when used inside of a <tt>@catch</tt> block, the
<tt>@throw</tt> may appear without an argument (as shown above), in which case
the object caught by the <tt>@catch</tt> will be rethrown.
<p>
<!-- ignored unsupported tag .if -->
Note that only (pointers to) Objective-C objects may be thrown and
caught using this scheme.  When an object is thrown, it will be caught
by the nearest <tt>@catch</tt> clause capable of handling objects of that type,
analogously to how <tt>catch</tt> blocks work in C<font size="-2">++</font> and Java.  A
<tt>@catch(id ...)</tt> clause (as shown above) may also be provided to catch
any and all Objective-C exceptions not caught by previous <tt>@catch</tt>
clauses (if any).
<p>
<!-- ignored unsupported tag .if -->
The <tt>@finally</tt> clause, if present, will be executed upon exit from the
immediately preceding <tt>@try ... @catch</tt> section.  This will happen
regardless of whether any exceptions are thrown, caught or rethrown
inside the <tt>@try ... @catch</tt> section, analogously to the behavior
of the <tt>finally</tt> clause in Java.
<p>
<!-- ignored unsupported tag .if -->
There are several caveats to using the new exception mechanism:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Although currently designed to be binary compatible with <tt>NS_HANDLER</tt>-style
idioms provided by the <tt>NSException</tt> class, the new
exceptions can only be used on Mac <font size="-1">OS</font> X 10.3 (Panther) and later
systems, due to additional functionality needed in the (NeXT) Objective-C
runtime.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
As mentioned above, the new exceptions do not support handling
types other than Objective-C objects.   Furthermore, when used from
Objective-C<font size="-2">++</font>, the Objective-C exception model does not interoperate with C<font size="-2">++</font>
exceptions at this time.  This means you cannot <tt>@throw</tt> an exception
from Objective-C and <tt>catch</tt> it in C<font size="-2">++</font>, or vice versa
(i.e., <tt>throw ... @catch</tt>).
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The <b>-fobjc-exceptions</b> switch also enables the use of synchronization
blocks for thread-safe execution:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
          @synchronized (ObjCClass *guard) {
            ...
          }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Upon entering the <tt>@synchronized</tt> block, a thread of execution shall
first check whether a lock has been placed on the corresponding <tt>guard</tt>
object by another thread.  If it has, the current thread shall wait until
the other thread relinquishes its lock.  Once <tt>guard</tt> becomes available,
the current thread will place its own lock on it, execute the code contained in
the <tt>@synchronized</tt> block, and finally relinquish the lock (thereby
making <tt>guard</tt> available to other threads).
<p>
<!-- ignored unsupported tag .if -->
Unlike Java, Objective-C does not allow for entire methods to be marked
<tt>@synchronized</tt>.  Note that throwing exceptions out of
<tt>@synchronized</tt> blocks is allowed, and will cause the guarding object
to be unlocked properly.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fobjc-gc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable garbage collection (<font size="-1">GC</font>) in Objective-C and Objective-C<font size="-2">++</font> programs.
</td></tr>
<tr valign="top"><td width=4%>
<b>-freplace-objc-classes</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit a special marker instructing <b></b><tt>ld</tt><b>(1)</b> not to statically link in
the resulting object file, and allow <b></b><tt>dyld</tt><b>(1)</b> to load it in at
run time instead.  This is used in conjunction with the Fix-and-Continue
debugging mode, where the object file in question may be recompiled and
dynamically reloaded in the course of program execution, without the need
to restart the program itself.  Currently, Fix-and-Continue functionality
is only available in conjunction with the NeXT runtime on Mac <font size="-1">OS</font> X 10.3
and later.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fzero-link</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When compiling for the NeXT runtime, the compiler ordinarily replaces calls
to <tt>objc_getClass("...")</tt> (when the name of the class is known at
compile time) with static class references that get initialized at load time,
which improves run-time performance.  Specifying the <b>-fzero-link</b> flag
suppresses this behavior and causes calls to <tt>objc_getClass("...")</tt>
to be retained.  This is useful in Zero-Link debugging mode, since it allows
for individual class implementations to be modified during program execution.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gen-decls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump interface declarations for all classes seen in the source file to a
file named <i></i><i>sourcename</i><i>.decl</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wassign-intercept</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever an Objective-C assignment is being intercepted by the
garbage collector.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-protocol</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If a class is declared to implement a protocol, a warning is issued for
every method in the protocol that is not implemented by the class.  The
default behavior is to issue a warning for every method not explicitly
implemented in the class, even if a method implementation is inherited
from the superclass.  If you use the <b>-Wno-protocol</b> option, then
methods inherited from the superclass are considered to be implemented,
and no warning is issued for them.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wselector</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if multiple methods of different types for the same selector are
found during compilation.  The check is performed on the list of methods
in the final stage of compilation.  Additionally, a check is performed
for each selector appearing in a <tt>@selector(...)</tt>
expression, and a corresponding method for that selector has been found
during compilation.  Because these checks scan the method table only at
the end of compilation, these warnings are not produced if the final
stage of compilation is not reached, for example because an error is
found during compilation, or because the <b>-fsyntax-only</b> option is
being used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wstrict-selector-match</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if multiple methods with differing argument and/or return types are
found for a given selector when attempting to send a message using this
selector to a receiver of type <tt>id</tt> or <tt>Class</tt>.  When this flag
is off (which is the default behavior), the compiler will omit such warnings
if any differences found are confined to types which share the same size
and alignment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wundeclared-selector</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a <tt>@selector(...)</tt> expression referring to an
undeclared selector is found.  A selector is considered undeclared if no
method with that name has been declared before the
<tt>@selector(...)</tt> expression, either explicitly in an
<tt>@interface</tt> or <tt>@protocol</tt> declaration, or implicitly in
an <tt>@implementation</tt> section.  This option always performs its
checks as soon as a <tt>@selector(...)</tt> expression is found,
while <b>-Wselector</b> only performs its checks in the final stage of
compilation.  This also enforces the coding style convention
that methods and selectors must be declared before being used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-print-objc-runtime-info</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate C header describing the largest structure that is passed by
value, if any.
</td></tr>
</table>
<h1 class="manpages">Options to Control Diagnostic Messages Formatting</h1>
<!-- ignored unsupported tag .tm -->
Traditionally, diagnostic messages have been formatted irrespective of
the output device&#146;s aspect (e.g. its width, ...).  The options described
below can be used to control the diagnostic messages formatting
algorithm, e.g. how many characters per line, how often source location
information should be reported.  Right now, only the C<font size="-2">++</font> front end can
honor these options.  However it is expected, in the near future, that
the remaining front ends would be able to digest them correctly.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-fmessage-length=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Try to format error messages so that they fit on lines of about <i>n</i>
characters.  The default is 72 characters for <b>g++</b> and 0 for the rest of
the front ends supported by <font size="-1">GCC</font>.  If <i>n</i> is zero, then no
line-wrapping will be done; each error message will appear on a single
line.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdiagnostics-show-location=once</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Only meaningful in line-wrapping mode.  Instructs the diagnostic messages
reporter to emit <i>once</i> source location information; that is, in
case the message is too long to fit on a single physical line and has to
be wrapped, the source location won&#146;t be emitted (as prefix) again,
over and over, in subsequent continuation lines.  This is the default
behavior.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdiagnostics-show-location=every-line</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Only meaningful in line-wrapping mode.  Instructs the diagnostic
messages reporter to emit the same source location information (as
prefix) for physical lines that result from the process of breaking
a message which is too long to fit on a single line.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdiagnostics-show-options</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option instructs the diagnostic machinery to add text to each
diagnostic emitted, which indicates which command line option directly
controls that diagnostic, when such an option is known to the
diagnostic machinery.
</td></tr>
</table>
<h1 class="manpages">Options to Request or Suppress Warnings</h1>
<!-- ignored unsupported tag .tm -->
Warnings are diagnostic messages that report constructions which
are not inherently erroneous but which are risky or suggest there
may have been an error.
<p>
You can request many specific warnings with options beginning <b>-W</b>,
for example <b>-Wimplicit</b> to request warnings on implicit
declarations.  Each of these specific warning options also has a
negative form beginning <b>-Wno-</b> to turn off warnings;
for example, <b>-Wno-implicit</b>.  This manual lists only one of the
two forms, whichever is not the default.
<p>
The following options control the amount and kinds of warnings produced
by <font size="-1">GCC</font>; for further, language-specific options also refer to
<b>C<font size="-2">++</font> Dialect Options</b> and <b>Objective-C and Objective-C<font size="-2">++</font> Dialect
Options</b>.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-fsyntax-only</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Check the code for syntax errors, but don&#146;t do anything beyond that.
</td></tr>
<tr valign="top"><td width=4%>
<b>-pedantic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Issue all the warnings demanded by strict <font size="-1">ISO</font> C and <font size="-1">ISO</font> C<font size="-2">++</font>;
reject all programs that use forbidden extensions, and some other
programs that do not follow <font size="-1">ISO</font> C and <font size="-1">ISO</font> C<font size="-2">++</font>.  For <font size="-1">ISO</font> C, follows the
version of the <font size="-1">ISO</font> C standard specified by any <b>-std</b> option used.
<p>
<!-- ignored unsupported tag .if -->
Valid <font size="-1">ISO</font> C and <font size="-1">ISO</font> C<font size="-2">++</font> programs should compile properly with or without
this option (though a rare few will require <b>-ansi</b> or a
<b>-std</b> option specifying the required version of <font size="-1">ISO</font> C).  However,
without this option, certain <font size="-1">GNU</font> extensions and traditional C and C<font size="-2">++</font>
features are supported as well.  With this option, they are rejected.
<p>
<!-- ignored unsupported tag .if -->
<b>-pedantic</b> does not cause warning messages for use of the
alternate keywords whose names begin and end with <b>__</b>.  Pedantic
warnings are also disabled in the expression that follows
<tt>__extension__</tt>.  However, only system header files should use
these escape routes; application programs should avoid them.
<p>
<!-- ignored unsupported tag .if -->
Some users try to use <b>-pedantic</b> to check programs for strict <font size="-1">ISO</font>
C conformance.  They soon find that it does not do quite what they want:
it finds some non-ISO practices, but not all---only those for which
<font size="-1">ISO</font> C <i>requires</i> a diagnostic, and some others for which
diagnostics have been added.
<p>
<!-- ignored unsupported tag .if -->
A feature to report any failure to conform to <font size="-1">ISO</font> C might be useful in
some instances, but would require considerable additional work and would
be quite different from <b>-pedantic</b>.  We don&#146;t have plans to
support such a feature in the near future.
<p>
<!-- ignored unsupported tag .if -->
Where the standard specified with <b>-std</b> represents a <font size="-1">GNU</font>
extended dialect of C, such as <b>gnu89</b> or <b>gnu99</b>, there is a
corresponding <i>base standard</i>, the version of <font size="-1">ISO</font> C on which the <font size="-1">GNU</font>
extended dialect is based.  Warnings from <b>-pedantic</b> are given
where they are required by the base standard.  (It would not make sense
for such warnings to be given only for features not in the specified <font size="-1">GNU</font>
C dialect, since by definition the <font size="-1">GNU</font> dialects of C include all
features the compiler supports with the given option, and there would be
nothing to warn about.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-pedantic-errors</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>-pedantic</b>, except that errors are produced rather than
warnings.
</td></tr>
<tr valign="top"><td width=4%>
<b>-w</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Inhibit all warning messages.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-import</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Inhibit warning messages about the use of <b>#import</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wchar-subscripts</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if an array subscript has type <tt>char</tt>.  This is a common cause
of error, as programmers often forget that this type is signed on some
machines.
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wcomment</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a comment-start sequence <b>/*</b> appears in a <b>/*</b>
comment, or whenever a Backslash-Newline appears in a <b>//</b> comment.
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wfatal-errors</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option causes the compiler to abort compilation on the first error
occurred rather than trying to keep going and printing further error
messages.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wformat</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Check calls to <tt>printf</tt> and <tt>scanf</tt>, etc., to make sure that
the arguments supplied have types appropriate to the format string
specified, and that the conversions specified in the format string make
sense.  This includes standard functions, and others specified by format
attributes, in the <tt>printf</tt>,
<tt>scanf</tt>, <tt>strftime</tt> and <tt>strfmon</tt> (an X/Open extension,
not in the C standard) families (or other target-specific families).
Which functions are checked without format attributes having been
specified depends on the standard version selected, and such checks of
functions without the attribute specified are disabled by
<b>-ffreestanding</b> or <b>-fno-builtin</b>.
<p>
<!-- ignored unsupported tag .if -->
The formats are checked against the format features supported by <font size="-1">GNU</font>
libc version 2.2.  These include all <font size="-1">ISO</font> C90 and C99 features, as well
as features from the Single Unix Specification and some <font size="-1">BSD</font> and <font size="-1">GNU</font>
extensions.  Other library implementations may not support all these
features; <font size="-1">GCC</font> does not support warning about features that go beyond a
particular library&#146;s limitations.  However, if <b>-pedantic</b> is used
with <b>-Wformat</b>, warnings will be given about format features not
in the selected standard version (but not for <tt>strfmon</tt> formats,
since those are not in any version of the C standard). 
<p>
<!-- ignored unsupported tag .if -->
Since <b>-Wformat</b> also checks for null format arguments for
several functions, <b>-Wformat</b> also implies <b>-Wnonnull</b>.
<p>
<!-- ignored unsupported tag .if -->
<b>-Wformat</b> is included in <b>-Wall</b>.  For more control over some
aspects of format checking, the options <b>-Wformat-y2k</b>,
<b>-Wno-format-extra-args</b>, <b>-Wno-format-zero-length</b>,
<b>-Wformat-nonliteral</b>, <b>-Wformat-security</b>, and
<b>-Wformat=2</b> are available, but are not included in <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wformat-y2k</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If <b>-Wformat</b> is specified, also warn about <tt>strftime</tt>
formats which may yield only a two-digit year.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-format-extra-args</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If <b>-Wformat</b> is specified, do not warn about excess arguments to a
<tt>printf</tt> or <tt>scanf</tt> format function.  The C standard specifies
that such arguments are ignored.
<p>
<!-- ignored unsupported tag .if -->
Where the unused arguments lie between used arguments that are
specified with <b>$</b> operand number specifications, normally
warnings are still given, since the implementation could not know what
type to pass to <tt>va_arg</tt> to skip the unused arguments.  However,
in the case of <tt>scanf</tt> formats, this option will suppress the
warning if the unused arguments are all pointers, since the Single
Unix Specification says that such unused arguments are allowed.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-format-zero-length</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If <b>-Wformat</b> is specified, do not warn about zero-length formats.
The C standard specifies that zero-length formats are allowed.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wformat-nonliteral</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If <b>-Wformat</b> is specified, also warn if the format string is not a
string literal and so cannot be checked, unless the format function
takes its format arguments as a <tt>va_list</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wformat-security</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If <b>-Wformat</b> is specified, also warn about uses of format
functions that represent possible security problems.  At present, this
warns about calls to <tt>printf</tt> and <tt>scanf</tt> functions where the
format string is not a string literal and there are no format arguments,
as in <tt>printf (foo);</tt>.  This may be a security hole if the format
string came from untrusted input and contains <b>%n</b>.  (This is
currently a subset of what <b>-Wformat-nonliteral</b> warns about, but
in future warnings may be added to <b>-Wformat-security</b> that are not
included in <b>-Wformat-nonliteral</b>.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wformat=2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable <b>-Wformat</b> plus format checks not included in
<b>-Wformat</b>.  Currently equivalent to <b>-Wformat
-Wformat-nonliteral -Wformat-security -Wformat-y2k</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wnonnull</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about passing a null pointer for arguments marked as
requiring a non-null value by the <tt>nonnull</tt> function attribute.
<p>
<!-- ignored unsupported tag .if -->
<b>-Wnonnull</b> is included in <b>-Wall</b> and <b>-Wformat</b>.  It
can be disabled with the <b>-Wno-nonnull</b> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Winit-self</b> (C, C<font size="-2">++</font>, Objective-C and Objective-C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about uninitialized variables which are initialized with themselves.
Note this option can only be used with the <b>-Wuninitialized</b> option,
which in turn only works with <b>-O1</b> and above.
<p>
<!-- ignored unsupported tag .if -->
For example, <font size="-1">GCC</font> will warn about <tt>i</tt> being uninitialized in the
following snippet only when <b>-Winit-self</b> has been specified:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        int f()
        {
          int i = i;
          return i;
        }
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wimplicit-int</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when a declaration does not specify a type.
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wimplicit-function-declaration</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-Werror-implicit-function-declaration</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Give a warning (or error) whenever a function is used before being
declared.  The form <b>-Wno-error-implicit-function-declaration</b>
is not supported.
This warning is enabled by <b>-Wall</b> (as a warning, not an error).
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wimplicit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Same as <b>-Wimplicit-int</b> and <b>-Wimplicit-function-declaration</b>.
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wmain</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if the type of <b>main</b> is suspicious.  <b>main</b> should be a
function with external linkage, returning int, taking either zero
arguments, two, or three arguments of appropriate types.
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wmissing-braces</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if an aggregate or union initializer is not fully bracketed.  In
the following example, the initializer for <b>a</b> is not fully
bracketed, but that for <b>b</b> is fully bracketed.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        int a[2][2] = { 0, 1, 2, 3 };
        int b[2][2] = { { 0, 1 }, { 2, 3 } };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wmissing-include-dirs</b> (C, C<font size="-2">++</font>, Objective-C and Objective-C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a user-supplied include directory does not exist.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wparentheses</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if parentheses are omitted in certain contexts, such
as when there is an assignment in a context where a truth value
is expected, or when operators are nested whose precedence people
often get confused about.  Only the warning for an assignment used as
a truth value is supported when compiling C<font size="-2">++</font>; the other warnings are
only supported when compiling C.
<p>
<!-- ignored unsupported tag .if -->
Also warn if a comparison like <b>x&lt;=y&lt;=z</b> appears; this is
equivalent to <b>(x&lt;=y ? 1 : 0) &lt;= z</b>, which is a different
interpretation from that of ordinary mathematical notation.
<p>
<!-- ignored unsupported tag .if -->
Also warn about constructions where there may be confusion to which
<tt>if</tt> statement an <tt>else</tt> branch belongs.  Here is an example of
such a case:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        {
          if (a)
            if (b)
              foo ();
          else
            bar ();
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
In C, every <tt>else</tt> branch belongs to the innermost possible <tt>if</tt>
statement, which in this example is <tt>if (b)</tt>.  This is often not
what the programmer expected, as illustrated in the above example by
indentation the programmer chose.  When there is the potential for this
confusion, <font size="-1">GCC</font> will issue a warning when this flag is specified.
To eliminate the warning, add explicit braces around the innermost
<tt>if</tt> statement so there is no way the <tt>else</tt> could belong to
the enclosing <tt>if</tt>.  The resulting code would look like this:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        {
          if (a)
            {
              if (b)
                foo ();
              else
                bar ();
            }
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wsequence-point</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about code that may have undefined semantics because of violations
of sequence point rules in the C standard.
<p>
<!-- ignored unsupported tag .if -->
The C standard defines the order in which expressions in a C program are
evaluated in terms of <i>sequence points</i>, which represent a partial
ordering between the execution of parts of the program: those executed
before the sequence point, and those executed after it.  These occur
after the evaluation of a full expression (one which is not part of a
larger expression), after the evaluation of the first operand of a
<tt>&&</tt>, <tt>||</tt>, <tt>? :</tt> or <tt>,</tt> (comma) operator, before a
function is called (but after the evaluation of its arguments and the
expression denoting the called function), and in certain other places.
Other than as expressed by the sequence point rules, the order of
evaluation of subexpressions of an expression is not specified.  All
these rules describe only a partial order rather than a total order,
since, for example, if two functions are called within one expression
with no sequence point between them, the order in which the functions
are called is not specified.  However, the standards committee have
ruled that function calls do not overlap.
<p>
<!-- ignored unsupported tag .if -->
It is not specified when between sequence points modifications to the
values of objects take effect.  Programs whose behavior depends on this
have undefined behavior; the C standard specifies that Between the
previous and next sequence point an object shall have its stored value
modified at most once by the evaluation of an expression.  Furthermore,
the prior value shall be read only to determine the value to be
stored..  If a program breaks these rules, the results on any
particular implementation are entirely unpredictable.
<p>
<!-- ignored unsupported tag .if -->
Examples of code with undefined behavior are <tt>a = a++;</tt>, <tt>a[n]
= b[n++]</tt> and <tt>a[i++] = i;</tt>.  Some more complicated cases are not
diagnosed by this option, and it may give an occasional false positive
result, but in general it has been found fairly effective at detecting
this sort of problem in programs.
<p>
<!-- ignored unsupported tag .if -->
The present implementation of this option only works for C programs.  A
future implementation may also work for C<font size="-2">++</font> programs.
<p>
<!-- ignored unsupported tag .if -->
The C standard is worded confusingly, therefore there is some debate
over the precise meaning of the sequence point rules in subtle cases.
Links to discussions of the problem, including proposed formal
definitions, may be found on the <font size="-1">GCC</font> readings page, at
&lt;<b><a href="http://gcc.gnu.org/readings.html">http://gcc.gnu.org/readings.html</a></b>&gt;.
<p>
<!-- ignored unsupported tag .if -->
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wreturn-type</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a function is defined with a return-type that defaults to
<tt>int</tt>.  Also warn about any <tt>return</tt> statement with no
return-value in a function whose return-type is not <tt>void</tt>.
<p>
<!-- ignored unsupported tag .if -->
For C, also warn if the return type of a function has a type qualifier
such as <tt>const</tt>.  Such a type qualifier has no effect, since the
value returned by a function is not an lvalue.  <font size="-1">ISO</font> C prohibits
qualified <tt>void</tt> return types on function definitions, so such
return types always receive a warning even without this option.
<p>
<!-- ignored unsupported tag .if -->
For C<font size="-2">++</font>, a function without return type always produces a diagnostic
message, even when <b>-Wno-return-type</b> is specified.  The only
exceptions are <b>main</b> and functions defined in system headers.
<p>
<!-- ignored unsupported tag .if -->
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wswitch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a <tt>switch</tt> statement has an index of enumerated type
and lacks a <tt>case</tt> for one or more of the named codes of that
enumeration.  (The presence of a <tt>default</tt> label prevents this
warning.)  <tt>case</tt> labels outside the enumeration range also
provoke warnings when this option is used.
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wswitch-default</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a <tt>switch</tt> statement does not have a <tt>default</tt>
case.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wswitch-enum</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a <tt>switch</tt> statement has an index of enumerated type
and lacks a <tt>case</tt> for one or more of the named codes of that
enumeration.  <tt>case</tt> labels outside the enumeration range also
provoke warnings when this option is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wtrigraphs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if any trigraphs are encountered that might change the meaning of
the program (trigraphs within comments are not warned about).
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunused-function</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a static function is declared but not defined or a
non-inline static function is unused.
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunused-label</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a label is declared but not used.
This warning is enabled by <b>-Wall</b>.
<p>
<!-- ignored unsupported tag .if -->
To suppress this warning use the <b>unused</b> attribute.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunused-parameter</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a function parameter is unused aside from its declaration.
<p>
<!-- ignored unsupported tag .if -->
To suppress this warning use the <b>unused</b> attribute.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunused-variable</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a local variable or non-constant static variable is unused
aside from its declaration.
This warning is enabled by <b>-Wall</b>.
<p>
<!-- ignored unsupported tag .if -->
To suppress this warning use the <b>unused</b> attribute.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunused-value</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a statement computes a result that is explicitly not used.
This warning is enabled by <b>-Wall</b>.
<p>
<!-- ignored unsupported tag .if -->
To suppress this warning cast the expression to <b>void</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunused</b>
</td><td>
<!-- ignored unsupported tag .tm -->
All the above <b>-Wunused</b> options combined.
<p>
<!-- ignored unsupported tag .if -->
In order to get a warning about an unused function parameter, you must
either specify <b>-Wextra -Wunused</b> (note that <b>-Wall</b> implies
<b>-Wunused</b>), or separately specify <b>-Wunused-parameter</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wuninitialized</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if an automatic variable is used without first being initialized or
if a variable may be clobbered by a <tt>setjmp</tt> call.
<p>
<!-- ignored unsupported tag .if -->
These warnings are possible only in optimizing compilation,
because they require data flow information that is computed only
when optimizing.  If you don&#146;t specify <b>-O</b>, you simply won&#146;t
get these warnings.
<p>
<!-- ignored unsupported tag .if -->
If you want to warn about code which uses the uninitialized value of the
variable in its own initializer, use the <b>-Winit-self</b> option.
<p>
<!-- ignored unsupported tag .if -->
These warnings occur for individual uninitialized or clobbered
elements of structure, union or array variables as well as for
variables which are uninitialized or clobbered as a whole.  They do
not occur for variables or elements declared <tt>volatile</tt>.  Because
these warnings depend on optimization, the exact variables or elements
for which there are warnings will depend on the precise optimization
options and version of <font size="-1">GCC</font> used.
<p>
<!-- ignored unsupported tag .if -->
Note that there may be no warning about a variable that is used only
to compute a value that itself is never used, because such
computations may be deleted by data flow analysis before the warnings
are printed.
<p>
<!-- ignored unsupported tag .if -->
These warnings are made optional because <font size="-1">GCC</font> is not smart
enough to see all the reasons why the code might be correct
despite appearing to have an error.  Here is one example of how
this can happen:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        {
          int x;
          switch (y)
            {
            case 1: x = 1;
              break;
            case 2: x = 4;
              break;
            case 3: x = 5;
            }
          foo (x);
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
If the value of <tt>y</tt> is always 1, 2 or 3, then <tt>x</tt> is
always initialized, but <font size="-1">GCC</font> doesn&#146;t know this.  Here is
another common case:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        {
          int save_y;
          if (change_y) save_y = y, y = new_y;
          ...
          if (change_y) y = save_y;
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
This has no bug because <tt>save_y</tt> is used only if it is set.
<p>
<!-- ignored unsupported tag .if -->
This option also warns when a non-volatile automatic variable might be
changed by a call to <tt>longjmp</tt>.  These warnings as well are possible
only in optimizing compilation.
<p>
<!-- ignored unsupported tag .if -->
The compiler sees only the calls to <tt>setjmp</tt>.  It cannot know
where <tt>longjmp</tt> will be called; in fact, a signal handler could
call it at any point in the code.  As a result, you may get a warning
even when there is in fact no problem because <tt>longjmp</tt> cannot
in fact be called at the place which would cause a problem.
<p>
<!-- ignored unsupported tag .if -->
Some spurious warnings can be avoided if you declare all the functions
you use that never return as <tt>noreturn</tt>. 
<p>
<!-- ignored unsupported tag .if -->
This warning is enabled by <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunknown-pragmas</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when a #pragma directive is encountered which is not understood by
<font size="-1">GCC</font>.  If this command line option is used, warnings will even be issued
for unknown pragmas in system header files.  This is not the case if
the warnings were only enabled by the <b>-Wall</b> command line option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-pragmas</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not warn about misuses of pragmas, such as incorrect parameters,
invalid syntax, or conflicts between pragmas.  See also
<b>-Wunknown-pragmas</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wstrict-aliasing</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is only active when <b>-fstrict-aliasing</b> is active.
It warns about code which might break the strict aliasing rules that the
compiler is using for optimization.  The warning does not catch all
cases, but does attempt to catch the more common pitfalls.  It is
included in <b>-Wall</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wstrict-aliasing=2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is only active when <b>-fstrict-aliasing</b> is active.
It warns about code which might break the strict aliasing rules that the
compiler is using for optimization.  This warning catches more cases than
<b>-Wstrict-aliasing</b>, but it will also give a warning for some ambiguous
cases that are safe.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wall</b>
</td><td>
<!-- ignored unsupported tag .tm -->
All of the above <b>-W</b> options combined.  This enables all the
warnings about constructions that some users consider questionable, and
that are easy to avoid (or modify to prevent the warning), even in
conjunction with macros.  This also enables some language-specific
warnings described in <b>C<font size="-2">++</font> Dialect Options</b> and
<b>Objective-C and Objective-C<font size="-2">++</font> Dialect Options</b>.
</td></tr>
<!-- PP ends table -->
</table>
The following <b>-W...</b> options are not implied by <b>-Wall</b>.
Some of them warn about constructions that users generally do not
consider questionable, but which occasionally you might wish to check
for; others warn about constructions that are necessary or hard to avoid
in some cases, and there is no simple way to modify the code to suppress
the warning.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-Wextra</b>
</td><td>
<!-- ignored unsupported tag .tm -->
(This option used to be called <b>-W</b>.  The older name is still
supported, but the newer name is more descriptive.)  Print extra warning
messages for these events:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A function can return either with or without a value.  (Falling
off the end of the function body is considered returning without
a value.)  For example, this function would evoke such a
warning:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        foo (a)
        {
          if (a &gt; 0)
            return a;
        }
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
An expression-statement or the left-hand side of a comma expression
contains no side effects.
To suppress the warning, cast the unused expression to void.
For example, an expression such as <b>x[i,j]</b> will cause a warning,
but <b>x[(void)i,j]</b> will not.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
An unsigned value is compared against zero with <b>&lt;</b> or <b>&gt;=</b>.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Storage-class specifiers like <tt>static</tt> are not the first things in
a declaration.  According to the C Standard, this usage is obsolescent.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
If <b>-Wall</b> or <b>-Wunused</b> is also specified, warn about unused
arguments.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A comparison between signed and unsigned values could produce an
incorrect result when the signed value is converted to unsigned.
(But don&#146;t warn if <b>-Wno-sign-compare</b> is also specified.)
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
An aggregate has an initializer which does not initialize all members.
This warning can be independently controlled by
<b>-Wmissing-field-initializers</b>.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A function parameter is declared without a type specifier in K&R-style
functions:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        void foo(bar) { }
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
An empty body occurs in an <b>if</b> or <b>else</b> statement.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A pointer is compared against integer zero with <b>&lt;</b>, <b>&lt;=</b>,
<b>&gt;</b>, or <b>&gt;=</b>.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A variable might be changed by <b>longjmp</b> or <b>vfork</b>.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Any of several floating-point events that often indicate errors, such as
overflow, underflow, loss of precision, etc.
</td></tr>
<tr valign="top"><td width=4%>
*&lt;(C<font size="-2">++</font> only)&gt;
</td><td>
<!-- ignored unsupported tag .tm -->
An enumerator and a non-enumerator both appear in a conditional expression.
</td></tr>
<tr valign="top"><td width=4%>
*&lt;(C<font size="-2">++</font> only)&gt;
</td><td>
<!-- ignored unsupported tag .tm -->
A non-static reference or non-static <b>const</b> member appears in a
class without constructors.
</td></tr>
<tr valign="top"><td width=4%>
*&lt;(C<font size="-2">++</font> only)&gt;
</td><td>
<!-- ignored unsupported tag .tm -->
Ambiguous virtual bases.
</td></tr>
<tr valign="top"><td width=4%>
*&lt;(C<font size="-2">++</font> only)&gt;
</td><td>
<!-- ignored unsupported tag .tm -->
Subscripting an array which has been declared <b>register</b>.
</td></tr>
<tr valign="top"><td width=4%>
*&lt;(C<font size="-2">++</font> only)&gt;
</td><td>
<!-- ignored unsupported tag .tm -->
Taking the address of a variable which has been declared <b>register</b>.
</td></tr>
<tr valign="top"><td width=4%>
*&lt;(C<font size="-2">++</font> only)&gt;
</td><td>
<!-- ignored unsupported tag .tm -->
A base class is not initialized in a derived class&#146; copy constructor.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-div-by-zero</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not warn about compile-time integer division by zero.  Floating point
division by zero is not warned about, as it can be a legitimate way of
obtaining infinities and NaNs.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wsystem-headers</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print warning messages for constructs found in system header files.
Warnings from system headers are normally suppressed, on the assumption
that they usually do not indicate real problems and would only make the
compiler output harder to read.  Using this command line option tells
<font size="-1">GCC</font> to emit warnings from system headers as if they occurred in user
code.  However, note that using <b>-Wall</b> in conjunction with this
option will <i>not</i> warn about unknown pragmas in system
headers---for that, <b>-Wunknown-pragmas</b> must also be used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wfloat-equal</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if floating point values are used in equality comparisons.
<p>
<!-- ignored unsupported tag .if -->
The idea behind this is that sometimes it is convenient (for the
programmer) to consider floating-point values as approximations to
infinitely precise real numbers.  If you are doing this, then you need
to compute (by analyzing the code, or in some other way) the maximum or
likely maximum error that the computation introduces, and allow for it
when performing comparisons (and when producing output, but that&#146;s a
different problem).  In particular, instead of testing for equality, you
would check to see whether the two values have ranges that overlap; and
this is done with the relational operators, so equality comparisons are
probably mistaken.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wtraditional</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about certain constructs that behave differently in traditional and
<font size="-1">ISO</font> C.  Also warn about <font size="-1">ISO</font> C constructs that have no traditional C
equivalent, and/or problematic constructs which should be avoided.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Macro parameters that appear within string literals in the macro body.
In traditional C macro replacement takes place within string literals,
but does not in <font size="-1">ISO</font> C.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
In traditional C, some preprocessor directives did not exist.
Traditional preprocessors would only consider a line to be a directive
if the <b>#</b> appeared in column 1 on the line.  Therefore
<b>-Wtraditional</b> warns about directives that traditional C
understands but would ignore because the <b>#</b> does not appear as the
first character on the line.  It also suggests you hide directives like
<b>#pragma</b> not understood by traditional C by indenting them.  Some
traditional implementations would not recognize <b>#elif</b>, so it
suggests avoiding it altogether.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A function-like macro that appears without arguments.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
The unary plus operator.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
The <b>U</b> integer constant suffix, or the <b>F</b> or <b>L</b> floating point
constant suffixes.  (Traditional C does support the <b>L</b> suffix on integer
constants.)  Note, these suffixes appear in macros defined in the system
headers of most modern systems, e.g. the <b>_MIN</b>/<b>_MAX</b> macros in <tt>&lt;limits.h&gt;</tt>.
Use of these macros in user code might normally lead to spurious
warnings, however <font size="-1">GCC</font>&#146;s integrated preprocessor has enough context to
avoid warning in these cases.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A function declared external in one block and then used after the end of
the block.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A <tt>switch</tt> statement has an operand of type <tt>long</tt>.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
A non-<tt>static</tt> function declaration follows a <tt>static</tt> one.
This construct is not accepted by some traditional C compilers.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
The <font size="-1">ISO</font> type of an integer constant has a different width or
signedness from its traditional type.  This warning is only issued if
the base of the constant is ten.  I.e. hexadecimal or octal values, which
typically represent bit patterns, are not warned about.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Usage of <font size="-1">ISO</font> string concatenation is detected.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Initialization of automatic aggregates.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Identifier conflicts with labels.  Traditional C lacks a separate
namespace for labels.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Initialization of unions.  If the initializer is zero, the warning is
omitted.  This is done under the assumption that the zero initializer in
user code appears conditioned on e.g. <tt>__STDC__</tt> to avoid missing
initializer warnings and relies on default initialization to zero in the
traditional C case.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Conversions by prototypes between fixed/floating point values and vice
versa.  The absence of these prototypes when compiling with traditional
C would cause serious problems.  This is a subset of the possible
conversion warnings, for the full set use <b>-Wconversion</b>.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Use of <font size="-1">ISO</font> C style function definitions.  This warning intentionally is
<i>not</i> issued for prototype declarations or variadic functions
because these <font size="-1">ISO</font> C features will appear in your code when using
libiberty&#146;s traditional C compatibility macros, <tt>PARAMS</tt> and
<tt>VPARAMS</tt>.  This warning is also bypassed for nested functions
because that feature is already a <font size="-1">GCC</font> extension and thus not relevant to
traditional C compatibility.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wdeclaration-after-statement</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when a declaration is found after a statement in a block.  This
construct, known from C<font size="-2">++</font>, was introduced with <font size="-1">ISO</font> C99 and is by default
allowed in <font size="-1">GCC</font>.  It is not supported by <font size="-1">ISO</font> C90 and was not supported by
<font size="-1">GCC</font> versions before <font size="-1">GCC</font> 3.0. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wundef</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if an undefined identifier is evaluated in an <b>#if</b> directive.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-endif-labels</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not warn whenever an <b>#else</b> or an <b>#endif</b> are followed by text.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wshadow</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a local variable shadows another local variable, parameter or
global variable or whenever a built-in function is shadowed.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wlarger-than-</b><i>len</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever an object of larger than <i>len</i> bytes is defined.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunsafe-loop-optimizations</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if the loop cannot be optimized because the compiler could not
assume anything on the bounds of the loop indices.  With
<b>-funsafe-loop-optimizations</b> warn if the compiler made
such assumptions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wpointer-arith</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about anything that depends on the size of a function type or
of <tt>void</tt>.  <font size="-1">GNU</font> C assigns these types a size of 1, for
convenience in calculations with <tt>void *</tt> pointers and pointers
to functions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wbad-function-cast</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a function call is cast to a non-matching type.
For example, warn if <tt>int malloc()</tt> is cast to <tt>anything *</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wc++-compat</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about <font size="-1">ISO</font> C constructs that are outside of the common subset of
<font size="-1">ISO</font> C and <font size="-1">ISO</font> C<font size="-2">++</font>, e.g. request for implicit conversion from
<tt>void *</tt> to a pointer to non-<tt>void</tt> type.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wcast-qual</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a pointer is cast so as to remove a type qualifier from
the target type.  For example, warn if a <tt>const char *</tt> is cast
to an ordinary <tt>char *</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wcast-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a pointer is cast such that the required alignment of the
target is increased.  For example, warn if a <tt>char *</tt> is cast to
an <tt>int *</tt> on machines where integers can only be accessed at
two- or four-byte boundaries.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wwrite-strings</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When compiling C, give string constants the type <tt>const
char[</tt><tt>length</tt><tt>]</tt> so that
copying the address of one into a non-<tt>const</tt> <tt>char *</tt>
pointer will get a warning; when compiling C<font size="-2">++</font>, warn about the
deprecated conversion from string constants to <tt>char *</tt>.
These warnings will help you find at
compile time code that can try to write into a string constant, but
only if you have been very careful about using <tt>const</tt> in
declarations and prototypes.  Otherwise, it will just be a nuisance;
this is why we did not make <b>-Wall</b> request these warnings.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wconversion</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a prototype causes a type conversion that is different from what
would happen to the same argument in the absence of a prototype.  This
includes conversions of fixed point to floating and vice versa, and
conversions changing the width or signedness of a fixed point argument
except when the same as the default promotion.
<p>
<!-- ignored unsupported tag .if -->
Also, warn if a negative integer constant expression is implicitly
converted to an unsigned type.  For example, warn about the assignment
<tt>x = -1</tt> if <tt>x</tt> is unsigned.  But do not warn about explicit
casts like <tt>(unsigned) -1</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wsign-compare</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when a comparison between signed and unsigned values could produce
an incorrect result when the signed value is converted to unsigned.
This warning is also enabled by <b>-Wextra</b>; to get the other warnings
of <b>-Wextra</b> without this warning, use <b>-Wextra -Wno-sign-compare</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Waggregate-return</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if any functions that return structures or unions are defined or
called.  (In languages where you can return an array, this also elicits
a warning.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-attributes</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not warn if an unexpected <tt>__attribute__</tt> is used, such as
unrecognized attributes, function attributes applied to variables,
etc.  This will not stop errors for incorrect use of supported
attributes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wstrict-prototypes</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a function is declared or defined without specifying the
argument types.  (An old-style function definition is permitted without
a warning if preceded by a declaration which specifies the argument
types.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wold-style-definition</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if an old-style function definition is used.  A warning is given
even if there is a previous prototype.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wmissing-prototypes</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a global function is defined without a previous prototype
declaration.  This warning is issued even if the definition itself
provides a prototype.  The aim is to detect global functions that fail
to be declared in header files.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wmissing-declarations</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a global function is defined without a previous declaration.
Do so even if the definition itself provides a prototype.
Use this option to detect global functions that are not declared in
header files.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wmissing-field-initializers</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a structure&#146;s initializer has some fields missing.  For
example, the following code would cause such a warning, because
<tt>x.h</tt> is implicitly zero:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct s { int f, g, h; };
        struct s x = { 3, 4 };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
This option does not warn about designated initializers, so the following
modification would not trigger a warning:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct s { int f, g, h; };
        struct s x = { .f = 3, .g = 4 };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
This warning is included in <b>-Wextra</b>.  To get other <b>-Wextra</b>
warnings without this one, use <b>-Wextra -Wno-missing-field-initializers</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wmissing-noreturn</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about functions which might be candidates for attribute <tt>noreturn</tt>.
Note these are only possible candidates, not absolute ones.  Care should
be taken to manually verify functions actually do not ever return before
adding the <tt>noreturn</tt> attribute, otherwise subtle code generation
bugs could be introduced.  You will not get a warning for <tt>main</tt> in
hosted C environments.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wmissing-format-attribute</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about function pointers which might be candidates for <tt>format</tt>
attributes.  Note these are only possible candidates, not absolute ones.
<font size="-1">GCC</font> will guess that function pointers with <tt>format</tt> attributes that
are used in assignment, initialization, parameter passing or return
statements should have a corresponding <tt>format</tt> attribute in the
resulting type.  I.e. the left-hand side of the assignment or
initialization, the type of the parameter variable, or the return type
of the containing function respectively should also have a <tt>format</tt>
attribute to avoid the warning.
<p>
<!-- ignored unsupported tag .if -->
<font size="-1">GCC</font> will also warn about function definitions which might be
candidates for <tt>format</tt> attributes.  Again, these are only
possible candidates.  <font size="-1">GCC</font> will guess that <tt>format</tt> attributes
might be appropriate for any function that calls a function like
<tt>vprintf</tt> or <tt>vscanf</tt>, but this might not always be the
case, and some functions for which <tt>format</tt> attributes are
appropriate may not be detected.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-multichar</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not warn if a multicharacter constant (<b>&#146;<font size="-1">FOOF</font>&#146;</b>) is used.
Usually they indicate a typo in the user&#146;s code, as they have
implementation-defined values, and should not be used in portable code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wnormalized=&lt;none|id|nfc|nfkc&gt;</b>
</td><td>
<!-- ignored unsupported tag .tm -->
In <font size="-1">ISO</font> C and <font size="-1">ISO</font> C<font size="-2">++</font>, two identifiers are different if they are
different sequences of characters.  However, sometimes when characters
outside the basic <font size="-1">ASCII</font> character set are used, you can have two
different character sequences that look the same.  To avoid confusion,
the <font size="-1">ISO</font> 10646 standard sets out some <i>normalization rules</i> which
when applied ensure that two sequences that look the same are turned into
the same sequence.  <font size="-1">GCC</font> can warn you if you are using identifiers which
have not been normalized; this option controls that warning.
<p>
<!-- ignored unsupported tag .if -->
There are four levels of warning that <font size="-1">GCC</font> supports.  The default is
<b>-Wnormalized=nfc</b>, which warns about any identifier which is
not in the <font size="-1">ISO</font> 10646 C normalized form, <i><font size="-1">NFC</font></i>.  <font size="-1">NFC</font> is the
recommended form for most uses.
<p>
<!-- ignored unsupported tag .if -->
Unfortunately, there are some characters which <font size="-1">ISO</font> C and <font size="-1">ISO</font> C<font size="-2">++</font> allow
in identifiers that when turned into <font size="-1">NFC</font> aren&#146;t allowable as
identifiers.  That is, there&#146;s no way to use these symbols in portable
<font size="-1">ISO</font> C or C<font size="-2">++</font> and have all your identifiers in <font size="-1">NFC</font>.
<b>-Wnormalized=id</b> suppresses the warning for these characters.
It is hoped that future versions of the standards involved will correct
this, which is why this option is not the default.
<p>
<!-- ignored unsupported tag .if -->
You can switch the warning off for all characters by writing
<b>-Wnormalized=none</b>.  You would only want to do this if you
were using some other normalization scheme (like D), because
otherwise you can easily create bugs that are literally impossible to see.
<p>
<!-- ignored unsupported tag .if -->
Some characters in <font size="-1">ISO</font> 10646 have distinct meanings but look identical
in some fonts or display methodologies, especially once formatting has
been applied.  For instance <tt>&#92;u207F</tt>, <font size="-1">SUPERSCRIPT</font> <font size="-1">LATIN</font> <font size="-1">SMALL</font>
<font size="-1">LETTER</font> N, will display just like a regular <tt>n</tt> which has been
placed in a superscript.  <font size="-1">ISO</font> 10646 defines the <i><font size="-1">NFKC</font></i>
normalisation scheme to convert all these into a standard form as
well, and <font size="-1">GCC</font> will warn if your code is not in <font size="-1">NFKC</font> if you use
<b>-Wnormalized=nfkc</b>.  This warning is comparable to warning
about every identifier that contains the letter O because it might be
confused with the digit 0, and so is not the default, but may be
useful as a local coding convention if the programming environment is
unable to be fixed to display these characters distinctly.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-deprecated-declarations</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not warn about uses of functions, variables, and types marked as
deprecated by using the <tt>deprecated</tt> attribute.
(@pxref{Function Attributes}, <tt>@pxref</tt>{Variable Attributes},
<tt>@pxref</tt>{Type Attributes}.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wpacked</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a structure is given the packed attribute, but the packed
attribute has no effect on the layout or size of the structure.
Such structures may be mis-aligned for little benefit.  For
instance, in this code, the variable <tt>f.x</tt> in <tt>struct bar</tt>
will be misaligned even though <tt>struct bar</tt> does not itself
have the packed attribute:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        struct foo {
          int x;
          char a, b, c, d;
        } __attribute__((packed));
        struct bar {
          char z;
          struct foo f;
        };
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wpadded</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if padding is included in a structure, either to align an element
of the structure or to align the whole structure.  Sometimes when this
happens it is possible to rearrange the fields of the structure to
reduce the padding and so make the structure smaller.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wredundant-decls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if anything is declared more than once in the same scope, even in
cases where multiple declaration is valid and changes nothing.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wnested-externs</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if an <tt>extern</tt> declaration is encountered within a function.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunreachable-code</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if the compiler detects that code will never be executed.
<p>
<!-- ignored unsupported tag .if -->
This option is intended to warn when the compiler detects that at
least a whole line of source code will never be executed, because
some condition is never satisfied or because it is after a
procedure that never returns.
<p>
<!-- ignored unsupported tag .if -->
It is possible for this option to produce a warning even though there
are circumstances under which part of the affected line can be executed,
so care should be taken when removing apparently-unreachable code.
<p>
<!-- ignored unsupported tag .if -->
For instance, when a function is inlined, a warning may mean that the
line is unreachable in only one inlined copy of the function.
<p>
<!-- ignored unsupported tag .if -->
This option is not made part of <b>-Wall</b> because in a debugging
version of a program there is often substantial code which checks
correct functioning of the program and is, hopefully, unreachable
because the program does work.  Another common use of unreachable
code is to provide behavior which is selectable at compile-time.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Winline</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a function can not be inlined and it was declared as inline.
Even with this option, the compiler will not warn about failures to
inline functions declared in system headers.
<p>
<!-- ignored unsupported tag .if -->
The compiler uses a variety of heuristics to determine whether or not
to inline a function.  For example, the compiler takes into account
the size of the function being inlined and the amount of inlining
that has already been done in the current function.  Therefore,
seemingly insignificant changes in the source program can cause the
warnings produced by <b>-Winline</b> to appear or disappear.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-invalid-offsetof</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Suppress warnings from applying the <b>offsetof</b> macro to a non-POD
type.  According to the 1998 <font size="-1">ISO</font> C<font size="-2">++</font> standard, applying <b>offsetof</b>
to a non-POD type is undefined.  In existing C<font size="-2">++</font> implementations,
however, <b>offsetof</b> typically gives meaningful results even when
applied to certain kinds of non-POD types. (Such as a simple
<b>struct</b> that fails to be a <font size="-1">POD</font> type only by virtue of having a
constructor.)  This flag is for users who are aware that they are
writing nonportable code and who have deliberately chosen to ignore the
warning about it.
<p>
<!-- ignored unsupported tag .if -->
The restrictions on <b>offsetof</b> may be relaxed in a future version
of the C<font size="-2">++</font> standard.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-int-to-pointer-cast</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Suppress warnings from casts to pointer type of an integer of a
different size.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wno-pointer-to-int-cast</b> (C only)
</td><td>
<!-- ignored unsupported tag .tm -->
Suppress warnings from casts from a pointer to an integer type of a
different size.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Winvalid-pch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a precompiled header is found in
the search path but can&#146;t be used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wlong-long</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if <b>long long</b> type is used.  This is default.  To inhibit
the warning messages, use <b>-Wno-long-long</b>.  Flags
<b>-Wlong-long</b> and <b>-Wno-long-long</b> are taken into account
only when <b>-pedantic</b> flag is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wvariadic-macros</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if variadic macros are used in pedantic <font size="-1">ISO</font> C90 mode, or the <font size="-1">GNU</font>
alternate syntax when in pedantic <font size="-1">ISO</font> C99 mode.  This is default.
To inhibit the warning messages, use <b>-Wno-variadic-macros</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wvolatile-register-var</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a register variable is declared volatile.  The volatile
modifier does not inhibit all optimizations that may eliminate reads
and/or writes to register variables.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wdisabled-optimization</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if a requested optimization pass is disabled.  This warning does
not generally indicate that there is anything wrong with your code; it
merely indicates that <font size="-1">GCC</font>&#146;s optimizers were unable to handle the code
effectively.  Often, the problem is that your code is too big or too
complex; <font size="-1">GCC</font> will refuse to optimize programs when the optimization
itself is likely to take inordinate amounts of time.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wpointer-sign</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn for pointer argument passing or assignment with different signedness.
This option is only supported for C and Objective-C.  It is implied by
<b>-Wall</b> and by <b>-pedantic</b>, which can be disabled with
<b>-Wno-pointer-sign</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Werror</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Make all warnings into errors.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wstack-protector</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is only active when <b>-fstack-protector</b> is active.  It
warns about functions that will not be protected against stack smashing.
</td></tr>
</table>
<h1 class="manpages">Options for Debugging Your Program or <font size="-1">GCC</font></h1>
<!-- ignored unsupported tag .tm -->
<font size="-1">GCC</font> has various special options that are used for debugging
either your program or <font size="-1">GCC:</font>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-g</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in the operating system&#146;s native format
(stabs, <font size="-1">COFF</font>, <font size="-1">XCOFF</font>, or <font size="-1">DWARF</font> 2).  <font size="-1">GDB</font> can work with this debugging
information.
<p>
<!-- ignored unsupported tag .if -->
On most systems that use stabs format, <b>-g</b> enables use of extra
debugging information that only <font size="-1">GDB</font> can use; this extra information
makes debugging work better in <font size="-1">GDB</font> but will probably make other debuggers
crash or
refuse to read the program.  If you want to control for certain whether
to generate the extra information, use <b>-gstabs+</b>, <b>-gstabs</b>,
<b>-gxcoff+</b>, <b>-gxcoff</b>, or <b>-gvms</b> (see below).
<p>
<!-- ignored unsupported tag .if -->
<font size="-1">GCC</font> allows you to use <b>-g</b> with
<b>-O</b>.  The shortcuts taken by optimized code may occasionally
produce surprising results: some variables you declared may not exist
at all; flow of control may briefly move where you did not expect it;
some statements may not be executed because they compute constant
results or their values were already at hand; some statements may
execute in different places because they were moved out of loops.
<p>
<!-- ignored unsupported tag .if -->
Nevertheless it proves possible to debug optimized output.  This makes
it reasonable to use the optimizer for programs that might have bugs.
<p>
<!-- ignored unsupported tag .if -->
The following options are useful when <font size="-1">GCC</font> is generated with the
capability for more than one debugging format.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ggdb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information for use by <font size="-1">GDB</font>.  This means to use the
most expressive format available (<font size="-1">DWARF</font> 2, stabs, or the native format
if neither of those are supported), including <font size="-1">GDB</font> extensions if at all
possible.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gstabs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in stabs format (if that is supported),
without <font size="-1">GDB</font> extensions.  This is the format used by <font size="-1">DBX</font> on most <font size="-1">BSD</font>
systems.  On <font size="-1">MIPS</font>, Alpha and System V Release 4 systems this option
produces stabs debugging output which is not understood by <font size="-1">DBX</font> or <font size="-1">SDB</font>.
On System V Release 4 systems this option requires the <font size="-1">GNU</font> assembler.
</td></tr>
<tr valign="top"><td width=4%>
<b>-feliminate-unused-debug-symbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in stabs format (if that is supported),
for only symbols that are actually used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gstabs+</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in stabs format (if that is supported),
using <font size="-1">GNU</font> extensions understood only by the <font size="-1">GNU</font> debugger (<font size="-1">GDB</font>).  The
use of these extensions is likely to make other debuggers crash or
refuse to read the program.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gcoff</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in <font size="-1">COFF</font> format (if that is supported).
This is the format used by <font size="-1">SDB</font> on most System V systems prior to
System V Release 4.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gxcoff</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in <font size="-1">XCOFF</font> format (if that is supported).
This is the format used by the <font size="-1">DBX</font> debugger on <font size="-1">IBM</font> <font size="-1">RS/6000</font> systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gxcoff+</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in <font size="-1">XCOFF</font> format (if that is supported),
using <font size="-1">GNU</font> extensions understood only by the <font size="-1">GNU</font> debugger (<font size="-1">GDB</font>).  The
use of these extensions is likely to make other debuggers crash or
refuse to read the program, and may cause assemblers other than the <font size="-1">GNU</font>
assembler (<font size="-1">GAS</font>) to fail with an error.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gdwarf-2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in <font size="-1">DWARF</font> version 2 format (if that is
supported).  This is the format used by <font size="-1">DBX</font> on <font size="-1">IRIX</font> 6.  With this
option, <font size="-1">GCC</font> uses features of <font size="-1">DWARF</font> version 3 when they are useful;
version 3 is upward compatible with version 2, but may still cause
problems for older debuggers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gvms</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce debugging information in <font size="-1">VMS</font> debug format (if that is
supported).  This is the format used by <font size="-1">DEBUG</font> on <font size="-1">VMS</font> systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-g</b><i>level</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-ggdb</b><i>level</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-gstabs</b><i>level</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-gcoff</b><i>level</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-gxcoff</b><i>level</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-gvms</b><i>level</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Request debugging information and also use <i>level</i> to specify how
much information.  The default level is 2.
<p>
<!-- ignored unsupported tag .if -->
Level 1 produces minimal information, enough for making backtraces in
parts of the program that you don&#146;t plan to debug.  This includes
descriptions of functions and external variables, but no information
about local variables and no line numbers.
<p>
<!-- ignored unsupported tag .if -->
Level 3 includes extra information, such as all the macro definitions
present in the program.  Some debuggers support macro expansion when
you use <b>-g3</b>.
<p>
<!-- ignored unsupported tag .if -->
<b>-gdwarf-2</b> does not accept a concatenated debug level, because
<font size="-1">GCC</font> used to support an option <b>-gdwarf</b> that meant to generate
debug information in version 1 of the <font size="-1">DWARF</font> format (which is very
different from version 2), and it would have been too confusing.  That
debug format is long obsolete, but the option cannot be changed now.
Instead use an additional <b>-g</b><i>level</i> option to change the
debug level for <font size="-1">DWARF2</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-feliminate-dwarf2-dups</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compress <font size="-1">DWARF2</font> debugging information by eliminating duplicated
information about each symbol.  This option only makes sense when
generating <font size="-1">DWARF2</font> debugging information with <b>-gdwarf-2</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-p</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate extra code to write profile information suitable for the
analysis program <b>prof</b>.  You must use this option when compiling
the source files you want data about, and you must also use it when
linking.
</td></tr>
<tr valign="top"><td width=4%>
<b>-pg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate extra code to write profile information suitable for the
analysis program <b>gprof</b>.  You must use this option when compiling
the source files you want data about, and you must also use it when
linking.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Q</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Makes the compiler print out each function name as it is compiled, and
print some statistics about each pass when it finishes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftime-report</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Makes the compiler print some statistics about the time consumed by each
pass when it finishes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fmem-report</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Makes the compiler print some statistics about permanent memory
allocation when it finishes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fprofile-arcs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Add code so that program flow <i>arcs</i> are instrumented.  During
execution the program records how many times each branch and call is
executed and how many times it is taken or returns.  When the compiled
program exits it saves this data to a file called
<i></i><i>auxname</i><i>.gcda</i> for each source file.  The data may be used for
profile-directed optimizations (<b>-fbranch-probabilities</b>), or for
test coverage analysis (<b>-ftest-coverage</b>).  Each object file&#146;s
<i>auxname</i> is generated from the name of the output file, if
explicitly specified and it is not the final executable, otherwise it is
the basename of the source file.  In both cases any suffix is removed
(e.g. <i>foo.gcda</i> for input file <i>dir/foo.c</i>, or
<i>dir/foo.gcda</i> for output file specified as <b>-o dir/foo.o</b>).
</td></tr>
<tr valign="top"><td width=4%>
<b>--coverage</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is used to compile and link code instrumented for coverage
analysis.  The option is a synonym for <b>-fprofile-arcs</b>
<b>-ftest-coverage</b> (when compiling) and <b>-lgcov</b> (when
linking).  See the documentation for those options for more details.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
@bullet
</td><td>
<!-- ignored unsupported tag .tm -->
Compile the source files with <b>-fprofile-arcs</b> plus optimization
and code generation options.  For test coverage analysis, use the
additional <b>-ftest-coverage</b> option.  You do not need to profile
every source file in a program.
</td></tr>
<tr valign="top"><td width=4%>
@cvmmfu
</td><td>
<!-- ignored unsupported tag .tm -->
Link your object files with <b>-lgcov</b> or <b>-fprofile-arcs</b>
(the latter implies the former).
</td></tr>
<tr valign="top"><td width=4%>
@dwnngv
</td><td>
<!-- ignored unsupported tag .tm -->
Run the program on a representative workload to generate the arc profile
information.  This may be repeated any number of times.  You can run
concurrent instances of your program, and provided that the file system
supports locking, the data files will be correctly updated.  Also
<tt>fork</tt> calls are detected and correctly handled (double counting
will not happen).
</td></tr>
<tr valign="top"><td width=4%>
@exoohw
</td><td>
<!-- ignored unsupported tag .tm -->
For profile-directed optimizations, compile the source files again with
the same optimization and code generation options plus
<b>-fbranch-probabilities</b>.
</td></tr>
<tr valign="top"><td width=4%>
@fyppix
</td><td>
<!-- ignored unsupported tag .tm -->
For test coverage analysis, use <b>gcov</b> to produce human readable
information from the <i>.gcno</i> and <i>.gcda</i> files.  Refer to the
<b>gcov</b> documentation for further information.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
With <b>-fprofile-arcs</b>, for each function of your program <font size="-1">GCC</font>
creates a program flow graph, then finds a spanning tree for the graph.
Only arcs that are not on the spanning tree have to be instrumented: the
compiler adds code to count the number of times that these arcs are
executed.  When an arc is the only exit or only entrance to a block, the
instrumentation code can be added to the block; otherwise, a new basic
block must be created to hold the instrumentation code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftest-coverage</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce a notes file that the <b>gcov</b> code-coverage utility can use to
show program coverage.  Each source file&#146;s note file is called
<i></i><i>auxname</i><i>.gcno</i>.  Refer to the <b>-fprofile-arcs</b> option
above for a description of <i>auxname</i> and instructions on how to
generate test coverage data.  Coverage data will match the source files
more closely, if you do not optimize.
</td></tr>
<tr valign="top"><td width=4%>
<b>-d</b><i>letters</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-</b><i>pass</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Says to make debugging dumps during compilation at times specified by
<i>letters</i>.    This is used for debugging the RTL-based passes of the
compiler.  The file names for most of the dumps are made by appending a
pass number and a word to the <i>dumpname</i>.  <i>dumpname</i> is generated
from the name of the output file, if explicitly specified and it is not
an executable, otherwise it is the basename of the source file.
<p>
<!-- ignored unsupported tag .if -->
Most debug dumps can be enabled either passing a letter to the <b>-d</b>
option, or with a long <b>-fdump-rtl</b> switch; here are the possible
letters for use in <i>letters</i> and <i>pass</i>, and their meanings:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-dA</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Annotate the assembler output with miscellaneous debugging information.
</td></tr>
<tr valign="top"><td width=4%>
<b>-db</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-bp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after computing branch probabilities, to <i></i><i>file</i><i>.09.bp</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dB</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-bbro</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after block reordering, to <i></i><i>file</i><i>.30.bbro</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-combine</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after instruction combination, to the file <i></i><i>file</i><i>.17.combine</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dC</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-ce1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-ce2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-dC</b> and <b>-fdump-rtl-ce1</b> enable dumping after the
first if conversion, to the file <i></i><i>file</i><i>.11.ce1</i>.  <b>-dC</b>
and <b>-fdump-rtl-ce2</b> enable dumping after the second if
conversion, to the file <i></i><i>file</i><i>.18.ce2</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-btl</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-dbr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-dd</b> and <b>-fdump-rtl-btl</b> enable dumping after branch
target load optimization, to <i></i><i>file</i><i>.31.btl</i>.  <b>-dd</b>
and <b>-fdump-rtl-dbr</b> enable dumping after delayed branch
scheduling, to <i></i><i>file</i><i>.36.dbr</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dD</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump all macro definitions, at the end of preprocessing, in addition to
normal output.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dE</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-ce3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after the third if conversion, to <i></i><i>file</i><i>.28.ce3</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-df</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-cfg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-life</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-df</b> and <b>-fdump-rtl-cfg</b> enable dumping after control
and data flow analysis, to <i></i><i>file</i><i>.08.cfg</i>.  <b>-df</b>
and <b>-fdump-rtl-cfg</b> enable dumping dump after life analysis,
to <i></i><i>file</i><i>.16.life</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-greg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after global register allocation, to <i></i><i>file</i><i>.23.greg</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dG</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-gcse</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-bypass</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-dG</b> and <b>-fdump-rtl-gcse</b> enable dumping after <font size="-1">GCSE</font>, to
<i></i><i>file</i><i>.05.gcse</i>.  <b>-dG</b> and <b>-fdump-rtl-bypass</b>
enable dumping after jump bypassing and control flow optimizations, to
<i></i><i>file</i><i>.07.bypass</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dh</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-eh</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after finalization of <font size="-1">EH</font> handling code, to <i></i><i>file</i><i>.02.eh</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-di</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-sibling</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after sibling call optimizations, to <i></i><i>file</i><i>.01.sibling</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dj</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-jump</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after the first jump optimization, to <i></i><i>file</i><i>.03.jump</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dk</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-stack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after conversion from registers to stack, to <i></i><i>file</i><i>.33.stack</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dl</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-lreg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after local register allocation, to <i></i><i>file</i><i>.22.lreg</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dL</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-loop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-loop2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-dL</b> and <b>-fdump-rtl-loop</b> enable dumping after the first
loop optimization pass, to <i></i><i>file</i><i>.06.loop</i>.  <b>-dL</b> and
<b>-fdump-rtl-loop2</b> enable dumping after the second pass, to
<i></i><i>file</i><i>.13.loop2</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-sms</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after modulo scheduling, to <i></i><i>file</i><i>.20.sms</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dM</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-mach</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after performing the machine dependent reorganization pass, to
<i></i><i>file</i><i>.35.mach</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dn</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-rnreg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after register renumbering, to <i></i><i>file</i><i>.29.rnreg</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dN</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-regmove</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after the register move pass, to <i></i><i>file</i><i>.19.regmove</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-do</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-postreload</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after post-reload optimizations, to <i></i><i>file</i><i>.24.postreload</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-expand</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after <font size="-1">RTL</font> generation, to <i></i><i>file</i><i>.00.expand</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dR</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-sched2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after the second scheduling pass, to <i></i><i>file</i><i>.32.sched2</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ds</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-cse</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after <font size="-1">CSE</font> (including the jump optimization that sometimes follows
<font size="-1">CSE</font>), to <i></i><i>file</i><i>.04.cse</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dS</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-sched</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after the first scheduling pass, to <i></i><i>file</i><i>.21.sched</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-cse2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after the second <font size="-1">CSE</font> pass (including the jump optimization that
sometimes follows <font size="-1">CSE</font>), to <i></i><i>file</i><i>.15.cse2</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dT</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-tracer</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after running tracer, to <i></i><i>file</i><i>.12.tracer</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dV</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-vpt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-vartrack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-dV</b> and <b>-fdump-rtl-vpt</b> enable dumping after the value
profile transformations, to <i></i><i>file</i><i>.10.vpt</i>.  <b>-dV</b>
and <b>-fdump-rtl-vartrack</b> enable dumping after variable tracking,
to <i></i><i>file</i><i>.34.vartrack</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dw</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-flow2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after the second flow pass, to <i></i><i>file</i><i>.26.flow2</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dz</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-peephole2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after the peephole pass, to <i></i><i>file</i><i>.27.peephole2</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dZ</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-web</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after live range splitting, to <i></i><i>file</i><i>.14.web</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-da</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-rtl-all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce all the dumps listed above.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dH</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce a core dump whenever an error occurs.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print statistics on memory usage, at the end of the run, to
standard error.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Annotate the assembler output with a comment indicating which
pattern and alternative was used.  The length of each instruction is
also printed.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dP</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump the <font size="-1">RTL</font> in the assembler output as a comment before each instruction.
Also turns on <b>-dp</b> annotation.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
For each of the other indicated dump files (either with <b>-d</b> or
<b>-fdump-rtl-</b><i>pass</i>), dump a representation of the control flow
graph suitable for viewing with <font size="-1">VCG</font> to <i></i><i>file</i><i>.</i><i>pass</i><i>.vcg</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dx</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Just generate <font size="-1">RTL</font> for a function instead of compiling it.  Usually used
with <b>r</b> (<b>-fdump-rtl-expand</b>).
</td></tr>
<tr valign="top"><td width=4%>
<b>-dy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump debugging information during parsing, to standard error.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-unnumbered</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When doing debugging dumps (see <b>-d</b> option above), suppress instruction
numbers and line number note output.  This makes it more feasible to
use diff on debugging dumps for compiler invocations with different
options, in particular with and without <b>-g</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-translation-unit</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-translation-unit-</b><i>options</i><b> </b>(C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Dump a representation of the tree structure for the entire translation
unit to a file.  The file name is made by appending <i>.tu</i> to the
source file name.  If the <b>-</b><i>options</i> form is used, <i>options</i>
controls the details of the dump as described for the
<b>-fdump-tree</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-class-hierarchy</b> (C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-class-hierarchy-</b><i>options</i><b> </b>(C<font size="-2">++</font> only)
</td><td>
<!-- ignored unsupported tag .tm -->
Dump a representation of each class&#146;s hierarchy and virtual function
table layout to a file.  The file name is made by appending <i>.class</i>
to the source file name.  If the <b>-</b><i>options</i> form is used,
<i>options</i> controls the details of the dump as described for the
<b>-fdump-tree</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-ipa-</b><i>switch</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Control the dumping at various stages of inter-procedural analysis
language tree to a file.  The file name is generated by appending a switch
specific suffix to the source file name.  The following dumps are possible:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enables all inter-procedural analysis dumps; currently the only produced
dump is the <b>cgraph</b> dump.
</td></tr>
<tr valign="top"><td width=4%>
<b>cgraph</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dumps information about call-graph optimization, unused function removal,
and inlining decisions.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-tree-</b><i>switch</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdump-tree-</b><i>switch</i><b>-</b><i>options</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Control the dumping at various stages of processing the intermediate
language tree to a file.  The file name is generated by appending a switch
specific suffix to the source file name.  If the <b>-</b><i>options</i>
form is used, <i>options</i> is a list of <b>-</b> separated options that
control the details of the dump.  Not all options are applicable to all
dumps, those which are not meaningful will be ignored.  The following
options are available
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>address</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the address of each node.  Usually this is not meaningful as it
changes according to the environment and source file.  Its primary use
is for tying up a dump file with a debug environment.
</td></tr>
<tr valign="top"><td width=4%>
<b>slim</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Inhibit dumping of members of a scope or body of a function merely
because that scope has been reached.  Only dump such items when they
are directly reachable by some other path.  When dumping pretty-printed
trees, this option inhibits dumping the bodies of control structures.
</td></tr>
<tr valign="top"><td width=4%>
<b>raw</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print a raw representation of the tree.  By default, trees are
pretty-printed into a C-like representation.
</td></tr>
<tr valign="top"><td width=4%>
<b>details</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable more detailed dumps (not honored by every dump option).
</td></tr>
<tr valign="top"><td width=4%>
<b>stats</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable dumping various statistics about the pass (not honored by every dump
option).
</td></tr>
<tr valign="top"><td width=4%>
<b>blocks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable showing basic block boundaries (disabled in raw dumps).
</td></tr>
<tr valign="top"><td width=4%>
<b>vops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable showing virtual operands for every statement.
</td></tr>
<tr valign="top"><td width=4%>
<b>lineno</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable showing line numbers for statements.
</td></tr>
<tr valign="top"><td width=4%>
<b>uid</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable showing the unique <font size="-1">ID</font> (<tt>DECL_UID</tt>) for each variable.
</td></tr>
<tr valign="top"><td width=4%>
<b>all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Turn on all options, except <b>raw</b>, <b>slim</b> and <b>lineno</b>.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The following tree dumps are possible:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>original</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump before any tree based optimization, to <i></i><i>file</i><i>.original</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>optimized</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after all tree based optimization, to <i></i><i>file</i><i>.optimized</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>inlined</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump after function inlining, to <i></i><i>file</i><i>.inlined</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>gimple</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function before and after the gimplification pass to a file.  The
file name is made by appending <i>.gimple</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>cfg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump the control flow graph of each function to a file.  The file name is
made by appending <i>.cfg</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>vcg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump the control flow graph of each function to a file in <font size="-1">VCG</font> format.  The
file name is made by appending <i>.vcg</i> to the source file name.  Note
that if the file contains more than one function, the generated file cannot
be used directly by <font size="-1">VCG</font>.  You will need to cut and paste each function&#146;s
graph into its own separate file first.
</td></tr>
<tr valign="top"><td width=4%>
<b>ch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after copying loop headers.  The file name is made by
appending <i>.ch</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>ssa</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump <font size="-1">SSA</font> related information to a file.  The file name is made by appending
<i>.ssa</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>salias</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump structure aliasing variable information to a file.  This file name
is made by appending <i>.salias</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>alias</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump aliasing information for each function.  The file name is made by
appending <i>.alias</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>ccp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after <font size="-1">CCP</font>.  The file name is made by appending
<i>.ccp</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>storeccp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after <font size="-1">STORE-CCP</font>.  The file name is made by appending
<i>.storeccp</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>pre</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump trees after partial redundancy elimination.  The file name is made
by appending <i>.pre</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>fre</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump trees after full redundancy elimination.  The file name is made
by appending <i>.fre</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>copyprop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump trees after copy propagation.  The file name is made
by appending <i>.copyprop</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>store_copyprop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump trees after store copy-propagation.  The file name is made
by appending <i>.store_copyprop</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>dce</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after dead code elimination.  The file name is made by
appending <i>.dce</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>mudflap</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after adding mudflap instrumentation.  The file name is
made by appending <i>.mudflap</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>sra</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after performing scalar replacement of aggregates.  The
file name is made by appending <i>.sra</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>sink</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after performing code sinking.  The file name is made
by appending <i>.sink</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>dom</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after applying dominator tree optimizations.  The file
name is made by appending <i>.dom</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>dse</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after applying dead store elimination.  The file
name is made by appending <i>.dse</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>phiopt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after optimizing <font size="-1">PHI</font> nodes into straightline code.  The file
name is made by appending <i>.phiopt</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>forwprop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after forward propagating single use variables.  The file
name is made by appending <i>.forwprop</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>copyrename</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after applying the copy rename optimization.  The file
name is made by appending <i>.copyrename</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>nrv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after applying the named return value optimization on
generic trees.  The file name is made by appending <i>.nrv</i> to the source
file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>vect</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after applying vectorization of loops.  The file name is
made by appending <i>.vect</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>vrp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump each function after Value Range Propagation (<font size="-1">VRP</font>).  The file name
is made by appending <i>.vrp</i> to the source file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable all the available tree dumps with the flags provided in this option.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-vectorizer-verbose=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option controls the amount of debugging output the vectorizer prints.
This information is written to standard error, unless <b>-fdump-tree-all</b>
or <b>-fdump-tree-vect</b> is specified, in which case it is output to the
usual dump listing file, <i>.vect</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-frandom-seed=</b><i>string</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option provides a seed that <font size="-1">GCC</font> uses when it would otherwise use
random numbers.  It is used to generate certain symbol names
that have to be different in every compiled file.  It is also used to
place unique stamps in coverage data files and the object files that
produce them.  You can use the <b>-frandom-seed</b> option to produce
reproducibly identical object files.
<p>
<!-- ignored unsupported tag .if -->
The <i>string</i> should be different for every file you compile.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched-verbose=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
On targets that use instruction scheduling, this option controls the
amount of debugging output the scheduler prints.  This information is
written to standard error, unless <b>-dS</b> or <b>-dR</b> is
specified, in which case it is output to the usual dump
listing file, <i>.sched</i> or <i>.sched2</i> respectively.  However
for <i>n</i> greater than nine, the output is always printed to standard
error.
<p>
<!-- ignored unsupported tag .if -->
For <i>n</i> greater than zero, <b>-fsched-verbose</b> outputs the
same information as <b>-dRS</b>.  For <i>n</i> greater than one, it
also output basic block probabilities, detailed ready list information
and unit/insn info.  For <i>n</i> greater than two, it includes <font size="-1">RTL</font>
at abort point, control-flow and regions info.  And for <i>n</i> over
four, <b>-fsched-verbose</b> also includes dependence info.
</td></tr>
<tr valign="top"><td width=4%>
<b>-save-temps</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Store the usual temporary intermediate files permanently; place them
in the current directory and name them based on the source file.  Thus,
compiling <i>foo.c</i> with <b>-c -save-temps</b> would produce files
<i>foo.i</i> and <i>foo.s</i>, as well as <i>foo.o</i>.  This creates a
preprocessed <i>foo.i</i> output file even though the compiler now
normally uses an integrated preprocessor.
<p>
<!-- ignored unsupported tag .if -->
When used in combination with the <b>-x</b> command line option,
<b>-save-temps</b> is sensible enough to avoid over writing an
input source file with the same extension as an intermediate file.
The corresponding intermediate file may be obtained by renaming the
source file before using <b>-save-temps</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-time</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Report the <font size="-1">CPU</font> time taken by each subprocess in the compilation
sequence.  For C source files, this is the compiler proper and assembler
(plus the linker if linking is done).  The output looks like this:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        # cc1 0.12 0.01
        # as 0.00 0.01
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The first number on each line is the user time, that is time spent
executing the program itself.  The second number is system time,
time spent executing operating system routines on behalf of the program.
Both numbers are in seconds.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fvar-tracking</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Run variable tracking pass.  It computes where variables are stored at each
position in code.  Better debugging information is then generated
(if the debugging information format supports this information).
<p>
<!-- ignored unsupported tag .if -->
It is enabled by default when compiling with optimization (<b>-Os</b>,
<b>-O</b>, <b>-O2</b>, ...), debugging information (<b>-g</b>) and
the debug info format supports it.
</td></tr>
<tr valign="top"><td width=4%>
<b>-print-file-name=</b><i>library</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the full absolute name of the library file <i>library</i> that
would be used when linking---and don&#146;t do anything else.  With this
option, <font size="-1">GCC</font> does not compile or link anything; it just prints the
file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>-print-multi-directory</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the directory name corresponding to the multilib selected by any
other switches present in the command line.  This directory is supposed
to exist in <b><font size="-1">GCC_EXEC_PREFIX</font></b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-print-multi-lib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the mapping from multilib directory names to compiler switches
that enable them.  The directory name is separated from the switches by
<b>;</b>, and each switch starts with an <b>@} instead of the
</b><tt>@samp</tt><b>{-</b>, without spaces between multiple switches.  This is supposed to
ease shell-processing.
</td></tr>
<tr valign="top"><td width=4%>
<b>-print-prog-name=</b><i>program</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>-print-file-name</b>, but searches for a program such as <b>cpp</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-print-libgcc-file-name</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Same as <b>-print-file-name=libgcc.a</b>.
<p>
<!-- ignored unsupported tag .if -->
This is useful when you use <b>-nostdlib</b> or <b>-nodefaultlibs</b>
but you do want to link with <i>libgcc.a</i>.  You can do
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        gcc -nostdlib &lt;files&gt;... &#145;gcc -print-libgcc-file-name&#145;
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-print-search-dirs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the name of the configured installation directory and a list of
program and library directories <b>gcc</b> will search---and don&#146;t do anything else.
<p>
<!-- ignored unsupported tag .if -->
This is useful when <b>gcc</b> prints the error message
<b>installation problem, cannot exec cpp0: No such file or directory</b>.
To resolve this you either need to put <i>cpp0</i> and the other compiler
components where <b>gcc</b> expects to find them, or you can set the environment
variable <b><font size="-1">GCC_EXEC_PREFIX</font></b> to the directory where you installed them.
Don&#146;t forget the trailing <b>/</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dumpmachine</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the compiler&#146;s target machine (for example,
<b>i686-pc-linux-gnu</b>)---and don&#146;t do anything else.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dumpversion</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the compiler version (for example, <b>3.0</b>)---and don&#146;t do
anything else.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dumpspecs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the compiler&#146;s built-in specs---and don&#146;t do anything else.  (This
is used when <font size="-1">GCC</font> itself is being built.) 
</td></tr>
<tr valign="top"><td width=4%>
<b>-feliminate-unused-debug-types</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Normally, when producing <font size="-1">DWARF2</font> output, <font size="-1">GCC</font> will emit debugging
information for all types declared in a compilation
unit, regardless of whether or not they are actually used
in that compilation unit.  Sometimes this is useful, such as
if, in the debugger, you want to cast a value to a type that is
not actually used in your program (but is declared).  More often,
however, this results in a significant amount of wasted space.
With this option, <font size="-1">GCC</font> will avoid producing debug symbol output
for types that are nowhere used in the source file being compiled.
</td></tr>
</table>
<h1 class="manpages">Options That Control Optimization</h1>
<!-- ignored unsupported tag .tm -->
These options control various sorts of optimizations.
<p>
Without any optimization option, the compiler&#146;s goal is to reduce the
cost of compilation and to make debugging produce the expected
results.  Statements are independent: if you stop the program with a
breakpoint between statements, you can then assign a new value to any
variable or change the program counter to any other statement in the
function and get exactly the results you would expect from the source
code.
<p>
Turning on optimization flags makes the compiler attempt to improve
the performance and/or code size at the expense of compilation time
and possibly the ability to debug the program.
<p>
The compiler performs optimization based on the knowledge it has of
the program.  Optimization levels <b>-O</b> and above, in
particular, enable <i>unit-at-a-time</i> mode, which allows the
compiler to consider information gained from later functions in
the file when compiling a function.  Compiling multiple files at
once to a single output file in <i>unit-at-a-time</i> mode allows
the compiler to use information gained from all of the files when
compiling each of them.
<p>
Not all optimizations are controlled directly by a flag.  Only
optimizations that have a flag are listed.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-O</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-O1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Optimize.  Optimizing compilation takes somewhat more time, and a lot
more memory for a large function.
<p>
<!-- ignored unsupported tag .if -->
With <b>-O</b>, the compiler tries to reduce code size and execution
time, without performing any optimizations that take a great deal of
compilation time.
<p>
<!-- ignored unsupported tag .if -->
<b>-O</b> turns on the following optimization flags:
<b>-fdefer-pop
-fdelayed-branch
-fguess-branch-probability
-fcprop-registers
-floop-optimize
-fif-conversion
-fif-conversion2
-ftree-ccp
-ftree-dce
-ftree-dominator-opts
-ftree-dse
-ftree-ter
-ftree-lrs
-ftree-sra
-ftree-copyrename
-ftree-fre
-ftree-ch
-funit-at-a-time
-fmerge-constants</b>
<p>
<!-- ignored unsupported tag .if -->
<b>-O</b> also turns on <b>-fomit-frame-pointer</b> on machines
where doing so does not interfere with debugging.
<p>
<!-- ignored unsupported tag .if -->
<b>-O</b> doesn&#146;t turn on <b>-ftree-sra</b> for the Ada compiler.
This option must be explicitly specified on the command line to be
enabled for the Ada compiler.
</td></tr>
<tr valign="top"><td width=4%>
<b>-O2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Optimize even more.  <font size="-1">GCC</font> performs nearly all supported optimizations
that do not involve a space-speed tradeoff.  The compiler does not
perform loop unrolling or function inlining when you specify <b>-O2</b>.
As compared to <b>-O</b>, this option increases both compilation time
and the performance of the generated code.
<p>
<!-- ignored unsupported tag .if -->
<b>-O2</b> turns on all optimization flags specified by <b>-O</b>.  It
also turns on the following optimization flags:
<b>-fthread-jumps
-fcrossjumping
-foptimize-sibling-calls
-fcse-follow-jumps  -fcse-skip-blocks
-fgcse  -fgcse-lm 
-fexpensive-optimizations
-fstrength-reduce
-frerun-cse-after-loop  -frerun-loop-opt
-fcaller-saves
-fpeephole2
-fschedule-insns  -fschedule-insns2
-fsched-interblock  -fsched-spec
-fregmove
-fstrict-aliasing
-fdelete-null-pointer-checks
-freorder-blocks  -freorder-functions
-falign-functions  -falign-jumps
-falign-loops  -falign-labels
-ftree-vrp
-ftree-pre</b>
<p>
<!-- ignored unsupported tag .if -->
Please note the warning under <b>-fgcse</b> about
invoking <b>-O2</b> on programs that use computed gotos.
</td></tr>
<tr valign="top"><td width=4%>
<b>-O3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Optimize yet more.  <b>-O3</b> turns on all optimizations specified by
<b>-O2</b> and also turns on the <b>-finline-functions</b>,
<b>-funswitch-loops</b> and <b>-fgcse-after-reload</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-O0</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not optimize.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Os</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Optimize for size.  <b>-Os</b> enables all <b>-O2</b> optimizations that
do not typically increase code size.  It also performs further
optimizations designed to reduce code size.
<p>
<!-- ignored unsupported tag .if -->
<b>-Os</b> disables the following optimization flags:
<b>-falign-functions  -falign-jumps  -falign-loops
-falign-labels  -freorder-blocks  -freorder-blocks-and-partition
-fprefetch-loop-arrays  -ftree-vect-loop-version</b>
<p>
<!-- ignored unsupported tag .if -->
If you use multiple <b>-O</b> options, with or without level numbers,
the last such option is the one that is effective.
</td></tr>
<!-- PP ends table -->
</table>
Options of the form <b>-f</b><i>flag</i> specify machine-independent
flags.  Most flags have both positive and negative forms; the negative
form of <b>-ffoo</b> would be <b>-fno-foo</b>.  In the table
below, only one of the forms is listed---the one you typically will
use.  You can figure out the other form by either removing <b>no-</b>
or adding it.
<p>
The following options control specific optimizations.  They are either
activated by <b>-O</b> options or are related to ones that are.  You
can use the following flags in the rare cases when fine-tuning of
optimizations to be performed is desired.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-fno-default-inline</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not make member functions inline by default merely because they are
defined inside the class scope (C<font size="-2">++</font> only).  Otherwise, when you specify
<b>-O</b>, member functions defined inside class scope are compiled
inline by default; i.e., you don&#146;t need to add <b>inline</b> in front of
the member function name.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-defer-pop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Always pop the arguments to each function call as soon as that function
returns.  For machines which must pop arguments after a function call,
the compiler normally lets arguments accumulate on the stack for several
function calls and pops them all at once.
<p>
<!-- ignored unsupported tag .if -->
Disabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fforce-mem</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force memory operands to be copied into registers before doing
arithmetic on them.  This produces better code by making all memory
references potential common subexpressions.  When they are not common
subexpressions, instruction combination should eliminate the separate
register-load. This option is now a nop and will be removed in 4.2.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fforce-addr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force memory address constants to be copied into registers before
doing arithmetic on them.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fomit-frame-pointer</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t keep the frame pointer in a register for functions that
don&#146;t need one.  This avoids the instructions to save, set up and
restore frame pointers; it also makes an extra register available
in many functions.  <b>It also makes debugging impossible on
some machines.</b>
<p>
<!-- ignored unsupported tag .if -->
On some machines, such as the <font size="-1">VAX</font>, this flag has no effect, because
the standard calling sequence automatically handles the frame pointer
and nothing is saved by pretending it doesn&#146;t exist.  The
machine-description macro <tt>FRAME_POINTER_REQUIRED</tt> controls
whether a target machine supports this flag. 
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-foptimize-sibling-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Optimize sibling and tail recursive calls.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-inline</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t pay attention to the <tt>inline</tt> keyword.  Normally this option
is used to keep the compiler from expanding any functions inline.
Note that if you are not optimizing, no functions can be expanded inline.
</td></tr>
<tr valign="top"><td width=4%>
<b>-finline-functions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Integrate all simple functions into their callers.  The compiler
heuristically decides which functions are simple enough to be worth
integrating in this way.
<p>
<!-- ignored unsupported tag .if -->
If all calls to a given function are integrated, and the function is
declared <tt>static</tt>, then the function is normally not output as
assembler code in its own right.
<p>
<!-- ignored unsupported tag .if -->
Enabled at level <b>-O3</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-finline-functions-called-once</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Consider all <tt>static</tt> functions called once for inlining into their
caller even if they are not marked <tt>inline</tt>.  If a call to a given
function is integrated, then the function is not output as assembler code
in its own right.
<p>
<!-- ignored unsupported tag .if -->
Enabled if <b>-funit-at-a-time</b> is enabled.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fearly-inlining</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Inline functions marked by <tt>always_inline</tt> and functions whose body seems
smaller than the function call overhead early before doing
<b>-fprofile-generate</b> instrumentation and real inlining pass.  Doing so
makes profiling significantly cheaper and usually inlining faster on programs
having large chains of nested wrapper functions.
<p>
<!-- ignored unsupported tag .if -->
Enabled by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-finline-limit=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
By default, <font size="-1">GCC</font> limits the size of functions that can be inlined.  This flag
allows the control of this limit for functions that are explicitly marked as
inline (i.e., marked with the inline keyword or defined within the class
definition in c++).  <i>n</i> is the size of functions that can be inlined in
number of pseudo instructions (not counting parameter handling).  The default
value of <i>n</i> is 600.
Increasing this value can result in more inlined code at
the cost of compilation time and memory consumption.  Decreasing usually makes
the compilation faster and less code will be inlined (which presumably
means slower programs).  This option is particularly useful for programs that
use inlining heavily such as those based on recursive templates with C<font size="-2">++</font>.
<p>
<!-- ignored unsupported tag .if -->
Inlining is actually controlled by a number of parameters, which may be
specified individually by using <b>--param</b> <i>name</i><b>=</b><i>value</i>.
The <b>-finline-limit=</b><i>n</i> option sets some of these parameters
as follows:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>max-inline-insns-single</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
 is set to I&lt;n&gt;/2.
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>max-inline-insns-auto</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
 is set to I&lt;n&gt;/2.
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>min-inline-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
 is set to 130 or I&lt;n&gt;/4, whichever is smaller.
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>max-inline-insns-rtl</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
 is set to I&lt;n&gt;.
</tt></pre></td></tr>
</table>
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
See below for a documentation of the individual
parameters controlling inlining.
<p>
<!-- ignored unsupported tag .if -->
<i>Note:</i> pseudo instruction represents, in this particular context, an
abstract measurement of function&#146;s size.  In no way does it represent a count
of assembly instructions and as such its exact meaning might change from one
release to an another.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fkeep-inline-functions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
In C, emit <tt>static</tt> functions that are declared <tt>inline</tt>
into the object file, even if the function has been inlined into all
of its callers.  This switch does not affect functions using the
<tt>extern inline</tt> extension in <font size="-1">GNU</font> C.  In C<font size="-2">++</font>, emit any and all
inline functions into the object file.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fkeep-static-consts</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit variables declared <tt>static const</tt> when optimization isn&#146;t turned
on, even if the variables aren&#146;t referenced.
<p>
<!-- ignored unsupported tag .if -->
<font size="-1">GCC</font> enables this option by default.  If you want to force the compiler to
check if the variable was referenced, regardless of whether or not
optimization is turned on, use the <b>-fno-keep-static-consts</b> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fmerge-constants</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Attempt to merge identical constants (string constants and floating point
constants) across compilation units.
<p>
<!-- ignored unsupported tag .if -->
This option is the default for optimized compilation if the assembler and
linker support it.  Use <b>-fno-merge-constants</b> to inhibit this
behavior.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fmerge-all-constants</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Attempt to merge identical constants and identical variables.
<p>
<!-- ignored unsupported tag .if -->
This option implies <b>-fmerge-constants</b>.  In addition to
<b>-fmerge-constants</b> this considers e.g. even constant initialized
arrays or initialized constant variables with integral or floating point
types.  Languages like C or C<font size="-2">++</font> require each non-automatic variable to
have distinct location, so using this option will result in non-conforming
behavior.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fmodulo-sched</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform swing modulo scheduling immediately before the first scheduling
pass.  This pass looks at innermost loops and reorders their
instructions by overlapping different iterations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-branch-count-reg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use decrement and branch instructions on a count register,
but instead generate a sequence of instructions that decrement a
register, compare it against zero, then branch based upon the result.
This option is only meaningful on architectures that support such
instructions, which include x86, PowerPC, <font size="-1">IA-64</font> and S/390.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-fbranch-count-reg</b>, enabled when
<b>-fstrength-reduce</b> is enabled.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-function-cse</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not put function addresses in registers; make each instruction that
calls a constant function contain the function&#146;s address explicitly.
<p>
<!-- ignored unsupported tag .if -->
This option results in less efficient code, but some strange hacks
that alter the assembler output may be confused by the optimizations
performed when this option is not used.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-ffunction-cse</b>
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-zero-initialized-in-bss</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If the target supports a <font size="-1">BSS</font> section, <font size="-1">GCC</font> by default puts variables that
are initialized to zero into <font size="-1">BSS</font>.  This can save space in the resulting
code.
<p>
<!-- ignored unsupported tag .if -->
This option turns off this behavior because some programs explicitly
rely on variables going to the data section.  E.g., so that the
resulting executable can find the beginning of that section and/or make
assumptions based on that.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-fzero-initialized-in-bss</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fmudflap -fmudflapth -fmudflapir</b>
</td><td>
<!-- ignored unsupported tag .tm -->
For front-ends that support it (C and C<font size="-2">++</font>), instrument all risky
pointer/array dereferencing operations, some standard library
string/heap functions, and some other associated constructs with
range/validity tests.  Modules so instrumented should be immune to
buffer overflows, invalid heap use, and some other classes of C/C<font size="-2">++</font>
programming errors.  The instrumentation relies on a separate runtime
library (<i>libmudflap</i>), which will be linked into a program if
<b>-fmudflap</b> is given at link time.  Run-time behavior of the
instrumented program is controlled by the <b><font size="-1">MUDFLAP_OPTIONS</font></b>
environment variable.  See <tt>env MUDFLAP_OPTIONS=-help a.out</tt>
for its options.
<p>
<!-- ignored unsupported tag .if -->
Use <b>-fmudflapth</b> instead of <b>-fmudflap</b> to compile and to
link if your program is multi-threaded.  Use <b>-fmudflapir</b>, in
addition to <b>-fmudflap</b> or <b>-fmudflapth</b>, if
instrumentation should ignore pointer reads.  This produces less
instrumentation (and therefore faster execution) and still provides
some protection against outright memory corrupting writes, but allows
erroneously read data to propagate within a program.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fstrength-reduce</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform the optimizations of loop strength reduction and
elimination of iteration variables.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fthread-jumps</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform optimizations where we check to see if a jump branches to a
location where another comparison subsumed by the first is found.  If
so, the first branch is redirected to either the destination of the
second branch or a point immediately following it, depending on whether
the condition is known to be true or false.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcse-follow-jumps</b>
</td><td>
<!-- ignored unsupported tag .tm -->
In common subexpression elimination, scan through jump instructions
when the target of the jump is not reached by any other path.  For
example, when <font size="-1">CSE</font> encounters an <tt>if</tt> statement with an
<tt>else</tt> clause, <font size="-1">CSE</font> will follow the jump when the condition
tested is false.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcse-skip-blocks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This is similar to <b>-fcse-follow-jumps</b>, but causes <font size="-1">CSE</font> to
follow jumps which conditionally skip over blocks.  When <font size="-1">CSE</font>
encounters a simple <tt>if</tt> statement with no else clause,
<b>-fcse-skip-blocks</b> causes <font size="-1">CSE</font> to follow the jump around the
body of the <tt>if</tt>.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-frerun-cse-after-loop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Re-run common subexpression elimination after loop optimizations has been
performed.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-frerun-loop-opt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Run the loop optimizer twice.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fgcse</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform a global common subexpression elimination pass.
This pass also performs global constant and copy propagation.
<p>
<!-- ignored unsupported tag .if -->
<i>Note:</i> When compiling a program using computed gotos, a <font size="-1">GCC</font>
extension, you may get better runtime performance if you disable
the global common subexpression elimination pass by adding
<b>-fno-gcse</b> to the command line.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fgcse-lm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-fgcse-lm</b> is enabled, global common subexpression elimination will
attempt to move loads which are only killed by stores into themselves.  This
allows a loop containing a load/store sequence to be changed to a load outside
the loop, and a copy/store within the loop.
<p>
<!-- ignored unsupported tag .if -->
Enabled by default when gcse is enabled.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fgcse-sm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-fgcse-sm</b> is enabled, a store motion pass is run after
global common subexpression elimination.  This pass will attempt to move
stores out of loops.  When used in conjunction with <b>-fgcse-lm</b>,
loops containing a load/store sequence can be changed to a load before
the loop and a store after the loop.
<p>
<!-- ignored unsupported tag .if -->
Not enabled at any optimization level.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fgcse-las</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-fgcse-las</b> is enabled, the global common subexpression
elimination pass eliminates redundant loads that come after stores to the
same memory location (both partial and full redundancies).
<p>
<!-- ignored unsupported tag .if -->
Not enabled at any optimization level.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fgcse-after-reload</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-fgcse-after-reload</b> is enabled, a redundant load elimination
pass is performed after reload.  The purpose of this pass is to cleanup
redundant spilling.
</td></tr>
<tr valign="top"><td width=4%>
<b>-floop-optimize</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform loop optimizations: move constant expressions out of loops, simplify
exit test conditions and optionally do strength-reduction as well.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-floop-optimize2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform loop optimizations using the new loop optimizer.  The optimizations
(loop unrolling, peeling and unswitching, loop invariant motion) are enabled
by separate flags.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funsafe-loop-optimizations</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If given, the loop optimizer will assume that loop indices do not
overflow, and that the loops with nontrivial exit condition are not
infinite.  This enables a wider range of loop optimizations even if
the loop optimizer itself cannot prove that these assumptions are valid.
Using <b>-Wunsafe-loop-optimizations</b>, the compiler will warn you
if it finds this kind of loop.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcrossjumping</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform cross-jumping transformation.  This transformation unifies equivalent code and save code size.  The
resulting code may or may not perform better than without cross-jumping.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fif-conversion</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Attempt to transform conditional jumps into branch-less equivalents.  This
include use of conditional moves, min, max, set flags and abs instructions, and
some tricks doable by standard arithmetics.  The use of conditional execution
on chips where it is available is controlled by <tt>if-conversion2</tt>.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fif-conversion2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use conditional execution (where available) to transform conditional jumps into
branch-less equivalents.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdelete-null-pointer-checks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use global dataflow analysis to identify and eliminate useless checks
for null pointers.  The compiler assumes that dereferencing a null
pointer would have halted the program.  If a pointer is checked after
it has already been dereferenced, it cannot be null.
<p>
<!-- ignored unsupported tag .if -->
In some environments, this assumption is not true, and programs can
safely dereference null pointers.  Use
<b>-fno-delete-null-pointer-checks</b> to disable this optimization
for programs which depend on that behavior.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fexpensive-optimizations</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform a number of minor optimizations that are relatively expensive.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-foptimize-register-move</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fregmove</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Attempt to reassign register numbers in move instructions and as
operands of other simple instructions in order to maximize the amount of
register tying.  This is especially helpful on machines with two-operand
instructions.
<p>
<!-- ignored unsupported tag .if -->
Note <b>-fregmove</b> and <b>-foptimize-register-move</b> are the same
optimization.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdelayed-branch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If supported for the target machine, attempt to reorder instructions
to exploit instruction slots available after delayed branch
instructions.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fschedule-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If supported for the target machine, attempt to reorder instructions to
eliminate execution stalls due to required data being unavailable.  This
helps machines that have slow floating point or memory load instructions
by allowing other instructions to be issued until the result of the load
or floating point instruction is required.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fschedule-insns2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Similar to <b>-fschedule-insns</b>, but requests an additional pass of
instruction scheduling after register allocation has been done.  This is
especially useful on machines with a relatively small number of
registers and where memory load instructions take more than one cycle.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-sched-interblock</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t schedule instructions across basic blocks.  This is normally
enabled by default when scheduling before register allocation, i.e.
with <b>-fschedule-insns</b> or at <b>-O2</b> or higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-sched-spec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t allow speculative motion of non-load instructions.  This is normally
enabled by default when scheduling before register allocation, i.e.
with <b>-fschedule-insns</b> or at <b>-O2</b> or higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched-spec-load</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow speculative motion of some load instructions.  This only makes
sense when scheduling before register allocation, i.e. with
<b>-fschedule-insns</b> or at <b>-O2</b> or higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched-spec-load-dangerous</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow speculative motion of more load instructions.  This only makes
sense when scheduling before register allocation, i.e. with
<b>-fschedule-insns</b> or at <b>-O2</b> or higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched-stalled-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched-stalled-insns=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Define how many insns (if any) can be moved prematurely from the queue
of stalled insns into the ready list, during the second scheduling pass.
<b>-fno-fsched-stalled-insns</b> and <b>-fsched-stalled-insns=0</b>
are equivalent and mean that no insns will be moved prematurely.
If <i>n</i> is unspecified then there is no limit on how many queued
insns can be moved prematurely.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched-stalled-insns-dep</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched-stalled-insns-dep=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Define how many insn groups (cycles) will be examined for a dependency
on a stalled insn that is candidate for premature removal from the queue
of stalled insns.  This has an effect only during the second scheduling pass,
and only if <b>-fsched-stalled-insns</b> is used and its value is not zero.
+<b>-fno-sched-stalled-insns-dep</b> is equivalent to
+<b>-fsched-stalled-insns-dep=0</b>.
+<b>-fsched-stalled-insns-dep</b> without a value is equivalent to
+<b>-fsched-stalled-insns-dep=1</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched2-use-superblocks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When scheduling after register allocation, do use superblock scheduling
algorithm.  Superblock scheduling allows motion across basic block boundaries
resulting on faster schedules.  This option is experimental, as not all machine
descriptions used by <font size="-1">GCC</font> model the <font size="-1">CPU</font> closely enough to avoid unreliable
results from the algorithm.
<p>
<!-- ignored unsupported tag .if -->
This only makes sense when scheduling after register allocation, i.e. with
<b>-fschedule-insns2</b> or at <b>-O2</b> or higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsched2-use-traces</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <b>-fsched2-use-superblocks</b> algorithm when scheduling after register
allocation and additionally perform code duplication in order to increase the
size of superblocks using tracer pass.  See <b>-ftracer</b> for details on
trace formation.
<p>
<!-- ignored unsupported tag .if -->
This mode should produce faster but significantly longer programs.  Also
without <b>-fbranch-probabilities</b> the traces constructed may not
match the reality and hurt the performance.  This only makes
sense when scheduling after register allocation, i.e. with
<b>-fschedule-insns2</b> or at <b>-O2</b> or higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-freschedule-modulo-scheduled-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The modulo scheduling comes before the traditional scheduling, if a loop was modulo scheduled
we may want to prevent the later scheduling passes from changing its schedule, we use this
option to control that.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcaller-saves</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable values to be allocated in registers that will be clobbered by
function calls, by emitting extra instructions to save and restore the
registers around such calls.  Such allocation is done only when it
seems to result in better code than would otherwise be produced.
<p>
<!-- ignored unsupported tag .if -->
This option is always enabled by default on certain machines, usually
those which have no call-preserved registers to use instead.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-pre</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform Partial Redundancy Elimination (<font size="-1">PRE</font>) on trees.  This flag is
enabled by default at <b>-O2</b> and <b>-O3</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-fre</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform Full Redundancy Elimination (<font size="-1">FRE</font>) on trees.  The difference
between <font size="-1">FRE</font> and <font size="-1">PRE</font> is that <font size="-1">FRE</font> only considers expressions
that are computed on all paths leading to the redundant computation.
This analysis faster than <font size="-1">PRE</font>, though it exposes fewer redundancies.
This flag is enabled by default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-copy-prop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform copy propagation on trees.  This pass eliminates unnecessary
copy operations.  This flag is enabled by default at <b>-O</b> and
higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-store-copy-prop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform copy propagation of memory loads and stores.  This pass
eliminates unnecessary copy operations in memory references
(structures, global variables, arrays, etc).  This flag is enabled by
default at <b>-O2</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-salias</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform structural alias analysis on trees.  This flag
is enabled by default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-sink</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform forward store motion  on trees.  This flag is
enabled by default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-ccp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform sparse conditional constant propagation (<font size="-1">CCP</font>) on trees.  This
pass only operates on local scalar variables and is enabled by default
at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-store-ccp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform sparse conditional constant propagation (<font size="-1">CCP</font>) on trees.  This
pass operates on both local scalar variables and memory stores and
loads (global variables, structures, arrays, etc).  This flag is
enabled by default at <b>-O2</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-dce</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform dead code elimination (<font size="-1">DCE</font>) on trees.  This flag is enabled by
default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-dominator-opts</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform a variety of simple scalar cleanups (constant/copy
propagation, redundancy elimination, range propagation and expression
simplification) based on a dominator tree traversal.  This also
performs jump threading (to reduce jumps to jumps). This flag is
enabled by default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-ch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform loop header copying on trees.  This is beneficial since it increases
effectiveness of code motion optimizations.  It also saves one jump.  This flag
is enabled by default at <b>-O</b> and higher.  It is not enabled
for <b>-Os</b>, since it usually increases code size.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-loop-optimize</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform loop optimizations on trees.  This flag is enabled by default
at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-loop-linear</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform linear loop transformations on tree.  This flag can improve cache
performance and allow further loop optimizations to take place.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-loop-im</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform loop invariant motion on trees.  This pass moves only invariants that
would be hard to handle at <font size="-1">RTL</font> level (function calls, operations that expand to
nontrivial sequences of insns).  With <b>-funswitch-loops</b> it also moves
operands of conditions that are invariant out of the loop, so that we can use
just trivial invariantness analysis in loop unswitching.  The pass also includes
store motion.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-loop-ivcanon</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Create a canonical counter for number of iterations in the loop for that
determining number of iterations requires complicated analysis.  Later
optimizations then may determine the number easily.  Useful especially
in connection with unrolling.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fivopts</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform induction variable optimizations (strength reduction, induction
variable merging and induction variable elimination) on trees.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-sra</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform scalar replacement of aggregates.  This pass replaces structure
references with scalars to prevent committing structures to memory too
early.  This flag is enabled by default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-copyrename</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform copy renaming on trees.  This pass attempts to rename compiler
temporaries to other variables at copy locations, usually resulting in
variable names which more closely resemble the original variables.  This flag
is enabled by default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-ter</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform temporary expression replacement during the <font size="-1">SSA-</font>&gt;normal phase.  Single
use/single def temporaries are replaced at their use location with their
defining expression.  This results in non-GIMPLE code, but gives the expanders
much more complex trees to work on resulting in better <font size="-1">RTL</font> generation.  This is
enabled by default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-lrs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform live range splitting during the <font size="-1">SSA-</font>&gt;normal phase.  Distinct live
ranges of a variable are split into unique variables, allowing for better
optimization later.  This is enabled by default at <b>-O</b> and higher.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-vectorize</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform loop vectorization on trees.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-vect-loop-version</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform loop versioning when doing loop vectorization on trees.  When a loop
appears to be vectorizable except that data alignment or data dependence cannot
be determined at compile time then vectorized and non-vectorized versions of
the loop are generated along with runtime checks for alignment or dependence
to control which version is executed.  This option is enabled by default
except at level <b>-Os</b> where it is disabled.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftree-vrp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform Value Range Propagation on trees.  This is similar to the
constant propagation pass, but instead of values, ranges of values are
propagated.  This allows the optimizers to remove unnecessary range
checks like array bound checks and null pointer checks.  This is
enabled by default at <b>-O2</b> and higher.  Null pointer check
elimination is only done if <b>-fdelete-null-pointer-checks</b> is
enabled.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftracer</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform tail duplication to enlarge superblock size.  This transformation
simplifies the control flow of the function allowing other optimizations to do
better job.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funroll-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Unroll loops whose number of iterations can be determined at compile
time or upon entry to the loop.  <b>-funroll-loops</b> implies both
<b>-fstrength-reduce</b> and <b>-frerun-cse-after-loop</b>.  This
option makes code larger, and may or may not make it run faster.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funroll-all-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Unroll all loops, even if their number of iterations is uncertain when
the loop is entered.  This usually makes programs run more slowly.
<b>-funroll-all-loops</b> implies the same options as
<b>-funroll-loops</b>,
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsplit-ivs-in-unroller</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enables expressing of values of induction variables in later iterations
of the unrolled loop using the value in the first iteration.  This breaks
long dependency chains, thus improving efficiency of the scheduling passes.
<p>
<!-- ignored unsupported tag .if -->
Combination of <b>-fweb</b> and <font size="-1">CSE</font> is often sufficient to obtain the
same effect.  However in cases the loop body is more complicated than
a single basic block, this is not reliable.  It also does not work at all
on some of the architectures due to restrictions in the <font size="-1">CSE</font> pass.
<p>
<!-- ignored unsupported tag .if -->
This optimization is enabled by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fvariable-expansion-in-unroller</b>
</td><td>
<!-- ignored unsupported tag .tm -->
With this option, the compiler will create multiple copies of some
local variables when unrolling a loop which can result in superior code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fprefetch-loop-arrays</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If supported by the target machine, generate instructions to prefetch
memory to improve the performance of loops that access large arrays.
<p>
<!-- ignored unsupported tag .if -->
These options may generate better or worse code; results are highly
dependent on the structure of loops within the source code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-peephole</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-peephole2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable any machine-specific peephole optimizations.  The difference
between <b>-fno-peephole</b> and <b>-fno-peephole2</b> is in how they
are implemented in the compiler; some targets use one, some use the
other, a few use both.
<p>
<!-- ignored unsupported tag .if -->
<b>-fpeephole</b> is enabled by default.
<b>-fpeephole2</b> enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-guess-branch-probability</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not guess branch probabilities using heuristics.
<p>
<!-- ignored unsupported tag .if -->
<font size="-1">GCC</font> will use heuristics to guess branch probabilities if they are
not provided by profiling feedback (<b>-fprofile-arcs</b>).  These
heuristics are based on the control flow graph.  If some branch probabilities
are specified by <b>__builtin_expect</b>, then the heuristics will be
used to guess branch probabilities for the rest of the control flow graph,
taking the <b>__builtin_expect</b> info into account.  The interactions
between the heuristics and <b>__builtin_expect</b> can be complex, and in
some cases, it may be useful to disable the heuristics so that the effects
of <b>__builtin_expect</b> are easier to understand.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-fguess-branch-probability</b> at levels
<b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-freorder-blocks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Reorder basic blocks in the compiled function in order to reduce number of
taken branches and improve code locality.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-freorder-blocks-and-partition</b>
</td><td>
<!-- ignored unsupported tag .tm -->
In addition to reordering basic blocks in the compiled function, in order
to reduce number of taken branches, partitions hot and cold basic blocks
into separate sections of the assembly and .o files, to improve
paging and cache locality performance.
<p>
<!-- ignored unsupported tag .if -->
This optimization is automatically turned off in the presence of
exception handling, for linkonce sections, for functions with a user-defined
section attribute and on any architecture that does not support named
sections.
</td></tr>
<tr valign="top"><td width=4%>
<b>-freorder-functions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Reorder functions in the object file in order to
improve code locality.  This is implemented by using special
subsections <tt>.text.hot</tt> for most frequently executed functions and
<tt>.text.unlikely</tt> for unlikely executed functions.  Reordering is done by
the linker so object file format must support named sections and linker must
place them in a reasonable way.
<p>
<!-- ignored unsupported tag .if -->
Also profile feedback must be available in to make this option effective.  See
<b>-fprofile-arcs</b> for details.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fstrict-aliasing</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allows the compiler to assume the strictest aliasing rules applicable to
the language being compiled.  For C (and C<font size="-2">++</font>), this activates
optimizations based on the type of expressions.  In particular, an
object of one type is assumed never to reside at the same address as an
object of a different type, unless the types are almost the same.  For
example, an <tt>unsigned int</tt> can alias an <tt>int</tt>, but not a
<tt>void*</tt> or a <tt>double</tt>.  A character type may alias any other
type.
<p>
<!-- ignored unsupported tag .if -->
Pay special attention to code like this:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        union a_union {
          int i;
          double d;
        };
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        int f() {
          a_union t;
          t.d = 3.0;
          return t.i;
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The practice of reading from a different union member than the one most
recently written to (called type-punning) is common.  Even with
<b>-fstrict-aliasing</b>, type-punning is allowed, provided the memory
is accessed through the union type.  So, the code above will work as
expected.  However, this code might not:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        int f() {
          a_union t;
          int* ip;
          t.d = 3.0;
          ip = &t.i;
          return *ip;
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Every language that wishes to perform language-specific alias analysis
should define a function that computes, given an <tt>tree</tt>
node, an alias set for the node.  Nodes in different alias sets are not
allowed to alias.  For an example, see the C front-end function
<tt>c_get_alias_set</tt>.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-falign-functions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-falign-functions=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Align the start of functions to the next power-of-two greater than
<i>n</i>, skipping up to <i>n</i> bytes.  For instance,
<b>-falign-functions=32</b> aligns functions to the next 32-byte
boundary, but <b>-falign-functions=24</b> would align to the next
32-byte boundary only if this can be done by skipping 23 bytes or less.
<p>
<!-- ignored unsupported tag .if -->
<b>-fno-align-functions</b> and <b>-falign-functions=1</b> are
equivalent and mean that functions will not be aligned.
<p>
<!-- ignored unsupported tag .if -->
Some assemblers only support this flag when <i>n</i> is a power of two;
in that case, it is rounded up.
<p>
<!-- ignored unsupported tag .if -->
If <i>n</i> is not specified or is zero, use a machine-dependent default.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-falign-labels</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-falign-labels=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Align all branch targets to a power-of-two boundary, skipping up to
<i>n</i> bytes like <b>-falign-functions</b>.  This option can easily
make code slower, because it must insert dummy operations for when the
branch target is reached in the usual flow of the code.
<p>
<!-- ignored unsupported tag .if -->
<b>-fno-align-labels</b> and <b>-falign-labels=1</b> are
equivalent and mean that labels will not be aligned.
<p>
<!-- ignored unsupported tag .if -->
If <b>-falign-loops</b> or <b>-falign-jumps</b> are applicable and
are greater than this value, then their values are used instead.
<p>
<!-- ignored unsupported tag .if -->
If <i>n</i> is not specified or is zero, use a machine-dependent default
which is very likely to be <b>1</b>, meaning no alignment.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-falign-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-falign-loops=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Align loops to a power-of-two boundary, skipping up to <i>n</i> bytes
like <b>-falign-functions</b>.  The hope is that the loop will be
executed many times, which will make up for any execution of the dummy
operations.
<p>
<!-- ignored unsupported tag .if -->
<b>-fno-align-loops</b> and <b>-falign-loops=1</b> are
equivalent and mean that loops will not be aligned.
<p>
<!-- ignored unsupported tag .if -->
If <i>n</i> is not specified or is zero, use a machine-dependent default.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-falign-jumps</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-falign-jumps=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Align branch targets to a power-of-two boundary, for branch targets
where the targets can only be reached by jumping, skipping up to <i>n</i>
bytes like <b>-falign-functions</b>.  In this case, no dummy operations
need be executed.
<p>
<!-- ignored unsupported tag .if -->
<b>-fno-align-jumps</b> and <b>-falign-jumps=1</b> are
equivalent and mean that loops will not be aligned.
<p>
<!-- ignored unsupported tag .if -->
If <i>n</i> is not specified or is zero, use a machine-dependent default.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O2</b>, <b>-O3</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funit-at-a-time</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Parse the whole compilation unit before starting to produce code.
This allows some extra optimizations to take place but consumes
more memory (in general).  There are some compatibility issues
with <i>unit-at-at-time</i> mode:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
*
</td><td>
enabling <i>unit-at-a-time</i> mode may change the order
in which functions, variables, and top-level <tt>asm</tt> statements
are emitted, and will likely break code relying on some particular
ordering.  The majority of such top-level <tt>asm</tt> statements,
though, can be replaced by <tt>section</tt> attributes.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
<i>unit-at-a-time</i> mode removes unreferenced static variables
and functions.  This may result in undefined references
when an <tt>asm</tt> statement refers directly to variables or functions
that are otherwise unused.  In that case either the variable/function
shall be listed as an operand of the <tt>asm</tt> statement operand or,
in the case of top-level <tt>asm</tt> statements the attribute <tt>used</tt>
shall be used on the declaration.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Static functions now can use non-standard passing conventions that
may break <tt>asm</tt> statements calling functions directly.  Again,
attribute <tt>used</tt> will prevent this behavior.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
As a temporary workaround, <b>-fno-unit-at-a-time</b> can be used,
but this scheme may not be supported by future releases of <font size="-1">GCC</font>.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fweb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Constructs webs as commonly used for register allocation purposes and assign
each web individual pseudo register.  This allows the register allocation pass
to operate on pseudos directly, but also strengthens several other optimization
passes, such as <font size="-1">CSE</font>, loop optimizer and trivial dead code remover.  It can,
however, make debugging impossible, since variables will no longer stay in a
home register.
<p>
<!-- ignored unsupported tag .if -->
Enabled by default with <b>-funroll-loops</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fwhole-program</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that the current compilation unit represents whole program being
compiled.  All public functions and variables with the exception of <tt>main</tt>
and those merged by attribute <tt>externally_visible</tt> become static functions
and in a affect gets more aggressively optimized by interprocedural optimizers.
While this option is equivalent to proper use of <tt>static</tt> keyword for
programs consisting of single file, in combination with option
<b>--combine</b> this flag can be used to compile most of smaller scale C
programs since the functions and variables become local for the whole combined
compilation unit, not for the single source file itself.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcprop-registers</b>
</td><td>
<!-- ignored unsupported tag .tm -->
After register allocation and post-register allocation instruction splitting,
we perform a copy-propagation pass to try to reduce scheduling dependencies
and occasionally eliminate the copy.
<p>
<!-- ignored unsupported tag .if -->
Enabled at levels <b>-O</b>, <b>-O2</b>, <b>-O3</b>, <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fprofile-generate</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable options usually used for instrumenting application to produce
profile useful for later recompilation with profile feedback based
optimization.  You must use <b>-fprofile-generate</b> both when
compiling and when linking your program.
<p>
<!-- ignored unsupported tag .if -->
The following options are enabled: <tt>-fprofile-arcs</tt>, <tt>-fprofile-values</tt>, <tt>-fvpt</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fprofile-use</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable profile feedback directed optimizations, and optimizations
generally profitable only with profile feedback available.
<p>
<!-- ignored unsupported tag .if -->
The following options are enabled: <tt>-fbranch-probabilities</tt>, <tt>-fvpt</tt>,
<tt>-funroll-loops</tt>, <tt>-fpeel-loops</tt>, <tt>-ftracer</tt>,
<tt>-fno-loop-optimize</tt>.
</td></tr>
<!-- PP ends table -->
</table>
The following options control compiler behavior regarding floating
point arithmetic.  These options trade off between speed and
correctness.  All must be specifically enabled.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-ffloat-store</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not store floating point variables in registers, and inhibit other
options that might change whether a floating point value is taken from a
register or memory.
<p>
<!-- ignored unsupported tag .if -->
This option prevents undesirable excess precision on machines such as
the 68000 where the floating registers (of the 68881) keep more
precision than a <tt>double</tt> is supposed to have.  Similarly for the
x86 architecture.  For most programs, the excess precision does only
good, but a few programs rely on the precise definition of <font size="-1">IEEE</font> floating
point.  Use <b>-ffloat-store</b> for such programs, after modifying
them to store all pertinent intermediate computations into variables.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ffast-math</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets <b>-fno-math-errno</b>, <b>-funsafe-math-optimizations</b>, <b>-fno-trapping-math</b>, <b>-ffinite-math-only</b>,
<b>-fno-rounding-math</b>, <b>-fno-signaling-nans</b>
and <b>fcx-limited-range</b>.
<p>
<!-- ignored unsupported tag .if -->
This option causes the preprocessor macro <tt>__FAST_MATH__</tt> to be defined.
<p>
<!-- ignored unsupported tag .if -->
This option should never be turned on by any <b>-O</b> option since
it can result in incorrect output for programs which depend on
an exact implementation of <font size="-1">IEEE</font> or <font size="-1">ISO</font> rules/specifications for
math functions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-math-errno</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not set <font size="-1">ERRNO</font> after calling math functions that are executed
with a single instruction, e.g., sqrt.  A program that relies on
<font size="-1">IEEE</font> exceptions for math error handling may want to use this flag
for speed while maintaining <font size="-1">IEEE</font> arithmetic compatibility.
<p>
<!-- ignored unsupported tag .if -->
This option should never be turned on by any <b>-O</b> option since
it can result in incorrect output for programs which depend on
an exact implementation of <font size="-1">IEEE</font> or <font size="-1">ISO</font> rules/specifications for
math functions.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-fmath-errno</b>.
<p>
<!-- ignored unsupported tag .if -->
On Darwin systems, the math library never sets <tt>errno</tt>.  There is therefore
no reason for the compiler to consider the possibility that it might,
and <b>-fno-math-errno</b> is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funsafe-math-optimizations</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow optimizations for floating-point arithmetic that (a) assume
that arguments and results are valid and (b) may violate <font size="-1">IEEE</font> or
<font size="-1">ANSI</font> standards.  When used at link-time, it may include libraries
or startup files that change the default <font size="-1">FPU</font> control word or other
similar optimizations.
<p>
<!-- ignored unsupported tag .if -->
This option should never be turned on by any <b>-O</b> option since
it can result in incorrect output for programs which depend on
an exact implementation of <font size="-1">IEEE</font> or <font size="-1">ISO</font> rules/specifications for
math functions.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-fno-unsafe-math-optimizations</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ffinite-math-only</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow optimizations for floating-point arithmetic that assume
that arguments and results are not NaNs or +-Infs.
<p>
<!-- ignored unsupported tag .if -->
This option should never be turned on by any <b>-O</b> option since
it can result in incorrect output for programs which depend on
an exact implementation of <font size="-1">IEEE</font> or <font size="-1">ISO</font> rules/specifications.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-fno-finite-math-only</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-trapping-math</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compile code assuming that floating-point operations cannot generate
user-visible traps.  These traps include division by zero, overflow,
underflow, inexact result and invalid operation.  This option implies
<b>-fno-signaling-nans</b>.  Setting this option may allow faster
code if one relies on non-stop <font size="-1">IEEE</font> arithmetic, for example.
<p>
<!-- ignored unsupported tag .if -->
This option should never be turned on by any <b>-O</b> option since
it can result in incorrect output for programs which depend on
an exact implementation of <font size="-1">IEEE</font> or <font size="-1">ISO</font> rules/specifications for
math functions.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-ftrapping-math</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-frounding-math</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable transformations and optimizations that assume default floating
point rounding behavior.  This is round-to-zero for all floating point
to integer conversions, and round-to-nearest for all other arithmetic
truncations.  This option should be specified for programs that change
the <font size="-1">FP</font> rounding mode dynamically, or that may be executed with a
non-default rounding mode.  This option disables constant folding of
floating point expressions at compile-time (which may be affected by
rounding mode) and arithmetic transformations that are unsafe in the
presence of sign-dependent rounding modes.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-fno-rounding-math</b>.
<p>
<!-- ignored unsupported tag .if -->
This option is experimental and does not currently guarantee to
disable all <font size="-1">GCC</font> optimizations that are affected by rounding mode.
Future versions of <font size="-1">GCC</font> may provide finer control of this setting
using C99&#146;s <tt>FENV_ACCESS</tt> pragma.  This command line option
will be used to specify the default state for <tt>FENV_ACCESS</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsignaling-nans</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compile code assuming that <font size="-1">IEEE</font> signaling NaNs may generate user-visible
traps during floating-point operations.  Setting this option disables
optimizations that may change the number of exceptions visible with
signaling NaNs.  This option implies <b>-ftrapping-math</b>.
<p>
<!-- ignored unsupported tag .if -->
This option causes the preprocessor macro <tt>__SUPPORT_SNAN__</tt> to
be defined.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-fno-signaling-nans</b>.
<p>
<!-- ignored unsupported tag .if -->
This option is experimental and does not currently guarantee to
disable all <font size="-1">GCC</font> optimizations that affect signaling NaN behavior.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fsingle-precision-constant</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Treat floating point constant as single precision constant instead of
implicitly converting it to double precision constant.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcx-limited-range</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When enabled, this option states that a range reduction step is not
needed when performing complex division.  The default is
<b>-fno-cx-limited-range</b>, but is enabled by <b>-ffast-math</b>.
<p>
<!-- ignored unsupported tag .if -->
This option controls the default setting of the <font size="-1">ISO</font> C99
<tt>CX_LIMITED_RANGE</tt> pragma.  Nevertheless, the option applies to
all languages.
</td></tr>
<!-- PP ends table -->
</table>
The following options control optimizations that may improve
performance, but are not enabled by any <b>-O</b> options.  This
section includes experimental options that may produce broken code.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-fbranch-probabilities</b>
</td><td>
<!-- ignored unsupported tag .tm -->
After running a program compiled with <b>-fprofile-arcs</b>, you can compile it a second time using
<b>-fbranch-probabilities</b>, to improve optimizations based on
the number of times each branch was taken.  When the program
compiled with <b>-fprofile-arcs</b> exits it saves arc execution
counts to a file called <i></i><i>sourcename</i><i>.gcda</i> for each source
file  The information in this data file is very dependent on the
structure of the generated code, so you must use the same source code
and the same optimization options for both compilations.
<p>
<!-- ignored unsupported tag .if -->
With <b>-fbranch-probabilities</b>, <font size="-1">GCC</font> puts a
<b><font size="-1">REG_BR_PROB</font></b> note on each <b><font size="-1">JUMP_INSN</font></b> and <b><font size="-1">CALL_INSN</font></b>.
These can be used to improve optimization.  Currently, they are only
used in one place: in <i>reorg.c</i>, instead of guessing which path a
branch is mostly to take, the <b><font size="-1">REG_BR_PROB</font></b> values are used to
exactly determine which path is taken more often.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fprofile-values</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If combined with <b>-fprofile-arcs</b>, it adds code so that some
data about values of expressions in the program is gathered.
<p>
<!-- ignored unsupported tag .if -->
With <b>-fbranch-probabilities</b>, it reads back the data gathered
from profiling values of expressions and adds <b><font size="-1">REG_VALUE_PROFILE</font></b>
notes to instructions for their later usage in optimizations.
<p>
<!-- ignored unsupported tag .if -->
Enabled with <b>-fprofile-generate</b> and <b>-fprofile-use</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fvpt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If combined with <b>-fprofile-arcs</b>, it instructs the compiler to add
a code to gather information about values of expressions.
<p>
<!-- ignored unsupported tag .if -->
With <b>-fbranch-probabilities</b>, it reads back the data gathered
and actually performs the optimizations based on them.
Currently the optimizations include specialization of division operation
using the knowledge about the value of the denominator.
</td></tr>
<tr valign="top"><td width=4%>
<b>-frename-registers</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Attempt to avoid false dependencies in scheduled code by making use
of registers left over after register allocation.  This optimization
will most benefit processors with lots of registers.  Depending on the
debug information format adopted by the target, however, it can
make debugging impossible, since variables will no longer stay in
a home register.
<p>
<!-- ignored unsupported tag .if -->
Enabled by default with <b>-funroll-loops</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftracer</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform tail duplication to enlarge superblock size.  This transformation
simplifies the control flow of the function allowing other optimizations to do
better job.
<p>
<!-- ignored unsupported tag .if -->
Enabled with <b>-fprofile-use</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funroll-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Unroll loops whose number of iterations can be determined at compile time or
upon entry to the loop.  <b>-funroll-loops</b> implies
<b>-frerun-cse-after-loop</b>, <b>-fweb</b> and <b>-frename-registers</b>.
It also turns on complete loop peeling (i.e. complete removal of loops with
small constant number of iterations).  This option makes code larger, and may
or may not make it run faster.
<p>
<!-- ignored unsupported tag .if -->
Enabled with <b>-fprofile-use</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funroll-all-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Unroll all loops, even if their number of iterations is uncertain when
the loop is entered.  This usually makes programs run more slowly.
<b>-funroll-all-loops</b> implies the same options as
<b>-funroll-loops</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpeel-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Peels the loops for that there is enough information that they do not
roll much (from profile feedback).  It also turns on complete loop peeling
(i.e. complete removal of loops with small constant number of iterations).
<p>
<!-- ignored unsupported tag .if -->
Enabled with <b>-fprofile-use</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fmove-loop-invariants</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enables the loop invariant motion pass in the new loop optimizer.  Enabled
at level <b>-O1</b>
</td></tr>
<tr valign="top"><td width=4%>
<b>-funswitch-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Move branches with loop invariant conditions out of the loop, with duplicates
of the loop on both branches (modified according to result of the condition).
</td></tr>
<tr valign="top"><td width=4%>
<b>-fprefetch-loop-arrays</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If supported by the target machine, generate instructions to prefetch
memory to improve the performance of loops that access large arrays.
<p>
<!-- ignored unsupported tag .if -->
Disabled at level <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ffunction-sections</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdata-sections</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Place each function or data item into its own section in the output
file if the target supports arbitrary sections.  The name of the
function or the name of the data item determines the section&#146;s name
in the output file.
<p>
<!-- ignored unsupported tag .if -->
Use these options on systems where the linker can perform optimizations
to improve locality of reference in the instruction space.  Most systems
using the <font size="-1">ELF</font> object format and <font size="-1">SPARC</font> processors running Solaris 2 have
linkers with such optimizations.  <font size="-1">AIX</font> may have these optimizations in
the future.
<p>
<!-- ignored unsupported tag .if -->
Only use these options when there are significant benefits from doing
so.  When you specify these options, the assembler and linker will
create larger object and executable files and will also be slower.
You will not be able to use <tt>gprof</tt> on all systems if you
specify this option and you may have problems with debugging if
you specify both this option and <b>-g</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fbranch-target-load-optimize</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform branch target register load optimization before prologue / epilogue
threading.
The use of target registers can typically be exposed only during reload,
thus hoisting loads out of loops and doing inter-block scheduling needs
a separate optimization pass.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fbranch-target-load-optimize2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform branch target register load optimization after prologue / epilogue
threading.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fbtr-bb-exclusive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When performing branch target register load optimization, don&#146;t reuse
branch target registers in within any basic block.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fstack-protector</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit extra code to check for buffer overflows, such as stack smashing
attacks.  This is done by adding a guard variable to functions with
vulnerable objects.  This includes functions that call alloca, and
functions with buffers larger than 8 bytes.  The guards are initialized
when a function is entered and then checked when the function exits.
If a guard check fails, an error message is printed and the program exits.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fstack-protector-all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>-fstack-protector</b> except that all functions are protected.
</td></tr>
<tr valign="top"><td width=4%>
<b>--param</b> <i>name</i><b>=</b><i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
In some places, <font size="-1">GCC</font> uses various constants to control the amount of
optimization that is done.  For example, <font size="-1">GCC</font> will not inline functions
that contain more that a certain number of instructions.  You can
control some of these constants on the command-line using the
<b>--param</b> option.
<p>
<!-- ignored unsupported tag .if -->
The names of specific parameters, and the meaning of the values, are
tied to the internals of the compiler, and are subject to change
without notice in future releases.
<p>
<!-- ignored unsupported tag .if -->
In each case, the <i>value</i> is an integer.  The allowable choices for
<i>name</i> are given in the following table:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>salias-max-implicit-fields</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of fields in a variable without direct
structure accesses for which structure aliasing will consider trying
to track each field.  The default is 5
</td></tr>
<tr valign="top"><td width=4%>
<b>sra-max-structure-size</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum structure size, in bytes, at which the scalar replacement
of aggregates (<font size="-1">SRA</font>) optimization will perform block copies.  The
default value, 0, implies that <font size="-1">GCC</font> will select the most appropriate
size itself.
</td></tr>
<tr valign="top"><td width=4%>
<b>sra-field-structure-ratio</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The threshold ratio (as a percentage) between instantiated fields and
the complete structure size.  We say that if the ratio of the number
of bytes in instantiated fields to the number of bytes in the complete
structure exceeds this parameter, then block copies are not used.  The
default is 75.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-crossjump-edges</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of incoming edges to consider for crossjumping.
The algorithm used by <b>-fcrossjumping</b> is O(N^2) in
the number of edges incoming to each block.  Increasing values mean
more aggressive optimization, making the compile time increase with
probably small improvement in executable size.
</td></tr>
<tr valign="top"><td width=4%>
<b>min-crossjump-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The minimum number of instructions which must be matched at the end
of two blocks before crossjumping will be performed on them.  This
value is ignored in the case where all instructions in the block being
crossjumped from are matched.  The default value is 5.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-grow-copy-bb-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum code size expansion factor when copying basic blocks
instead of jumping.  The expansion is relative to a jump instruction.
The default value is 8.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-goto-duplication-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of instructions to duplicate to a block that jumps
to a computed goto.  To avoid O(N^2) behavior in a number of
passes, <font size="-1">GCC</font> factors computed gotos early in the compilation process,
and unfactors them as late as possible.  Only computed jumps at the
end of a basic blocks with no more than max-goto-duplication-insns are
unfactored.  The default value is 8.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-delay-slot-insn-search</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of instructions to consider when looking for an
instruction to fill a delay slot.  If more than this arbitrary number of
instructions is searched, the time savings from filling the delay slot
will be minimal so stop searching.  Increasing values mean more
aggressive optimization, making the compile time increase with probably
small improvement in executable run time.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-delay-slot-live-search</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When trying to fill delay slots, the maximum number of instructions to
consider when searching for a block with valid live register
information.  Increasing this arbitrarily chosen value means more
aggressive optimization, increasing the compile time.  This parameter
should be removed when the delay slot code is rewritten to maintain the
control-flow graph.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-gcse-memory</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The approximate maximum amount of memory that will be allocated in
order to perform the global common subexpression elimination
optimization.  If more memory than specified is required, the
optimization will not be done.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-gcse-passes</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of passes of <font size="-1">GCSE</font> to run.  The default is 1.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-pending-list-length</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of pending dependencies scheduling will allow
before flushing the current state and starting over.  Large functions
with few branches or calls can create excessively large lists which
needlessly consume memory and resources.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-inline-insns-single</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Several parameters control the tree inliner used in gcc.
This number sets the maximum number of instructions (counted in <font size="-1">GCC</font>&#146;s
internal representation) in a single function that the tree inliner
will consider for inlining.  This only affects functions declared
inline and methods implemented in a class declaration (C<font size="-2">++</font>).
The default value is 450.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-inline-insns-auto</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When you use <b>-finline-functions</b> (included in <b>-O3</b>),
a lot of functions that would otherwise not be considered for inlining
by the compiler will be investigated.  To those functions, a different
(more restrictive) limit compared to functions declared inline can
be applied.
The default value is 90.
</td></tr>
<tr valign="top"><td width=4%>
<b>large-function-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The limit specifying really large functions.  For functions larger than this
limit after inlining inlining is constrained by
<b>--param large-function-growth</b>.  This parameter is useful primarily
to avoid extreme compilation time caused by non-linear algorithms used by the
backend.
This parameter is ignored when <b>-funit-at-a-time</b> is not used.
The default value is 2700.
</td></tr>
<tr valign="top"><td width=4%>
<b>large-function-growth</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies maximal growth of large function caused by inlining in percents.
This parameter is ignored when <b>-funit-at-a-time</b> is not used.
The default value is 100 which limits large function growth to 2.0 times
the original size.
</td></tr>
<tr valign="top"><td width=4%>
<b>large-unit-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The limit specifying large translation unit.  Growth caused by inlining of
units larger than this limit is limited by <b>--param inline-unit-growth</b>.
For small units this might be too tight (consider unit consisting of function A
that is inline and B that just calls A three time.  If B is small relative to
A, the growth of unit is 300&#92;% and yet such inlining is very sane.  For very
large units consisting of small inlininable functions however the overall unit
growth limit is needed to avoid exponential explosion of code size.  Thus for
smaller units, the size is increased to <b>--param large-unit-insns</b>
before aplying <b>--param inline-unit-growth</b>.  The default is 10000
</td></tr>
<tr valign="top"><td width=4%>
<b>inline-unit-growth</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies maximal overall growth of the compilation unit caused by inlining.
This parameter is ignored when <b>-funit-at-a-time</b> is not used.
The default value is 50 which limits unit growth to 1.5 times the original
size.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-inline-insns-recursive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>max-inline-insns-recursive-auto</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies maximum number of instructions out-of-line copy of self recursive inline
function can grow into by performing recursive inlining.
<p>
<!-- ignored unsupported tag .if -->
For functions declared inline <b>--param max-inline-insns-recursive</b> is
taken into account.  For function not declared inline, recursive inlining
happens only when <b>-finline-functions</b> (included in <b>-O3</b>) is
enabled and <b>--param max-inline-insns-recursive-auto</b> is used.  The
default value is 450.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-inline-recursive-depth</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>max-inline-recursive-depth-auto</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies maximum recursion depth used by the recursive inlining.
<p>
<!-- ignored unsupported tag .if -->
For functions declared inline <b>--param max-inline-recursive-depth</b> is
taken into account.  For function not declared inline, recursive inlining
happens only when <b>-finline-functions</b> (included in <b>-O3</b>) is
enabled and <b>--param max-inline-recursive-depth-auto</b> is used.  The
default value is 450.
</td></tr>
<tr valign="top"><td width=4%>
<b>min-inline-recursive-probability</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Recursive inlining is profitable only for function having deep recursion
in average and can hurt for function having little recursion depth by
increasing the prologue size or complexity of function body to other
optimizers.
<p>
<!-- ignored unsupported tag .if -->
When profile feedback is available (see <b>-fprofile-generate</b>) the actual
recursion depth can be guessed from probability that function will recurse via
given call expression.  This parameter limits inlining only to call expression
whose probability exceeds given threshold (in percents).  The default value is
10.
</td></tr>
<tr valign="top"><td width=4%>
<b>inline-call-cost</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify cost of call instruction relative to simple arithmetics operations
(having cost of 1).  Increasing this cost disqualifies inlining of non-leaf
functions and at the same time increases size of leaf function that is believed to
reduce function size by being inlined.  In effect it increases amount of
inlining for code having large abstraction penalty (many functions that just
pass the arguments to other functions) and decrease inlining for code with low
abstraction penalty.  The default value is 16.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-unrolled-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of instructions that a loop should have if that loop
is unrolled, and if the loop is unrolled, it determines how many times
the loop code is unrolled.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-average-unrolled-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of instructions biased by probabilities of their execution
that a loop should have if that loop is unrolled, and if the loop is unrolled,
it determines how many times the loop code is unrolled.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-unroll-times</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of unrollings of a single loop.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-peeled-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of instructions that a loop should have if that loop
is peeled, and if the loop is peeled, it determines how many times
the loop code is peeled.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-peel-times</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of peelings of a single loop.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-completely-peeled-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of insns of a completely peeled loop.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-completely-peel-times</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of iterations of a loop to be suitable for complete peeling.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-unswitch-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of insns of an unswitched loop.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-unswitch-level</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of branches unswitched in a single loop.
</td></tr>
<tr valign="top"><td width=4%>
<b>lim-expensive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The minimum cost of an expensive expression in the loop invariant motion.
</td></tr>
<tr valign="top"><td width=4%>
<b>iv-consider-all-candidates-bound</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Bound on number of candidates for induction variables below that
all candidates are considered for each use in induction variable
optimizations.  Only the most relevant candidates are considered
if there are more candidates, to avoid quadratic time complexity.
</td></tr>
<tr valign="top"><td width=4%>
<b>iv-max-considered-uses</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The induction variable optimizations give up on loops that contain more
induction variable uses.
</td></tr>
<tr valign="top"><td width=4%>
<b>iv-always-prune-cand-set-bound</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If number of candidates in the set is smaller than this value,
we always try to remove unnecessary ivs from the set during its
optimization when a new iv is added to the set.
</td></tr>
<tr valign="top"><td width=4%>
<b>scev-max-expr-size</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Bound on size of expressions used in the scalar evolutions analyzer.
Large expressions slow the analyzer.
</td></tr>
<tr valign="top"><td width=4%>
<b>vect-max-version-checks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of runtime checks that can be performed when doing
loop versioning in the vectorizer.  See option ftree-vect-loop-version
for more information.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-iterations-to-track</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of iterations of a loop the brute force algorithm
for analysis of # of iterations of the loop tries to evaluate.
</td></tr>
<tr valign="top"><td width=4%>
<b>hot-bb-count-fraction</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Select fraction of the maximal count of repetitions of basic block in program
given basic block needs to have to be considered hot.
</td></tr>
<tr valign="top"><td width=4%>
<b>hot-bb-frequency-fraction</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Select fraction of the maximal frequency of executions of basic block in
function given basic block needs to have to be considered hot
</td></tr>
<tr valign="top"><td width=4%>
<b>max-predicted-iterations</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of loop iterations we predict statically.  This is useful
in cases where function contain single loop with known bound and other loop
with unknown.  We predict the known number of iterations correctly, while
the unknown number of iterations average to roughly 10.  This means that the
loop without bounds would appear artificially cold relative to the other one.
</td></tr>
<tr valign="top"><td width=4%>
<b>tracer-dynamic-coverage</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>tracer-dynamic-coverage-feedback</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This value is used to limit superblock formation once the given percentage of
executed instructions is covered.  This limits unnecessary code size
expansion.
<p>
<!-- ignored unsupported tag .if -->
The <b>tracer-dynamic-coverage-feedback</b> is used only when profile
feedback is available.  The real profiles (as opposed to statically estimated
ones) are much less balanced allowing the threshold to be larger value.
</td></tr>
<tr valign="top"><td width=4%>
<b>tracer-max-code-growth</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Stop tail duplication once code growth has reached given percentage.  This is
rather hokey argument, as most of the duplicates will be eliminated later in
cross jumping, so it may be set to much higher values than is the desired code
growth.
</td></tr>
<tr valign="top"><td width=4%>
<b>tracer-min-branch-ratio</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Stop reverse growth when the reverse probability of best edge is less than this
threshold (in percent).
</td></tr>
<tr valign="top"><td width=4%>
<b>tracer-min-branch-ratio</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>tracer-min-branch-ratio-feedback</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Stop forward growth if the best edge do have probability lower than this
threshold.
<p>
<!-- ignored unsupported tag .if -->
Similarly to <b>tracer-dynamic-coverage</b> two values are present, one for
compilation for profile feedback and one for compilation without.  The value
for compilation with profile feedback needs to be more conservative (higher) in
order to make tracer effective.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-cse-path-length</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Maximum number of basic blocks on path that cse considers.  The default is 10.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-cse-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum instructions <font size="-1">CSE</font> process before flushing. The default is 1000.
</td></tr>
<tr valign="top"><td width=4%>
<b>global-var-threshold</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Counts the number of function calls (<i>n</i>) and the number of
call-clobbered variables (<i>v</i>).  If <i>n</i>x<i>v</i> is larger than this limit, a
single artificial variable will be created to represent all the
call-clobbered variables at function call sites.  This artificial
variable will then be made to alias every call-clobbered variable.
(done as <tt>int * size_t</tt> on the host machine; beware overflow).
</td></tr>
<tr valign="top"><td width=4%>
<b>max-aliased-vops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Maximum number of virtual operands allowed to represent aliases
before triggering the alias grouping heuristic.  Alias grouping
reduces compile times and memory consumption needed for aliasing at
the expense of precision loss in alias information.
</td></tr>
<tr valign="top"><td width=4%>
<b>ggc-min-expand</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">GCC</font> uses a garbage collector to manage its own memory allocation.  This
parameter specifies the minimum percentage by which the garbage
collector&#146;s heap should be allowed to expand between collections.
Tuning this may improve compilation speed; it has no effect on code
generation.
<p>
<!-- ignored unsupported tag .if -->
The default is 30% + 70% * (<font size="-1">RAM/1GB</font>) with an upper bound of 100% when
<font size="-1">RAM</font> &gt;= 1GB.  If <tt>getrlimit</tt> is available, the notion of <font size="-1">RAM</font> is
the smallest of actual <font size="-1">RAM</font> and <tt>RLIMIT_DATA</tt> or <tt>RLIMIT_AS</tt>.  If
<font size="-1">GCC</font> is not able to calculate <font size="-1">RAM</font> on a particular platform, the lower
bound of 30% is used.  Setting this parameter and
<b>ggc-min-heapsize</b> to zero causes a full collection to occur at
every opportunity.  This is extremely slow, but can be useful for
debugging.
</td></tr>
<tr valign="top"><td width=4%>
<b>ggc-min-heapsize</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Minimum size of the garbage collector&#146;s heap before it begins bothering
to collect garbage.  The first collection occurs after the heap expands
by <b>ggc-min-expand</b>% beyond <b>ggc-min-heapsize</b>.  Again,
tuning this may improve compilation speed, and has no effect on code
generation.
<p>
<!-- ignored unsupported tag .if -->
The default is the smaller of <font size="-1">RAM/8</font>, <font size="-1">RLIMIT_RSS</font>, or a limit which
tries to ensure that <font size="-1">RLIMIT_DATA</font> or <font size="-1">RLIMIT_AS</font> are not exceeded, but
with a lower bound of 4096 (four megabytes) and an upper bound of
131072 (128 megabytes).  If <font size="-1">GCC</font> is not able to calculate <font size="-1">RAM</font> on a
particular platform, the lower bound is used.  Setting this parameter
very large effectively disables garbage collection.  Setting this
parameter and <b>ggc-min-expand</b> to zero causes a full collection
to occur at every opportunity.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-reload-search-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of instruction reload should look backward for equivalent
register.  Increasing values mean more aggressive optimization, making the
compile time increase with probably slightly better performance.  The default
value is 100.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-cselib-memory-location</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of memory locations cselib should take into account.
Increasing values mean more aggressive optimization, making the compile time
increase with probably slightly better performance.  The default value is 500.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-flow-memory-location</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Similar as <b>max-cselib-memory-location</b> but for dataflow liveness.
The default value is 100.
</td></tr>
<tr valign="top"><td width=4%>
<b>reorder-blocks-duplicate</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>reorder-blocks-duplicate-feedback</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Used by basic block reordering pass to decide whether to use unconditional
branch or duplicate the code on its destination.  Code is duplicated when its
estimated size is smaller than this value multiplied by the estimated size of
unconditional jump in the hot spots of the program.
<p>
<!-- ignored unsupported tag .if -->
The <b>reorder-block-duplicate-feedback</b> is used only when profile
feedback is available and may be set to higher values than
<b>reorder-block-duplicate</b> since information about the hot spots is more
accurate.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-sched-ready-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of instructions ready to be issued the scheduler should
consider at any given time during the first scheduling pass.  Increasing
values mean more thorough searches, making the compilation time increase
with probably little benefit.  The default value is 100.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-sched-region-blocks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of blocks in a region to be considered for
interblock scheduling.  The default value is 10.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-sched-region-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum number of insns in a region to be considered for
interblock scheduling.  The default value is 100.
</td></tr>
<tr valign="top"><td width=4%>
<b>min-sched-prob</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The minimum probability of reaching a source block for interblock
speculative scheduling.  The default value is 40.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-last-value-rtl</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum size measured as number of RTLs that can be recorded in an expression
in combiner for a pseudo register as last known value of that register.  The default
is 10000.
</td></tr>
<tr valign="top"><td width=4%>
<b>integer-share-limit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Small integer constants can use a shared data structure, reducing the
compiler&#146;s memory usage and increasing its speed.  This sets the maximum
value of a shared integer constant&#146;s.  The default value is 256.
</td></tr>
<tr valign="top"><td width=4%>
<b>min-virtual-mappings</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies the minimum number of virtual mappings in the incremental
<font size="-1">SSA</font> updater that should be registered to trigger the virtual mappings
heuristic defined by virtual-mappings-ratio.  The default value is
100.
</td></tr>
<tr valign="top"><td width=4%>
<b>virtual-mappings-ratio</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If the number of virtual mappings is virtual-mappings-ratio bigger
than the number of virtual symbols to be updated, then the incremental
<font size="-1">SSA</font> updater switches to a full update for those symbols.  The default
ratio is 3.
</td></tr>
<tr valign="top"><td width=4%>
<b>ssp-buffer-size</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The minimum size of buffers (i.e. arrays) that will receive stack smashing
protection when <b>-fstack-protection</b> is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-jump-thread-duplication-stmts</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Maximum number of statements allowed in a block that needs to be
duplicated when threading jumps.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-fields-for-field-sensitive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Maximum number of fields in a structure we will treat in
a field sensitive manner during pointer analysis.
</td></tr>
</table>
</td></tr>
</table>
<h1 class="manpages">Options Controlling the Preprocessor</h1>
<!-- ignored unsupported tag .tm -->
These options control the C preprocessor, which is run on each C source
file before actual compilation.
<p>
If you use the <b>-E</b> option, nothing is done except preprocessing.
Some of these options make sense only together with <b>-E</b> because
they cause the preprocessor output to be unsuitable for actual
compilation.
<p>
<!-- ignored unsupported tag .if -->
You can use <b>-Wp,</b><i>option</i> to bypass the compiler driver
and pass <i>option</i> directly through to the preprocessor.  If
<i>option</i> contains commas, it is split into multiple options at the
commas.  However, many options are modified, translated or interpreted
by the compiler driver before being passed to the preprocessor, and
<b>-Wp</b> forcibly bypasses this phase.  The preprocessor&#146;s direct
interface is undocumented and subject to change, so whenever possible
you should avoid using <b>-Wp</b> and let the driver handle the
options instead.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-Xpreprocessor</b> <i>option</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Pass <i>option</i> as an option to the preprocessor.  You can use this to
supply system-specific preprocessor options which <font size="-1">GCC</font> does not know how to
recognize.
<p>
<!-- ignored unsupported tag .if -->
If you want to pass an option that takes an argument, you must use
<b>-Xpreprocessor</b> twice, once for the option and once for the argument.
</td></tr>
<tr valign="top"><td width=4%>
<b>-D</b> <i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Predefine <i>name</i> as a macro, with definition <tt>1</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-D</b> <i>name</i><b>=</b><i>definition</i>
</td><td>
<!-- ignored unsupported tag .tm -->
The contents of <i>definition</i> are tokenized and processed as if
they appeared during translation phase three in a <b>#define</b>
directive.  In particular, the definition will be truncated by
embedded newline characters.
<p>
<!-- ignored unsupported tag .if -->
If you are invoking the preprocessor from a shell or shell-like
program you may need to use the shell&#146;s quoting syntax to protect
characters such as spaces that have a meaning in the shell syntax.
<p>
<!-- ignored unsupported tag .if -->
If you wish to define a function-like macro on the command line, write
its argument list with surrounding parentheses before the equals sign
(if any).  Parentheses are meaningful to most shells, so you will need
to quote the option.  With <b>sh</b> and <b>csh</b>,
<b>-D&#146;</b><i>name</i><b>(</b><i>args...</i><b>)=</b><i>definition</i><b>&#146;</b> works.
<p>
<!-- ignored unsupported tag .if -->
<b>-D</b> and <b>-U</b> options are processed in the order they
are given on the command line.  All <b>-imacros</b> <i>file</i> and
<b>-include</b> <i>file</i> options are processed after all
<b>-D</b> and <b>-U</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-U</b> <i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Cancel any previous definition of <i>name</i>, either built in or
provided with a <b>-D</b> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-undef</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not predefine any system-specific or GCC-specific macros.  The
standard predefined macros remain defined.
</td></tr>
<tr valign="top"><td width=4%>
<b>-I</b> <i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add the directory <i>dir</i> to the list of directories to be searched
for header files.
Directories named by <b>-I</b> are searched before the standard
system include directories.  If the directory <i>dir</i> is a standard
system include directory, the option is ignored to ensure that the
default search order for system directories and the special treatment
of system headers are not defeated
&#46;
</td></tr>
<tr valign="top"><td width=4%>
<b>-o</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Write output to <i>file</i>.  This is the same as specifying <i>file</i>
as the second non-option argument to <b>cpp</b>.  <b>gcc</b> has a
different interpretation of a second non-option argument, so you must
use <b>-o</b> to specify the output file.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wall</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Turns on all optional warnings which are desirable for normal code.
At present this is <b>-Wcomment</b>, <b>-Wtrigraphs</b>,
<b>-Wmultichar</b> and a warning about integer promotion causing a
change of sign in <tt>#if</tt> expressions.  Note that many of the
preprocessor&#146;s warnings are on by default and have no options to
control them.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wcomment</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wcomments</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever a comment-start sequence <b>/*</b> appears in a <b>/*</b>
comment, or whenever a backslash-newline appears in a <b>//</b> comment.
(Both forms have the same effect.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wtrigraphs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Most trigraphs in comments cannot affect the meaning of the program.
However, a trigraph that would form an escaped newline (<b>??/</b> at
the end of a line) can, by changing where the comment begins or ends.
Therefore, only trigraphs that would form escaped newlines produce
warnings inside a comment.
<p>
<!-- ignored unsupported tag .if -->
This option is implied by <b>-Wall</b>.  If <b>-Wall</b> is not
given, this option is still enabled unless trigraphs are enabled.  To
get trigraph conversion without warnings, but get the other
<b>-Wall</b> warnings, use <b>-trigraphs -Wall -Wno-trigraphs</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wtraditional</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about certain constructs that behave differently in traditional and
<font size="-1">ISO</font> C.  Also warn about <font size="-1">ISO</font> C constructs that have no traditional C
equivalent, and problematic constructs which should be avoided.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wimport</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn the first time <b>#import</b> is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wundef</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever an identifier which is not a macro is encountered in an
<b>#if</b> directive, outside of <b>defined</b>.  Such identifiers are
replaced with zero.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wunused-macros</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn about macros defined in the main file that are unused.  A macro
is <i>used</i> if it is expanded or tested for existence at least once.
The preprocessor will also warn if the macro has not been used at the
time it is redefined or undefined.
<p>
<!-- ignored unsupported tag .if -->
Built-in macros, macros defined on the command line, and macros
defined in include files are not warned about.
<p>
<!-- ignored unsupported tag .if -->
<i>Note:</i> If a macro is actually used, but only used in skipped
conditional blocks, then <font size="-1">CPP</font> will report it as unused.  To avoid the
warning in such a case, you might improve the scope of the macro&#146;s
definition by, for example, moving it into the first skipped block.
Alternatively, you could provide a dummy use with something like:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        #if defined the_macro_causing_the_warning
        #endif
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wendif-labels</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn whenever an <b>#else</b> or an <b>#endif</b> are followed by text.
This usually happens in code of the form
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        #if FOO
        ...
        #else FOO
        ...
        #endif FOO
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The second and third <tt>FOO</tt> should be in comments, but often are not
in older programs.  This warning is on by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Werror</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Make all warnings into hard errors.  Source code which triggers warnings
will be rejected.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wsystem-headers</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Issue warnings for code in system headers.  These are normally unhelpful
in finding bugs in your own code, therefore suppressed.  If you are
responsible for the system library, you may want to see them.
</td></tr>
<tr valign="top"><td width=4%>
<b>-w</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Suppress all warnings, including those which <font size="-1">GNU</font> <font size="-1">CPP</font> issues by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-pedantic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Issue all the mandatory diagnostics listed in the C standard.  Some of
them are left out by default, since they trigger frequently on harmless
code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-pedantic-errors</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Issue all the mandatory diagnostics, and make all mandatory diagnostics
into errors.  This includes mandatory diagnostics that <font size="-1">GCC</font> issues
without <b>-pedantic</b> but treats as warnings.
</td></tr>
<tr valign="top"><td width=4%>
<b>-M</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Instead of outputting the result of preprocessing, output a rule
suitable for <b>make</b> describing the dependencies of the main
source file.  The preprocessor outputs one <b>make</b> rule containing
the object file name for that source file, a colon, and the names of all
the included files, including those coming from <b>-include</b> or
<b>-imacros</b> command line options.
<p>
<!-- ignored unsupported tag .if -->
Unless specified explicitly (with <b>-MT</b> or <b>-MQ</b>), the
object file name consists of the basename of the source file with any
suffix replaced with object file suffix.  If there are many included
files then the rule is split into several lines using <b>&#92;</b>-newline.
The rule has no commands.
<p>
<!-- ignored unsupported tag .if -->
This option does not suppress the preprocessor&#146;s debug output, such as
<b>-dM</b>.  To avoid mixing such debug output with the dependency
rules you should explicitly specify the dependency output file with
<b>-MF</b>, or use an environment variable like
<b><font size="-1">DEPENDENCIES_OUTPUT</font></b>.  Debug output
will still be sent to the regular output stream as normal.
<p>
<!-- ignored unsupported tag .if -->
Passing <b>-M</b> to the driver implies <b>-E</b>, and suppresses
warnings with an implicit <b>-w</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-MM</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>-M</b> but do not mention header files that are found in
system header directories, nor header files that are included,
directly or indirectly, from such a header.
<p>
<!-- ignored unsupported tag .if -->
This implies that the choice of angle brackets or double quotes in an
<b>#include</b> directive does not in itself determine whether that
header will appear in <b>-MM</b> dependency output.  This is a
slight change in semantics from <font size="-1">GCC</font> versions 3.0 and earlier.
</td></tr>
<tr valign="top"><td width=4%>
<b>-MF</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
When used with <b>-M</b> or <b>-MM</b>, specifies a
file to write the dependencies to.  If no <b>-MF</b> switch is given
the preprocessor sends the rules to the same place it would have sent
preprocessed output.
<p>
<!-- ignored unsupported tag .if -->
When used with the driver options <b>-MD</b> or <b>-MMD</b>,
<b>-MF</b> overrides the default dependency output file.
</td></tr>
<tr valign="top"><td width=4%>
<b>-MG</b>
</td><td>
<!-- ignored unsupported tag .tm -->
In conjunction with an option such as <b>-M</b> requesting
dependency generation, <b>-MG</b> assumes missing header files are
generated files and adds them to the dependency list without raising
an error.  The dependency filename is taken directly from the
<tt>#include</tt> directive without prepending any path.  <b>-MG</b>
also suppresses preprocessed output, as a missing header file renders
this useless.
<p>
<!-- ignored unsupported tag .if -->
This feature is used in automatic updating of makefiles.
</td></tr>
<tr valign="top"><td width=4%>
<b>-MP</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option instructs <font size="-1">CPP</font> to add a phony target for each dependency
other than the main file, causing each to depend on nothing.  These
dummy rules work around errors <b>make</b> gives if you remove header
files without updating the <i>Makefile</i> to match.
<p>
<!-- ignored unsupported tag .if -->
This is typical output:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        test.o: test.c test.h
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        test.h:
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-MT</b> <i>target</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Change the target of the rule emitted by dependency generation.  By
default <font size="-1">CPP</font> takes the name of the main input file, including any path,
deletes any file suffix such as <b>.c</b>, and appends the platform&#146;s
usual object suffix.  The result is the target.
<p>
<!-- ignored unsupported tag .if -->
An <b>-MT</b> option will set the target to be exactly the string you
specify.  If you want multiple targets, you can specify them as a single
argument to <b>-MT</b>, or use multiple <b>-MT</b> options.
<p>
<!-- ignored unsupported tag .if -->
For example, <b>-MT &#146;$(objpfx)foo.o&#146;</b> might give
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        $(objpfx)foo.o: foo.c
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-MQ</b> <i>target</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Same as <b>-MT</b>, but it quotes any characters which are special to
Make.  <b>-MQ &#146;$(objpfx)foo.o&#146;</b> gives
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        $$(objpfx)foo.o: foo.c
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The default target is automatically quoted, as if it were given with
<b>-MQ</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-MD</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-MD</b> is equivalent to <b>-M -MF</b> <i>file</i>, except that
<b>-E</b> is not implied.  The driver determines <i>file</i> based on
whether an <b>-o</b> option is given.  If it is, the driver uses its
argument but with a suffix of <i>.d</i>, otherwise it take the
basename of the input file and applies a <i>.d</i> suffix.
<p>
<!-- ignored unsupported tag .if -->
If <b>-MD</b> is used in conjunction with <b>-E</b>, any
<b>-o</b> switch is understood to specify the dependency output file
(but <tt>@pxref</tt>{dashMF,,-MF}), but if used without <b>-E</b>, each <b>-o</b>
is understood to specify a target object file.
<p>
<!-- ignored unsupported tag .if -->
Since <b>-E</b> is not implied, <b>-MD</b> can be used to generate
a dependency output file as a side-effect of the compilation process.
</td></tr>
<tr valign="top"><td width=4%>
<b>-MMD</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>-MD</b> except mention only user header files, not system
header files.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpch-deps</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When using precompiled headers, this flag
will cause the dependency-output flags to also list the files from the
precompiled header&#146;s dependencies.  If not specified only the
precompiled header would be listed and not the files that were used to
create it because those files are not consulted when a precompiled
header is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpch-preprocess</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option allows use of a precompiled header together with <b>-E</b>.  It inserts a special <tt>#pragma</tt>,
<tt>#pragma GCC pch_preprocess "&lt;filename&gt;"</tt> in the output to mark
the place where the precompiled header was found, and its filename.  When
<b>-fpreprocessed</b> is in use, <font size="-1">GCC</font> recognizes this <tt>#pragma</tt> and
loads the <font size="-1">PCH</font>.
<p>
<!-- ignored unsupported tag .if -->
This option is off by default, because the resulting preprocessed output
is only really suitable as input to <font size="-1">GCC</font>.  It is switched on by
<b>-save-temps</b>.
<p>
<!-- ignored unsupported tag .if -->
You should not write this <tt>#pragma</tt> in your own code, but it is
safe to edit the filename if the <font size="-1">PCH</font> file is available in a different
location.  The filename may be absolute or it may be relative to <font size="-1">GCC</font>&#146;s
current directory.
</td></tr>
<tr valign="top"><td width=4%>
<b>-x c</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-x c++</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-x objective-c</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-x assembler-with-cpp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the source language: C, C<font size="-2">++</font>, Objective-C, or assembly.  This has
nothing to do with standards conformance or extensions; it merely
selects which base syntax to expect.  If you give none of these options,
cpp will deduce the language from the extension of the source file:
<b>.c</b>, <b>.cc</b>, <b>.m</b>, or <b>.S</b>.  Some other common
extensions for C<font size="-2">++</font> and assembly are also recognized.  If cpp does not
recognize the extension, it will treat the file as C; this is the most
generic mode.
<p>
<!-- ignored unsupported tag .if -->
<i>Note:</i> Previous versions of cpp accepted a <b>-lang</b> option
which selected both the language and the standards conformance level.
This option has been removed, because it conflicts with the <b>-l</b>
option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-std=</b><i>standard</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-ansi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the standard to which the code should conform.  Currently <font size="-1">CPP</font>
knows about C and C<font size="-2">++</font> standards; others may be added in the future.
<p>
<!-- ignored unsupported tag .if -->
<i>standard</i>
may be one of:
<!-- ignored unsupported tag .ie -->
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<tt>iso9899:1990</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>c89</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
The <font size="-1">ISO</font> C standard from 1990.  <b>c89</b> is the customary shorthand for
this version of the standard.
<p>
<!-- ignored unsupported tag .if -->
The <b>-ansi</b> option is equivalent to <b>-std=c89</b>.
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>iso9899:199409</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
The 1990 C standard, as amended in 1994.
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>iso9899:1999</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>c99</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>iso9899:199x</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>c9x</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
The revised <font size="-1">ISO</font> C standard, published in December 1999.  Before
publication, this was known as C9X.
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>gnu89</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
The 1990 C standard plus <font size="-1">GNU</font> extensions.  This is the default.
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>gnu99</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>gnu9x</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
The 1999 C standard plus <font size="-1">GNU</font> extensions.
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>c++98</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
The 1998 <font size="-1">ISO</font> C<font size="-2">++</font> standard plus amendments.
<!-- ignored unsupported tag .ie -->
</td></tr>
<tr valign="top"><td width=4%>
<tt>gnu++98</tt>
</td><td>
<!-- ignored unsupported tag .tm -->
The same as <b>-std=c++98</b> plus <font size="-1">GNU</font> extensions.  This is the
default for C<font size="-2">++</font> code.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-I-</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Split the include path.  Any directories specified with <b>-I</b>
options before <b>-I-</b> are searched only for headers requested with
<tt>#include "</tt><tt>file</tt><tt>"</tt>; they are not searched for
<tt>#include &lt;</tt><tt>file</tt><tt>&gt;</tt>.  If additional directories are
specified with <b>-I</b> options after the <b>-I-</b>, those
directories are searched for all <b>#include</b> directives.
<p>
<!-- ignored unsupported tag .if -->
In addition, <b>-I-</b> inhibits the use of the directory of the current
file directory as the first search directory for <tt>#include "</tt><tt>file</tt><tt>"</tt>.
This option has been deprecated.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nostdinc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not search the standard system directories for header files.
Only the directories you have specified with <b>-I</b> options
(and the directory of the current file, if appropriate) are searched.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nostdinc++</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not search for header files in the C<font size="-2">++</font>-specific standard directories,
but do still search the other standard directories.  (This option is
used when building the C<font size="-2">++</font> library.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-include</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Process <i>file</i> as if <tt>#include "file"</tt> appeared as the first
line of the primary source file.  However, the first directory searched
for <i>file</i> is the preprocessor&#146;s working directory <i>instead of</i>
the directory containing the main source file.  If not found there, it
is searched for in the remainder of the <tt>#include "..."</tt> search
chain as normal.
<p>
<!-- ignored unsupported tag .if -->
If multiple <b>-include</b> options are given, the files are included
in the order they appear on the command line.
</td></tr>
<tr valign="top"><td width=4%>
<b>-imacros</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Exactly like <b>-include</b>, except that any output produced by
scanning <i>file</i> is thrown away.  Macros it defines remain defined.
This allows you to acquire all the macros from a header without also
processing its declarations.
<p>
<!-- ignored unsupported tag .if -->
All files specified by <b>-imacros</b> are processed before all files
specified by <b>-include</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-idirafter</b> <i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Search <i>dir</i> for header files, but do it <i>after</i> all
directories specified with <b>-I</b> and the standard system directories
have been exhausted.  <i>dir</i> is treated as a system include directory.
</td></tr>
<tr valign="top"><td width=4%>
<b>-iprefix</b> <i>prefix</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify <i>prefix</i> as the prefix for subsequent <b>-iwithprefix</b>
options.  If the prefix represents a directory, you should include the
final <b>/</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-iwithprefix</b> <i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-iwithprefixbefore</b> <i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Append <i>dir</i> to the prefix specified previously with
<b>-iprefix</b>, and add the resulting directory to the include search
path.  <b>-iwithprefixbefore</b> puts it in the same place <b>-I</b>
would; <b>-iwithprefix</b> puts it where <b>-idirafter</b> would.
</td></tr>
<tr valign="top"><td width=4%>
<b>-isysroot</b> <i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is like the <b>--sysroot</b> option, but applies only to
header files.  See the <b>--sysroot</b> option for more information.
</td></tr>
<tr valign="top"><td width=4%>
<b>-isystem</b> <i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Search <i>dir</i> for header files, after all directories specified by
<b>-I</b> but before the standard system directories.  Mark it
as a system directory, so that it gets the same special treatment as
is applied to the standard system directories.
</td></tr>
<tr valign="top"><td width=4%>
<b>-iquote</b> <i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Search <i>dir</i> only for header files requested with
<tt>#include "</tt><tt>file</tt><tt>"</tt>; they are not searched for
<tt>#include &lt;</tt><tt>file</tt><tt>&gt;</tt>, before all directories specified by
<b>-I</b> and before the standard system directories.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fdollars-in-identifiers</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Accept <b>$</b> in identifiers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fextended-identifiers</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Accept universal character names in identifiers.  This option is
experimental; in a future version of <font size="-1">GCC</font>, it will be enabled by
default for C99 and C<font size="-2">++</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpreprocessed</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Indicate to the preprocessor that the input file has already been
preprocessed.  This suppresses things like macro expansion, trigraph
conversion, escaped newline splicing, and processing of most directives.
The preprocessor still recognizes and removes comments, so that you can
pass a file preprocessed with <b>-C</b> to the compiler without
problems.  In this mode the integrated preprocessor is little more than
a tokenizer for the front ends.
<p>
<!-- ignored unsupported tag .if -->
<b>-fpreprocessed</b> is implicit if the input file has one of the
extensions <b>.i</b>, <b>.ii</b> or <b>.mi</b>.  These are the
extensions that <font size="-1">GCC</font> uses for preprocessed files created by
<b>-save-temps</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftabstop=</b><i>width</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the distance between tab stops.  This helps the preprocessor report
correct column numbers in warnings or errors, even if tabs appear on the
line.  If the value is less than 1 or greater than 100, the option is
ignored.  The default is 8.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fexec-charset=</b><i>charset</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the execution character set, used for string and character
constants.  The default is <font size="-1">UTF-8</font>.  <i>charset</i> can be any encoding
supported by the system&#146;s <tt>iconv</tt> library routine.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fwide-exec-charset=</b><i>charset</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the wide execution character set, used for wide string and
character constants.  The default is <font size="-1">UTF-32</font> or <font size="-1">UTF-16</font>, whichever
corresponds to the width of <tt>wchar_t</tt>.  As with
<b>-fexec-charset</b>, <i>charset</i> can be any encoding supported
by the system&#146;s <tt>iconv</tt> library routine; however, you will have
problems with encodings that do not fit exactly in <tt>wchar_t</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-finput-charset=</b><i>charset</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the input character set, used for translation from the character
set of the input file to the source character set used by <font size="-1">GCC</font>.  If the
locale does not specify, or <font size="-1">GCC</font> cannot get this information from the
locale, the default is <font size="-1">UTF-8</font>.  This can be overridden by either the locale
or this command line option.  Currently the command line option takes
precedence if there&#146;s a conflict.  <i>charset</i> can be any encoding
supported by the system&#146;s <tt>iconv</tt> library routine.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fworking-directory</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable generation of linemarkers in the preprocessor output that will
let the compiler know the current working directory at the time of
preprocessing.  When this option is enabled, the preprocessor will
emit, after the initial linemarker, a second linemarker with the
current working directory followed by two slashes.  <font size="-1">GCC</font> will use this
directory, when it&#146;s present in the preprocessed input, as the
directory emitted as the current working directory in some debugging
information formats.  This option is implicitly enabled if debugging
information is enabled, but this can be inhibited with the negated
form <b>-fno-working-directory</b>.  If the <b>-P</b> flag is
present in the command line, this option has no effect, since no
<tt>#line</tt> directives are emitted whatsoever.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-show-column</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not print column numbers in diagnostics.  This may be necessary if
diagnostics are being scanned by a program that does not understand the
column numbers, such as <b>dejagnu</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-A</b> <i>predicate</i><b>=</b><i>answer</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Make an assertion with the predicate <i>predicate</i> and answer
<i>answer</i>.  This form is preferred to the older form <b>-A</b>
<i>predicate</i><b>(</b><i>answer</i><b>)</b>, which is still supported, because
it does not use shell special characters.
</td></tr>
<tr valign="top"><td width=4%>
<b>-A -</b><i>predicate</i><b>=</b><i>answer</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Cancel an assertion with the predicate <i>predicate</i> and answer
<i>answer</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dCHARS</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<i><font size="-1">CHARS</font></i> is a sequence of one or more of the following characters,
and must not be preceded by a space.  Other characters are interpreted
by the compiler proper, or reserved for future versions of <font size="-1">GCC</font>, and so
are silently ignored.  If you specify characters whose behavior
conflicts, the result is undefined.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>M</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Instead of the normal output, generate a list of <b>#define</b>
directives for all the macros defined during the execution of the
preprocessor, including predefined macros.  This gives you a way of
finding out what is predefined in your version of the preprocessor.
Assuming you have no file <i>foo.h</i>, the command
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        touch foo.h; cpp -dM foo.h
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
will show all the predefined macros.
</td></tr>
<tr valign="top"><td width=4%>
<b>D</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>M</b> except in two respects: it does <i>not</i> include the
predefined macros, and it outputs <i>both</i> the <b>#define</b>
directives and the result of preprocessing.  Both kinds of output go to
the standard output file.
</td></tr>
<tr valign="top"><td width=4%>
<b>N</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>D</b>, but emit only the macro names, not their expansions.
</td></tr>
<tr valign="top"><td width=4%>
<b>I</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Output <b>#include</b> directives in addition to the result of
preprocessing.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-P</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Inhibit generation of linemarkers in the output from the preprocessor.
This might be useful when running the preprocessor on something that is
not C code, and will be sent to a program which might be confused by the
linemarkers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-C</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not discard comments.  All comments are passed through to the output
file, except for comments in processed directives, which are deleted
along with the directive.
<p>
<!-- ignored unsupported tag .if -->
You should be prepared for side effects when using <b>-C</b>; it
causes the preprocessor to treat comments as tokens in their own right.
For example, comments appearing at the start of what would be a
directive line have the effect of turning that line into an ordinary
source line, since the first token on the line is no longer a <b>#</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-CC</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not discard comments, including during macro expansion.  This is
like <b>-C</b>, except that comments contained within macros are
also passed through to the output file where the macro is expanded.
<p>
<!-- ignored unsupported tag .if -->
In addition to the side-effects of the <b>-C</b> option, the
<b>-CC</b> option causes all C<font size="-2">++</font>-style comments inside a macro
to be converted to C-style comments.  This is to prevent later use
of that macro from inadvertently commenting out the remainder of
the source line.
<p>
<!-- ignored unsupported tag .if -->
The <b>-CC</b> option is generally used to support lint comments.
</td></tr>
<tr valign="top"><td width=4%>
<b>-traditional-cpp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Try to imitate the behavior of old-fashioned C preprocessors, as
opposed to <font size="-1">ISO</font> C preprocessors.
</td></tr>
<tr valign="top"><td width=4%>
<b>-trigraphs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Process trigraph sequences.
These are three-character sequences, all starting with <b>??</b>, that
are defined by <font size="-1">ISO</font> C to stand for single characters.  For example,
<b>??/</b> stands for <b>&#92;</b>, so <b>&#146;??/n&#146;</b> is a character
constant for a newline.  By default, <font size="-1">GCC</font> ignores trigraphs, but in
standard-conforming modes it converts them.  See the <b>-std</b> and
<b>-ansi</b> options.
<p>
<!-- ignored unsupported tag .if -->
The nine trigraphs and their replacements are
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??&#146;  ??!  ??-
        Replacement:      [    ]    {    }    #    &#92;    ^    |    ~
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-remap</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable special code to work around file systems which only permit very
short file names, such as <font size="-1">MS-DOS</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>--help</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--target-help</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print text describing all the command line options instead of
preprocessing anything.
</td></tr>
<tr valign="top"><td width=4%>
<b>-v</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Verbose mode.  Print out <font size="-1">GNU</font> <font size="-1">CPP</font>&#146;s version number at the beginning of
execution, and report the final form of the include path.
</td></tr>
<tr valign="top"><td width=4%>
<b>-H</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the name of each header file used, in addition to other normal
activities.  Each name is indented to show how deep in the
<b>#include</b> stack it is.  Precompiled header files are also
printed, even if they are found to be invalid; an invalid precompiled
header file is printed with <b>...x</b> and a valid one with <b>...!</b> .
</td></tr>
<tr valign="top"><td width=4%>
<b>-version</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--version</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print out <font size="-1">GNU</font> <font size="-1">CPP</font>&#146;s version number.  With one dash, proceed to
preprocess as normal.  With two dashes, exit immediately.
</td></tr>
</table>
<h1 class="manpages">Passing Options to the Assembler</h1>
<!-- ignored unsupported tag .tm -->
You can pass options to the assembler.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-Wa,</b><i>option</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Pass <i>option</i> as an option to the assembler.  If <i>option</i>
contains commas, it is split into multiple options at the commas.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Xassembler</b> <i>option</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Pass <i>option</i> as an option to the assembler.  You can use this to
supply system-specific assembler options which <font size="-1">GCC</font> does not know how to
recognize.
<p>
<!-- ignored unsupported tag .if -->
If you want to pass an option that takes an argument, you must use
<b>-Xassembler</b> twice, once for the option and once for the argument.
</td></tr>
</table>
<h1 class="manpages">Options for Linking</h1>
<!-- ignored unsupported tag .tm -->
These options come into play when the compiler links object files into
an executable output file.  They are meaningless if the compiler is
not doing a link step.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<i>object-file-name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
A file name that does not end in a special recognized suffix is
considered to name an object file or library.  (Object files are
distinguished from libraries by the linker according to the file
contents.)  If linking is done, these object files are used as input
to the linker.
</td></tr>
<tr valign="top"><td width=4%>
<b>-c</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-S</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-E</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If any of these options is used, then the linker is not run, and
object file names should not be used as arguments. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-l</b><i>library</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-l</b> <i>library</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Search the library named <i>library</i> when linking.  (The second
alternative with the library as a separate argument is only for
<font size="-1">POSIX</font> compliance and is not recommended.)
<p>
<!-- ignored unsupported tag .if -->
It makes a difference where in the command you write this option; the
linker searches and processes libraries and object files in the order they
are specified.  Thus, <b>foo.o -lz bar.o</b> searches library <b>z</b>
after file <i>foo.o</i> but before <i>bar.o</i>.  If <i>bar.o</i> refers
to functions in <b>z</b>, those functions may not be loaded.
<p>
<!-- ignored unsupported tag .if -->
The linker searches a standard list of directories for the library,
which is actually a file named <i>lib</i><i>library</i><i>.a</i>.  The linker
then uses this file as if it had been specified precisely by name.
<p>
<!-- ignored unsupported tag .if -->
The directories searched include several standard system directories
plus any that you specify with <b>-L</b>.
<p>
<!-- ignored unsupported tag .if -->
Normally the files found this way are library files---archive files
whose members are object files.  The linker handles an archive file by
scanning through it for members which define symbols that have so far
been referenced but not defined.  But if the file that is found is an
ordinary object file, it is linked in the usual fashion.  The only
difference between using an <b>-l</b> option and specifying a file name
is that <b>-l</b> surrounds <i>library</i> with <b>lib</b> and <b>.a</b>
and searches several directories.
</td></tr>
<tr valign="top"><td width=4%>
<b>-lobjc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
You need this special case of the <b>-l</b> option in order to
link an Objective-C or Objective-C<font size="-2">++</font> program.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nostartfiles</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use the standard system startup files when linking.
The standard system libraries are used normally, unless <b>-nostdlib</b>
or <b>-nodefaultlibs</b> is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nodefaultlibs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use the standard system libraries when linking.
Only the libraries you specify will be passed to the linker.
The standard startup files are used normally, unless <b>-nostartfiles</b>
is used.  The compiler may generate calls to <tt>memcmp</tt>,
<tt>memset</tt>, <tt>memcpy</tt> and <tt>memmove</tt>.
These entries are usually resolved by entries in
libc.  These entry points should be supplied through some other
mechanism when this option is specified.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nostdlib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use the standard system startup files or libraries when linking.
No startup files and only the libraries you specify will be passed to
the linker.  The compiler may generate calls to <tt>memcmp</tt>, <tt>memset</tt>,
<tt>memcpy</tt> and <tt>memmove</tt>.
These entries are usually resolved by entries in
libc.  These entry points should be supplied through some other
mechanism when this option is specified.
<p>
<!-- ignored unsupported tag .if -->
One of the standard libraries bypassed by <b>-nostdlib</b> and
<b>-nodefaultlibs</b> is <i>libgcc.a</i>, a library of internal subroutines
that <font size="-1">GCC</font> uses to overcome shortcomings of particular machines, or special
needs for some languages.
<p>
<!-- ignored unsupported tag .if -->
In most cases, you need <i>libgcc.a</i> even when you want to avoid
other standard libraries.  In other words, when you specify <b>-nostdlib</b>
or <b>-nodefaultlibs</b> you should usually specify <b>-lgcc</b> as well.
This ensures that you have no unresolved references to internal <font size="-1">GCC</font>
library subroutines.  (For example, <b>__main</b>, used to ensure C<font size="-2">++</font>
constructors will be called.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-pie</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce a position independent executable on targets which support it.
For predictable results, you must also specify the same set of options
that were used to generate code (<b>-fpie</b>, <b>-fPIE</b>,
or model suboptions) when you specify this option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-rdynamic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Pass the flag <b>-export-dynamic</b> to the <font size="-1">ELF</font> linker, on targets
that support it. This instructs the linker to add all symbols, not
only used ones, to the dynamic symbol table. This option is needed
for some uses of <tt>dlopen</tt> or to allow obtaining backtraces
from within a program.
</td></tr>
<tr valign="top"><td width=4%>
<b>-s</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Remove all symbol table and relocation information from the executable.
</td></tr>
<tr valign="top"><td width=4%>
<b>-static</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On systems that support dynamic linking, this prevents linking with the shared
libraries.  On other systems, this option has no effect.
</td></tr>
<tr valign="top"><td width=4%>
<b>-shared</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce a shared object which can then be linked with other objects to
form an executable.  Not all systems support this option.  For predictable
results, you must also specify the same set of options that were used to
generate code (<b>-fpic</b>, <b>-fPIC</b>, or model suboptions)
when you specify this option.[1]
</td></tr>
<tr valign="top"><td width=4%>
<b>-shared-libgcc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-static-libgcc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On systems that provide <i>libgcc</i> as a shared library, these options
force the use of either the shared or static version respectively.
If no shared version of <i>libgcc</i> was built when the compiler was
configured, these options have no effect.
<p>
<!-- ignored unsupported tag .if -->
There are several situations in which an application should use the
shared <i>libgcc</i> instead of the static version.  The most common
of these is when the application wishes to throw and catch exceptions
across different shared libraries.  In that case, each of the libraries
as well as the application itself should use the shared <i>libgcc</i>.
<p>
<!-- ignored unsupported tag .if -->
Therefore, the G++ and <font size="-1">GCJ</font> drivers automatically add
<b>-shared-libgcc</b> whenever you build a shared library or a main
executable, because C<font size="-2">++</font> and Java programs typically use exceptions, so
this is the right thing to do.
<p>
<!-- ignored unsupported tag .if -->
If, instead, you use the <font size="-1">GCC</font> driver to create shared libraries, you may
find that they will not always be linked with the shared <i>libgcc</i>.
If <font size="-1">GCC</font> finds, at its configuration time, that you have a non-GNU linker
or a <font size="-1">GNU</font> linker that does not support option <b>--eh-frame-hdr</b>,
it will link the shared version of <i>libgcc</i> into shared libraries
by default.  Otherwise, it will take advantage of the linker and optimize
away the linking with the shared version of <i>libgcc</i>, linking with
the static version of libgcc by default.  This allows exceptions to
propagate through such shared libraries, without incurring relocation
costs at library load time.
<p>
<!-- ignored unsupported tag .if -->
However, if a library or main executable is supposed to throw or catch
exceptions, you must link it using the G++ or <font size="-1">GCJ</font> driver, as appropriate
for the languages used in the program, or using the option
<b>-shared-libgcc</b>, such that it is linked with the shared
<i>libgcc</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-symbolic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Bind references to global symbols when building a shared object.  Warn
about any unresolved references (unless overridden by the link editor
option <b>-Xlinker -z -Xlinker defs</b>).  Only a few systems support
this option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Xlinker</b> <i>option</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Pass <i>option</i> as an option to the linker.  You can use this to
supply system-specific linker options which <font size="-1">GCC</font> does not know how to
recognize.
<p>
<!-- ignored unsupported tag .if -->
If you want to pass an option that takes an argument, you must use
<b>-Xlinker</b> twice, once for the option and once for the argument.
For example, to pass <b>-assert definitions</b>, you must write
<b>-Xlinker -assert -Xlinker definitions</b>.  It does not work to write
<b>-Xlinker -assert definitions</b>, because this passes the entire
string as a single argument, which is not what the linker expects.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Wl,</b><i>option</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Pass <i>option</i> as an option to the linker.  If <i>option</i> contains
commas, it is split into multiple options at the commas.
</td></tr>
<tr valign="top"><td width=4%>
<b>-u</b> <i>symbol</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Pretend the symbol <i>symbol</i> is undefined, to force linking of
library modules to define it.  You can use <b>-u</b> multiple times with
different symbols to force loading of additional library modules.
</td></tr>
</table>
<h1 class="manpages">Options for Directory Search</h1>
<!-- ignored unsupported tag .tm -->
These options specify directories to search for header files, for
libraries and for parts of the compiler:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-I</b><i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add the directory <i>dir</i> to the head of the list of directories to be
searched for header files.  This can be used to override a system header
file, substituting your own version, since these directories are
searched before the system header file directories.  However, you should
not use this option to add directories that contain vendor-supplied
system header files (use <b>-isystem</b> for that).  If you use more than
one <b>-I</b> option, the directories are scanned in left-to-right
order; the standard system directories come after.
<p>
<!-- ignored unsupported tag .if -->
If a standard system include directory, or a directory specified with
<b>-isystem</b>, is also specified with <b>-I</b>, the <b>-I</b>
option will be ignored.  The directory will still be searched but as a
system directory at its normal position in the system include chain.
This is to ensure that <font size="-1">GCC</font>&#146;s procedure to fix buggy system headers and
the ordering for the include_next directive are not inadvertently changed.
If you really need to change the search order for system directories,
use the <b>-nostdinc</b> and/or <b>-isystem</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-iquote</b><i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add the directory <i>dir</i> to the head of the list of directories to
be searched for header files only for the case of <b>#include
"</b><i>file</i><b>"</b>; they are not searched for <b>#include &lt;</b><i>file</i><b>&gt;</b>,
otherwise just like <b>-I</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-L</b><i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add directory <i>dir</i> to the list of directories to be searched
for <b>-l</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-B</b><i>prefix</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option specifies where to find the executables, libraries,
include files, and data files of the compiler itself.
<p>
<!-- ignored unsupported tag .if -->
The compiler driver program runs one or more of the subprograms
<i>cpp</i>, <i>cc1</i>, <i>as</i> and <i>ld</i>.  It tries
<i>prefix</i> as a prefix for each program it tries to run, both with and
without <i>machine</i><b>/</b><i>version</i><b>/</b>.
<p>
<!-- ignored unsupported tag .if -->
For each subprogram to be run, the compiler driver first tries the
<b>-B</b> prefix, if any.  If that name is not found, or if <b>-B</b>
was not specified, the driver tries two standard prefixes, which are
<i>/usr/lib/gcc/</i> and <i>/usr/local/lib/gcc/</i>.  If neither of
those results in a file name that is found, the unmodified program
name is searched for using the directories specified in your
<b><font size="-1">PATH</font></b> environment variable.
<p>
<!-- ignored unsupported tag .if -->
The compiler will check to see if the path provided by the <b>-B</b>
refers to a directory, and if necessary it will add a directory
separator character at the end of the path.
<p>
<!-- ignored unsupported tag .if -->
<b>-B</b> prefixes that effectively specify directory names also apply
to libraries in the linker, because the compiler translates these
options into <b>-L</b> options for the linker.  They also apply to
includes files in the preprocessor, because the compiler translates these
options into <b>-isystem</b> options for the preprocessor.  In this case,
the compiler appends <b>include</b> to the prefix.
<p>
<!-- ignored unsupported tag .if -->
The run-time support file <i>libgcc.a</i> can also be searched for using
the <b>-B</b> prefix, if needed.  If it is not found there, the two
standard prefixes above are tried, and that is all.  The file is left
out of the link if it is not found by those means.
<p>
<!-- ignored unsupported tag .if -->
Another way to specify a prefix much like the <b>-B</b> prefix is to use
the environment variable <b><font size="-1">GCC_EXEC_PREFIX</font></b>. 
<p>
<!-- ignored unsupported tag .if -->
As a special kludge, if the path provided by <b>-B</b> is
<i>[dir/]stage</i><i>N</i><i>/</i>, where <i>N</i> is a number in the range 0 to
9, then it will be replaced by <i>[dir/]include</i>.  This is to help
with boot-strapping the compiler.
</td></tr>
<tr valign="top"><td width=4%>
<b>-specs=</b><i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Process <i>file</i> after the compiler reads in the standard <i>specs</i>
file, in order to override the defaults that the <i>gcc</i> driver
program uses when determining what switches to pass to <i>cc1</i>,
<i>cc1plus</i>, <i>as</i>, <i>ld</i>, etc.  More than one
<b>-specs=</b><i>file</i> can be specified on the command line, and they
are processed in order, from left to right.
</td></tr>
<tr valign="top"><td width=4%>
<b>--sysroot=</b><i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <i>dir</i> as the logical root directory for headers and libraries.
For example, if the compiler would normally search for headers in
<i>/usr/include</i> and libraries in <i>/usr/lib</i>, it will instead
search <i></i><i>dir</i><i>/usr/include</i> and <i></i><i>dir</i><i>/usr/lib</i>. 
<p>
<!-- ignored unsupported tag .if -->
If you use both this option and the <b>-isysroot</b> option, then
the <b>--sysroot</b> option will apply to libraries, but the
<b>-isysroot</b> option will apply to header files.
<p>
<!-- ignored unsupported tag .if -->
The <font size="-1">GNU</font> linker (beginning with version 2.16) has the necessary support
for this option.  If your linker does not support this option, the
header file aspect of <b>--sysroot</b> will still work, but the
library aspect will not.
</td></tr>
<tr valign="top"><td width=4%>
<b>-I-</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option has been deprecated.  Please use <b>-iquote</b> instead for
<b>-I</b> directories before the <b>-I-</b> and remove the <b>-I-</b>.
Any directories you specify with <b>-I</b> options before the <b>-I-</b>
option are searched only for the case of <b>#include "</b><i>file</i><b>"</b>;
they are not searched for <b>#include &lt;</b><i>file</i><b>&gt;</b>.
<p>
<!-- ignored unsupported tag .if -->
If additional directories are specified with <b>-I</b> options after
the <b>-I-</b>, these directories are searched for all <b>#include</b>
directives.  (Ordinarily <i>all</i> <b>-I</b> directories are used
this way.)
<p>
<!-- ignored unsupported tag .if -->
In addition, the <b>-I-</b> option inhibits the use of the current
directory (where the current input file came from) as the first search
directory for <b>#include "</b><i>file</i><b>"</b>.  There is no way to
override this effect of <b>-I-</b>.  With <b>-I.</b> you can specify
searching the directory which was current when the compiler was
invoked.  That is not exactly the same as what the preprocessor does
by default, but it is often satisfactory.
<p>
<!-- ignored unsupported tag .if -->
<b>-I-</b> does not inhibit the use of the standard system directories
for header files.  Thus, <b>-I-</b> and <b>-nostdinc</b> are
independent.
</td></tr>
</table>
<h1 class="manpages">Specifying Target Machine and Compiler Version</h1>
<!-- ignored unsupported tag .tm -->
The usual way to run <font size="-1">GCC</font> is to run the executable called <i>gcc</i>, or
<i>&lt;machine&gt;-gcc</i> when cross-compiling, or
<i>&lt;machine&gt;-gcc-&lt;version&gt;</i> to run a version other than the one that
was installed last.  Sometimes this is inconvenient, so <font size="-1">GCC</font> provides
options that will switch to another cross-compiler or version.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-b</b> <i>machine</i>
</td><td>
<!-- ignored unsupported tag .tm -->
The argument <i>machine</i> specifies the target machine for compilation.
<p>
<!-- ignored unsupported tag .if -->
The value to use for <i>machine</i> is the same as was specified as the
machine type when configuring <font size="-1">GCC</font> as a cross-compiler.  For
example, if a cross-compiler was configured with <b>configure
arm-elf</b>, meaning to compile for an arm processor with elf binaries,
then you would specify <b>-b arm-elf</b> to run that cross compiler.
Because there are other options beginning with <b>-b</b>, the
configuration must contain a hyphen.
</td></tr>
<tr valign="top"><td width=4%>
<b>-V</b> <i>version</i>
</td><td>
<!-- ignored unsupported tag .tm -->
The argument <i>version</i> specifies which version of <font size="-1">GCC</font> to run.
This is useful when multiple versions are installed.  For example,
<i>version</i> might be <b>4.0</b>, meaning to run <font size="-1">GCC</font> version 4.0.
</td></tr>
<!-- PP ends table -->
</table>
The <b>-V</b> and <b>-b</b> options work by running the
<i>&lt;machine&gt;-gcc-&lt;version&gt;</i> executable, so there&#146;s no real reason to
use them if you can just run that directly.
<h1 class="manpages">Hardware Models and Configurations</h1>
<!-- ignored unsupported tag .tm -->
Earlier we discussed the standard option <b>-b</b> which chooses among
different installed compilers for completely different target
machines, such as <font size="-1">VAX</font> vs. 68000 vs. 80386.
<p>
In addition, each of these target machine types can have its own
special options, starting with <b>-m</b>, to choose among various
hardware models or configurations---for example, 68010 vs 68020,
floating coprocessor or none.  A single installed version of the
compiler can compile for any model or configuration, according to the
options specified.
<p>
Some configurations of the compiler also support additional special
options, usually for compatibility with other compilers on the same
platform.
<h1 class="manpages"><font size="-1">ARC</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These options are defined for <font size="-1">ARC</font> implementations:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-EL</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compile code for little endian mode.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-EB</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compile code for big endian mode.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmangle-cpu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Prepend the name of the cpu to all public symbol names.
In multiple-processor systems, there are many <font size="-1">ARC</font> variants with different
instruction and register set characteristics.  This flag prevents code
compiled for one cpu to be linked with code compiled for another.
No facility exists for handling variants that are almost identical.
This is an all or nothing option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>cpu</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Compile code for <font size="-1">ARC</font> variant <i>cpu</i>.
Which variants are supported depend on the configuration.
All variants support <b>-mcpu=base</b>, this is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtext=</b><i>text-section</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdata=</b><i>data-section</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrodata=</b><i>readonly-data-section</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Put functions, data, and readonly data in <i>text-section</i>,
<i>data-section</i>, and <i>readonly-data-section</i> respectively
by default.  This can be overridden with the <tt>section</tt> attribute.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">ARM</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for Advanced <font size="-1">RISC</font> Machines (<font size="-1">ARM</font>)
architectures:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mabi=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the specified <font size="-1">ABI</font>.  Permissible values are: <b>apcs-gnu</b>,
<b>atpcs</b>, <b>aapcs</b>, <b>aapcs-linux</b> and <b>iwmmxt</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mapcs-frame</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate a stack frame that is compliant with the <font size="-1">ARM</font> Procedure Call
Standard for all functions, even if this is not strictly necessary for
correct execution of the code.  Specifying <b>-fomit-frame-pointer</b>
with this option will cause the stack frames not to be generated for
leaf functions.  The default is <b>-mno-apcs-frame</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mapcs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This is a synonym for <b>-mapcs-frame</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mthumb-interwork</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code which supports calling between the <font size="-1">ARM</font> and Thumb
instruction sets.  Without this option the two instruction sets cannot
be reliably used inside one program.  The default is
<b>-mno-thumb-interwork</b>, since slightly larger code is generated
when <b>-mthumb-interwork</b> is specified.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sched-prolog</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Prevent the reordering of instructions in the function prolog, or the
merging of those instruction with the instructions in the function&#146;s
body.  This means that all functions will start with a recognizable set
of instructions (or in fact one of a choice from a small set of
different function prologues), and this information can be used to
locate the start if functions inside an executable piece of code.  The
default is <b>-msched-prolog</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mhard-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing floating point instructions.  This is the
default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing library calls for floating point.
<b>Warning:</b> the requisite libraries are not available for all <font size="-1">ARM</font>
targets.  Normally the facilities of the machine&#146;s usual C compiler are
used, but this cannot be done directly in cross-compilation.  You must make
your own arrangements to provide suitable library functions for
cross-compilation.
<p>
<!-- ignored unsupported tag .if -->
<b>-msoft-float</b> changes the calling convention in the output file;
therefore, it is only useful if you compile <i>all</i> of a program with
this option.  In particular, you need to compile <i>libgcc.a</i>, the
library that comes with <font size="-1">GCC</font>, with <b>-msoft-float</b> in order for
this to work.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfloat-abi=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies which <font size="-1">ABI</font> to use for floating point values.  Permissible values
are: <b>soft</b>, <b>softfp</b> and <b>hard</b>.
<p>
<!-- ignored unsupported tag .if -->
<b>soft</b> and <b>hard</b> are equivalent to <b>-msoft-float</b>
and <b>-mhard-float</b> respectively.  <b>softfp</b> allows the generation
of floating point instructions, but still uses the soft-float calling
conventions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlittle-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a processor running in little-endian mode.  This is
the default for all standard configurations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbig-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a processor running in big-endian mode; the default is
to compile code for a little-endian processor.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mwords-little-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option only applies when generating code for big-endian processors.
Generate code for a little-endian word order but a big-endian byte
order.  That is, a byte order of the form <b>32107654</b>.  Note: this
option should only be used if you require compatibility with code for
big-endian <font size="-1">ARM</font> processors generated by versions of the compiler prior to
2.8.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This specifies the name of the target <font size="-1">ARM</font> processor.  <font size="-1">GCC</font> uses this name
to determine what kind of instructions it can emit when generating
assembly code.  Permissible names are: <b>arm2</b>, <b>arm250</b>,
<b>arm3</b>, <b>arm6</b>, <b>arm60</b>, <b>arm600</b>, <b>arm610</b>,
<b>arm620</b>, <b>arm7</b>, <b>arm7m</b>, <b>arm7d</b>, <b>arm7dm</b>,
<b>arm7di</b>, <b>arm7dmi</b>, <b>arm70</b>, <b>arm700</b>,
<b>arm700i</b>, <b>arm710</b>, <b>arm710c</b>, <b>arm7100</b>,
<b>arm7500</b>, <b>arm7500fe</b>, <b>arm7tdmi</b>, <b>arm7tdmi-s</b>,
<b>arm8</b>, <b>strongarm</b>, <b>strongarm110</b>, <b>strongarm1100</b>,
<b>arm8</b>, <b>arm810</b>, <b>arm9</b>, <b>arm9e</b>, <b>arm920</b>,
<b>arm920t</b>, <b>arm922t</b>, <b>arm946e-s</b>, <b>arm966e-s</b>,
<b>arm968e-s</b>, <b>arm926ej-s</b>, <b>arm940t</b>, <b>arm9tdmi</b>,
<b>arm10tdmi</b>, <b>arm1020t</b>, <b>arm1026ej-s</b>,
<b>arm10e</b>, <b>arm1020e</b>, <b>arm1022e</b>,
<b>arm1136j-s</b>, <b>arm1136jf-s</b>, <b>mpcore</b>, <b>mpcorenovfp</b>,
<b>arm1176jz-s</b>, <b>arm1176jzf-s</b>, <b>xscale</b>, <b>iwmmxt</b>,
<b>ep9312</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is very similar to the <b>-mcpu=</b> option, except that
instead of specifying the actual target processor type, and hence
restricting which instructions can be used, it specifies that <font size="-1">GCC</font> should
tune the performance of the code as if the target were of the type
specified in this option, but still choosing the instructions that it
will generate based on the cpu specified by a <b>-mcpu=</b> option.
For some <font size="-1">ARM</font> implementations better performance can be obtained by using
this option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-march=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This specifies the name of the target <font size="-1">ARM</font> architecture.  <font size="-1">GCC</font> uses this
name to determine what kind of instructions it can emit when generating
assembly code.  This option can be used in conjunction with or instead
of the <b>-mcpu=</b> option.  Permissible names are: <b>armv2</b>,
<b>armv2a</b>, <b>armv3</b>, <b>armv3m</b>, <b>armv4</b>, <b>armv4t</b>,
<b>armv5</b>, <b>armv5t</b>, <b>armv5te</b>, <b>armv6</b>, <b>armv6j</b>,
<b>iwmmxt</b>, <b>ep9312</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfpu=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfpe=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfp=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This specifies what floating point hardware (or hardware emulation) is
available on the target.  Permissible names are: <b>fpa</b>, <b>fpe2</b>,
<b>fpe3</b>, <b>maverick</b>, <b>vfp</b>.  <b>-mfp</b> and <b>-mfpe</b>
are synonyms for <b>-mfpu</b>=<b>fpe</b><i>number</i>, for compatibility
with older versions of <font size="-1">GCC</font>.
<p>
<!-- ignored unsupported tag .if -->
If <b>-msoft-float</b> is specified this specifies the format of
floating point values.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mstructure-size-boundary=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
The size of all structures and unions will be rounded up to a multiple
of the number of bits set by this option.  Permissible values are 8, 32
and 64.  The default value varies for different toolchains.  For the <font size="-1">COFF</font>
targeted toolchain the default value is 8.  A value of 64 is only allowed
if the underlying <font size="-1">ABI</font> supports it.
<p>
<!-- ignored unsupported tag .if -->
Specifying the larger number can produce faster, more efficient code, but
can also increase the size of the program.  Different values are potentially
incompatible.  Code compiled with one value cannot necessarily expect to
work with code or libraries compiled with another value, if they exchange
information using structures or unions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabort-on-noreturn</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate a call to the function <tt>abort</tt> at the end of a
<tt>noreturn</tt> function.  It will be executed if the function tries to
return.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-long-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Tells the compiler to perform function calls by first loading the
address of the function into a register and then performing a subroutine
call on this register.  This switch is needed if the target function
will lie outside of the 64 megabyte addressing range of the offset based
version of subroutine call instruction.
<p>
<!-- ignored unsupported tag .if -->
Even if this switch is enabled, not all function calls will be turned
into long calls.  The heuristic is that static functions, functions
which have the <b>short-call</b> attribute, functions that are inside
the scope of a <b>#pragma no_long_calls</b> directive and functions whose
definitions have already been compiled within the current compilation
unit, will not be turned into long calls.  The exception to this rule is
that weak function definitions, functions with the <b>long-call</b>
attribute or the <b>section</b> attribute, and functions that are within
the scope of a <b>#pragma long_calls</b> directive, will always be
turned into long calls.
<p>
<!-- ignored unsupported tag .if -->
This feature is not enabled by default.  Specifying
<b>-mno-long-calls</b> will restore the default behavior, as will
placing the function calls within the scope of a <b>#pragma
long_calls_off</b> directive.  Note these switches have no effect on how
the compiler generates code to handle function calls via function
pointers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mnop-fun-dllimport</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable support for the <tt>dllimport</tt> attribute.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msingle-pic-base</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Treat the register used for <font size="-1">PIC</font> addressing as read-only, rather than
loading it in the prologue for each function.  The run-time system is
responsible for initializing this register with an appropriate value
before execution begins.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpic-register=</b><i>reg</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the register to be used for <font size="-1">PIC</font> addressing.  The default is R10
unless stack-checking is enabled, when R9 is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcirrus-fix-invalid-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Insert NOPs into the instruction stream to in order to work around
problems with invalid Maverick instruction combinations.  This option
is only valid if the <b>-mcpu=ep9312</b> option has been used to
enable generation of instructions for the Cirrus Maverick floating
point co-processor.  This option is not enabled by default, since the
problem is only present in older Maverick implementations.  The default
can be re-enabled by use of the <b>-mno-cirrus-fix-invalid-insns</b>
switch.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpoke-function-name</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Write the name of each function into the text section, directly
preceding the function prologue.  The generated code is similar to this:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
             t0
                 .ascii "arm_poke_function_name", 0
                 .align
             t1
                 .word 0xff000000 + (t1 - t0)
             arm_poke_function_name
                 mov     ip, sp
                 stmfd   sp!, {fp, ip, lr, pc}
                 sub     fp, ip, #4
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
When performing a stack backtrace, code can inspect the value of
<tt>pc</tt> stored at <tt>fp + 0</tt>.  If the trace function then looks at
location <tt>pc - 12</tt> and the top 8 bits are set, then we know that
there is a function name embedded immediately preceding this location
and has length <tt>((pc[-3]) & 0xff000000)</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mthumb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the 16-bit Thumb instruction set.  The default is to
use the 32-bit <font size="-1">ARM</font> instruction set.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtpcs-frame</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate a stack frame that is compliant with the Thumb Procedure Call
Standard for all non-leaf functions.  (A leaf function is one that does
not call any other functions.)  The default is <b>-mno-tpcs-frame</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtpcs-leaf-frame</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate a stack frame that is compliant with the Thumb Procedure Call
Standard for all leaf functions.  (A leaf function is one that does
not call any other functions.)  The default is <b>-mno-apcs-leaf-frame</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcallee-super-interworking</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Gives all externally visible functions in the file being compiled an <font size="-1">ARM</font>
instruction set header which switches to Thumb mode before executing the
rest of the function.  This allows these functions to be called from
non-interworking code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcaller-super-interworking</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allows calls via function pointers (including virtual functions) to
execute correctly regardless of whether the target code has been
compiled for interworking or not.  There is a small overhead in the cost
of executing a function pointer if this option is enabled.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtp=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the access model for the thread local storage pointer.  The valid
models are <b>soft</b>, which generates calls to <tt>__aeabi_read_tp</tt>,
<b>cp15</b>, which fetches the thread pointer from <tt>cp15</tt> directly
(supported in the arm6k architecture), and <b>auto</b>, which uses the
best available method for the selected processor.  The default setting is
<b>auto</b>.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">AVR</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These options are defined for <font size="-1">AVR</font> implementations:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mmcu=</b><i>mcu</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify <font size="-1">ATMEL</font> <font size="-1">AVR</font> instruction set or <font size="-1">MCU</font> type.
<p>
<!-- ignored unsupported tag .if -->
Instruction set avr1 is for the minimal <font size="-1">AVR</font> core, not supported by the C
compiler, only for assembler programs (<font size="-1">MCU</font> types: at90s1200, attiny10,
attiny11, attiny12, attiny15, attiny28).
<p>
<!-- ignored unsupported tag .if -->
Instruction set avr2 (default) is for the classic <font size="-1">AVR</font> core with up to
8K program memory space (<font size="-1">MCU</font> types: at90s2313, at90s2323, attiny22,
at90s2333, at90s2343, at90s4414, at90s4433, at90s4434, at90s8515,
at90c8534, at90s8535).
<p>
<!-- ignored unsupported tag .if -->
Instruction set avr3 is for the classic <font size="-1">AVR</font> core with up to 128K program
memory space (<font size="-1">MCU</font> types: atmega103, atmega603, at43usb320, at76c711).
<p>
<!-- ignored unsupported tag .if -->
Instruction set avr4 is for the enhanced <font size="-1">AVR</font> core with up to 8K program
memory space (<font size="-1">MCU</font> types: atmega8, atmega83, atmega85).
<p>
<!-- ignored unsupported tag .if -->
Instruction set avr5 is for the enhanced <font size="-1">AVR</font> core with up to 128K program
memory space (<font size="-1">MCU</font> types: atmega16, atmega161, atmega163, atmega32, atmega323,
atmega64, atmega128, at43usb355, at94k).
</td></tr>
<tr valign="top"><td width=4%>
<b>-msize</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Output instruction sizes to the asm file.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minit-stack=</b><i>N</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the initial stack address, which may be a symbol or numeric value,
<b>__stack</b> is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-interrupts</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generated code is not compatible with hardware interrupts.
Code size will be smaller.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcall-prologues</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Functions prologues/epilogues expanded as call to appropriate
subroutines.  Code size will be smaller.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-tablejump</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not generate tablejump insns which sometimes increase code size.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtiny-stack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Change only the low 8 bits of the stack pointer.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mint8</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume int to be 8 bit integer.  This affects the sizes of all types: A
char will be 1 byte, an int will be 1 byte, an long will be 2 bytes
and long long will be 4 bytes.  Please note that this option does not
comply to the C standards, but it will provide you with smaller code
size.
</td></tr>
</table>
<h1 class="manpages">Blackfin Options</h1>
<!-- ignored unsupported tag .tm -->
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-momit-leaf-frame-pointer</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t keep the frame pointer in a register for leaf functions.  This
avoids the instructions to save, set up and restore frame pointers and
makes an extra register available in leaf functions.  The option
<b>-fomit-frame-pointer</b> removes the frame pointer for all functions
which might make debugging harder.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mspecld-anomaly</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When enabled, the compiler will ensure that the generated code does not
contain speculative loads after jump instructions.  This option is enabled
by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-specld-anomaly</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t generate extra code to prevent speculative loads from occurring.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcsync-anomaly</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When enabled, the compiler will ensure that the generated code does not
contain <font size="-1">CSYNC</font> or <font size="-1">SSYNC</font> instructions too soon after conditional branches.
This option is enabled by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-csync-anomaly</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t generate extra code to prevent <font size="-1">CSYNC</font> or <font size="-1">SSYNC</font> instructions from
occurring too soon after a conditional branch.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlow-64k</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When enabled, the compiler is free to take advantage of the knowledge that
the entire program fits into the low 64k of memory.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-low-64k</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that the program is arbitrarily large.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mid-shared-library</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that supports shared libraries via the library <font size="-1">ID</font> method.
This allows for execute in place and shared libraries in an environment
without virtual memory management.  This option implies <b>-fPIC</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-id-shared-library</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that doesn&#146;t assume <font size="-1">ID</font> based shared libraries are being used.
This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mshared-library-id=n</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specified the identification number of the <font size="-1">ID</font> based shared library being
compiled.  Specifying a value of 0 will generate more compact code, specifying
other values will force the allocation of that number to the current
library but is no more space or time efficient than omitting this option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-long-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Tells the compiler to perform function calls by first loading the
address of the function into a register and then performing a subroutine
call on this register.  This switch is needed if the target function
will lie outside of the 24 bit addressing range of the offset based
version of subroutine call instruction.
<p>
<!-- ignored unsupported tag .if -->
This feature is not enabled by default.  Specifying
<b>-mno-long-calls</b> will restore the default behavior.  Note these
switches have no effect on how the compiler generates code to handle
function calls via function pointers.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">CRIS</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These options are defined specifically for the <font size="-1">CRIS</font> ports.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-march=</b><i>architecture-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>architecture-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the specified architecture.  The choices for
<i>architecture-type</i> are <b>v3</b>, <b>v8</b> and <b>v10</b> for
respectively <font size="-1">ETRAX</font> 4, <font size="-1">ETRAX</font> 100, and <font size="-1">ETRAX</font> 100 <font size="-1">LX</font>.
Default is <b>v0</b> except for cris-axis-linux-gnu, where the default is
<b>v10</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>architecture-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Tune to <i>architecture-type</i> everything applicable about the generated
code, except for the <font size="-1">ABI</font> and the set of available instructions.  The
choices for <i>architecture-type</i> are the same as for
<b>-march=</b><i>architecture-type</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmax-stack-frame=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when the stack frame of a function exceeds <i>n</i> bytes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-melinux-stacksize=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Only available with the <b>cris-axis-aout</b> target.  Arranges for
indications in the program to the kernel loader that the stack of the
program should be set to <i>n</i> bytes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-metrax4</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-metrax100</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The options <b>-metrax4</b> and <b>-metrax100</b> are synonyms for
<b>-march=v3</b> and <b>-march=v8</b> respectively.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmul-bug-workaround</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mul-bug-workaround</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Work around a bug in the <tt>muls</tt> and <tt>mulu</tt> instructions for <font size="-1">CPU</font>
models where it applies.  This option is active by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpdebug</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable CRIS-specific verbose debug-related information in the assembly
code.  This option also has the effect to turn off the <b>#NO_APP</b>
formatted-code indicator to the assembler at the beginning of the
assembly file.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcc-init</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use condition-code results from previous instruction; always emit
compare and test instructions before use of condition codes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-side-effects</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not emit instructions with side-effects in addressing modes other than
post-increment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mstack-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-stack-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdata-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-data-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mconst-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-const-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These options (no-options) arranges (eliminate arrangements) for the
stack-frame, individual data and constants to be aligned for the maximum
single data access size for the chosen <font size="-1">CPU</font> model.  The default is to
arrange for 32-bit alignment.  <font size="-1">ABI</font> details such as structure layout are
not affected by these options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m32-bit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m16-bit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m8-bit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Similar to the stack- data- and const-align options above, these options
arrange for stack-frame, writable data and constants to all be 32-bit,
16-bit or 8-bit aligned.  The default is 32-bit alignment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-prologue-epilogue</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mprologue-epilogue</b>
</td><td>
<!-- ignored unsupported tag .tm -->
With <b>-mno-prologue-epilogue</b>, the normal function prologue and
epilogue that sets up the stack-frame are omitted and no return
instructions or return sequences are generated in the code.  Use this
option only together with visual inspection of the compiled code: no
warnings or errors are generated when call-saved registers must be saved,
or storage for local variable needs to be allocated.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-gotplt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgotplt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
With <b>-fpic</b> and <b>-fPIC</b>, don&#146;t generate (do generate)
instruction sequences that load addresses for functions from the <font size="-1">PLT</font> part
of the <font size="-1">GOT</font> rather than (traditional on other architectures) calls to the
<font size="-1">PLT</font>.  The default is <b>-mgotplt</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-maout</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Legacy no-op option only recognized with the cris-axis-aout target.
</td></tr>
<tr valign="top"><td width=4%>
<b>-melf</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Legacy no-op option only recognized with the cris-axis-elf and
cris-axis-linux-gnu targets.
</td></tr>
<tr valign="top"><td width=4%>
<b>-melinux</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Only recognized with the cris-axis-aout target, where it selects a
GNU/linux-like multilib, include files and instruction set for
<b>-march=v8</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlinux</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Legacy no-op option only recognized with the cris-axis-linux-gnu target.
</td></tr>
<tr valign="top"><td width=4%>
<b>-sim</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option, recognized for the cris-axis-aout and cris-axis-elf arranges
to link with input-output functions from a simulator library.  Code,
initialized data and zero-initialized data are allocated consecutively.
</td></tr>
<tr valign="top"><td width=4%>
<b>-sim2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>-sim</b>, but pass linker options to locate initialized data at
0x40000000 and zero-initialized data at 0x80000000.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">CRX</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These options are defined specifically for the <font size="-1">CRX</font> ports.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mmac</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of multiply-accumulate instructions. Disabled by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpush-args</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Push instructions will be used to pass outgoing arguments when functions
are called. Enabled by default.
</td></tr>
</table>
<h1 class="manpages">Darwin Options</h1>
<!-- ignored unsupported tag .tm -->
These options are defined for all architectures running the Darwin operating
system.
<p>
<font size="-1">FSF</font> <font size="-1">GCC</font> on Darwin does not create fat object files; it will create
an object file for the single architecture that it was built to
target.  Apple&#146;s <font size="-1">GCC</font> on Darwin does create fat files if multiple
<b>-arch</b> options are used; it does so by running the compiler or
linker multiple times and joining the results together with
<i>lipo</i>.
<p>
The subtype of the file created (like <b>ppc7400</b> or <b>ppc970</b> or
<b>i686</b>) is determined by the flags that specify the <font size="-1">ISA</font>
that <font size="-1">GCC</font> is targetting, like <b>-mcpu</b> or <b>-march</b>.  The
<b>-force_cpusubtype_ALL</b> option can be used to override this.
<p>
The Darwin tools vary in their behavior when presented with an <font size="-1">ISA</font>
mismatch.  The assembler, <i>as</i>, will only permit instructions to
be used that are valid for the subtype of the file it is generating,
so you cannot put 64-bit instructions in an <b>ppc750</b> object file.
The linker for shared libraries, <i>/usr/bin/libtool</i>, will fail
and print an error if asked to create a shared library with a less
restrictive subtype than its input files (for instance, trying to put
a <b>ppc970</b> object file in a <b>ppc7400</b> library).  The linker
for executables, <i>ld</i>, will quietly give the executable the most
restrictive subtype of any of its input files.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-F</b><i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add the framework directory <i>dir</i> to the head of the list of
directories to be searched for header files.  These directories are
interleaved with those specified by <b>-I</b> options and are
scanned in a left-to-right order.
<p>
<!-- ignored unsupported tag .if -->
A framework directory is a directory with frameworks in it.  A
framework is a directory with a <b>Headers</b> and/or
<b>PrivateHeaders</b> directory contained directly in it that ends
in <b>.framework</b>.  The name of a framework is the name of this
directory excluding the <b>.framework</b>.  Headers associated with
the framework are found in one of those two directories, with
<b>Headers</b> being searched first.  A subframework is a framework
directory that is in a framework&#146;s <b>Frameworks</b> directory.
Includes of subframework headers can only appear in a header of a
framework that contains the subframework, or in a sibling subframework
header.  Two subframeworks are siblings if they occur in the same
framework.  A subframework should not have the same name as a
framework, a warning will be issued if this is violated.  Currently a
subframework cannot have subframeworks, in the future, the mechanism
may be extended to support this.  The standard frameworks can be found
in <b>/System/Library/Frameworks</b> and
<b>/Library/Frameworks</b>.  An example include looks like
<tt>#include &lt;Framework/header.h&gt;</tt>, where <b>Framework</b> denotes
the name of the framework and header.h is found in the
<b>PrivateHeaders</b> or <b>Headers</b> directory.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gused</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit debugging information for symbols that are used.  For <font size="-1">STABS</font>
debugging format, this enables <b>-feliminate-unused-debug-symbols</b>.
This is by default <font size="-1">ON</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-gfull</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit debugging information for all symbols and types.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmacosx-version-min=</b><i>version</i>
</td><td>
<!-- ignored unsupported tag .tm -->
The earliest version of MacOS X that this executable will run on
is <i>version</i>.  Typical values of <i>version</i> include <tt>10.1</tt>,
<tt>10.2</tt>, and <tt>10.3.9</tt>.
<p>
<!-- ignored unsupported tag .if -->
The default for this option is to make choices that seem to be most
useful. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-mone-byte-bool</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Override the defaults for <b>bool</b> so that <b>sizeof(bool)==1</b>.
By default <b>sizeof(bool)</b> is <b>4</b> when compiling for
Darwin/PowerPC and <b>1</b> when compiling for Darwin/x86, so this
option has no effect on x86.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> The <b>-mone-byte-bool</b> switch causes <font size="-1">GCC</font>
to generate code that is not binary compatible with code generated
without that switch.  Using this switch may require recompiling all
other modules in a program, including system libraries.  Use this
switch to conform to a non-default data model.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfix-and-continue</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-ffix-and-continue</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-findirect-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code suitable for fast turn around development.  Needed to
enable gdb to dynamically load <tt>.o</tt> files into already running
programs.  <b>-findirect-data</b> and <b>-ffix-and-continue</b>
are provided for backwards compatibility.
</td></tr>
<tr valign="top"><td width=4%>
<b>-all_load</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Loads all members of static archive libraries.
See man <i>ld</i>(1) for more information.
</td></tr>
<tr valign="top"><td width=4%>
<b>-arch_errors_fatal</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Cause the errors having to do with files that have the wrong architecture
to be fatal.
</td></tr>
<tr valign="top"><td width=4%>
<b>-bind_at_load</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Causes the output file to be marked such that the dynamic linker will
bind all undefined references when the file is loaded or launched.
</td></tr>
<tr valign="top"><td width=4%>
<b>-bundle</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce a Mach-o bundle format file.
See man <i>ld</i>(1) for more information.
</td></tr>
<tr valign="top"><td width=4%>
<b>-bundle_loader</b> <i>executable</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option specifies the <i>executable</i> that will be loading the build
output file being linked.  See man <i>ld</i>(1) for more information.
</td></tr>
<tr valign="top"><td width=4%>
<b>-dynamiclib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When passed this option, <font size="-1">GCC</font> will produce a dynamic library instead of
an executable when linking, using the Darwin <i>libtool</i> command.
</td></tr>
<tr valign="top"><td width=4%>
<b>-force_cpusubtype_ALL</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This causes <font size="-1">GCC</font>&#146;s output file to have the <i><font size="-1">ALL</font></i> subtype, instead of
one controlled by the <b>-mcpu</b> or <b>-march</b> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-allowable_client</b>  <i>client_name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-client_name</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-compatibility_version</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-current_version</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dead_strip</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dependency-file</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dylib_file</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dylinker_install_name</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dynamic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-exported_symbols_list</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-filelist</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-flat_namespace</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-force_flat_namespace</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-headerpad_max_install_names</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-image_base</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-init</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-install_name</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-keep_private_externs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-multi_module</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-multiply_defined</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-multiply_defined_unused</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-noall_load</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-no_dead_strip_inits_and_terms</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-nofixprebinding</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-nomultidefs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-noprebind</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-noseglinkedit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-pagezero_size</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-prebind</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-prebind_all_twolevel_modules</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-private_bundle</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-read_only_relocs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-sectalign</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-sectobjectsymbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-whyload</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-seg1addr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-sectcreate</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-sectobjectsymbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-sectorder</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-segaddr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-segs_read_only_addr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-segs_read_write_addr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-seg_addr_table</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-seg_addr_table_filename</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-seglinkedit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-segprot</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-segs_read_only_addr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-segs_read_write_addr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-single_module</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-static</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-sub_library</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-sub_umbrella</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-twolevel_namespace</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-umbrella</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-undefined</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-unexported_symbols_list</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-weak_reference_mismatches</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-whatsloaded</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These options are passed to the Darwin linker.  The Darwin linker man page
describes them in detail.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">DEC</font> Alpha Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for the <font size="-1">DEC</font> Alpha implementations:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mno-soft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use (do not use) the hardware floating-point instructions for
floating-point operations.  When <b>-msoft-float</b> is specified,
functions in <i>libgcc.a</i> will be used to perform floating-point
operations.  Unless they are replaced by routines that emulate the
floating-point operations, or compiled in such a way as to call such
emulations routines, these routines will issue floating-point
operations.   If you are compiling for an Alpha without floating-point
operations, you must ensure that the library is built so as not to call
them.
<p>
<!-- ignored unsupported tag .if -->
Note that Alpha implementations without floating-point operations are
required to have floating-point registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfp-reg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fp-regs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses (does not use) the floating-point register set.
<b>-mno-fp-regs</b> implies <b>-msoft-float</b>.  If the floating-point
register set is not used, floating point operands are passed in integer
registers as if they were integers and floating-point results are passed
in <tt>$0</tt> instead of <tt>$f0</tt>.  This is a non-standard calling sequence,
so any function with a floating-point argument or return value called by code
compiled with <b>-mno-fp-regs</b> must also be compiled with that
option.
<p>
<!-- ignored unsupported tag .if -->
A typical use of this option is building a kernel that does not use,
and hence need not save and restore, any floating-point registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mieee</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The Alpha architecture implements floating-point hardware optimized for
maximum performance.  It is mostly compliant with the <font size="-1">IEEE</font> floating
point standard.  However, for full compliance, software assistance is
required.  This option generates code fully <font size="-1">IEEE</font> compliant code
<i>except</i> that the <i>inexact-flag</i> is not maintained (see below).
If this option is turned on, the preprocessor macro <tt>_IEEE_FP</tt> is
defined during compilation.  The resulting code is less efficient but is
able to correctly support denormalized numbers and exceptional <font size="-1">IEEE</font>
values such as not-a-number and plus/minus infinity.  Other Alpha
compilers call this option <b>-ieee_with_no_inexact</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mieee-with-inexact</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This is like <b>-mieee</b> except the generated code also maintains
the <font size="-1">IEEE</font> <i>inexact-flag</i>.  Turning on this option causes the
generated code to implement fully-compliant <font size="-1">IEEE</font> math.  In addition to
<tt>_IEEE_FP</tt>, <tt>_IEEE_FP_EXACT</tt> is defined as a preprocessor
macro.  On some Alpha implementations the resulting code may execute
significantly slower than the code generated by default.  Since there is
very little code that depends on the <i>inexact-flag</i>, you should
normally not specify this option.  Other Alpha compilers call this
option <b>-ieee_with_inexact</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfp-trap-mode=</b><i>trap-mode</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option controls what floating-point related traps are enabled.
Other Alpha compilers call this option <b>-fptm</b> <i>trap-mode</i>.
The trap mode can be set to one of four values:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>n</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This is the default (normal) setting.  The only traps that are enabled
are the ones that cannot be disabled in software (e.g., division by zero
trap).
</td></tr>
<tr valign="top"><td width=4%>
<b>u</b>
</td><td>
<!-- ignored unsupported tag .tm -->
In addition to the traps enabled by <b>n</b>, underflow traps are enabled
as well.
</td></tr>
<tr valign="top"><td width=4%>
<b>su</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>su</b>, but the instructions are marked to be safe for software
completion (see Alpha architecture manual for details).
</td></tr>
<tr valign="top"><td width=4%>
<b>sui</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Like <b>su</b>, but inexact traps are enabled as well.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfp-rounding-mode=</b><i>rounding-mode</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Selects the <font size="-1">IEEE</font> rounding mode.  Other Alpha compilers call this option
<b>-fprm</b> <i>rounding-mode</i>.  The <i>rounding-mode</i> can be one
of:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>n</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Normal <font size="-1">IEEE</font> rounding mode.  Floating point numbers are rounded towards
the nearest machine number or towards the even machine number in case
of a tie.
</td></tr>
<tr valign="top"><td width=4%>
<b>m</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Round towards minus infinity.
</td></tr>
<tr valign="top"><td width=4%>
<b>c</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Chopped rounding mode.  Floating point numbers are rounded towards zero.
</td></tr>
<tr valign="top"><td width=4%>
<b>d</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dynamic rounding mode.  A field in the floating point control register
(<i>fpcr</i>, see Alpha architecture reference manual) controls the
rounding mode in effect.  The C library initializes this register for
rounding towards plus infinity.  Thus, unless your program modifies the
<i>fpcr</i>, <b>d</b> corresponds to round towards plus infinity.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtrap-precision=</b><i>trap-precision</i>
</td><td>
<!-- ignored unsupported tag .tm -->
In the Alpha architecture, floating point traps are imprecise.  This
means without software assistance it is impossible to recover from a
floating trap and program execution normally needs to be terminated.
<font size="-1">GCC</font> can generate code that can assist operating system trap handlers
in determining the exact location that caused a floating point trap.
Depending on the requirements of an application, different levels of
precisions can be selected:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>p</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Program precision.  This option is the default and means a trap handler
can only identify which program caused a floating point exception.
</td></tr>
<tr valign="top"><td width=4%>
<b>f</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Function precision.  The trap handler can determine the function that
caused a floating point exception.
</td></tr>
<tr valign="top"><td width=4%>
<b>i</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Instruction precision.  The trap handler can determine the exact
instruction that caused a floating point exception.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Other Alpha compilers provide the equivalent options called
<b>-scope_safe</b> and <b>-resumption_safe</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mieee-conformant</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option marks the generated code as <font size="-1">IEEE</font> conformant.  You must not
use this option unless you also specify <b>-mtrap-precision=i</b> and either
<b>-mfp-trap-mode=su</b> or <b>-mfp-trap-mode=sui</b>.  Its only effect
is to emit the line <b>.eflag 48</b> in the function prologue of the
generated assembly file.  Under <font size="-1">DEC</font> Unix, this has the effect that
IEEE-conformant math library routines will be linked in.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbuild-constants</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Normally <font size="-1">GCC</font> examines a 32- or 64-bit integer constant to
see if it can construct it from smaller constants in two or three
instructions.  If it cannot, it will output the constant as a literal and
generate code to load it from the data segment at runtime.
<p>
<!-- ignored unsupported tag .if -->
Use this option to require <font size="-1">GCC</font> to construct <i>all</i> integer constants
using code, even if it takes more instructions (the maximum is six).
<p>
<!-- ignored unsupported tag .if -->
You would typically use this option to build a shared library dynamic
loader.  Itself a shared library, it must relocate itself in memory
before it can find the variables and constants in its own data segment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-malpha-as</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgas</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Select whether to generate code to be assembled by the vendor-supplied
assembler (<b>-malpha-as</b>) or by the <font size="-1">GNU</font> assembler <b>-mgas</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbwx</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-bwx</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcix</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-cix</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfix</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fix</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmax</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-max</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Indicate whether <font size="-1">GCC</font> should generate code to use the optional <font size="-1">BWX</font>,
<font size="-1">CIX</font>, <font size="-1">FIX</font> and <font size="-1">MAX</font> instruction sets.  The default is to use the instruction
sets supported by the <font size="-1">CPU</font> type specified via <b>-mcpu=</b> option or that
of the <font size="-1">CPU</font> on which <font size="-1">GCC</font> was built if none was specified.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfloat-vax</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfloat-ieee</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses (does not use) <font size="-1">VAX</font> F and G floating point
arithmetic instead of <font size="-1">IEEE</font> single and double precision.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mexplicit-relocs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-explicit-relocs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Older Alpha assemblers provided no way to generate symbol relocations
except via assembler macros.  Use of these macros does not allow
optimal instruction scheduling.  <font size="-1">GNU</font> binutils as of version 2.12
supports a new syntax that allows the compiler to explicitly mark
which relocations should apply to which instructions.  This option
is mostly useful for debugging, as <font size="-1">GCC</font> detects the capabilities of
the assembler when it is built and sets the default accordingly.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msmall-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlarge-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-mexplicit-relocs</b> is in effect, static data is
accessed via <i>gp-relative</i> relocations.  When <b>-msmall-data</b>
is used, objects 8 bytes long or smaller are placed in a <i>small data area</i>
(the <tt>.sdata</tt> and <tt>.sbss</tt> sections) and are accessed via
16-bit relocations off of the <tt>$gp</tt> register.  This limits the
size of the small data area to 64KB, but allows the variables to be
directly accessed via a single instruction.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-mlarge-data</b>.  With this option the data area
is limited to just below 2GB.  Programs that require more than 2GB of
data must use <tt>malloc</tt> or <tt>mmap</tt> to allocate the data in the
heap instead of in the program&#146;s data segment.
<p>
<!-- ignored unsupported tag .if -->
When generating code for shared libraries, <b>-fpic</b> implies
<b>-msmall-data</b> and <b>-fPIC</b> implies <b>-mlarge-data</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msmall-text</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlarge-text</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-msmall-text</b> is used, the compiler assumes that the
code of the entire program (or shared library) fits in 4MB, and is
thus reachable with a branch instruction.  When <b>-msmall-data</b>
is used, the compiler can assume that all local symbols share the
same <tt>$gp</tt> value, and thus reduce the number of instructions
required for a function call from 4 to 1.
<p>
<!-- ignored unsupported tag .if -->
The default is <b>-mlarge-text</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>cpu_type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the instruction set and instruction scheduling parameters for
machine type <i>cpu_type</i>.  You can specify either the <b><font size="-1">EV</font></b>
style name or the corresponding chip number.  <font size="-1">GCC</font> supports scheduling
parameters for the <font size="-1">EV4</font>, <font size="-1">EV5</font> and <font size="-1">EV6</font> family of processors and will
choose the default values for the instruction set from the processor
you specify.  If you do not specify a processor type, <font size="-1">GCC</font> will default
to the processor on which the compiler was built.
<p>
<!-- ignored unsupported tag .if -->
Supported values for <i>cpu_type</i> are
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>ev4</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>ev45</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>21064</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Schedules as an <font size="-1">EV4</font> and has no instruction set extensions.
</td></tr>
<tr valign="top"><td width=4%>
<b>ev5</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>21164</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Schedules as an <font size="-1">EV5</font> and has no instruction set extensions.
</td></tr>
<tr valign="top"><td width=4%>
<b>ev56</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>21164a</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Schedules as an <font size="-1">EV5</font> and supports the <font size="-1">BWX</font> extension.
</td></tr>
<tr valign="top"><td width=4%>
<b>pca56</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>21164pc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>21164PC</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Schedules as an <font size="-1">EV5</font> and supports the <font size="-1">BWX</font> and <font size="-1">MAX</font> extensions.
</td></tr>
<tr valign="top"><td width=4%>
<b>ev6</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>21264</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Schedules as an <font size="-1">EV6</font> and supports the <font size="-1">BWX</font>, <font size="-1">FIX</font>, and <font size="-1">MAX</font> extensions.
</td></tr>
<tr valign="top"><td width=4%>
<b>ev67</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>21264a</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Schedules as an <font size="-1">EV6</font> and supports the <font size="-1">BWX</font>, <font size="-1">CIX</font>, <font size="-1">FIX</font>, and <font size="-1">MAX</font> extensions.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>cpu_type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set only the instruction scheduling parameters for machine type
<i>cpu_type</i>.  The instruction set is not changed.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmemory-latency=</b><i>time</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets the latency the scheduler should assume for typical memory
references as seen by the application.  This number is highly
dependent on the memory access patterns used by the application
and the size of the external cache on the machine.
<p>
<!-- ignored unsupported tag .if -->
Valid options for <i>time</i> are
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
A decimal number representing clock cycles.
</td></tr>
<tr valign="top"><td width=4%>
<b>L1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>L2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>L3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>main</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The compiler contains estimates of the number of clock cycles for
typical <font size="-1">EV4</font> & <font size="-1">EV5</font> hardware for the Level 1, 2 & 3 caches
(also called Dcache, Scache, and Bcache), as well as to main memory.
Note that L3 is only valid for <font size="-1">EV5</font>.
</td></tr>
</table>
</td></tr>
</table>
<h1 class="manpages"><font size="-1">DEC</font> Alpha/VMS Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for the <font size="-1">DEC</font> Alpha/VMS implementations:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mvms-return-codes</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Return <font size="-1">VMS</font> condition codes from main.  The default is to return <font size="-1">POSIX</font>
style condition (e.g. error) codes.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">FRV</font> Options</h1>
<!-- ignored unsupported tag .tm -->
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mgpr-32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Only use the first 32 general purpose registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgpr-64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use all 64 general purpose registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfpr-32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use only the first 32 floating point registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfpr-64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use all 64 floating point registers
</td></tr>
<tr valign="top"><td width=4%>
<b>-mhard-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use hardware instructions for floating point operations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use library routines for floating point operations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-malloc-cc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dynamically allocate condition code registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfixed-cc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not try to dynamically allocate condition code registers, only
use <tt>icc0</tt> and <tt>fcc0</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdword</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Change <font size="-1">ABI</font> to use double word insns.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-dword</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use double word instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdouble</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use floating point double instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-double</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use floating point double instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmedia</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use media instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-media</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use media instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmuladd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use multiply and add/subtract instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-muladd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use multiply and add/subtract instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfdpic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Select the <font size="-1">FDPIC</font> <font size="-1">ABI</font>, that uses function descriptors to represent
pointers to functions.  Without any PIC/PIE-related options, it
implies <b>-fPIE</b>.  With <b>-fpic</b> or <b>-fpie</b>, it
assumes <font size="-1">GOT</font> entries and small data are within a 12-bit range from the
<font size="-1">GOT</font> base address; with <b>-fPIC</b> or <b>-fPIE</b>, <font size="-1">GOT</font> offsets
are computed with 32 bits.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minline-plt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable inlining of <font size="-1">PLT</font> entries in function calls to functions that are
not known to bind locally.  It has no effect without <b>-mfdpic</b>.
It&#146;s enabled by default if optimizing for speed and compiling for
shared libraries (i.e., <b>-fPIC</b> or <b>-fpic</b>), or when an
optimization option such as <b>-O3</b> or above is present in the
command line.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mTLS</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume a large <font size="-1">TLS</font> segment when generating thread-local code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not assume a large <font size="-1">TLS</font> segment when generating thread-local code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgprel-ro</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of <tt>GPREL</tt> relocations in the <font size="-1">FDPIC</font> <font size="-1">ABI</font> for data
that is known to be in read-only sections.  It&#146;s enabled by default,
except for <b>-fpic</b> or <b>-fpie</b>: even though it may help
make the global offset table smaller, it trades 1 instruction for 4.
With <b>-fPIC</b> or <b>-fPIE</b>, it trades 3 instructions for 4,
one of which may be shared by multiple symbols, and it avoids the need
for a <font size="-1">GOT</font> entry for the referenced symbol, so it&#146;s more likely to be a
win.  If it is not, <b>-mno-gprel-ro</b> can be used to disable it.
</td></tr>
<tr valign="top"><td width=4%>
<b>-multilib-library-pic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Link with the (library, not <font size="-1">FD</font>) pic libraries.  It&#146;s implied by
<b>-mlibrary-pic</b>, as well as by <b>-fPIC</b> and
<b>-fpic</b> without <b>-mfdpic</b>.  You should never have to use
it explicitly.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlinked-fp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Follow the <font size="-1">EABI</font> requirement of always creating a frame pointer whenever
a stack frame is allocated.  This option is enabled by default and can
be disabled with <b>-mno-linked-fp</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use indirect addressing to call functions outside the current
compilation unit.  This allows the functions to be placed anywhere
within the 32-bit address space.
</td></tr>
<tr valign="top"><td width=4%>
<b>-malign-labels</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Try to align labels to an 8-byte boundary by inserting nops into the
previous packet.  This option only has an effect when <font size="-1">VLIW</font> packing
is enabled.  It doesn&#146;t create new packets; it merely adds nops to
existing ones.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlibrary-pic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate position-independent <font size="-1">EABI</font> code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-macc-4</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use only the first four media accumulator registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-macc-8</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use all eight media accumulator registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Pack <font size="-1">VLIW</font> instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-pack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not pack <font size="-1">VLIW</font> instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-eflags</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not mark <font size="-1">ABI</font> switches in e_flags.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcond-move</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of conditional-move instructions (default).
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-cond-move</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable the use of conditional-move instructions.
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mscc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of conditional set instructions (default).
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-scc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable the use of conditional set instructions.
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcond-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of conditional execution (default).
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-cond-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable the use of conditional execution.
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mvliw-branch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Run a pass to pack branches into <font size="-1">VLIW</font> instructions (default).
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-vliw-branch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not run a pass to pack branches into <font size="-1">VLIW</font> instructions.
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmulti-cond-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable optimization of <tt>&&</tt> and <tt>||</tt> in conditional execution
(default).
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-multi-cond-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable optimization of <tt>&&</tt> and <tt>||</tt> in conditional execution.
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mnested-cond-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable nested conditional execution optimizations (default).
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-nested-cond-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable nested conditional execution optimizations.
<p>
<!-- ignored unsupported tag .if -->
This switch is mainly for debugging the compiler and will likely be removed
in a future version.
</td></tr>
<tr valign="top"><td width=4%>
<b>-moptimize-membar</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This switch removes redundant <tt>membar</tt> instructions from the
compiler generated code.  It is enabled by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-optimize-membar</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This switch disables the automatic removal of redundant <tt>membar</tt>
instructions from the generated code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtomcat-stats</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Cause gas to print out tomcat statistics.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>cpu</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Select the processor type for which to generate code.  Possible values are
<b>frv</b>, <b>fr550</b>, <b>tomcat</b>, <b>fr500</b>, <b>fr450</b>,
<b>fr405</b>, <b>fr400</b>, <b>fr300</b> and <b>simple</b>.
</td></tr>
</table>
<h1 class="manpages">H8/300 Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for the H8/300 implementations:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mrelax</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Shorten some address references at link time, when possible; uses the
linker option <b>-relax</b>. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-mh</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the H8/300H.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ms</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the H8S.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mn</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the H8S and H8/300H in the normal mode.  This switch
must be used either with <b>-mh</b> or <b>-ms</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ms2600</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the H8S/2600.  This switch must be used with <b>-ms</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mint32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Make <tt>int</tt> data 32 bits by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-malign-300</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On the H8/300H and H8S, use the same alignment rules as for the H8/300.
The default for the H8/300H and H8S is to align longs and floats on 4
byte boundaries.
<b>-malign-300</b> causes them to be aligned on 2 byte boundaries.
This option has no effect on the H8/300.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">HPPA</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for the <font size="-1">HPPA</font> family of computers:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-march=</b><i>architecture-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the specified architecture.  The choices for
<i>architecture-type</i> are <b>1.0</b> for <font size="-1">PA</font> 1.0, <b>1.1</b> for <font size="-1">PA</font>
1.1, and <b>2.0</b> for <font size="-1">PA</font> 2.0 processors.  Refer to
<i>/usr/lib/sched.models</i> on an HP-UX system to determine the proper
architecture option for your machine.  Code compiled for lower numbered
architectures will run on higher numbered architectures, but not the
other way around.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpa-risc-1-0</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpa-risc-1-1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpa-risc-2-0</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Synonyms for <b>-march=1.0</b>, <b>-march=1.1</b>, and <b>-march=2.0</b> respectively.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbig-switch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code suitable for big switch tables.  Use this option only if
the assembler/linker complain about out of range branches within a switch
table.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mjump-in-delay</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Fill delay slots of function calls with unconditional jump instructions
by modifying the return pointer for the function call to be the target
of the conditional jump.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdisable-fpregs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Prevent floating point registers from being used in any manner.  This is
necessary for compiling kernels which perform lazy context switching of
floating point registers.  If you use this option and attempt to perform
floating point operations, the compiler will abort.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdisable-indexing</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Prevent the compiler from using indexing address modes.  This avoids some
rather obscure problems when compiling <font size="-1">MIG</font> generated code under <font size="-1">MACH</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-space-regs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that assumes the target has no space registers.  This allows
<font size="-1">GCC</font> to generate faster indirect calls and use unscaled index address modes.
<p>
<!-- ignored unsupported tag .if -->
Such code is suitable for level 0 <font size="-1">PA</font> systems and kernels.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfast-indirect-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that assumes calls never cross space boundaries.  This
allows <font size="-1">GCC</font> to emit code which performs faster indirect calls.
<p>
<!-- ignored unsupported tag .if -->
This option will not work in the presence of shared libraries or nested
functions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfixed-range=</b><i>register-range</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code treating the given register range as fixed registers.
A fixed register is one that the register allocator can not use.  This is
useful when compiling kernel code.  A register range is specified as
two registers separated by a dash.  Multiple register ranges can be
specified separated by a comma.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-load-store</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate 3-instruction load and store sequences as sometimes required by
the HP-UX 10 linker.  This is equivalent to the <b>+k</b> option to
the <font size="-1">HP</font> compilers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mportable-runtime</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use the portable calling conventions proposed by <font size="-1">HP</font> for <font size="-1">ELF</font> systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgas</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of assembler directives only <font size="-1">GAS</font> understands.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mschedule=</b><i>cpu-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Schedule code according to the constraints for the machine type
<i>cpu-type</i>.  The choices for <i>cpu-type</i> are <b>700</b>
<b>7100</b>, <b>7100LC</b>, <b>7200</b>, <b>7300</b> and <b>8000</b>.  Refer
to <i>/usr/lib/sched.models</i> on an HP-UX system to determine the
proper scheduling option for your machine.  The default scheduling is
<b>8000</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlinker-opt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the optimization pass in the HP-UX linker.  Note this makes symbolic
debugging impossible.  It also triggers a bug in the HP-UX 8 and HP-UX 9
linkers in which they give bogus error messages when linking some programs.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing library calls for floating point.
<b>Warning:</b> the requisite libraries are not available for all <font size="-1">HPPA</font>
targets.  Normally the facilities of the machine&#146;s usual C compiler are
used, but this cannot be done directly in cross-compilation.  You must make
your own arrangements to provide suitable library functions for
cross-compilation.  The embedded target <b>hppa1.1-*-pro</b>
does provide software floating point support.
<p>
<!-- ignored unsupported tag .if -->
<b>-msoft-float</b> changes the calling convention in the output file;
therefore, it is only useful if you compile <i>all</i> of a program with
this option.  In particular, you need to compile <i>libgcc.a</i>, the
library that comes with <font size="-1">GCC</font>, with <b>-msoft-float</b> in order for
this to work.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msio</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate the predefine, <tt>_SIO</tt>, for server <font size="-1">IO</font>.  The default is
<b>-mwsio</b>.  This generates the predefines, <tt>__hp9000s700</tt>,
<tt>__hp9000s700__</tt> and <tt>_WSIO</tt>, for workstation <font size="-1">IO</font>.  These
options are available under HP-UX and <font size="-1">HI-UX</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgnu-ld</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <font size="-1">GNU</font> ld specific options.  This passes <b>-shared</b> to ld when
building a shared library.  It is the default when <font size="-1">GCC</font> is configured,
explicitly or implicitly, with the <font size="-1">GNU</font> linker.  This option does not
have any affect on which ld is called, it only changes what parameters
are passed to that ld.  The ld that is called is determined by the
<b>--with-ld</b> configure option, <font size="-1">GCC</font>&#146;s program search path, and
finally by the user&#146;s <b><font size="-1">PATH</font></b>.  The linker used by <font size="-1">GCC</font> can be printed
using <b>which &#145;gcc -print-prog-name=ld&#145;</b>.  This option is only available
on the 64 bit HP-UX <font size="-1">GCC</font>, i.e. configured with <b>hppa*64*-*-hpux*</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mhp-ld</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <font size="-1">HP</font> ld specific options.  This passes <b>-b</b> to ld when building
a shared library and passes <b>+Accept TypeMismatch</b> to ld on all
links.  It is the default when <font size="-1">GCC</font> is configured, explicitly or
implicitly, with the <font size="-1">HP</font> linker.  This option does not have any affect on
which ld is called, it only changes what parameters are passed to that
ld.  The ld that is called is determined by the <b>--with-ld</b>
configure option, <font size="-1">GCC</font>&#146;s program search path, and finally by the user&#146;s
<b><font size="-1">PATH</font></b>.  The linker used by <font size="-1">GCC</font> can be printed using <b>which
&#145;gcc -print-prog-name=ld&#145;</b>.  This option is only available on the 64 bit
HP-UX <font size="-1">GCC</font>, i.e. configured with <b>hppa*64*-*-hpux*</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses long call sequences.  This ensures that a call
is always able to reach linker generated stubs.  The default is to generate
long calls only when the distance from the call site to the beginning
of the function or translation unit, as the case may be, exceeds a
predefined limit set by the branch type being used.  The limits for
normal calls are 7,600,000 and 240,000 bytes, respectively for the
<font size="-1">PA</font> 2.0 and <font size="-1">PA</font> 1.X architectures.  Sibcalls are always limited at
240,000 bytes.
<p>
<!-- ignored unsupported tag .if -->
Distances are measured from the beginning of functions when using the
<b>-ffunction-sections</b> option, or when using the <b>-mgas</b>
and <b>-mno-portable-runtime</b> options together under HP-UX with
the <font size="-1">SOM</font> linker.
<p>
<!-- ignored unsupported tag .if -->
It is normally not desirable to use this option as it will degrade
performance.  However, it may be useful in large applications,
particularly when partial linking is used to build the application.
<p>
<!-- ignored unsupported tag .if -->
The types of long calls used depends on the capabilities of the
assembler and linker, and the type of code being generated.  The
impact on systems that support long absolute calls, and long pic
symbol-difference or pc-relative calls should be relatively small.
However, an indirect call is used on 32-bit <font size="-1">ELF</font> systems in pic code
and it is quite long.
</td></tr>
<tr valign="top"><td width=4%>
<b>-munix=</b><i>unix-std</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate compiler predefines and select a startfile for the specified
<font size="-1">UNIX</font> standard.  The choices for <i>unix-std</i> are <b>93</b>, <b>95</b>
and <b>98</b>.  <b>93</b> is supported on all HP-UX versions.  <b>95</b>
is available on HP-UX 10.10 and later.  <b>98</b> is available on HP-UX
11.11 and later.  The default values are <b>93</b> for HP-UX 10.00,
<b>95</b> for HP-UX 10.10 though to 11.00, and <b>98</b> for HP-UX 11.11
and later.
<p>
<!-- ignored unsupported tag .if -->
<b>-munix=93</b> provides the same predefines as <font size="-1">GCC</font> 3.3 and 3.4.
<b>-munix=95</b> provides additional predefines for <tt>XOPEN_UNIX</tt>
and <tt>_XOPEN_SOURCE_EXTENDED</tt>, and the startfile <i>unix95.o</i>.
<b>-munix=98</b> provides additional predefines for <tt>_XOPEN_UNIX</tt>,
<tt>_XOPEN_SOURCE_EXTENDED</tt>, <tt>_INCLUDE__STDC_A1_SOURCE</tt> and
<tt>_INCLUDE_XOPEN_SOURCE_500</tt>, and the startfile <i>unix98.o</i>.
<p>
<!-- ignored unsupported tag .if -->
It is <i>important</i> to note that this option changes the interfaces
for various library routines.  It also affects the operational behavior
of the C library.  Thus, <i>extreme</i> care is needed in using this
option.
<p>
<!-- ignored unsupported tag .if -->
Library code that is intended to operate with more than one <font size="-1">UNIX</font>
standard must test, set and restore the variable <i>__xpg4_extended_mask</i>
as appropriate.  Most <font size="-1">GNU</font> software doesn&#146;t provide this capability.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nolibdld</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Suppress the generation of link options to search libdld.sl when the
<b>-static</b> option is specified on HP-UX 10 and later.
</td></tr>
<tr valign="top"><td width=4%>
<b>-static</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The HP-UX implementation of setlocale in libc has a dependency on
libdld.sl.  There isn&#146;t an archive version of libdld.sl.  Thus,
when the <b>-static</b> option is specified, special link options
are needed to resolve this dependency.
<p>
<!-- ignored unsupported tag .if -->
On HP-UX 10 and later, the <font size="-1">GCC</font> driver adds the necessary options to
link with libdld.sl when the <b>-static</b> option is specified.
This causes the resulting binary to be dynamic.  On the 64-bit port,
the linkers generate dynamic binaries by default in any case.  The
<b>-nolibdld</b> option can be used to prevent the <font size="-1">GCC</font> driver from
adding these link options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-threads</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Add support for multithreading with the <i>dce thread</i> library
under <font size="-1">HP-UX</font>.  This option sets flags for both the preprocessor and
linker.
</td></tr>
</table>
<h1 class="manpages">Intel 386 and <font size="-1">AMD</font> x86-64 Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for the i386 and x86-64 family of
computers:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>cpu-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Tune to <i>cpu-type</i> everything applicable about the generated code, except
for the <font size="-1">ABI</font> and the set of available instructions.  The choices for
<i>cpu-type</i> are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<i>generic</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce code optimized for the most common <font size="-1">IA32/AMD64/EM64T</font> processors.
If you know the <font size="-1">CPU</font> on which your code will run, then you should use
the corresponding <b>-mtune</b> option instead of
<b>-mtune=generic</b>.  But, if you do not know exactly what <font size="-1">CPU</font> users
of your application will have, then you should use this option.
<p>
<!-- ignored unsupported tag .if -->
As new processors are deployed in the marketplace, the behavior of this
option will change.  Therefore, if you upgrade to a newer version of
<font size="-1">GCC</font>, the code generated option will change to reflect the processors
that were most common when that version of <font size="-1">GCC</font> was released.
<p>
<!-- ignored unsupported tag .if -->
There is no <b>-march=generic</b> option because <b>-march</b>
indicates the instruction set the compiler can use, and there is no
generic instruction set applicable to all processors.  In contrast,
<b>-mtune</b> indicates the processor (or, in this case, collection of
processors) for which the code is optimized.
</td></tr>
<tr valign="top"><td width=4%>
<i>i386</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Original Intel&#146;s i386 <font size="-1">CPU</font>.
</td></tr>
<tr valign="top"><td width=4%>
<i>i486</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Intel&#146;s i486 <font size="-1">CPU</font>.  (No scheduling is implemented for this chip.)
</td></tr>
<tr valign="top"><td width=4%>
<i>i586, pentium</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Intel Pentium <font size="-1">CPU</font> with no <font size="-1">MMX</font> support.
</td></tr>
<tr valign="top"><td width=4%>
<i>pentium-mmx</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Intel PentiumMMX <font size="-1">CPU</font> based on Pentium core with <font size="-1">MMX</font> instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>pentiumpro</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Intel PentiumPro <font size="-1">CPU</font>.
</td></tr>
<tr valign="top"><td width=4%>
<i>i686</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Same as <tt>generic</tt>, but when used as <tt>march</tt> option, PentiumPro
instruction set will be used, so the code will run on all i686 familly chips.
</td></tr>
<tr valign="top"><td width=4%>
<i>pentium2</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Intel Pentium2 <font size="-1">CPU</font> based on PentiumPro core with <font size="-1">MMX</font> instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>pentium3, pentium3m</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Intel Pentium3 <font size="-1">CPU</font> based on PentiumPro core with <font size="-1">MMX</font> and <font size="-1">SSE</font> instruction set
support.
</td></tr>
<tr valign="top"><td width=4%>
<i>pentium-m</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Low power version of Intel Pentium3 <font size="-1">CPU</font> with <font size="-1">MMX</font>, <font size="-1">SSE</font> and <font size="-1">SSE2</font> instruction set
support.  Used by Centrino notebooks.
</td></tr>
<tr valign="top"><td width=4%>
<i>pentium4, pentium4m</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Intel Pentium4 <font size="-1">CPU</font> with <font size="-1">MMX</font>, <font size="-1">SSE</font> and <font size="-1">SSE2</font> instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>prescott</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Improved version of Intel Pentium4 <font size="-1">CPU</font> with <font size="-1">MMX</font>, <font size="-1">SSE</font>, <font size="-1">SSE2</font> and <font size="-1">SSE3</font> instruction
set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>nocona</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Improved version of Intel Pentium4 <font size="-1">CPU</font> with 64-bit extensions, <font size="-1">MMX</font>, <font size="-1">SSE</font>,
<font size="-1">SSE2</font> and <font size="-1">SSE3</font> instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>core2</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Intel Core2 <font size="-1">CPU</font> with 64-bit extensions, <font size="-1">MMX</font>, <font size="-1">SSE</font>, <font size="-1">SSE2</font>, <font size="-1">SSE3</font> and <font size="-1">SSSE3</font>
instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>k6</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">AMD</font> K6 <font size="-1">CPU</font> with <font size="-1">MMX</font> instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>k6-2, k6-3</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Improved versions of <font size="-1">AMD</font> K6 <font size="-1">CPU</font> with <font size="-1">MMX</font> and 3dNOW! instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>athlon, athlon-tbird</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">AMD</font> Athlon <font size="-1">CPU</font> with <font size="-1">MMX</font>, 3dNOW!, enhanced 3dNOW! and <font size="-1">SSE</font> prefetch instructions
support.
</td></tr>
<tr valign="top"><td width=4%>
<i>athlon-4, athlon-xp, athlon-mp</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Improved <font size="-1">AMD</font> Athlon <font size="-1">CPU</font> with <font size="-1">MMX</font>, 3dNOW!, enhanced 3dNOW! and full <font size="-1">SSE</font>
instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>k8, opteron, athlon64, athlon-fx</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">AMD</font> K8 core based CPUs with x86-64 instruction set support.  (This supersets
<font size="-1">MMX</font>, <font size="-1">SSE</font>, <font size="-1">SSE2</font>, 3dNOW!, enhanced 3dNOW! and 64-bit instruction set extensions.)
</td></tr>
<tr valign="top"><td width=4%>
<i>amdfam10</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">AMD</font> Family 10 core based CPUs with x86-64 instruction set support.  (This
supersets <font size="-1">MMX</font>, <font size="-1">SSE</font>, <font size="-1">SSE2</font>, <font size="-1">SSE3</font>, <font size="-1">SSE4A</font>, <font size="-1">SSE5</font>, 3dNOW!, enhanced 3dNOW!, <font size="-1">ABM</font> and 64-bit
instruction set extensions.)
</td></tr>
<tr valign="top"><td width=4%>
<i>winchip-c6</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">IDT</font> Winchip C6 <font size="-1">CPU</font>, dealt in same way as i486 with additional <font size="-1">MMX</font> instruction
set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>winchip2</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">IDT</font> Winchip2 <font size="-1">CPU</font>, dealt in same way as i486 with additional <font size="-1">MMX</font> and 3dNOW!
instruction set support.
</td></tr>
<tr valign="top"><td width=4%>
<i>c3</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Via C3 <font size="-1">CPU</font> with <font size="-1">MMX</font> and 3dNOW! instruction set support.  (No scheduling is
implemented for this chip.)
</td></tr>
<tr valign="top"><td width=4%>
<i>c3-2</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Via C3-2 <font size="-1">CPU</font> with <font size="-1">MMX</font> and <font size="-1">SSE</font> instruction set support.  (No scheduling is
implemented for this chip.)
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
While picking a specific <i>cpu-type</i> will schedule things appropriately
for that particular chip, the compiler will not generate any code that
does not run on the i386 without the <b>-march=</b><i>cpu-type</i> option
being used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-march=</b><i>cpu-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate instructions for the machine type <i>cpu-type</i>.  The choices
for <i>cpu-type</i> are the same as for <b>-mtune</b>.  Moreover,
specifying <b>-march=</b><i>cpu-type</i> implies <b>-mtune=</b><i>cpu-type</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>cpu-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
A deprecated synonym for <b>-mtune</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m386</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m486</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpentium</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpentiumpro</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These options are synonyms for <b>-mtune=i386</b>, <b>-mtune=i486</b>,
<b>-mtune=pentium</b>, and <b>-mtune=pentiumpro</b> respectively.
These synonyms are deprecated.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfpmath=</b><i>unit</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate floating point arithmetics for selected unit <i>unit</i>.  The choices
for <i>unit</i> are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>387</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use the standard 387 floating point coprocessor present majority of chips and
emulated otherwise.  Code compiled with this option will run almost everywhere.
The temporary results are computed in 80bit precision instead of precision
specified by the type resulting in slightly different results compared to most
of other chips.  See <b>-ffloat-store</b> for more detailed description.
<p>
<!-- ignored unsupported tag .if -->
This is the default choice for i386 compiler.
</td></tr>
<tr valign="top"><td width=4%>
<b>sse</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use scalar floating point instructions present in the <font size="-1">SSE</font> instruction set.
This instruction set is supported by Pentium3 and newer chips, in the <font size="-1">AMD</font> line
by Athlon-4, Athlon-xp and Athlon-mp chips.  The earlier version of <font size="-1">SSE</font>
instruction set supports only single precision arithmetics, thus the double and
extended precision arithmetics is still done using 387.  Later version, present
only in Pentium4 and the future <font size="-1">AMD</font> x86-64 chips supports double precision
arithmetics too.
<p>
<!-- ignored unsupported tag .if -->
For the i386 compiler, you need to use <b>-march=</b><i>cpu-type</i>, <b>-msse</b>
or <b>-msse2</b> switches to enable <font size="-1">SSE</font> extensions and make this option
effective.  For the x86-64 compiler, these extensions are enabled by default.
<p>
<!-- ignored unsupported tag .if -->
The resulting code should be considerably faster in the majority of cases and avoid
the numerical instability problems of 387 code, but may break some existing
code that expects temporaries to be 80bit.
<p>
<!-- ignored unsupported tag .if -->
This is the default choice for the x86-64 compiler.
</td></tr>
<tr valign="top"><td width=4%>
<b>sse,387</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Attempt to utilize both instruction sets at once.  This effectively double the
amount of available registers and on chips with separate execution units for
387 and <font size="-1">SSE</font> the execution resources too.  Use this option with care, as it is
still experimental, because the <font size="-1">GCC</font> register allocator does not model separate
functional units well resulting in instable performance.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-masm=</b><i>dialect</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Output asm instructions using selected <i>dialect</i>.  Supported
choices are <b>intel</b> or <b>att</b> (the default one).  Darwin does
not support <b>intel</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mieee-fp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-ieee-fp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Control whether or not the compiler uses <font size="-1">IEEE</font> floating point
comparisons.  These handle correctly the case where the result of a
comparison is unordered.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing library calls for floating point.
<b>Warning:</b> the requisite libraries are not part of <font size="-1">GCC</font>.
Normally the facilities of the machine&#146;s usual C compiler are used, but
this can&#146;t be done directly in cross-compilation.  You must make your
own arrangements to provide suitable library functions for
cross-compilation.
<p>
<!-- ignored unsupported tag .if -->
On machines where a function returns floating point results in the 80387
register stack, some floating point opcodes may be emitted even if
<b>-msoft-float</b> is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fp-ret-in-387</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use the <font size="-1">FPU</font> registers for return values of functions.
<p>
<!-- ignored unsupported tag .if -->
The usual calling convention has functions return values of types
<tt>float</tt> and <tt>double</tt> in an <font size="-1">FPU</font> register, even if there
is no <font size="-1">FPU</font>.  The idea is that the operating system should emulate
an <font size="-1">FPU</font>.
<p>
<!-- ignored unsupported tag .if -->
The option <b>-mno-fp-ret-in-387</b> causes such values to be returned
in ordinary <font size="-1">CPU</font> registers instead.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fancy-math-387</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Some 387 emulators do not support the <tt>sin</tt>, <tt>cos</tt> and
<tt>sqrt</tt> instructions for the 387.  Specify this option to avoid
generating those instructions.  This option is the default on FreeBSD,
OpenBSD and NetBSD.  This option is overridden when <b>-march</b>
indicates that the target cpu will always have an <font size="-1">FPU</font> and so the
instruction will not need emulation.  As of revision 2.6.1, these
instructions are not generated unless you also use the
<b>-funsafe-math-optimizations</b> switch.
</td></tr>
<tr valign="top"><td width=4%>
<b>-malign-double</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-align-double</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Control whether <font size="-1">GCC</font> aligns <tt>double</tt>, <tt>long double</tt>, and
<tt>long long</tt> variables on a two word boundary or a one word
boundary.  Aligning <tt>double</tt> variables on a two word boundary will
produce code that runs somewhat faster on a <b>Pentium</b> at the
expense of more memory.
<p>
<!-- ignored unsupported tag .if -->
On x86-64, <b>-malign-double</b> is enabled by default.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> if you use the <b>-malign-double</b> switch,
structures containing the above types will be aligned differently than
the published application binary interface specifications for the 386
and will not be binary compatible with structures in code compiled
without that switch.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m96bit-long-double</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m128bit-long-double</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These switches control the size of <tt>long double</tt> type.  The i386
application binary interface specifies the size to be 96 bits,
so <b>-m96bit-long-double</b> is the default in 32 bit mode.
<p>
<!-- ignored unsupported tag .if -->
Modern architectures (Pentium and newer) would prefer <tt>long double</tt>
to be aligned to an 8 or 16 byte boundary.  In arrays or structures
conforming to the <font size="-1">ABI</font>, this would not be possible.  So specifying a
<b>-m128bit-long-double</b> will align <tt>long double</tt>
to a 16 byte boundary by padding the <tt>long double</tt> with an additional
32 bit zero.
<p>
<!-- ignored unsupported tag .if -->
In the x86-64 compiler, <b>-m128bit-long-double</b> is the default choice as
its <font size="-1">ABI</font> specifies that <tt>long double</tt> is to be aligned on 16 byte boundary.
<p>
<!-- ignored unsupported tag .if -->
Notice that neither of these options enable any extra precision over the x87
standard of 80 bits for a <tt>long double</tt>.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> if you override the default value for your target <font size="-1">ABI</font>, the
structures and arrays containing <tt>long double</tt> variables will change
their size as well as function calling convention for function taking
<tt>long double</tt> will be modified.  Hence they will not be binary
compatible with arrays or structures in code compiled without that switch.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmlarge-data-threshold=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-mcmodel=medium</b> is specified, the data greater than
<i>threshold</i> are placed in large data section.  This value must be the
same across all object linked into the binary and defaults to 65535.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msvr3-shlib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-svr3-shlib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Control whether <font size="-1">GCC</font> places uninitialized local variables into the
<tt>bss</tt> or <tt>data</tt> segments.  <b>-msvr3-shlib</b> places them
into <tt>bss</tt>.  These options are meaningful only on System V Release 3.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrtd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use a different function-calling convention, in which functions that
take a fixed number of arguments return with the <tt>ret</tt> <i>num</i>
instruction, which pops their arguments while returning.  This saves one
instruction in the caller since there is no need to pop the arguments
there.
<p>
<!-- ignored unsupported tag .if -->
You can specify that an individual function is called with this calling
sequence with the function attribute <b>stdcall</b>.  You can also
override the <b>-mrtd</b> option by using the function attribute
<b>cdecl</b>. 
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> this calling convention is incompatible with the one
normally used on Unix, so you cannot use it if you need to call
libraries compiled with the Unix compiler.
<p>
<!-- ignored unsupported tag .if -->
Also, you must provide function prototypes for all functions that
take variable numbers of arguments (including <tt>printf</tt>);
otherwise incorrect code will be generated for calls to those
functions.
<p>
<!-- ignored unsupported tag .if -->
In addition, seriously incorrect code will result if you call a
function with too many arguments.  (Normally, extra arguments are
harmlessly ignored.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-mregparm=</b><i>num</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Control how many registers are used to pass integer arguments.  By
default, no registers are used to pass arguments, and at most 3
registers can be used.  You can control this behavior for a specific
function by using the function attribute <b>regparm</b>.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> if you use this switch, and
<i>num</i> is nonzero, then you must build all modules with the same
value, including any libraries.  This includes the system libraries and
startup modules.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msseregparm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <font size="-1">SSE</font> register passing conventions for float and double arguments
and return values.  You can control this behavior for a specific
function by using the function attribute <b>sseregparm</b>.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> if you use this switch then you must build all
modules with the same value, including any libraries.  This includes
the system libraries and startup modules.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpreferred-stack-boundary=</b><i>num</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Attempt to keep the stack boundary aligned to a 2 raised to <i>num</i>
byte boundary.  If <b>-mpreferred-stack-boundary</b> is not specified,
the default is 4 (16 bytes or 128 bits).
<p>
<!-- ignored unsupported tag .if -->
On Pentium and PentiumPro, <tt>double</tt> and <tt>long double</tt> values
should be aligned to an 8 byte boundary (see <b>-malign-double</b>) or
suffer significant run time performance penalties.  On Pentium <font size="-1">III</font>, the
Streaming <font size="-1">SIMD</font> Extension (<font size="-1">SSE</font>) data type <tt>__m128</tt> may not work
properly if it is not 16 byte aligned.
<p>
<!-- ignored unsupported tag .if -->
To ensure proper alignment of this values on the stack, the stack boundary
must be as aligned as that required by any value stored on the stack.
Further, every function must be generated such that it keeps the stack
aligned.  Thus calling a function compiled with a higher preferred
stack boundary from a function compiled with a lower preferred stack
boundary will most likely misalign the stack.  It is recommended that
libraries that use callbacks always use the default setting.
<p>
<!-- ignored unsupported tag .if -->
This extra alignment does consume extra stack space, and generally
increases code size.  Code that is sensitive to stack space usage, such
as embedded systems and operating system kernels, may want to reduce the
preferred alignment to <b>-mpreferred-stack-boundary=2</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmmx</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mmx</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msse</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sse</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msse2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sse2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msse3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sse3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mssse3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-ssse3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msse4a</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sse4a</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msse5</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sse5</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m3dnow</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-3dnow</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpopcnt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-popcnt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-abm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These switches enable or disable the use of instructions in the <font size="-1">MMX</font>,
<font size="-1">SSE</font>, <font size="-1">SSE2</font> or 3DNow! extended instruction sets.  These extensions are
also available as built-in functions: see <b>X86 Built-in Functions</b>,
for details of the functions enabled and disabled by these switches.
<p>
<!-- ignored unsupported tag .if -->
To have <font size="-1">SSE/SSE2</font> instructions generated automatically from floating-point
code (as opposed to 387 instructions), see <b>-mfpmath=sse</b>.
<p>
<!-- ignored unsupported tag .if -->
These options will enable <font size="-1">GCC</font> to use these extended instructions in
generated code, even without <b>-mfpmath=sse</b>.  Applications which
perform runtime <font size="-1">CPU</font> detection must compile separate files for each
supported architecture, using the appropriate flags.  In particular,
the file containing the <font size="-1">CPU</font> detection code should be compiled without
these options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpush-args</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-push-args</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <font size="-1">PUSH</font> operations to store outgoing parameters.  This method is shorter
and usually equally fast as method using <font size="-1">SUB/MOV</font> operations and is enabled
by default.  In some cases disabling it may improve performance because of
improved scheduling and reduced dependencies.
</td></tr>
<tr valign="top"><td width=4%>
<b>-maccumulate-outgoing-args</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If enabled, the maximum amount of space required for outgoing arguments will be
computed in the function prologue.  This is faster on most modern CPUs
because of reduced dependencies, improved scheduling and reduced stack usage
when preferred stack boundary is not equal to 2.  The drawback is a notable
increase in code size.  This switch implies <b>-mno-push-args</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mthreads</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Support thread-safe exception handling on <b>Mingw32</b>.  Code that relies
on thread-safe exception handling must compile and link all code with the
<b>-mthreads</b> option.  When compiling, <b>-mthreads</b> defines
<b>-D_MT</b>; when linking, it links in a special thread helper library
<b>-lmingwthrd</b> which cleans up per thread exception handling data.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-align-stringops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not align destination of inlined string operations.  This switch reduces
code size and improves performance in case the destination is already aligned,
but <font size="-1">GCC</font> doesn&#146;t know about it.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minline-all-stringops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
By default <font size="-1">GCC</font> inlines string operations only when destination is known to be
aligned at least to 4 byte boundary.  This enables more inlining, increase code
size, but may improve performance of code that depends on fast memcpy, strlen
and memset for short lengths.
</td></tr>
<tr valign="top"><td width=4%>
<b>-momit-leaf-frame-pointer</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t keep the frame pointer in a register for leaf functions.  This
avoids the instructions to save, set up and restore frame pointers and
makes an extra register available in leaf functions.  The option
<b>-fomit-frame-pointer</b> removes the frame pointer for all functions
which might make debugging harder.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtls-direct-seg-refs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-tls-direct-seg-refs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Controls whether <font size="-1">TLS</font> variables may be accessed with offsets from the
<font size="-1">TLS</font> segment register (<tt>%gs</tt> for 32-bit, <tt>%fs</tt> for 64-bit),
or whether the thread base pointer must be added.  Whether or not this
is legal depends on the operating system, and whether it maps the
segment to cover the entire <font size="-1">TLS</font> area.
<p>
<!-- ignored unsupported tag .if -->
For systems that use <font size="-1">GNU</font> libc, the default is on.
</td></tr>
<!-- PP ends table -->
</table>
These <b>-m</b> switches are supported in addition to the above
on <font size="-1">AMD</font> x86-64 processors in 64-bit environments.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-m32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a 32-bit or 64-bit environment.
The 32-bit environment sets int, long and pointer to 32 bits and
generates code that runs on any i386 system.
The 64-bit environment sets int to 32 bits and long and pointer
to 64 bits and generates code for <font size="-1">AMD</font>&#146;s x86-64 architecture.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-red-zone</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use a so called red zone for x86-64 code.  The red zone is mandated
by the x86-64 <font size="-1">ABI</font>, it is a 128-byte area beyond the location of the
stack pointer that will not be modified by signal or interrupt handlers
and therefore can be used for temporary data without adjusting the stack
pointer.  The flag <b>-mno-red-zone</b> disables this red zone.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcmodel=small</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the small code model: the program and its symbols must
be linked in the lower 2 <font size="-1">GB</font> of the address space.  Pointers are 64 bits.
Programs can be statically or dynamically linked.  This is the default
code model.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcmodel=kernel</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the kernel code model.  The kernel runs in the
negative 2 <font size="-1">GB</font> of the address space.
This model has to be used for Linux kernel code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcmodel=medium</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the medium model: The program is linked in the lower 2
<font size="-1">GB</font> of the address space but symbols can be located anywhere in the
address space.  Programs can be statically or dynamically linked, but
building of shared libraries are not supported with the medium model.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcmodel=large</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the large model: This model makes no assumptions
about addresses and sizes of sections.  Currently <font size="-1">GCC</font> does not implement
this model.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable automatic generation of fused floating point multiply-add instructions
if the <font size="-1">ISA</font> supports such instructions.  The -mfused-madd option is on by
default.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">IA-64</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These are the <b>-m</b> options defined for the Intel <font size="-1">IA-64</font> architecture.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mbig-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a big endian target.  This is the default for <font size="-1">HP-UX</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlittle-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a little endian target.  This is the default for <font size="-1">AIX5</font>
and GNU/Linux.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgnu-as</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-gnu-as</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (or don&#146;t) code for the <font size="-1">GNU</font> assembler.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgnu-ld</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-gnu-ld</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (or don&#146;t) code for the <font size="-1">GNU</font> linker.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-pic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that does not use a global pointer register.  The result
is not position independent code, and violates the <font size="-1">IA-64</font> <font size="-1">ABI</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mvolatile-asm-stop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-volatile-asm-stop</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (or don&#146;t) a stop bit immediately before and after volatile asm
statements.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mregister-names</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-register-names</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (or don&#146;t) <b>in</b>, <b>loc</b>, and <b>out</b> register names for
the stacked registers.  This may make assembler output more readable.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sdata</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable (or enable) optimizations that use the small data section.  This may
be useful for working around optimizer bugs.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mconstant-gp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses a single constant global pointer value.  This is
useful when compiling kernel code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mauto-pic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that is self-relocatable.  This implies <b>-mconstant-gp</b>.
This is useful when compiling firmware code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minline-float-divide-min-latency</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for inline divides of floating point values
using the minimum latency algorithm.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minline-float-divide-max-throughput</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for inline divides of floating point values
using the maximum throughput algorithm.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minline-int-divide-min-latency</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for inline divides of integer values
using the minimum latency algorithm.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minline-int-divide-max-throughput</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for inline divides of integer values
using the maximum throughput algorithm.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minline-sqrt-min-latency</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for inline square roots
using the minimum latency algorithm.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minline-sqrt-max-throughput</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for inline square roots
using the maximum throughput algorithm.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-dwarf2-asm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdwarf2-asm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t (or do) generate assembler code for the <font size="-1">DWARF2</font> line number debugging
info.  This may be useful when not using the <font size="-1">GNU</font> assembler.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mearly-stop-bits</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-early-stop-bits</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow stop bits to be placed earlier than immediately preceding the
instruction that triggered the stop bit.  This can improve instruction
scheduling, but does not always do so.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfixed-range=</b><i>register-range</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code treating the given register range as fixed registers.
A fixed register is one that the register allocator can not use.  This is
useful when compiling kernel code.  A register range is specified as
two registers separated by a dash.  Multiple register ranges can be
specified separated by a comma.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtls-size=</b><i>tls-size</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify bit size of immediate <font size="-1">TLS</font> offsets.  Valid values are 14, 22, and
64.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>cpu-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Tune the instruction scheduling for a particular <font size="-1">CPU</font>, Valid values are
itanium, itanium1, merced, itanium2, and mckinley.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-pthread</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Add support for multithreading using the <font size="-1">POSIX</font> threads library.  This
option sets flags for both the preprocessor and linker.  It does
not affect the thread safety of object code produced by the compiler or
that of libraries supplied with it.  These are HP-UX specific flags.
</td></tr>
<tr valign="top"><td width=4%>
<b>-milp32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlp64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a 32-bit or 64-bit environment.
The 32-bit environment sets int, long and pointer to 32 bits.
The 64-bit environment sets int to 32 bits and long and pointer
to 64 bits.  These are HP-UX specific flags.
</td></tr>
</table>
<h1 class="manpages">M32C Options</h1>
<!-- ignored unsupported tag .tm -->
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Select the <font size="-1">CPU</font> for which code is generated.  <i>name</i> may be one of
<b>r8c</b> for the R8C/Tiny series, <b>m16c</b> for the M16C (up to
/60) series, <b>m32cm</b> for the M16C/80 series, or <b>m32c</b> for
the M32C/80 series.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msim</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies that the program will be run on the simulator.  This causes
an alternate runtime library to be linked in which supports, for
example, file I/O.  You must not use this option when generating
programs that will run on real hardware; you must provide your own
runtime library for whatever I/O functions are needed.
</td></tr>
<tr valign="top"><td width=4%>
<b>-memregs=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies the number of memory-based pseudo-registers <font size="-1">GCC</font> will use
during code generation.  These pseudo-registers will be used like real
registers, so there is a tradeoff between <font size="-1">GCC</font>&#146;s ability to fit the
code into available registers, and the performance penalty of using
memory instead of registers.  Note that all modules in a program must
be compiled with the same value for this option.  Because of that, you
must not use this option with the default runtime libraries gcc
builds.
</td></tr>
</table>
<h1 class="manpages">M32R/D Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for Renesas M32R/D architectures:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-m32r2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the M32R/2.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m32rx</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the M32R/X.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m32r</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the M32R.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmodel=small</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume all objects live in the lower 16MB of memory (so that their addresses
can be loaded with the <tt>ld24</tt> instruction), and assume all subroutines
are reachable with the <tt>bl</tt> instruction.
This is the default.
<p>
<!-- ignored unsupported tag .if -->
The addressability of a particular object can be set with the
<tt>model</tt> attribute.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmodel=medium</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume objects may be anywhere in the 32-bit address space (the compiler
will generate <tt>seth/add3</tt> instructions to load their addresses), and
assume all subroutines are reachable with the <tt>bl</tt> instruction.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmodel=large</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume objects may be anywhere in the 32-bit address space (the compiler
will generate <tt>seth/add3</tt> instructions to load their addresses), and
assume subroutines may not be reachable with the <tt>bl</tt> instruction
(the compiler will generate the much slower <tt>seth/add3/jl</tt>
instruction sequence).
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata=none</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable use of the small data area.  Variables will be put into
one of <b>.data</b>, <b>bss</b>, or <b>.rodata</b> (unless the
<tt>section</tt> attribute has been specified).
This is the default.
<p>
<!-- ignored unsupported tag .if -->
The small data area consists of sections <b>.sdata</b> and <b>.sbss</b>.
Objects may be explicitly put in the small data area with the
<tt>section</tt> attribute using one of these sections.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata=sdata</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Put small global and static data in the small data area, but do not
generate special code to reference them.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata=use</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Put small global and static data in the small data area, and generate
special instructions to reference them.
</td></tr>
<tr valign="top"><td width=4%>
<b>-G</b> <i>num</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Put global and static objects less than or equal to <i>num</i> bytes
into the small data or bss sections instead of the normal data or bss
sections.  The default value of <i>num</i> is 8.
The <b>-msdata</b> option must be set to one of <b>sdata</b> or <b>use</b>
for this option to have any effect.
<p>
<!-- ignored unsupported tag .if -->
All modules should be compiled with the same <b>-G</b> <i>num</i> value.
Compiling with different values of <i>num</i> may or may not work; if it
doesn&#146;t the linker will give an error message---incorrect code will not be
generated.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdebug</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Makes the M32R specific code in the compiler display some statistics
that might help in debugging programs.
</td></tr>
<tr valign="top"><td width=4%>
<b>-malign-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Align all loops to a 32-byte boundary.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-align-loops</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not enforce a 32-byte alignment for loops.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-missue-rate=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Issue <i>number</i> instructions per cycle.  <i>number</i> can only be 1
or 2.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbranch-cost=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<i>number</i> can only be 1 or 2.  If it is 1 then branches will be
preferred over conditional code, if it is 2, then the opposite will
apply.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mflush-trap=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies the trap number to use to flush the cache.  The default is
12.  Valid numbers are between 0 and 15 inclusive.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-flush-trap</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies that the cache cannot be flushed by using a trap.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mflush-func=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies the name of the operating system function to call to flush
the cache.  The default is <i>_flush_cache</i>, but a function call
will only be used if a trap is not available.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-flush-func</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Indicates that there is no <font size="-1">OS</font> function for flushing the cache.
</td></tr>
</table>
<h1 class="manpages">M680x0 Options</h1>
<!-- ignored unsupported tag .tm -->
These are the <b>-m</b> options defined for the 68000 series.  The default
values for these options depends on which style of 68000 was selected when
the compiler was configured; the defaults for the most common choices are
given below.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-m68000</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mc68000</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68000.  This is the default
when the compiler is configured for 68000-based systems.
<p>
<!-- ignored unsupported tag .if -->
Use this option for microcontrollers with a 68000 or <font size="-1">EC000</font> core,
including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68020</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mc68020</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68020.  This is the default
when the compiler is configured for 68020-based systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68881</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing 68881 instructions for floating point.
This is the default for most 68020 systems unless <b>--nfp</b> was
specified when the compiler was configured.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68030</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68030.  This is the default when the compiler is
configured for 68030-based systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68040</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68040.  This is the default when the compiler is
configured for 68040-based systems.
<p>
<!-- ignored unsupported tag .if -->
This option inhibits the use of 68881/68882 instructions that have to be
emulated by software on the 68040.  Use this option if your 68040 does not
have code to emulate those instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68060</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68060.  This is the default when the compiler is
configured for 68060-based systems.
<p>
<!-- ignored unsupported tag .if -->
This option inhibits the use of 68020 and 68881/68882 instructions that
have to be emulated by software on the 68060.  Use this option if your 68060
does not have code to emulate those instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a <font size="-1">CPU32</font>.  This is the default
when the compiler is configured for CPU32-based systems.
<p>
<!-- ignored unsupported tag .if -->
Use this option for microcontrollers with a
<font size="-1">CPU32</font> or <font size="-1">CPU32+</font> core, including the 68330, 68331, 68332, 68333, 68334,
68336, 68340, 68341, 68349 and 68360.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m5200</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 520X coldfire family cpu.  This is the default
when the compiler is configured for 520X-based systems.
<p>
<!-- ignored unsupported tag .if -->
Use this option for microcontroller with a 5200 core, including
the <font size="-1">MCF5202</font>, <font size="-1">MCF5203</font>, <font size="-1">MCF5204</font> and <font size="-1">MCF5202</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68020-40</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68040, without using any of the new instructions.
This results in code which can run relatively efficiently on either a
68020/68881 or a 68030 or a 68040.  The generated code does use the
68881 instructions that are emulated on the 68040.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68020-60</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68060, without using any of the new instructions.
This results in code which can run relatively efficiently on either a
68020/68881 or a 68030 or a 68040.  The generated code does use the
68881 instructions that are emulated on the 68060.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing library calls for floating point.
<b>Warning:</b> the requisite libraries are not available for all m68k
targets.  Normally the facilities of the machine&#146;s usual C compiler are
used, but this can&#146;t be done directly in cross-compilation.  You must
make your own arrangements to provide suitable library functions for
cross-compilation.  The embedded targets <b>m68k-*-aout</b> and
<b>m68k-*-coff</b> do provide software floating point support.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mshort</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Consider type <tt>int</tt> to be 16 bits wide, like <tt>short int</tt>.
Additionally, parameters passed on the stack are also aligned to a
16-bit boundary even on targets whose <font size="-1">API</font> mandates promotion to 32-bit.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mnobitfield</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use the bit-field instructions.  The <b>-m68000</b>, <b>-mcpu32</b>
and <b>-m5200</b> options imply <b>-mnobitfield</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbitfield</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do use the bit-field instructions.  The <b>-m68020</b> option implies
<b>-mbitfield</b>.  This is the default if you use a configuration
designed for a 68020.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrtd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use a different function-calling convention, in which functions
that take a fixed number of arguments return with the <tt>rtd</tt>
instruction, which pops their arguments while returning.  This
saves one instruction in the caller since there is no need to pop
the arguments there.
<p>
<!-- ignored unsupported tag .if -->
This calling convention is incompatible with the one normally
used on Unix, so you cannot use it if you need to call libraries
compiled with the Unix compiler.
<p>
<!-- ignored unsupported tag .if -->
Also, you must provide function prototypes for all functions that
take variable numbers of arguments (including <tt>printf</tt>);
otherwise incorrect code will be generated for calls to those
functions.
<p>
<!-- ignored unsupported tag .if -->
In addition, seriously incorrect code will result if you call a
function with too many arguments.  (Normally, extra arguments are
harmlessly ignored.)
<p>
<!-- ignored unsupported tag .if -->
The <tt>rtd</tt> instruction is supported by the 68010, 68020, 68030,
68040, 68060 and <font size="-1">CPU32</font> processors, but not by the 68000 or 5200.
</td></tr>
<tr valign="top"><td width=4%>
<b>-malign-int</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-align-int</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Control whether <font size="-1">GCC</font> aligns <tt>int</tt>, <tt>long</tt>, <tt>long long</tt>,
<tt>float</tt>, <tt>double</tt>, and <tt>long double</tt> variables on a 32-bit
boundary (<b>-malign-int</b>) or a 16-bit boundary (<b>-mno-align-int</b>).
Aligning variables on 32-bit boundaries produces code that runs somewhat
faster on processors with 32-bit busses at the expense of more memory.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> if you use the <b>-malign-int</b> switch, <font size="-1">GCC</font> will
align structures containing the above types  differently than
most published application binary interface specifications for the m68k.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpcrel</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use the pc-relative addressing mode of the 68000 directly, instead of
using a global offset table.  At present, this option implies <b>-fpic</b>,
allowing at most a 16-bit offset for pc-relative addressing.  <b>-fPIC</b> is
not presently supported with <b>-mpcrel</b>, though this could be supported for
68020 and higher processors.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-strict-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mstrict-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not (do) assume that unaligned memory references will be handled by
the system.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msep-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that allows the data segment to be located in a different
area of memory from the text segment.  This allows for execute in place in
an environment without virtual memory management.  This option implies
<b>-fPIC</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sep-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that assumes that the data segment follows the text segment.
This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mid-shared-library</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that supports shared libraries via the library <font size="-1">ID</font> method.
This allows for execute in place and shared libraries in an environment
without virtual memory management.  This option implies <b>-fPIC</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-id-shared-library</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that doesn&#146;t assume <font size="-1">ID</font> based shared libraries are being used.
This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mshared-library-id=n</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specified the identification number of the <font size="-1">ID</font> based shared library being
compiled.  Specifying a value of 0 will generate more compact code, specifying
other values will force the allocation of that number to the current
library but is no more space or time efficient than omitting this option.
</td></tr>
</table>
<h1 class="manpages">M68hc1x Options</h1>
<!-- ignored unsupported tag .tm -->
These are the <b>-m</b> options defined for the 68hc11 and 68hc12
microcontrollers.  The default values for these options depends on
which style of microcontroller was selected when the compiler was configured;
the defaults for the most common choices are given below.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-m6811</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68hc11</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68HC11.  This is the default
when the compiler is configured for 68HC11-based systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m6812</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68hc12</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68HC12.  This is the default
when the compiler is configured for 68HC12-based systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68S12</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m68hcs12</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output for a 68HCS12.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mauto-incdec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of 68HC12 pre and post auto-increment and auto-decrement
addressing modes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minmax</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-nominmax</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of 68HC12 min and max instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-long-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Treat all calls as being far away (near).  If calls are assumed to be
far away, the compiler will use the <tt>call</tt> instruction to
call a function and the <tt>rtc</tt> instruction for returning.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mshort</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Consider type <tt>int</tt> to be 16 bits wide, like <tt>short int</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-reg-count=</b><i>count</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the number of pseudo-soft registers which are used for the
code generation.  The maximum number is 32.  Using more pseudo-soft
register may or may not result in better code depending on the program.
The default is 4 for 68HC11 and 2 for 68HC12.
</td></tr>
</table>
<h1 class="manpages">MCore Options</h1>
<!-- ignored unsupported tag .tm -->
These are the <b>-m</b> options defined for the Motorola M*Core
processors.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mhardlit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-hardlit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Inline constants into the code stream if it can be done in two
instructions or less.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdiv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-div</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use the divide instruction.  (Enabled by default).
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrelax-immediate</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-relax-immediate</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow arbitrary sized immediates in bit operations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mwide-bitfields</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-wide-bitfields</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Always treat bit-fields as int-sized.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4byte-functions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-4byte-functions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force all functions to be aligned to a four byte boundary.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcallgraph-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-callgraph-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit callgraph information.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mslow-bytes</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-slow-bytes</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Prefer word access when reading byte quantities.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlittle-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbig-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a little endian target.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m210</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m340</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the 210 processor.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">MIPS</font> Options</h1>
<!-- ignored unsupported tag .tm -->
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-EB</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate big-endian code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-EL</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate little-endian code.  This is the default for <b>mips*el-*-*</b>
configurations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-march=</b><i>arch</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that will run on <i>arch</i>, which can be the name of a
generic <font size="-1">MIPS</font> <font size="-1">ISA</font>, or the name of a particular processor.
The <font size="-1">ISA</font> names are:
<b>mips1</b>, <b>mips2</b>, <b>mips3</b>, <b>mips4</b>,
<b>mips32</b>, <b>mips32r2</b>, and <b>mips64</b>.
The processor names are:
<b>4kc</b>, <b>4km</b>, <b>4kp</b>,
<b>5kc</b>, <b>5kf</b>,
<b>20kc</b>,
<b>24k</b>, <b>24kc</b>, <b>24kf</b>, <b>24kx</b>,
<b>m4k</b>,
<b>orion</b>,
<b>r2000</b>, <b>r3000</b>, <b>r3900</b>, <b>r4000</b>, <b>r4400</b>,
<b>r4600</b>, <b>r4650</b>, <b>r6000</b>, <b>r8000</b>,
<b>rm7000</b>, <b>rm9000</b>,
<b>sb1</b>,
<b>sr71000</b>,
<b>vr4100</b>, <b>vr4111</b>, <b>vr4120</b>, <b>vr4130</b>, <b>vr4300</b>,
<b>vr5000</b>, <b>vr5400</b> and <b>vr5500</b>.
The special value <b>from-abi</b> selects the
most compatible architecture for the selected <font size="-1">ABI</font> (that is,
<b>mips1</b> for 32-bit ABIs and <b>mips3</b> for 64-bit ABIs).
<p>
<!-- ignored unsupported tag .if -->
In processor names, a final <b>000</b> can be abbreviated as <b>k</b>
(for example, <b>-march=r2k</b>).  Prefixes are optional, and
<b>vr</b> may be written <b>r</b>.
<p>
<!-- ignored unsupported tag .if -->
<font size="-1">GCC</font> defines two macros based on the value of this option.  The first
is <b>_MIPS_ARCH</b>, which gives the name of target architecture, as
a string.  The second has the form <b>_MIPS_ARCH_</b><i>foo</i>,
where <i>foo</i> is the capitalized value of <b>_MIPS_ARCH</b>.
For example, <b>-march=r2000</b> will set <b>_MIPS_ARCH</b>
to <b>r2000</b> and define the macro <b>_MIPS_ARCH_R2000</b>.
<p>
<!-- ignored unsupported tag .if -->
Note that the <b>_MIPS_ARCH</b> macro uses the processor names given
above.  In other words, it will have the full prefix and will not
abbreviate <b>000</b> as <b>k</b>.  In the case of <b>from-abi</b>,
the macro names the resolved architecture (either <b>mips1</b> or
<b>mips3</b>).  It names the default architecture when no
<b>-march</b> option is given.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>arch</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Optimize for <i>arch</i>.  Among other things, this option controls
the way instructions are scheduled, and the perceived cost of arithmetic
operations.  The list of <i>arch</i> values is the same as for
<b>-march</b>.
<p>
<!-- ignored unsupported tag .if -->
When this option is not used, <font size="-1">GCC</font> will optimize for the processor
specified by <b>-march</b>.  By using <b>-march</b> and
<b>-mtune</b> together, it is possible to generate code that will
run on a family of processors, but optimize the code for one
particular member of that family.
<p>
<!-- ignored unsupported tag .if -->
<b>-mtune</b> defines the macros <b>_MIPS_TUNE</b> and
<b>_MIPS_TUNE_</b><i>foo</i>, which work in the same way as the
<b>-march</b> ones described above.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Equivalent to <b>-march=mips1</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Equivalent to <b>-march=mips2</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Equivalent to <b>-march=mips3</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips4</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Equivalent to <b>-march=mips4</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Equivalent to <b>-march=mips32</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips32r2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Equivalent to <b>-march=mips32r2</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Equivalent to <b>-march=mips64</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips16</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mips16</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (do not generate) <font size="-1">MIPS16</font> code.  If <font size="-1">GCC</font> is targetting a
<font size="-1">MIPS32</font> or <font size="-1">MIPS64</font> architecture, it will make use of the MIPS16e <font size="-1">ASE</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=o64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=n32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=eabi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the given <font size="-1">ABI</font>.
<p>
<!-- ignored unsupported tag .if -->
Note that the <font size="-1">EABI</font> has a 32-bit and a 64-bit variant.  <font size="-1">GCC</font> normally
generates 64-bit code when you select a 64-bit architecture, but you
can use <b>-mgp32</b> to get 32-bit code instead.
<p>
<!-- ignored unsupported tag .if -->
For information about the O64 <font size="-1">ABI</font>, see
&lt;<b><a href="http://gcc.gnu.org/projects/mipso64-abi.html">http://gcc.gnu.org/projects/mipso64-abi.html</a></b>&gt;.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabicalls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-abicalls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (do not generate) SVR4-style position-independent code.
<b>-mabicalls</b> is the default for SVR4-based systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mxgot</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-xgot</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Lift (do not lift) the usual restrictions on the size of the global
offset table.
<p>
<!-- ignored unsupported tag .if -->
<font size="-1">GCC</font> normally uses a single instruction to load values from the <font size="-1">GOT</font>.
While this is relatively efficient, it will only work if the <font size="-1">GOT</font>
is smaller than about 64k.  Anything larger will cause the linker
to report an error such as:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        relocation truncated to fit: R_MIPS_GOT16 foobar
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
If this happens, you should recompile your code with <b>-mxgot</b>.
It should then work with very large GOTs, although it will also be
less efficient, since it will take three instructions to fetch the
value of a global symbol.
<p>
<!-- ignored unsupported tag .if -->
Note that some linkers can create multiple GOTs.  If you have such a
linker, you should only need to use <b>-mxgot</b> when a single object
file accesses more than 64k&#146;s worth of <font size="-1">GOT</font> entries.  Very few do.
<p>
<!-- ignored unsupported tag .if -->
These options have no effect unless <font size="-1">GCC</font> is generating position
independent code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgp32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that general-purpose registers are 32 bits wide.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgp64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that general-purpose registers are 64 bits wide.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfp32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that floating-point registers are 32 bits wide.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfp64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that floating-point registers are 64 bits wide.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mhard-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use floating-point coprocessor instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use floating-point coprocessor instructions.  Implement
floating-point calculations using library calls instead.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msingle-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that the floating-point coprocessor only supports single-precision
operations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdouble-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that the floating-point coprocessor supports double-precision
operations.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdsp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-dsp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use (do not use) the <font size="-1">MIPS</font> <font size="-1">DSP</font> <font size="-1">ASE</font>. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpaired-single</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-paired-single</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use (do not use) paired-single floating-point instructions.
<br />
  This option can only be used
when generating 64-bit code and requires hardware floating-point
support to be enabled.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mips3d</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mips3d</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use (do not use) the <font size="-1">MIPS-3D</font> <font size="-1">ASE</font>. 
The option <b>-mips3d</b> implies <b>-mpaired-single</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force <tt>long</tt> types to be 64 bits wide.  See <b>-mlong32</b> for
an explanation of the default and the way that the pointer size is
determined.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force <tt>long</tt>, <tt>int</tt>, and pointer types to be 32 bits wide.
<p>
<!-- ignored unsupported tag .if -->
The default size of <tt>int</tt>s, <tt>long</tt>s and pointers depends on
the <font size="-1">ABI</font>.  All the supported ABIs use 32-bit <tt>int</tt>s.  The n64 <font size="-1">ABI</font>
uses 64-bit <tt>long</tt>s, as does the 64-bit <font size="-1">EABI</font>; the others use
32-bit <tt>long</tt>s.  Pointers are the same size as <tt>long</tt>s,
or the same size as integer registers, whichever is smaller.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msym32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sym32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume (do not assume) that all symbols have 32-bit values, regardless
of the selected <font size="-1">ABI</font>.  This option is useful in combination with
<b>-mabi=64</b> and <b>-mno-abicalls</b> because it allows <font size="-1">GCC</font>
to generate shorter and faster references to symbolic addresses.
</td></tr>
<tr valign="top"><td width=4%>
<b>-G</b> <i>num</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Put global and static items less than or equal to <i>num</i> bytes into
the small data or bss section instead of the normal data or bss section.
This allows the data to be accessed using a single instruction.
<p>
<!-- ignored unsupported tag .if -->
All modules should be compiled with the same <b>-G</b> <i>num</i>
value.
</td></tr>
<tr valign="top"><td width=4%>
<b>-membedded-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-embedded-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allocate variables to the read-only data section first if possible, then
next in the small data section if possible, otherwise in data.  This gives
slightly slower code than the default, but reduces the amount of <font size="-1">RAM</font> required
when executing, and thus may be preferred for some embedded systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>-muninit-const-in-rodata</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-uninit-const-in-rodata</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Put uninitialized <tt>const</tt> variables in the read-only data section.
This option is only meaningful in conjunction with <b>-membedded-data</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msplit-addresses</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-split-addresses</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable (disable) use of the <tt>%hi()</tt> and <tt>%lo()</tt> assembler
relocation operators.  This option has been superseded by
<b>-mexplicit-relocs</b> but is retained for backwards compatibility.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mexplicit-relocs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-explicit-relocs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use (do not use) assembler relocation operators when dealing with symbolic
addresses.  The alternative, selected by <b>-mno-explicit-relocs</b>,
is to use assembler macros instead.
<p>
<!-- ignored unsupported tag .if -->
<b>-mexplicit-relocs</b> is the default if <font size="-1">GCC</font> was configured
to use an assembler that supports relocation operators.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcheck-zero-division</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-check-zero-division</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Trap (do not trap) on integer division by zero.  The default is
<b>-mcheck-zero-division</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdivide-traps</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdivide-breaks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">MIPS</font> systems check for division by zero by generating either a
conditional trap or a break instruction.  Using traps results in
smaller code, but is only supported on <font size="-1">MIPS</font> <font size="-1">II</font> and later.  Also, some
versions of the Linux kernel have a bug that prevents trap from
generating the proper signal (<tt>SIGFPE</tt>).  Use <b>-mdivide-traps</b> to
allow conditional traps on architectures that support them and
<b>-mdivide-breaks</b> to force the use of breaks.
<p>
<!-- ignored unsupported tag .if -->
The default is usually <b>-mdivide-traps</b>, but this can be
overridden at configure time using <b>--with-divide=breaks</b>.
Divide-by-zero checks can be completely disabled using
<b>-mno-check-zero-division</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmemcpy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-memcpy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force (do not force) the use of <tt>memcpy()</tt> for non-trivial block
moves.  The default is <b>-mno-memcpy</b>, which allows <font size="-1">GCC</font> to inline
most constant-sized copies.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-long-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable (do not disable) use of the <tt>jal</tt> instruction.  Calling
functions using <tt>jal</tt> is more efficient but requires the caller
and callee to be in the same 256 megabyte segment.
<p>
<!-- ignored unsupported tag .if -->
This option has no effect on abicalls code.  The default is
<b>-mno-long-calls</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmad</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mad</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable (disable) use of the <tt>mad</tt>, <tt>madu</tt> and <tt>mul</tt>
instructions, as provided by the R4650 <font size="-1">ISA</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable (disable) use of the floating point multiply-accumulate
instructions, when they are available.  The default is
<b>-mfused-madd</b>.
<p>
<!-- ignored unsupported tag .if -->
When multiply-accumulate instructions are used, the intermediate
product is calculated to infinite precision and is not subject to
the <font size="-1">FCSR</font> Flush to Zero bit.  This may be undesirable in some
circumstances.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nocpp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Tell the <font size="-1">MIPS</font> assembler to not run its preprocessor over user
assembler files (with a <b>.s</b> suffix) when assembling them.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfix-r4000</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fix-r4000</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Work around certain R4000 <font size="-1">CPU</font> errata:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
-
</td><td>
A double-word or a variable shift may give an incorrect result if executed
immediately after starting an integer division.
</td></tr>
<tr valign="top"><td width=4%>
-
</td><td>
A double-word or a variable shift may give an incorrect result if executed
while an integer multiplication is in progress.
</td></tr>
<tr valign="top"><td width=4%>
-
</td><td>
An integer division may give an incorrect result if started in a delay slot
of a taken branch or a jump.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfix-r4400</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fix-r4400</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Work around certain R4400 <font size="-1">CPU</font> errata:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
-
</td><td>
A double-word or a variable shift may give an incorrect result if executed
immediately after starting an integer division.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfix-vr4120</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fix-vr4120</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Work around certain <font size="-1">VR4120</font> errata:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
-
</td><td>
<tt>dmultu</tt> does not always produce the correct result.
</td></tr>
<tr valign="top"><td width=4%>
-
</td><td>
<tt>div</tt> and <tt>ddiv</tt> do not always produce the correct result if one
of the operands is negative.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The workarounds for the division errata rely on special functions in
<i>libgcc.a</i>.  At present, these functions are only provided by
the <tt>mips64vr*-elf</tt> configurations.
<p>
<!-- ignored unsupported tag .if -->
Other <font size="-1">VR4120</font> errata require a nop to be inserted between certain pairs of
instructions.  These errata are handled by the assembler, not by <font size="-1">GCC</font> itself.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfix-vr4130</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Work around the <font size="-1">VR4130</font> <tt>mflo</tt>/<tt>mfhi</tt> errata.  The
workarounds are implemented by the assembler rather than by <font size="-1">GCC</font>,
although <font size="-1">GCC</font> will avoid using <tt>mflo</tt> and <tt>mfhi</tt> if the
<font size="-1">VR4130</font> <tt>macc</tt>, <tt>macchi</tt>, <tt>dmacc</tt> and <tt>dmacchi</tt>
instructions are available instead.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfix-sb1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fix-sb1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Work around certain <font size="-1">SB-1</font> <font size="-1">CPU</font> core errata.
(This flag currently works around the <font size="-1">SB-1</font> revision 2
F1 and F2 floating point errata.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-mflush-func=</b><i>func</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-flush-func</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies the function to call to flush the I and D caches, or to not
call any such function.  If called, the function must take the same
arguments as the common <tt>_flush_func()</tt>, that is, the address of the
memory range for which the cache is being flushed, the size of the
memory range, and the number 3 (to flush both caches).  The default
depends on the target <font size="-1">GCC</font> was configured for, but commonly is either
<b>_flush_func</b> or <b>__cpu_flush</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbranch-likely</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-branch-likely</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable or disable use of Branch Likely instructions, regardless of the
default for the selected architecture.  By default, Branch Likely
instructions may be generated if they are supported by the selected
architecture.  An exception is for the <font size="-1">MIPS32</font> and <font size="-1">MIPS64</font> architectures
and processors which implement those architectures; for those, Branch
Likely instructions will not be generated by default because the <font size="-1">MIPS32</font>
and <font size="-1">MIPS64</font> architectures specifically deprecate their use.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfp-exceptions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fp-exceptions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies whether <font size="-1">FP</font> exceptions are enabled.  This affects how we schedule
<font size="-1">FP</font> instructions for some processors.  The default is that <font size="-1">FP</font> exceptions are
enabled.
<p>
<!-- ignored unsupported tag .if -->
For instance, on the <font size="-1">SB-1</font>, if <font size="-1">FP</font> exceptions are disabled, and we are emitting
64-bit code, then we can use both <font size="-1">FP</font> pipes.  Otherwise, we can only use one
<font size="-1">FP</font> pipe.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mvr4130-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-vr4130-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The <font size="-1">VR4130</font> pipeline is two-way superscalar, but can only issue two
instructions together if the first one is 8-byte aligned.  When this
option is enabled, <font size="-1">GCC</font> will align pairs of instructions that it
thinks should execute in parallel.
<p>
<!-- ignored unsupported tag .if -->
This option only has an effect when optimizing for the <font size="-1">VR4130</font>.
It normally makes code faster, but at the expense of making it bigger.
It is enabled by default at optimization level <b>-O3</b>.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">MMIX</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These options are defined for the <font size="-1">MMIX:</font>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mlibfuncs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-libfuncs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify that intrinsic library functions are being compiled, passing all
values in registers, no matter the size.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mepsilon</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-epsilon</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate floating-point comparison instructions that compare with respect
to the <tt>rE</tt> epsilon register.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=mmixware</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=gnu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that passes function parameters and return values that (in
the called function) are seen as registers <tt>$0</tt> and up, as opposed to
the <font size="-1">GNU</font> <font size="-1">ABI</font> which uses global registers <tt>$231</tt> and up.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mzero-extend</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-zero-extend</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When reading data from memory in sizes shorter than 64 bits, use (do not
use) zero-extending load instructions by default, rather than
sign-extending ones.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mknuthdiv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-knuthdiv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Make the result of a division yielding a remainder have the same sign as
the divisor.  With the default, <b>-mno-knuthdiv</b>, the sign of the
remainder follows the sign of the dividend.  Both methods are
arithmetically valid, the latter being almost exclusively used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtoplevel-symbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-toplevel-symbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Prepend (do not prepend) a <b>:</b> to all global symbols, so the assembly
code can be used with the <tt>PREFIX</tt> assembly directive.
</td></tr>
<tr valign="top"><td width=4%>
<b>-melf</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate an executable in the <font size="-1">ELF</font> format, rather than the default
<b>mmo</b> format used by the <b>mmix</b> simulator.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbranch-predict</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-branch-predict</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use (do not use) the probable-branch instructions, when static branch
prediction indicates a probable branch.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbase-addresses</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-base-addresses</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (do not generate) code that uses <i>base addresses</i>.  Using a
base address automatically generates a request (handled by the assembler
and the linker) for a constant to be set up in a global register.  The
register is used for one or more base address requests within the range 0
to 255 from the value held in the register.  The generally leads to short
and fast code, but the number of different data items that can be
addressed is limited.  This means that a program that uses lots of static
data may require <b>-mno-base-addresses</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msingle-exit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-single-exit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force (do not force) generated code to have a single exit point in each
function.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">MN10300</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for Matsushita <font size="-1">MN10300</font> architectures:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mmult-bug</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code to avoid bugs in the multiply instructions for the <font size="-1">MN10300</font>
processors.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mult-bug</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not generate code to avoid bugs in the multiply instructions for the
<font size="-1">MN10300</font> processors.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mam33</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code which uses features specific to the <font size="-1">AM33</font> processor.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-am33</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not generate code which uses features specific to the <font size="-1">AM33</font> processor.  This
is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mreturn-pointer-on-d0</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When generating a function which returns a pointer, return the pointer
in both <tt>a0</tt> and <tt>d0</tt>.  Otherwise, the pointer is returned
only in a0, and attempts to call such functions without a prototype
would result in errors.  Note that this option is on by default; use
<b>-mno-return-pointer-on-d0</b> to disable it.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-crt0</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not link in the C run-time initialization object file.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrelax</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Indicate to the linker that it should perform a relaxation optimization pass
to shorten branches, calls and absolute memory addresses.  This option only
has an effect when used on the command line for the final link step.
<p>
<!-- ignored unsupported tag .if -->
This option makes symbolic debugging impossible.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">MT</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for Morpho <font size="-1">MT</font> architectures:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-march=</b><i>cpu-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that will run on <i>cpu-type</i>, which is the name of a system
representing a certain processor type.  Possible values for
<i>cpu-type</i> are <b>ms1-64-001</b>, <b>ms1-16-002</b>,
<b>ms1-16-003</b> and <b>ms2</b>.
<p>
<!-- ignored unsupported tag .if -->
When this option is not used, the default is <b>-march=ms1-16-002</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbacc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use byte loads and stores when generating code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-bacc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use byte loads and stores when generating code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msim</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use simulator runtime
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-crt0</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not link in the C run-time initialization object file
<i>crti.o</i>.  Other run-time initialization and termination files
such as <i>startup.o</i> and <i>exit.o</i> are still included on the
linker command line.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">PDP-11</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These options are defined for the <font size="-1">PDP-11:</font>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mfpu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use hardware <font size="-1">FPP</font> floating point.  This is the default.  (<font size="-1">FIS</font> floating
point on the <font size="-1">PDP-11/40</font> is not supported.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use hardware floating point.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mac0</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Return floating-point results in ac0 (fr0 in Unix assembler syntax).
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-ac0</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Return floating-point results in memory.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m40</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a <font size="-1">PDP-11/40</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m45</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a <font size="-1">PDP-11/45</font>.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m10</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a <font size="-1">PDP-11/10</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbcopy-builtin</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use inline <tt>movmemhi</tt> patterns for copying memory.  This is the
default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbcopy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use inline <tt>movmemhi</tt> patterns for copying memory.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mint16</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-int32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use 16-bit <tt>int</tt>.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mint32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-int16</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use 32-bit <tt>int</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfloat64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-float32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use 64-bit <tt>float</tt>.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfloat32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-float64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use 32-bit <tt>float</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabshi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <tt>abshi2</tt> pattern.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-abshi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use <tt>abshi2</tt> pattern.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbranch-expensive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Pretend that branches are expensive.  This is for experimenting with
code generation only.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbranch-cheap</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not pretend that branches are expensive.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msplit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a system with split I&D.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-split</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a system without split I&D.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-munix-asm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use Unix assembler syntax.  This is the default when configured for
<b>pdp11-*-bsd</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdec-asm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <font size="-1">DEC</font> assembler syntax.  This is the default when configured for any
<font size="-1">PDP-11</font> target other than <b>pdp11-*-bsd</b>.
</td></tr>
</table>
<h1 class="manpages">PowerPC Options</h1>
<!-- ignored unsupported tag .tm -->
These are listed under
<h1 class="manpages"><font size="-1">IBM</font> <font size="-1">RS/6000</font> and PowerPC Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for the <font size="-1">IBM</font> <font size="-1">RS/6000</font> and PowerPC:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mpower</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-power</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpower2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-power2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpowerpc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-powerpc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpowerpc-gpopt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-powerpc-gpopt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpowerpc-gfxopt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-powerpc-gfxopt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpowerpc64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-powerpc64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmfcrf</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mfcrf</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpopcntb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-popcntb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfprnd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fprnd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmfpgpr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mfpgpr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<font size="-1">GCC</font> supports two related instruction set architectures for the
<font size="-1">RS/6000</font> and PowerPC.  The <i><font size="-1">POWER</font></i> instruction set are those
instructions supported by the <b>rios</b> chip set used in the original
<font size="-1">RS/6000</font> systems and the <i>PowerPC</i> instruction set is the
architecture of the Freescale MPC5xx, MPC6xx, MPC8xx microprocessors, and
the <font size="-1">IBM</font> 4xx, 6xx, and follow-on microprocessors.
<p>
<!-- ignored unsupported tag .if -->
Neither architecture is a subset of the other.  However there is a
large common subset of instructions supported by both.  An <font size="-1">MQ</font>
register is included in processors supporting the <font size="-1">POWER</font> architecture.
<p>
<!-- ignored unsupported tag .if -->
You use these options to specify which instructions are available on the
processor you are using.  The default value of these options is
determined when configuring <font size="-1">GCC</font>.  Specifying the
<b>-mcpu=</b><i>cpu_type</i> overrides the specification of these
options.  We recommend you use the <b>-mcpu=</b><i>cpu_type</i> option
rather than the options listed above.
<p>
<!-- ignored unsupported tag .if -->
The <b>-mpower</b> option allows <font size="-1">GCC</font> to generate instructions that
are found only in the <font size="-1">POWER</font> architecture and to use the <font size="-1">MQ</font> register.
Specifying <b>-mpower2</b> implies <b>-power</b> and also allows <font size="-1">GCC</font>
to generate instructions that are present in the <font size="-1">POWER2</font> architecture but
not the original <font size="-1">POWER</font> architecture.
<p>
<!-- ignored unsupported tag .if -->
The <b>-mpowerpc</b> option allows <font size="-1">GCC</font> to generate instructions that
are found only in the 32-bit subset of the PowerPC architecture.
Specifying <b>-mpowerpc-gpopt</b> implies <b>-mpowerpc</b> and also allows
<font size="-1">GCC</font> to use the optional PowerPC architecture instructions in the
General Purpose group, including floating-point square root.  Specifying
<b>-mpowerpc-gfxopt</b> implies <b>-mpowerpc</b> and also allows <font size="-1">GCC</font> to
use the optional PowerPC architecture instructions in the Graphics
group, including floating-point select.
<p>
<!-- ignored unsupported tag .if -->
The <b>-mmfcrf</b> option allows <font size="-1">GCC</font> to generate the move from
condition register field instruction implemented on the <font size="-1">POWER4</font>
processor and other processors that support the PowerPC V2.01
architecture.
The <b>-mpopcntb</b> option allows <font size="-1">GCC</font> to generate the popcount and
double precision <font size="-1">FP</font> reciprocal estimate instruction implemented on the
<font size="-1">POWER5</font> processor and other processors that support the PowerPC V2.02
architecture.
The <b>-mfprnd</b> option allows <font size="-1">GCC</font> to generate the <font size="-1">FP</font> round to
integer instructions implemented on the <font size="-1">POWER5+</font> processor and other
processors that support the PowerPC V2.03 architecture.
The <b>-mmfpgpr</b> option allows <font size="-1">GCC</font> to generate the <font size="-1">FP</font> move to/from
general purpose register instructions implemented on the <font size="-1">POWER6X</font>
processor and other processors that support the extended PowerPC V2.05
architecture.
<p>
<!-- ignored unsupported tag .if -->
The <b>-mpowerpc64</b> option allows <font size="-1">GCC</font> to generate the additional
64-bit instructions that are found in the full PowerPC64 architecture
and to treat GPRs as 64-bit, doubleword quantities.  <font size="-1">GCC</font> defaults to
<b>-mno-powerpc64</b>.
<p>
<!-- ignored unsupported tag .if -->
If you specify both <b>-mno-power</b> and <b>-mno-powerpc</b>, <font size="-1">GCC</font>
will use only the instructions in the common subset of both
architectures plus some special <font size="-1">AIX</font> common-mode calls, and will not use
the <font size="-1">MQ</font> register.  Specifying both <b>-mpower</b> and <b>-mpowerpc</b>
permits <font size="-1">GCC</font> to use any instruction from either architecture and to
allow use of the <font size="-1">MQ</font> register; specify this for the Motorola <font size="-1">MPC601</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mnew-mnemonics</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mold-mnemonics</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Select which mnemonics to use in the generated assembler code.  With
<b>-mnew-mnemonics</b>, <font size="-1">GCC</font> uses the assembler mnemonics defined for
the PowerPC architecture.  With <b>-mold-mnemonics</b> it uses the
assembler mnemonics defined for the <font size="-1">POWER</font> architecture.  Instructions
defined in only one architecture have only one mnemonic; <font size="-1">GCC</font> uses that
mnemonic irrespective of which of these options is specified.
<p>
<!-- ignored unsupported tag .if -->
<font size="-1">GCC</font> defaults to the mnemonics appropriate for the architecture in
use.  Specifying <b>-mcpu=</b><i>cpu_type</i> sometimes overrides the
value of these option.  Unless you are building a cross-compiler, you
should normally not specify either <b>-mnew-mnemonics</b> or
<b>-mold-mnemonics</b>, but should instead accept the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>cpu_type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set architecture type, register usage, choice of mnemonics, and
instruction scheduling parameters for machine type <i>cpu_type</i>.
Supported values for <i>cpu_type</i> are <b>401</b>, <b>403</b>,
<b>405</b>, <b>405fp</b>, <b>440</b>, <b>440fp</b>, <b>505</b>,
<b>601</b>, <b>602</b>, <b>603</b>, <b>603e</b>, <b>604</b>,
<b>604e</b>, <b>620</b>, <b>630</b>, <b>740</b>, <b>7400</b>,
<b>7450</b>, <b>750</b>, <b>801</b>, <b>821</b>, <b>823</b>,
<b>860</b>, <b>970</b>, <b>8540</b>, <b>ec603e</b>, <b>G3</b>,
<b>G4</b>, <b>G5</b>, <b>power</b>, <b>power2</b>, <b>power3</b>,
<b>power4</b>, <b>power5</b>, <b>power5+</b>, <b>power6</b>,
<b>power6x</b>, <b>common</b>, <b>powerpc</b>, <b>powerpc64</b>,
<b>rios</b>, <b>rios1</b>, <b>rios2</b>, <b>rsc</b>, and <b>rs64</b>.
<p>
<!-- ignored unsupported tag .if -->
<b>-mcpu=common</b> selects a completely generic processor.  Code
generated under this option will run on any <font size="-1">POWER</font> or PowerPC processor.
<font size="-1">GCC</font> will use only the instructions in the common subset of both
architectures, and will not use the <font size="-1">MQ</font> register.  <font size="-1">GCC</font> assumes a generic
processor model for scheduling purposes.
<p>
<!-- ignored unsupported tag .if -->
<b>-mcpu=power</b>, <b>-mcpu=power2</b>, <b>-mcpu=powerpc</b>, and
<b>-mcpu=powerpc64</b> specify generic <font size="-1">POWER</font>, <font size="-1">POWER2</font>, pure 32-bit
PowerPC (i.e., not <font size="-1">MPC601</font>), and 64-bit PowerPC architecture machine
types, with an appropriate, generic processor model assumed for
scheduling purposes.
<p>
<!-- ignored unsupported tag .if -->
The other options specify a specific processor.  Code generated under
those options will run best on that processor, and may not run at all on
others.
<p>
<!-- ignored unsupported tag .if -->
The <b>-mcpu</b> options automatically enable or disable the
following options: <b>-maltivec</b>, <b>-mfprnd</b>,
<b>-mhard-float</b>, <b>-mmfcrf</b>, <b>-mmultiple</b>,
<b>-mnew-mnemonics</b>, <b>-mpopcntb</b>, <b>-mpower</b>,
<b>-mpower2</b>, <b>-mpowerpc64</b>, <b>-mpowerpc-gpopt</b>,
<b>-mpowerpc-gfxopt</b>, <b>-mstring</b>, <b>-mmfpgpr</b>.  The
particular options set for any particular <font size="-1">CPU</font> will vary between compiler
versions, depending on what setting seems to produce optimal code for that
<font size="-1">CPU</font>; it doesn&#146;t necessarily reflect the actual hardware&#146;s capabilities.  If
you wish to set an individual option to a particular value, you may
specify it after the <b>-mcpu</b> option, like <b>-mcpu=970
-mno-altivec</b>.
<p>
<!-- ignored unsupported tag .if -->
On <font size="-1">AIX</font>, the <b>-maltivec</b> and <b>-mpowerpc64</b> options are
not enabled or disabled by the <b>-mcpu</b> option at present because
<font size="-1">AIX</font> does not have full support for these options.  You may still
enable or disable them individually if you&#146;re sure it&#146;ll work in your
environment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>cpu_type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the instruction scheduling parameters for machine type
<i>cpu_type</i>, but do not set the architecture type, register usage, or
choice of mnemonics, as <b>-mcpu=</b><i>cpu_type</i> would.  The same
values for <i>cpu_type</i> are used for <b>-mtune</b> as for
<b>-mcpu</b>.  If both are specified, the code generated will use the
architecture, registers, and mnemonics set by <b>-mcpu</b>, but the
scheduling parameters set by <b>-mtune</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mswdiv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-swdiv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code to compute division as reciprocal estimate and iterative
refinement, creating opportunities for increased throughput.  This
feature requires: optional PowerPC Graphics instruction set for single
precision and <font size="-1">FRE</font> instruction for double precision, assuming divides
cannot generate user-visible traps, and the domain values not include
Infinities, denormals or zero denominator.
</td></tr>
<tr valign="top"><td width=4%>
<b>-maltivec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-altivec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses (does not use) AltiVec instructions, and also
enable the use of built-in functions that allow more direct access to
the AltiVec instruction set.  You may also need to set
<b>-mabi=altivec</b> to adjust the current <font size="-1">ABI</font> with AltiVec <font size="-1">ABI</font>
enhancements.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mvrsave</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-vrsave</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate <font size="-1">VRSAVE</font> instructions when generating AltiVec code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msecure-plt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that allows ld and ld.so to build executables and shared
libraries with non-exec .plt and .got sections.  This is a PowerPC
32-bit <font size="-1">SYSV</font> <font size="-1">ABI</font> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbss-plt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses a <font size="-1">BSS</font> .plt section that ld.so fills in, and
requires .plt and .got sections that are both writable and executable.
This is a PowerPC 32-bit <font size="-1">SYSV</font> <font size="-1">ABI</font> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-misel</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-isel</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This switch enables or disables the generation of <font size="-1">ISEL</font> instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-misel=</b><i>yes/no</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This switch has been deprecated.  Use <b>-misel</b> and
<b>-mno-isel</b> instead.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mspe</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-isel</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This switch enables or disables the generation of <font size="-1">SPE</font> simd
instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mspe=</b><i>yes/no</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option has been deprecated.  Use <b>-mspe</b> and
<b>-mno-spe</b> instead.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfloat-gprs=</b><i>yes/single/double/no</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfloat-gprs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This switch enables or disables the generation of floating point
operations on the general purpose registers for architectures that
support it.
<p>
<!-- ignored unsupported tag .if -->
The argument <i>yes</i> or <i>single</i> enables the use of
single-precision floating point operations.
<p>
<!-- ignored unsupported tag .if -->
The argument <i>double</i> enables the use of single and
double-precision floating point operations.
<p>
<!-- ignored unsupported tag .if -->
The argument <i>no</i> disables floating point operations on the
general purpose registers.
<p>
<!-- ignored unsupported tag .if -->
This option is currently only available on the MPC854x.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for 32-bit or 64-bit environments of Darwin and <font size="-1">SVR4</font>
targets (including GNU/Linux).  The 32-bit environment sets int, long
and pointer to 32 bits and generates code that runs on any PowerPC
variant.  The 64-bit environment sets int to 32 bits and long and
pointer to 64 bits, and generates code for PowerPC64, as for
<b>-mpowerpc64</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfull-toc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fp-in-toc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sum-in-toc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mminimal-toc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Modify generation of the <font size="-1">TOC</font> (Table Of Contents), which is created for
every executable file.  The <b>-mfull-toc</b> option is selected by
default.  In that case, <font size="-1">GCC</font> will allocate at least one <font size="-1">TOC</font> entry for
each unique non-automatic variable reference in your program.  <font size="-1">GCC</font>
will also place floating-point constants in the <font size="-1">TOC</font>.  However, only
16,384 entries are available in the <font size="-1">TOC</font>.
<p>
<!-- ignored unsupported tag .if -->
If you receive a linker error message that saying you have overflowed
the available <font size="-1">TOC</font> space, you can reduce the amount of <font size="-1">TOC</font> space used
with the <b>-mno-fp-in-toc</b> and <b>-mno-sum-in-toc</b> options.
<b>-mno-fp-in-toc</b> prevents <font size="-1">GCC</font> from putting floating-point
constants in the <font size="-1">TOC</font> and <b>-mno-sum-in-toc</b> forces <font size="-1">GCC</font> to
generate code to calculate the sum of an address and a constant at
run-time instead of putting that sum into the <font size="-1">TOC</font>.  You may specify one
or both of these options.  Each causes <font size="-1">GCC</font> to produce very slightly
slower and larger code at the expense of conserving <font size="-1">TOC</font> space.
<p>
<!-- ignored unsupported tag .if -->
If you still run out of space in the <font size="-1">TOC</font> even when you specify both of
these options, specify <b>-mminimal-toc</b> instead.  This option causes
<font size="-1">GCC</font> to make only one <font size="-1">TOC</font> entry for every file.  When you specify this
option, <font size="-1">GCC</font> will produce code that is slower and larger but which
uses extremely little <font size="-1">TOC</font> space.  You may wish to use this option
only on files that contain less frequently executed code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-maix64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-maix32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable 64-bit <font size="-1">AIX</font> <font size="-1">ABI</font> and calling convention: 64-bit pointers, 64-bit
<tt>long</tt> type, and the infrastructure needed to support them.
Specifying <b>-maix64</b> implies <b>-mpowerpc64</b> and
<b>-mpowerpc</b>, while <b>-maix32</b> disables the 64-bit <font size="-1">ABI</font> and
implies <b>-mno-powerpc64</b>.  <font size="-1">GCC</font> defaults to <b>-maix32</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mxl-compat</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-xl-compat</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Produce code that conforms more closely to <font size="-1">IBM</font> <font size="-1">XL</font> compiler semantics
when using AIX-compatible <font size="-1">ABI</font>.  Pass floating-point arguments to
prototyped functions beyond the register save area (<font size="-1">RSA</font>) on the stack
in addition to argument FPRs.  Do not assume that most significant
double in 128-bit long double value is properly rounded when comparing
values and converting to double.  Use <font size="-1">XL</font> symbol names for long double
support routines.
<p>
<!-- ignored unsupported tag .if -->
The <font size="-1">AIX</font> calling convention was extended but not initially documented to
handle an obscure K&R C case of calling a function that takes the
address of its arguments with fewer arguments than declared.  <font size="-1">IBM</font> <font size="-1">XL</font>
compilers access floating point arguments which do not fit in the
<font size="-1">RSA</font> from the stack when a subroutine is compiled without
optimization.  Because always storing floating-point arguments on the
stack is inefficient and rarely needed, this option is not enabled by
default and only is necessary when calling subroutines compiled by <font size="-1">IBM</font>
<font size="-1">XL</font> compilers without optimization.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpe</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Support <i><font size="-1">IBM</font> <font size="-1">RS/6000</font> <font size="-1">SP</font></i> <i>Parallel Environment</i> (<font size="-1">PE</font>).  Link an
application written to use message passing with special startup code to
enable the application to run.  The system must have <font size="-1">PE</font> installed in the
standard location (<i>/usr/lpp/ppe.poe/</i>), or the <i>specs</i> file
must be overridden with the <b>-specs=</b> option to specify the
appropriate directory location.  The Parallel Environment does not
support threads, so the <b>-mpe</b> option and the <b>-pthread</b>
option are incompatible.
</td></tr>
<tr valign="top"><td width=4%>
<b>-malign-natural</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-malign-power</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On <font size="-1">AIX</font>, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option
<b>-malign-natural</b> overrides the ABI-defined alignment of larger
types, such as floating-point doubles, on their natural size-based boundary.
The option <b>-malign-power</b> instructs <font size="-1">GCC</font> to follow the ABI-specified
alignment rules.  <font size="-1">GCC</font> defaults to the standard alignment defined in the <font size="-1">ABI</font>.
<p>
<!-- ignored unsupported tag .if -->
On 64-bit Darwin, natural alignment is the default, and <b>-malign-power</b>
is not supported.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mhard-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that does not use (uses) the floating-point register set.
Software floating point emulation is provided if you use the
<b>-msoft-float</b> option, and pass the option to <font size="-1">GCC</font> when linking.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmultiple</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-multiple</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses (does not use) the load multiple word
instructions and the store multiple word instructions.  These
instructions are generated by default on <font size="-1">POWER</font> systems, and not
generated on PowerPC systems.  Do not use <b>-mmultiple</b> on little
endian PowerPC systems, since those instructions do not work when the
processor is in little endian mode.  The exceptions are <font size="-1">PPC740</font> and
<font size="-1">PPC750</font> which permit the instructions usage in little endian mode.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mstring</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-string</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses (does not use) the load string instructions
and the store string word instructions to save multiple registers and
do small block moves.  These instructions are generated by default on
<font size="-1">POWER</font> systems, and not generated on PowerPC systems.  Do not use
<b>-mstring</b> on little endian PowerPC systems, since those
instructions do not work when the processor is in little endian mode.
The exceptions are <font size="-1">PPC740</font> and <font size="-1">PPC750</font> which permit the instructions
usage in little endian mode.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mupdate</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-update</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses (does not use) the load or store instructions
that update the base register to the address of the calculated memory
location.  These instructions are generated by default.  If you use
<b>-mno-update</b>, there is a small window between the time that the
stack pointer is updated and the address of the previous frame is
stored, which means code that walks the stack frame across interrupts or
signals may get corrupted data.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses (does not use) the floating point multiply and
accumulate instructions.  These instructions are generated by default if
hardware floating is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-bit-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbit-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems do not (do) force structures
and unions that contain bit-fields to be aligned to the base type of the
bit-field.
<p>
<!-- ignored unsupported tag .if -->
For example, by default a structure containing nothing but 8
<tt>unsigned</tt> bit-fields of length 1 would be aligned to a 4 byte
boundary and have a size of 4 bytes.  By using <b>-mno-bit-align</b>,
the structure would be aligned to a 1 byte boundary and be one byte in
size.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-strict-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mstrict-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems do not (do) assume that
unaligned memory references will be handled by the system.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrelocatable</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-relocatable</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems generate code that allows (does not allow)
the program to be relocated to a different address at runtime.  If you
use <b>-mrelocatable</b> on any module, all objects linked together must
be compiled with <b>-mrelocatable</b> or <b>-mrelocatable-lib</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrelocatable-lib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-relocatable-lib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems generate code that allows (does not allow)
the program to be relocated to a different address at runtime.  Modules
compiled with <b>-mrelocatable-lib</b> can be linked with either modules
compiled without <b>-mrelocatable</b> and <b>-mrelocatable-lib</b> or
with modules compiled with the <b>-mrelocatable</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-toc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtoc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems do not (do) assume that
register 2 contains a pointer to a global area pointing to the addresses
used in the program.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlittle</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlittle-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems compile code for the
processor in little endian mode.  The <b>-mlittle-endian</b> option is
the same as <b>-mlittle</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbig</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbig-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems compile code for the
processor in big endian mode.  The <b>-mbig-endian</b> option is
the same as <b>-mbig</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdynamic-no-pic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On Darwin and Mac <font size="-1">OS</font> X systems, compile code so that it is not
relocatable, but that its external references are relocatable.  The
resulting code is suitable for applications, but not shared
libraries.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mprioritize-restricted-insns=</b><i>priority</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option controls the priority that is assigned to
dispatch-slot restricted instructions during the second scheduling
pass.  The argument <i>priority</i> takes the value <i>0/1/2</i> to assign
<i>no/highest/second-highest</i> priority to dispatch slot restricted
instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msched-costly-dep=</b><i>dependence_type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option controls which dependences are considered costly
by the target during instruction scheduling.  The argument
<i>dependence_type</i> takes one of the following values:
<i>no</i>: no dependence is costly,
<i>all</i>: all dependences are costly,
<i>true_store_to_load</i>: a true dependence from store to load is costly,
<i>store_to_load</i>: any dependence from store to load is costly,
<i>number</i>: any dependence which latency &gt;= <i>number</i> is costly.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minsert-sched-nops=</b><i>scheme</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option controls which nop insertion scheme will be used during
the second scheduling pass.  The argument <i>scheme</i> takes one of the
following values:
<i>no</i>: Don&#146;t insert nops.
<i>pad</i>: Pad with nops any dispatch group which has vacant issue slots,
according to the scheduler&#146;s grouping.
<i>regroup_exact</i>: Insert nops to force costly dependent insns into
separate groups.  Insert exactly as many nops as needed to force an insn
to a new group, according to the estimated processor grouping.
<i>number</i>: Insert nops to force costly dependent insns into
separate groups.  Insert <i>number</i> nops to force an insn to a new group.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcall-sysv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems compile code using calling
conventions that adheres to the March 1995 draft of the System V
Application Binary Interface, PowerPC processor supplement.  This is the
default unless you configured <font size="-1">GCC</font> using <b>powerpc-*-eabiaix</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcall-sysv-eabi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify both <b>-mcall-sysv</b> and <b>-meabi</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcall-sysv-noeabi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify both <b>-mcall-sysv</b> and <b>-mno-eabi</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcall-solaris</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems compile code for the Solaris
operating system.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcall-linux</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems compile code for the
Linux-based <font size="-1">GNU</font> system.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcall-gnu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems compile code for the
Hurd-based <font size="-1">GNU</font> system.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcall-netbsd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems compile code for the
NetBSD operating system.
</td></tr>
<tr valign="top"><td width=4%>
<b>-maix-struct-return</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Return all structures in memory (as specified by the <font size="-1">AIX</font> <font size="-1">ABI</font>).
</td></tr>
<tr valign="top"><td width=4%>
<b>-msvr4-struct-return</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Return structures smaller than 8 bytes in registers (as specified by the
<font size="-1">SVR4</font> <font size="-1">ABI</font>).
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=</b><i>abi-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Extend the current <font size="-1">ABI</font> with a particular extension, or remove such extension.
Valid values are <i>altivec</i>, <i>no-altivec</i>, <i>spe</i>,
<i>no-spe</i>, <i>ibmlongdouble</i>, <i>ieeelongdouble</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=spe</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Extend the current <font size="-1">ABI</font> with <font size="-1">SPE</font> <font size="-1">ABI</font> extensions.  This does not change
the default <font size="-1">ABI</font>, instead it adds the <font size="-1">SPE</font> <font size="-1">ABI</font> extensions to the current
<font size="-1">ABI</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=no-spe</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disable Booke <font size="-1">SPE</font> <font size="-1">ABI</font> extensions for the current <font size="-1">ABI</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=ibmlongdouble</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Change the current <font size="-1">ABI</font> to use <font size="-1">IBM</font> extended precision long double.
This is a PowerPC 32-bit <font size="-1">SYSV</font> <font size="-1">ABI</font> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mabi=ieeelongdouble</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Change the current <font size="-1">ABI</font> to use <font size="-1">IEEE</font> extended precision long double.
This is a PowerPC 32-bit Linux <font size="-1">ABI</font> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mprototype</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-prototype</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems assume that all calls to
variable argument functions are properly prototyped.  Otherwise, the
compiler must insert an instruction before every non prototyped call to
set or clear bit 6 of the condition code register (<i><font size="-1">CR</font></i>) to
indicate whether floating point values were passed in the floating point
registers in case the function takes a variable arguments.  With
<b>-mprototype</b>, only calls to prototyped variable argument functions
will set or clear the bit.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msim</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems, assume that the startup module is called
<i>sim-crt0.o</i> and that the standard C libraries are <i>libsim.a</i> and
<i>libc.a</i>.  This is the default for <b>powerpc-*-eabisim</b>.
configurations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmvme</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems, assume that the startup module is called
<i>crt0.o</i> and the standard C libraries are <i>libmvme.a</i> and
<i>libc.a</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mads</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems, assume that the startup module is called
<i>crt0.o</i> and the standard C libraries are <i>libads.a</i> and
<i>libc.a</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-myellowknife</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems, assume that the startup module is called
<i>crt0.o</i> and the standard C libraries are <i>libyk.a</i> and
<i>libc.a</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mvxworks</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems, specify that you are
compiling for a VxWorks system.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mwindiss</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify that you are compiling for the WindISS simulation environment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-memb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems, set the <i><font size="-1">PPC_EMB</font></i> bit in the <font size="-1">ELF</font> flags
header to indicate that <b>eabi</b> extended relocations are used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-meabi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-eabi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems do (do not) adhere to the
Embedded Applications Binary Interface (eabi) which is a set of
modifications to the System V.4 specifications.  Selecting <b>-meabi</b>
means that the stack is aligned to an 8 byte boundary, a function
<tt>__eabi</tt> is called to from <tt>main</tt> to set up the eabi
environment, and the <b>-msdata</b> option can use both <tt>r2</tt> and
<tt>r13</tt> to point to two separate small data areas.  Selecting
<b>-mno-eabi</b> means that the stack is aligned to a 16 byte boundary,
do not call an initialization function from <tt>main</tt>, and the
<b>-msdata</b> option will only use <tt>r13</tt> to point to a single
small data area.  The <b>-meabi</b> option is on by default if you
configured <font size="-1">GCC</font> using one of the <b>powerpc*-*-eabi*</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata=eabi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems, put small initialized
<tt>const</tt> global and static data in the <b>.sdata2</b> section, which
is pointed to by register <tt>r2</tt>.  Put small initialized
non-<tt>const</tt> global and static data in the <b>.sdata</b> section,
which is pointed to by register <tt>r13</tt>.  Put small uninitialized
global and static data in the <b>.sbss</b> section, which is adjacent to
the <b>.sdata</b> section.  The <b>-msdata=eabi</b> option is
incompatible with the <b>-mrelocatable</b> option.  The
<b>-msdata=eabi</b> option also sets the <b>-memb</b> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata=sysv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems, put small global and static
data in the <b>.sdata</b> section, which is pointed to by register
<tt>r13</tt>.  Put small uninitialized global and static data in the
<b>.sbss</b> section, which is adjacent to the <b>.sdata</b> section.
The <b>-msdata=sysv</b> option is incompatible with the
<b>-mrelocatable</b> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata=default</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems, if <b>-meabi</b> is used,
compile code the same as <b>-msdata=eabi</b>, otherwise compile code the
same as <b>-msdata=sysv</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems, put small global and static
data in the <b>.sdata</b> section.  Put small uninitialized global and
static data in the <b>.sbss</b> section.  Do not use register <tt>r13</tt>
to address small data however.  This is the default behavior unless
other <b>-msdata</b> options are used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msdata=none</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-sdata</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems, put all initialized global and static data
in the <b>.data</b> section, and all uninitialized data in the
<b>.bss</b> section.
</td></tr>
<tr valign="top"><td width=4%>
<b>-G</b> <i>num</i>
</td><td>
<!-- ignored unsupported tag .tm -->
On embedded PowerPC systems, put global and static items less than or
equal to <i>num</i> bytes into the small data or bss sections instead of
the normal data or bss section.  By default, <i>num</i> is 8.  The
<b>-G</b> <i>num</i> switch is also passed to the linker.
All modules should be compiled with the same <b>-G</b> <i>num</i> value.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mregnames</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-regnames</b>
</td><td>
<!-- ignored unsupported tag .tm -->
On System V.4 and embedded PowerPC systems do (do not) emit register
names in the assembly language output using symbolic forms.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlongcall</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-longcall</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Default to making all function calls indirectly, using a register, so
that functions which reside further than 32 megabytes (33,554,432
bytes) from the current location can be called.  This setting can be
overridden by the <tt>shortcall</tt> function attribute, or by
<tt>#pragma longcall(0)</tt>.
<p>
<!-- ignored unsupported tag .if -->
Some linkers are capable of detecting out-of-range calls and generating
glue code on the fly.  On these systems, long calls are unnecessary and
generate slower code.  As of this writing, the <font size="-1">AIX</font> linker can do this,
as can the <font size="-1">GNU</font> linker for PowerPC/64.  It is planned to add this feature
to the <font size="-1">GNU</font> linker for 32-bit PowerPC systems as well.
<p>
<!-- ignored unsupported tag .if -->
On Darwin/PPC systems, <tt>#pragma longcall</tt> will generate jbsr
callee, L42, plus a branch island (glue code).  The two target
addresses represent the callee and the branch island.  The
Darwin/PPC linker will prefer the first address and generate a bl
callee if the <font size="-1">PPC</font> bl instruction will reach the callee directly;
otherwise, the linker will generate bl L42 to call the branch
island.  The branch island is appended to the body of the
calling function; it computes the full 32-bit address of the callee
and jumps to it.
<p>
<!-- ignored unsupported tag .if -->
On Mach-O (Darwin) systems, this option directs the compiler emit to
the glue for every direct call, and the Darwin linker decides whether
to use or discard it.
<p>
<!-- ignored unsupported tag .if -->
In the future, we may cause <font size="-1">GCC</font> to ignore all longcall specifications
when the linker is known to generate glue.
</td></tr>
<tr valign="top"><td width=4%>
<b>-pthread</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Adds support for multithreading with the <i>pthreads</i> library.
This option sets flags for both the preprocessor and linker.
</td></tr>
</table>
<h1 class="manpages">S/390 and zSeries Options</h1>
<!-- ignored unsupported tag .tm -->
These are the <b>-m</b> options defined for the S/390 and zSeries architecture.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mhard-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use (do not use) the hardware floating-point instructions and registers
for floating-point operations.  When <b>-msoft-float</b> is specified,
functions in <i>libgcc.a</i> will be used to perform floating-point
operations.  When <b>-mhard-float</b> is specified, the compiler
generates <font size="-1">IEEE</font> floating-point instructions.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-double-64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlong-double-128</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These switches control the size of <tt>long double</tt> type. A size
of 64bit makes the <tt>long double</tt> type equivalent to the <tt>double</tt>
type. This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbackchain</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-backchain</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Store (do not store) the address of the caller&#146;s frame as backchain pointer
into the callee&#146;s stack frame.
A backchain may be needed to allow debugging using tools that do not understand
<font size="-1">DWARF-2</font> call frame information.
When <b>-mno-packed-stack</b> is in effect, the backchain pointer is stored
at the bottom of the stack frame; when <b>-mpacked-stack</b> is in effect,
the backchain is placed into the topmost word of the 96/160 byte register
save area.
<p>
<!-- ignored unsupported tag .if -->
In general, code compiled with <b>-mbackchain</b> is call-compatible with
code compiled with <b>-mmo-backchain</b>; however, use of the backchain
for debugging purposes usually requires that the whole binary is built with
<b>-mbackchain</b>.  Note that the combination of <b>-mbackchain</b>,
<b>-mpacked-stack</b> and <b>-mhard-float</b> is not supported.  In order
to build a linux kernel use <b>-msoft-float</b>.
<p>
<!-- ignored unsupported tag .if -->
The default is to not maintain the backchain.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpacked-stack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-packed-stack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use (do not use) the packed stack layout.  When <b>-mno-packed-stack</b> is
specified, the compiler uses the all fields of the 96/160 byte register save
area only for their default purpose; unused fields still take up stack space.
When <b>-mpacked-stack</b> is specified, register save slots are densely
packed at the top of the register save area; unused space is reused for other
purposes, allowing for more efficient use of the available stack space.
However, when <b>-mbackchain</b> is also in effect, the topmost word of
the save area is always used to store the backchain, and the return address
register is always saved two words below the backchain.
<p>
<!-- ignored unsupported tag .if -->
As long as the stack frame backchain is not used, code generated with
<b>-mpacked-stack</b> is call-compatible with code generated with
<b>-mno-packed-stack</b>.  Note that some non-FSF releases of <font size="-1">GCC</font> 2.95 for
S/390 or zSeries generated code that uses the stack frame backchain at run
time, not just for debugging purposes.  Such code is not call-compatible
with code compiled with <b>-mpacked-stack</b>.  Also, note that the
combination of <b>-mbackchain</b>,
<b>-mpacked-stack</b> and <b>-mhard-float</b> is not supported.  In order
to build a linux kernel use <b>-msoft-float</b>.
<p>
<!-- ignored unsupported tag .if -->
The default is to not use the packed stack layout.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msmall-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-small-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (or do not generate) code using the <tt>bras</tt> instruction
to do subroutine calls.
This only works reliably if the total executable size does not
exceed 64k.  The default is to use the <tt>basr</tt> instruction instead,
which does not have this limitation.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m31</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-m31</b> is specified, generate code compliant to the
GNU/Linux for S/390 <font size="-1">ABI</font>.  When <b>-m64</b> is specified, generate
code compliant to the GNU/Linux for zSeries <font size="-1">ABI</font>.  This allows <font size="-1">GCC</font> in
particular to generate 64-bit instructions.  For the <b>s390</b>
targets, the default is <b>-m31</b>, while the <b>s390x</b>
targets default to <b>-m64</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mzarch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mesa</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When <b>-mzarch</b> is specified, generate code using the
instructions available on z/Architecture.
When <b>-mesa</b> is specified, generate code using the
instructions available on <font size="-1">ESA/390</font>.  Note that <b>-mesa</b> is
not possible with <b>-m64</b>.
When generating code compliant to the GNU/Linux for S/390 <font size="-1">ABI</font>,
the default is <b>-mesa</b>.  When generating code compliant
to the GNU/Linux for zSeries <font size="-1">ABI</font>, the default is <b>-mzarch</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmvcle</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mvcle</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate (or do not generate) code using the <tt>mvcle</tt> instruction
to perform block moves.  When <b>-mno-mvcle</b> is specified,
use a <tt>mvc</tt> loop instead.  This is the default unless optimizing for
size.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdebug</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-debug</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print (or do not print) additional debug information when compiling.
The default is to not print debug information.
</td></tr>
<tr valign="top"><td width=4%>
<b>-march=</b><i>cpu-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that will run on <i>cpu-type</i>, which is the name of a system
representing a certain processor type.  Possible values for
<i>cpu-type</i> are <b>g5</b>, <b>g6</b>, <b>z900</b>, and <b>z990</b>.
When generating code using the instructions available on z/Architecture,
the default is <b>-march=z900</b>.  Otherwise, the default is
<b>-march=g5</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>cpu-type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Tune to <i>cpu-type</i> everything applicable about the generated code,
except for the <font size="-1">ABI</font> and the set of available instructions.
The list of <i>cpu-type</i> values is the same as for <b>-march</b>.
The default is the value used for <b>-march</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtpf-trace</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-tpf-trace</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that adds (does not add) in <font size="-1">TPF</font> <font size="-1">OS</font> specific branches to trace
routines in the operating system.  This option is off by default, even
when compiling for the <font size="-1">TPF</font> <font size="-1">OS</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses (does not use) the floating point multiply and
accumulate instructions.  These instructions are generated by default if
hardware floating point is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mwarn-framesize=</b><i>framesize</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit a warning if the current function exceeds the given frame size.  Because
this is a compile time check it doesn&#146;t need to be a real problem when the program
runs.  It is intended to identify functions which most probably cause
a stack overflow.  It is useful to be used in an environment with limited stack
size e.g. the linux kernel.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mwarn-dynamicstack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Emit a warning if the function calls alloca or uses dynamically
sized arrays.  This is generally a bad idea with a limited stack size.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mstack-guard=</b><i>stack-guard</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mstack-size=</b><i>stack-size</i>
</td><td>
<!-- ignored unsupported tag .tm -->
These arguments always have to be used in conjunction.  If they are present the s390
back end emits additional instructions in the function prologue which trigger a trap
if the stack size is <i>stack-guard</i> bytes above the <i>stack-size</i>
(remember that the stack on s390 grows downward).  These options are intended to
be used to help debugging stack overflow problems.  The additionally emitted code
causes only little overhead and hence can also be used in production like systems
without greater performance degradation.  The given values have to be exact
powers of 2 and <i>stack-size</i> has to be greater than <i>stack-guard</i> without
exceeding 64k.
In order to be efficient the extra code makes the assumption that the stack starts
at an address aligned to the value given by <i>stack-size</i>.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">SH</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for the <font size="-1">SH</font> implementations:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-m1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the <font size="-1">SH1</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m2</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the <font size="-1">SH2</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m2e</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the SH2e.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m3</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the <font size="-1">SH3</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m3e</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the SH3e.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4-nofpu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the <font size="-1">SH4</font> without a floating-point unit.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4-single-only</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the <font size="-1">SH4</font> with a floating-point unit that only
supports single-precision arithmetic.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4-single</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the <font size="-1">SH4</font> assuming the floating-point unit is in
single-precision mode by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the <font size="-1">SH4</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4a-nofpu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the SH4al-dsp, or for a SH4a in such a way that the
floating-point unit is not used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4a-single-only</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the SH4a, in such a way that no double-precision
floating point operations are used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4a-single</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the SH4a assuming the floating-point unit is in
single-precision mode by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4a</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the SH4a.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m4al</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Same as <b>-m4a-nofpu</b>, except that it implicitly passes
<b>-dsp</b> to the assembler.  <font size="-1">GCC</font> doesn&#146;t generate any <font size="-1">DSP</font>
instructions at the moment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compile code for the processor in big endian mode.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ml</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compile code for the processor in little endian mode.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdalign</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Align doubles at 64-bit boundaries.  Note that this changes the calling
conventions, and thus some functions from the standard C library will
not work unless you recompile it first with <b>-mdalign</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrelax</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Shorten some address references at link time, when possible; uses the
linker option <b>-relax</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbigtable</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use 32-bit offsets in <tt>switch</tt> tables.  The default is to use
16-bit offsets.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfmovd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of the instruction <tt>fmovd</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mhitachi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Comply with the calling conventions defined by Renesas.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrenesas</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Comply with the calling conventions defined by Renesas.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-renesas</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Comply with the calling conventions defined for <font size="-1">GCC</font> before the Renesas
conventions were available.  This option is the default for all
targets of the <font size="-1">SH</font> toolchain except for <b>sh-symbianelf</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mnomacsave</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Mark the <tt>MAC</tt> register as call-clobbered, even if
<b>-mhitachi</b> is given.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mieee</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Increase IEEE-compliance of floating-point code.
At the moment, this is equivalent to <b>-fno-finite-math-only</b>.
When generating 16 bit <font size="-1">SH</font> opcodes, getting IEEE-conforming results for
comparisons of NANs / infinities incurs extra overhead in every
floating point comparison, therefore the default is set to
<b>-ffinite-math-only</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-misize</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Dump instruction size and location in the assembly code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpadstruct</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is deprecated.  It pads structures to multiple of 4 bytes,
which is incompatible with the <font size="-1">SH</font> <font size="-1">ABI</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mspace</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Optimize for space instead of speed.  Implied by <b>-Os</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mprefergot</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When generating position-independent code, emit function calls using
the Global Offset Table instead of the Procedure Linkage Table.
</td></tr>
<tr valign="top"><td width=4%>
<b>-musermode</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate a library function call to invalidate instruction cache
entries, after fixing up a trampoline.  This library function call
doesn&#146;t assume it can write to the whole memory address space.  This
is the default when the target is <tt>sh-*-linux*</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-multcost=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the cost to assume for a multiply insn.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdiv=</b><i>strategy</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the division strategy to use for SHmedia code.  <i>strategy</i> must be
one of: call, call2, fp, inv, inv:minlat, inv20u, inv20l, inv:call,
inv:call2, inv:fp .
fp performs the operation in floating point.  This has a very high latency,
but needs only a few instructions, so it might be a good choice if
your code has enough easily exploitable <font size="-1">ILP</font> to allow the compiler to
schedule the floating point instructions together with other instructions.
Division by zero causes a floating point exception.
inv uses integer operations to calculate the inverse of the divisor,
and then multiplies the dividend with the inverse.  This strategy allows
cse and hoisting of the inverse calculation.  Division by zero calculates
an unspecified result, but does not trap.
inv:minlat is a variant of inv where if no cse / hoisting opportunities
have been found, or if the entire operation has been hoisted to the same
place, the last stages of the inverse calculation are intertwined with the
final multiply to reduce the overall latency, at the expense of using a few
more instructions, and thus offering fewer scheduling opportunities with
other code.
call calls a library function that usually implements the inv:minlat
strategy.
This gives high code density for m5-*media-nofpu compilations.
call2 uses a different entry point of the same library function, where it
assumes that a pointer to a lookup table has already been set up, which
exposes the pointer load to cse / code hoisting optimizations.
inv:call, inv:call2 and inv:fp all use the inv algorithm for initial
code generation, but if the code stays unoptimized, revert to the call,
call2, or fp strategies, respectively.  Note that the
potentially-trapping side effect of division by zero is carried by a
separate instruction, so it is possible that all the integer instructions
are hoisted out, but the marker for the side effect stays where it is.
A recombination to fp operations or a call is not possible in that case.
inv20u and inv20l are variants of the inv:minlat strategy.  In the case
that the inverse calculation was nor separated from the multiply, they speed
up division where the dividend fits into 20 bits (plus sign where applicable),
by inserting a test to skip a number of operations in this case; this test
slows down the case of larger dividends.  inv20u assumes the case of a such
a small dividend to be unlikely, and inv20l assumes it to be likely.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdivsi3_libfunc=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the name of the library function used for 32 bit signed division to
<i>name</i>.  This only affect the name used in the call and inv:call
division strategies, and the compiler will still expect the same
sets of input/output/clobbered registers as if this option was not present.
</td></tr>
<tr valign="top"><td width=4%>
<b>-madjust-unroll</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Throttle unrolling to avoid thrashing target registers.
This option only has an effect if the gcc code base supports the
<font size="-1">TARGET_ADJUST_UNROLL_MAX</font> target hook.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mindexed-addressing</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable the use of the indexed addressing mode for SHmedia32/SHcompact.
This is only safe if the hardware and/or <font size="-1">OS</font> implement 32 bit wrap-around
semantics for the indexed addressing mode.  The architecture allows the
implementation of processors with 64 bit <font size="-1">MMU</font>, which the <font size="-1">OS</font> could use to
get 32 bit addressing, but since no current hardware implementation supports
this or any other way to make the indexed addressing mode safe to use in
the 32 bit <font size="-1">ABI</font>, the default is -mno-indexed-addressing.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgettrcost=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the cost assumed for the gettr instruction to <i>number</i>.
The default is 2 if <b>-mpt-fixed</b> is in effect, 100 otherwise.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mpt-fixed</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume pt* instructions won&#146;t trap.  This will generally generate better
scheduled code, but is unsafe on current hardware.  The current architecture
definition says that ptabs and ptrel trap when the target anded with 3 is 3.
This has the unintentional effect of making it unsafe to schedule ptabs /
ptrel before a branch, or hoist it out of a loop.  For example,
__do_global_ctors, a part of libgcc that runs constructors at program
startup, calls functions in a list which is delimited by -1.  With the
-mpt-fixed option, the ptabs will be done before testing against -1.
That means that all the constructors will be run a bit quicker, but when
the loop comes to the end of the list, the program crashes because ptabs
loads -1 into a target register.  Since this option is unsafe for any
hardware implementing the current architecture specification, the default
is -mno-pt-fixed.  Unless the user specifies a specific cost with
<b>-mgettrcost</b>, -mno-pt-fixed also implies <b>-mgettrcost=100</b>;
this deters register allocation using target registers for storing
ordinary integers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-minvalid-symbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume symbols might be invalid.  Ordinary function symbols generated by
the compiler will always be valid to load with movi/shori/ptabs or
movi/shori/ptrel, but with assembler and/or linker tricks it is possible
to generate symbols that will cause ptabs / ptrel to trap.
This option is only meaningful when <b>-mno-pt-fixed</b> is in effect.
It will then prevent cross-basic-block cse, hoisting and most scheduling
of symbol loads.  The default is <b>-mno-invalid-symbols</b>.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">SPARC</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are supported on the <font size="-1">SPARC:</font>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mno-app-regs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mapp-regs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify <b>-mapp-regs</b> to generate output using the global registers
2 through 4, which the <font size="-1">SPARC</font> <font size="-1">SVR4</font> <font size="-1">ABI</font> reserves for applications.  This
is the default.
<p>
<!-- ignored unsupported tag .if -->
To be fully <font size="-1">SVR4</font> <font size="-1">ABI</font> compliant at the cost of some performance loss,
specify <b>-mno-app-regs</b>.  You should compile libraries and system
software with this option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfpu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mhard-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing floating point instructions.  This is the
default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fpu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing library calls for floating point.
<b>Warning:</b> the requisite libraries are not available for all <font size="-1">SPARC</font>
targets.  Normally the facilities of the machine&#146;s usual C compiler are
used, but this cannot be done directly in cross-compilation.  You must make
your own arrangements to provide suitable library functions for
cross-compilation.  The embedded targets <b>sparc-*-aout</b> and
<b>sparclite-*-*</b> do provide software floating point support.
<p>
<!-- ignored unsupported tag .if -->
<b>-msoft-float</b> changes the calling convention in the output file;
therefore, it is only useful if you compile <i>all</i> of a program with
this option.  In particular, you need to compile <i>libgcc.a</i>, the
library that comes with <font size="-1">GCC</font>, with <b>-msoft-float</b> in order for
this to work.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mhard-quad-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing quad-word (long double) floating point
instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-msoft-quad-float</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate output containing library calls for quad-word (long double)
floating point instructions.  The functions called are those specified
in the <font size="-1">SPARC</font> <font size="-1">ABI</font>.  This is the default.
<p>
<!-- ignored unsupported tag .if -->
As of this writing, there are no <font size="-1">SPARC</font> implementations that have hardware
support for the quad-word floating point instructions.  They all invoke
a trap handler for one of these instructions, and then the trap handler
emulates the effect of the instruction.  Because of the trap handler overhead,
this is much slower than calling the <font size="-1">ABI</font> library routines.  Thus the
<b>-msoft-quad-float</b> option is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-unaligned-doubles</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-munaligned-doubles</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Assume that doubles have 8 byte alignment.  This is the default.
<p>
<!-- ignored unsupported tag .if -->
With <b>-munaligned-doubles</b>, <font size="-1">GCC</font> assumes that doubles have 8 byte
alignment only if they are contained in another type, or if they have an
absolute address.  Otherwise, it assumes they have 4 byte alignment.
Specifying this option avoids some rare compatibility problems with code
generated by other compilers.  It is not the default because it results
in a performance loss, especially for floating point code.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-faster-structs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfaster-structs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
With <b>-mfaster-structs</b>, the compiler assumes that structures
should have 8 byte alignment.  This enables the use of pairs of
<tt>ldd</tt> and <tt>std</tt> instructions for copies in structure
assignment, in place of twice as many <tt>ld</tt> and <tt>st</tt> pairs.
However, the use of this changed alignment directly violates the <font size="-1">SPARC</font>
<font size="-1">ABI</font>.  Thus, it&#146;s intended only for use on targets where the developer
acknowledges that their resulting code will not be directly in line with
the rules of the <font size="-1">ABI</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mimpure-text</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>-mimpure-text</b>, used in addition to <b>-shared</b>, tells
the compiler to not pass <b>-z text</b> to the linker when linking a
shared object.  Using this option, you can link position-dependent
code into a shared object.
<p>
<!-- ignored unsupported tag .if -->
<b>-mimpure-text</b> suppresses the relocations remain against
allocatable but non-writable sections linker error message.
However, the necessary relocations will trigger copy-on-write, and the
shared object is not actually shared across processes.  Instead of
using <b>-mimpure-text</b>, you should compile all source code with
<b>-fpic</b> or <b>-fPIC</b>.
<p>
<!-- ignored unsupported tag .if -->
This option is only available on SunOS and Solaris.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>cpu_type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the instruction set, register set, and instruction scheduling parameters
for machine type <i>cpu_type</i>.  Supported values for <i>cpu_type</i> are
<b>v7</b>, <b>cypress</b>, <b>v8</b>, <b>supersparc</b>, <b>sparclite</b>,
<b>f930</b>, <b>f934</b>, <b>hypersparc</b>, <b>sparclite86x</b>,
<b>sparclet</b>, <b>tsc701</b>, <b>v9</b>, <b>ultrasparc</b>,
<b>ultrasparc3</b>, and <b>niagara</b>.
<p>
<!-- ignored unsupported tag .if -->
Default instruction scheduling parameters are used for values that select
an architecture and not an implementation.  These are <b>v7</b>, <b>v8</b>,
<b>sparclite</b>, <b>sparclet</b>, <b>v9</b>.
<p>
<!-- ignored unsupported tag .if -->
Here is a list of each supported architecture and their supported
implementations.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
            v7:             cypress
            v8:             supersparc, hypersparc
            sparclite:      f930, f934, sparclite86x
            sparclet:       tsc701
            v9:             ultrasparc, ultrasparc3, niagara
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
By default (unless configured otherwise), <font size="-1">GCC</font> generates code for the V7
variant of the <font size="-1">SPARC</font> architecture.  With <b>-mcpu=cypress</b>, the compiler
additionally optimizes it for the Cypress <font size="-1">CY7C602</font> chip, as used in the
SPARCStation/SPARCServer 3xx series.  This is also appropriate for the older
SPARCStation 1, 2, <font size="-1">IPX</font> etc.
<p>
<!-- ignored unsupported tag .if -->
With <b>-mcpu=v8</b>, <font size="-1">GCC</font> generates code for the V8 variant of the <font size="-1">SPARC</font>
architecture.  The only difference from V7 code is that the compiler emits
the integer multiply and integer divide instructions which exist in <font size="-1">SPARC-V8</font>
but not in <font size="-1">SPARC-V7</font>.  With <b>-mcpu=supersparc</b>, the compiler additionally
optimizes it for the SuperSPARC chip, as used in the SPARCStation 10, 1000 and
2000 series.
<p>
<!-- ignored unsupported tag .if -->
With <b>-mcpu=sparclite</b>, <font size="-1">GCC</font> generates code for the SPARClite variant of
the <font size="-1">SPARC</font> architecture.  This adds the integer multiply, integer divide step
and scan (<tt>ffs</tt>) instructions which exist in SPARClite but not in <font size="-1">SPARC-V7</font>.
With <b>-mcpu=f930</b>, the compiler additionally optimizes it for the
Fujitsu <font size="-1">MB86930</font> chip, which is the original SPARClite, with no <font size="-1">FPU</font>.  With
<b>-mcpu=f934</b>, the compiler additionally optimizes it for the Fujitsu
<font size="-1">MB86934</font> chip, which is the more recent SPARClite with <font size="-1">FPU</font>.
<p>
<!-- ignored unsupported tag .if -->
With <b>-mcpu=sparclet</b>, <font size="-1">GCC</font> generates code for the SPARClet variant of
the <font size="-1">SPARC</font> architecture.  This adds the integer multiply, multiply/accumulate,
integer divide step and scan (<tt>ffs</tt>) instructions which exist in SPARClet
but not in <font size="-1">SPARC-V7</font>.  With <b>-mcpu=tsc701</b>, the compiler additionally
optimizes it for the <font size="-1">TEMIC</font> SPARClet chip.
<p>
<!-- ignored unsupported tag .if -->
With <b>-mcpu=v9</b>, <font size="-1">GCC</font> generates code for the V9 variant of the <font size="-1">SPARC</font>
architecture.  This adds 64-bit integer and floating-point move instructions,
3 additional floating-point condition code registers and conditional move
instructions.  With <b>-mcpu=ultrasparc</b>, the compiler additionally
optimizes it for the Sun UltraSPARC I/II/IIi chips.  With
<b>-mcpu=ultrasparc3</b>, the compiler additionally optimizes it for the
Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With
<b>-mcpu=niagara</b>, the compiler additionally optimizes it for
Sun UltraSPARC T1 chips.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtune=</b><i>cpu_type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the instruction scheduling parameters for machine type
<i>cpu_type</i>, but do not set the instruction set or register set that the
option <b>-mcpu=</b><i>cpu_type</i> would.
<p>
<!-- ignored unsupported tag .if -->
The same values for <b>-mcpu=</b><i>cpu_type</i> can be used for
<b>-mtune=</b><i>cpu_type</i>, but the only useful values are those
that select a particular cpu implementation.  Those are <b>cypress</b>,
<b>supersparc</b>, <b>hypersparc</b>, <b>f930</b>, <b>f934</b>,
<b>sparclite86x</b>, <b>tsc701</b>, <b>ultrasparc</b>,
<b>ultrasparc3</b>, and <b>niagara</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mv8plus</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-v8plus</b>
</td><td>
<!-- ignored unsupported tag .tm -->
With <b>-mv8plus</b>, <font size="-1">GCC</font> generates code for the <font size="-1">SPARC-V8+</font> <font size="-1">ABI</font>.  The
difference from the V8 <font size="-1">ABI</font> is that the global and out registers are
considered 64-bit wide.  This is enabled by default on Solaris in 32-bit
mode for all <font size="-1">SPARC-V9</font> processors.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mvis</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-vis</b>
</td><td>
<!-- ignored unsupported tag .tm -->
With <b>-mvis</b>, <font size="-1">GCC</font> generates code that takes advantage of the UltraSPARC
Visual Instruction Set extensions.  The default is <b>-mno-vis</b>.
</td></tr>
<!-- PP ends table -->
</table>
These <b>-m</b> options are supported in addition to the above
on <font size="-1">SPARC-V9</font> processors in 64-bit environments:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mlittle-endian</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a processor running in little-endian mode.  It is only
available for a few configurations and most notably not on Solaris and Linux.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m32</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-m64</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for a 32-bit or 64-bit environment.
The 32-bit environment sets int, long and pointer to 32 bits.
The 64-bit environment sets int to 32 bits and long and pointer
to 64 bits.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcmodel=medlow</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the Medium/Low code model: 64-bit addresses, programs
must be linked in the low 32 bits of memory.  Programs can be statically
or dynamically linked.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcmodel=medmid</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the Medium/Middle code model: 64-bit addresses, programs
must be linked in the low 44 bits of memory, the text and data segments must
be less than 2GB in size and the data segment must be located within 2GB of
the text segment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcmodel=medany</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the Medium/Anywhere code model: 64-bit addresses, programs
may be linked anywhere in memory, the text and data segments must be less
than 2GB in size and the data segment must be located within 2GB of the
text segment.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mcmodel=embmedany</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code for the Medium/Anywhere code model for embedded systems:
64-bit addresses, the text and data segments must be less than 2GB in
size, both starting anywhere in memory (determined at link time).  The
global register <tt>%g4</tt> points to the base of the data segment.  Programs
are statically linked and <font size="-1">PIC</font> is not supported.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mstack-bias</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-stack-bias</b>
</td><td>
<!-- ignored unsupported tag .tm -->
With <b>-mstack-bias</b>, <font size="-1">GCC</font> assumes that the stack pointer, and
frame pointer if present, are offset by -2047 which must be added back
when making stack frame references.  This is the default in 64-bit mode.
Otherwise, assume no such offset is present.
</td></tr>
<!-- PP ends table -->
</table>
These switches are supported in addition to the above on Solaris:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-threads</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Add support for multithreading using the Solaris threads library.  This
option sets flags for both the preprocessor and linker.  This option does
not affect the thread safety of object code produced by the compiler or
that of libraries supplied with it.
</td></tr>
<tr valign="top"><td width=4%>
<b>-pthreads</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Add support for multithreading using the <font size="-1">POSIX</font> threads library.  This
option sets flags for both the preprocessor and linker.  This option does
not affect the thread safety of object code produced  by the compiler or
that of libraries supplied with it.
</td></tr>
<tr valign="top"><td width=4%>
<b>-pthread</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This is a synonym for <b>-pthreads</b>.
</td></tr>
</table>
<h1 class="manpages">Options for System V</h1>
<!-- ignored unsupported tag .tm -->
These additional options are available on System V Release 4 for
compatibility with other compilers on those systems:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-G</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Create a shared object.
It is recommended that <b>-symbolic</b> or <b>-shared</b> be used instead.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Qy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Identify the versions of each tool used by the compiler, in a
<tt>.ident</tt> assembler directive in the output.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Qn</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Refrain from adding <tt>.ident</tt> directives to the output file (this is
the default).
</td></tr>
<tr valign="top"><td width=4%>
<b>-YP,</b><i>dirs</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Search the directories <i>dirs</i>, and no others, for libraries
specified with <b>-l</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Ym,</b><i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Look in the directory <i>dir</i> to find the M4 preprocessor.
The assembler uses this option.
</td></tr>
</table>
<h1 class="manpages">TMS320C3x/C4x Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for TMS320C3x/C4x implementations:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mcpu=</b><i>cpu_type</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the instruction set, register set, and instruction scheduling
parameters for machine type <i>cpu_type</i>.  Supported values for
<i>cpu_type</i> are <b>c30</b>, <b>c31</b>, <b>c32</b>, <b>c40</b>, and
<b>c44</b>.  The default is <b>c40</b> to generate code for the
<font size="-1">TMS320C40</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbig-memory</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbig</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msmall-memory</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-msmall</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generates code for the big or small memory model.  The small memory
model assumed that all data fits into one 64K word page.  At run-time
the data page (<font size="-1">DP</font>) register must be set to point to the 64K page
containing the .bss and .data program sections.  The big memory model is
the default and requires reloading of the <font size="-1">DP</font> register for every direct
memory access.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbk</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-bk</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow (disallow) allocation of general integer operands into the block
count register <font size="-1">BK</font>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-db</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable (disable) generation of code using decrement and branch,
DBcond(D), instructions.  This is enabled by default for the C4x.  To be
on the safe side, this is disabled for the C3x, since the maximum
iteration count on the C3x is 2^{23 + 1} (but who iterates loops more than
2^{23} times on the C3x?).  Note that <font size="-1">GCC</font> will try to reverse a loop so
that it can utilize the decrement and branch instruction, but will give
up if there is more than one memory reference in the loop.  Thus a loop
where the loop counter is decremented can generate slightly more
efficient code, in cases where the <font size="-1">RPTB</font> instruction cannot be utilized.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdp-isr-reload</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mparanoid</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force the <font size="-1">DP</font> register to be saved on entry to an interrupt service
routine (<font size="-1">ISR</font>), reloaded to point to the data section, and restored on
exit from the <font size="-1">ISR</font>.  This should not be required unless someone has
violated the small memory model by modifying the <font size="-1">DP</font> register, say within
an object library.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmpyi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-mpyi</b>
</td><td>
<!-- ignored unsupported tag .tm -->
For the C3x use the 24-bit <font size="-1">MPYI</font> instruction for integer multiplies
instead of a library call to guarantee 32-bit results.  Note that if one
of the operands is a constant, then the multiplication will be performed
using shifts and adds.  If the <b>-mmpyi</b> option is not specified for the C3x,
then squaring operations are performed inline instead of a library call.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfast-fix</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fast-fix</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The C3x/C4x <font size="-1">FIX</font> instruction to convert a floating point value to an
integer value chooses the nearest integer less than or equal to the
floating point value rather than to the nearest integer.  Thus if the
floating point number is negative, the result will be incorrectly
truncated an additional code is necessary to detect and correct this
case.  This option can be used to disable generation of the additional
code required to correct the result.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrptb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-rptb</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable (disable) generation of repeat block sequences using the <font size="-1">RPTB</font>
instruction for zero overhead looping.  The <font size="-1">RPTB</font> construct is only used
for innermost loops that do not call functions or jump across the loop
boundaries.  There is no advantage having nested <font size="-1">RPTB</font> loops due to the
overhead required to save and restore the <font size="-1">RC</font>, <font size="-1">RS</font>, and <font size="-1">RE</font> registers.
This is enabled by default with <b>-O2</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mrpts=</b><i>count</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-rpts</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable (disable) the use of the single instruction repeat instruction
<font size="-1">RPTS</font>.  If a repeat block contains a single instruction, and the loop
count can be guaranteed to be less than the value <i>count</i>, <font size="-1">GCC</font> will
emit a <font size="-1">RPTS</font> instruction instead of a <font size="-1">RPTB</font>.  If no value is specified,
then a <font size="-1">RPTS</font> will be emitted even if the loop count cannot be determined
at compile time.  Note that the repeated instruction following <font size="-1">RPTS</font> does
not have to be reloaded from memory each iteration, thus freeing up the
<font size="-1">CPU</font> buses for operands.  However, since interrupts are blocked by this
instruction, it is disabled by default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mloop-unsigned</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-loop-unsigned</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The maximum iteration count when using <font size="-1">RPTS</font> and <font size="-1">RPTB</font> (and <font size="-1">DB</font> on the C40)
is 2^{31 + 1} since these instructions test if the iteration count is
negative to terminate the loop.  If the iteration count is unsigned
there is a possibility than the 2^{31 + 1} maximum iteration count may be
exceeded.  This switch allows an unsigned iteration count.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mti</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Try to emit an assembler syntax that the <font size="-1">TI</font> assembler (asm30) is happy
with.  This also enforces compatibility with the <font size="-1">API</font> employed by the <font size="-1">TI</font>
C3x C compiler.  For example, long doubles are passed as structures
rather than in floating point registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mregparm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mmemparm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that uses registers (stack) for passing arguments to functions.
By default, arguments are passed in registers where possible rather
than by pushing arguments on to the stack.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mparallel-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-parallel-insns</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow the generation of parallel instructions.  This is enabled by
default with <b>-O2</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mparallel-mpy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-parallel-mpy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allow the generation of MPY||ADD and MPY||SUB parallel instructions,
provided <b>-mparallel-insns</b> is also specified.  These instructions have
tight register constraints which can pessimize the code generation
of large functions.
</td></tr>
</table>
<h1 class="manpages">V850 Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for V850 implementations:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mlong-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-long-calls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Treat all calls as being far away (near).  If calls are assumed to be
far away, the compiler will always load the functions address up into a
register, and call indirect through the pointer.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-ep</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mep</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not optimize (do optimize) basic blocks that use the same index
pointer 4 or more times to copy pointer into the <tt>ep</tt> register, and
use the shorter <tt>sld</tt> and <tt>sst</tt> instructions.  The <b>-mep</b>
option is on by default if you optimize.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-prolog-function</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mprolog-function</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use (do use) external functions to save and restore registers
at the prologue and epilogue of a function.  The external functions
are slower, but use less code space if more than one function saves
the same number of registers.  The <b>-mprolog-function</b> option
is on by default if you optimize.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mspace</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Try to make the code as small as possible.  At present, this just turns
on the <b>-mep</b> and <b>-mprolog-function</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtda=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Put static or global variables whose size is <i>n</i> bytes or less into
the tiny data area that register <tt>ep</tt> points to.  The tiny data
area can hold up to 256 bytes in total (128 bytes for byte references).
</td></tr>
<tr valign="top"><td width=4%>
<b>-msda=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Put static or global variables whose size is <i>n</i> bytes or less into
the small data area that register <tt>gp</tt> points to.  The small data
area can hold up to 64 kilobytes.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mzda=</b><i>n</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Put static or global variables whose size is <i>n</i> bytes or less into
the first 32 kilobytes of memory.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mv850</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify that the target processor is the V850.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mbig-switch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code suitable for big switch tables.  Use this option only if
the assembler/linker complain about out of range branches within a switch
table.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mapp-regs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option will cause r2 and r5 to be used in the code generated by
the compiler.  This setting is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-app-regs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option will cause r2 and r5 to be treated as fixed registers.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mv850e1</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify that the target processor is the V850E1.  The preprocessor
constants <b>__v850e1__</b> and <b>__v850e__</b> will be defined if
this option is used.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mv850e</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify that the target processor is the V850E.  The preprocessor
constant <b>__v850e__</b> will be defined if this option is used.
<p>
<!-- ignored unsupported tag .if -->
If neither <b>-mv850</b> nor <b>-mv850e</b> nor <b>-mv850e1</b>
are defined then a default target processor will be chosen and the
relevant <b>__v850*__</b> preprocessor constant will be defined.
<p>
<!-- ignored unsupported tag .if -->
The preprocessor constants <b>__v850</b> and <b>__v851__</b> are always
defined, regardless of which processor variant is the target.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mdisable-callt</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option will suppress generation of the <font size="-1">CALLT</font> instruction for the
v850e and v850e1 flavors of the v850 architecture.  The default is
<b>-mno-disable-callt</b> which allows the <font size="-1">CALLT</font> instruction to be used.
</td></tr>
</table>
<h1 class="manpages"><font size="-1">VAX</font> Options</h1>
<!-- ignored unsupported tag .tm -->
These <b>-m</b> options are defined for the <font size="-1">VAX:</font>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-munix</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not output certain jump instructions (<tt>aobleq</tt> and so on)
that the Unix assembler for the <font size="-1">VAX</font> cannot handle across long
ranges.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mgnu</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do output those jump instructions, on the assumption that you
will assemble with the <font size="-1">GNU</font> assembler.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mg</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Output code for g-format floating point numbers instead of d-format.
</td></tr>
</table>
<h1 class="manpages">x86-64 Options</h1>
<!-- ignored unsupported tag .tm -->
These are listed under
<h1 class="manpages">Xstormy16 Options</h1>
<!-- ignored unsupported tag .tm -->
These options are defined for Xstormy16:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-msim</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Choose startup files and linker script suitable for the simulator.
</td></tr>
</table>
<h1 class="manpages">Xtensa Options</h1>
<!-- ignored unsupported tag .tm -->
These options are supported for Xtensa targets:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-mconst16</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-const16</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable or disable use of <tt>CONST16</tt> instructions for loading
constant values.  The <tt>CONST16</tt> instruction is currently not a
standard option from Tensilica.  When enabled, <tt>CONST16</tt>
instructions are always used in place of the standard <tt>L32R</tt>
instructions.  The use of <tt>CONST16</tt> is enabled by default only if
the <tt>L32R</tt> instruction is not available.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mfused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-fused-madd</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable or disable use of fused multiply/add and multiply/subtract
instructions in the floating-point option.  This has no effect if the
floating-point option is not also enabled.  Disabling fused multiply/add
and multiply/subtract instructions forces the compiler to use separate
instructions for the multiply and add/subtract operations.  This may be
desirable in some cases where strict <font size="-1">IEEE</font> 754-compliant results are
required: the fused multiply add/subtract instructions do not round the
intermediate result, thereby producing results with <i>more</i> bits of
precision than specified by the <font size="-1">IEEE</font> standard.  Disabling fused multiply
add/subtract instructions also ensures that the program output is not
sensitive to the compiler&#146;s ability to combine multiply and add/subtract
operations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtext-section-literals</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-text-section-literals</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Control the treatment of literal pools.  The default is
<b>-mno-text-section-literals</b>, which places literals in a separate
section in the output file.  This allows the literal pool to be placed
in a data <font size="-1">RAM/ROM</font>, and it also allows the linker to combine literal
pools from separate object files to remove redundant literals and
improve code size.  With <b>-mtext-section-literals</b>, the literals
are interspersed in the text section in order to keep them as close as
possible to their references.  This may be necessary for large assembly
files.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mtarget-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-target-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When this option is enabled, <font size="-1">GCC</font> instructs the assembler to
automatically align instructions to reduce branch penalties at the
expense of some code density.  The assembler attempts to widen density
instructions to align branch targets and the instructions following call
instructions.  If there are not enough preceding safe density
instructions to align a target, no widening will be performed.  The
default is <b>-mtarget-align</b>.  These options do not affect the
treatment of auto-aligned instructions like <tt>LOOP</tt>, which the
assembler will always align, either by widening density instructions or
by inserting no-op instructions.
</td></tr>
<tr valign="top"><td width=4%>
<b>-mlongcalls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-mno-longcalls</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When this option is enabled, <font size="-1">GCC</font> instructs the assembler to translate
direct calls to indirect calls unless it can determine that the target
of a direct call is in the range allowed by the call instruction.  This
translation typically occurs for calls to functions in other source
files.  Specifically, the assembler translates a direct <tt>CALL</tt>
instruction into an <tt>L32R</tt> followed by a <tt>CALLX</tt> instruction.
The default is <b>-mno-longcalls</b>.  This option should be used in
programs where the call target can potentially be out of range.  This
option is implemented in the assembler, not the compiler, so the
assembly code generated by <font size="-1">GCC</font> will still show direct call
instructions---look at the disassembled object code to see the actual
instructions.  Note that the assembler will use an indirect call for
every cross-file call, not just those that really will be out of range.
</td></tr>
</table>
<h1 class="manpages">zSeries Options</h1>
<!-- ignored unsupported tag .tm -->
These are listed under
<h1 class="manpages">Options for Code Generation Conventions</h1>
<!-- ignored unsupported tag .tm -->
These machine-independent options control the interface conventions
used in code generation.
<p>
Most of them have both positive and negative forms; the negative form
of <b>-ffoo</b> would be <b>-fno-foo</b>.  In the table below, only
one of the forms is listed---the one which is not the default.  You
can figure out the other form by either removing <b>no-</b> or adding
it.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>-fbounds-check</b>
</td><td>
<!-- ignored unsupported tag .tm -->
For front-ends that support it, generate additional code to check that
indices used to access arrays are within the declared range.  This is
currently only supported by the Java and Fortran front-ends, where
this option defaults to true and false respectively.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftrapv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option generates traps for signed overflow on addition, subtraction,
multiplication operations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fwrapv</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option instructs the compiler to assume that signed arithmetic
overflow of addition, subtraction and multiplication wraps around
using twos-complement representation.  This flag enables some optimizations
and disables others.  This option is enabled by default for the Java
front-end, as required by the Java language specification.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fexceptions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable exception handling.  Generates extra code needed to propagate
exceptions.  For some targets, this implies <font size="-1">GCC</font> will generate frame
unwind information for all functions, which can produce significant data
size overhead, although it does not affect execution.  If you do not
specify this option, <font size="-1">GCC</font> will enable it by default for languages like
C<font size="-2">++</font> which normally require exception handling, and disable it for
languages like C that do not normally require it.  However, you may need
to enable this option when compiling C code that needs to interoperate
properly with exception handlers written in C<font size="-2">++</font>.  You may also wish to
disable this option if you are compiling older C<font size="-2">++</font> programs that don&#146;t
use exception handling.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fnon-call-exceptions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code that allows trapping instructions to throw exceptions.
Note that this requires platform-specific runtime support that does
not exist everywhere.  Moreover, it only allows <i>trapping</i>
instructions to throw exceptions, i.e. memory references or floating
point instructions.  It does not allow exceptions to be thrown from
arbitrary signal handlers such as <tt>SIGALRM</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-funwind-tables</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Similar to <b>-fexceptions</b>, except that it will just generate any needed
static data, but will not affect the generated code in any other way.
You will normally not enable this option; instead, a language processor
that needs this handling would enable it on your behalf.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fasynchronous-unwind-tables</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate unwind table in dwarf2 format, if supported by target machine.  The
table is exact at each instruction boundary, so it can be used for stack
unwinding from asynchronous events (such as debugger or garbage collector).
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpcc-struct-return</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Return short <tt>struct</tt> and <tt>union</tt> values in memory like
longer ones, rather than in registers.  This convention is less
efficient, but it has the advantage of allowing intercallability between
GCC-compiled files and files compiled with other compilers, particularly
the Portable C Compiler (pcc).
<p>
<!-- ignored unsupported tag .if -->
The precise convention for returning structures in memory depends
on the target configuration macros.
<p>
<!-- ignored unsupported tag .if -->
Short structures and unions are those whose size and alignment match
that of some integer type.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> code compiled with the <b>-fpcc-struct-return</b>
switch is not binary compatible with code compiled with the
<b>-freg-struct-return</b> switch.
Use it to conform to a non-default application binary interface.
</td></tr>
<tr valign="top"><td width=4%>
<b>-freg-struct-return</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Return <tt>struct</tt> and <tt>union</tt> values in registers when possible.
This is more efficient for small structures than
<b>-fpcc-struct-return</b>.
<p>
<!-- ignored unsupported tag .if -->
If you specify neither <b>-fpcc-struct-return</b> nor
<b>-freg-struct-return</b>, <font size="-1">GCC</font> defaults to whichever convention is
standard for the target.  If there is no standard convention, <font size="-1">GCC</font>
defaults to <b>-fpcc-struct-return</b>, except on targets where <font size="-1">GCC</font> is
the principal compiler.  In those cases, we can choose the standard, and
we chose the more efficient register return alternative.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> code compiled with the <b>-freg-struct-return</b>
switch is not binary compatible with code compiled with the
<b>-fpcc-struct-return</b> switch.
Use it to conform to a non-default application binary interface.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fshort-enums</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allocate to an <tt>enum</tt> type only as many bytes as it needs for the
declared range of possible values.  Specifically, the <tt>enum</tt> type
will be equivalent to the smallest integer type which has enough room.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> the <b>-fshort-enums</b> switch causes <font size="-1">GCC</font> to generate
code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fshort-double</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Use the same size for <tt>double</tt> as for <tt>float</tt>.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> the <b>-fshort-double</b> switch causes <font size="-1">GCC</font> to generate
code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fshort-wchar</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Override the underlying type for <b>wchar_t</b> to be <b>short
unsigned int</b> instead of the default for the target.  This option is
useful for building programs to run under <font size="-1">WINE</font>.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> the <b>-fshort-wchar</b> switch causes <font size="-1">GCC</font> to generate
code that is not binary compatible with code generated without that switch.
Use it to conform to a non-default application binary interface.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fshared-data</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Requests that the data and non-<tt>const</tt> variables of this
compilation be shared data rather than private data.  The distinction
makes sense only on certain operating systems, where shared data is
shared between processes running the same program, while private data
exists in one copy per process.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-common</b>
</td><td>
<!-- ignored unsupported tag .tm -->
In C, allocate even uninitialized global variables in the data section of the
object file, rather than generating them as common blocks.  This has the
effect that if the same variable is declared (without <tt>extern</tt>) in
two different compilations, you will get an error when you link them.
The only reason this might be useful is if you wish to verify that the
program will work on other systems which always work this way.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-ident</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Ignore the <b>#ident</b> directive.
</td></tr>
<tr valign="top"><td width=4%>
<b>-finhibit-size-directive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t output a <tt>.size</tt> assembler directive, or anything else that
would cause trouble if the function is split in the middle, and the
two halves are placed at locations far apart in memory.  This option is
used when compiling <i>crtstuff.c</i>; you should not need to use it
for anything else.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fverbose-asm</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Put extra commentary information in the generated assembly code to
make it more readable.  This option is generally only of use to those
who actually need to read the generated assembly code (perhaps while
debugging the compiler itself).
<p>
<!-- ignored unsupported tag .if -->
<b>-fno-verbose-asm</b>, the default, causes the
extra information to be omitted and is useful when comparing two assembler
files.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate position-independent code (<font size="-1">PIC</font>) suitable for use in a shared
library, if supported for the target machine.  Such code accesses all
constant addresses through a global offset table (<font size="-1">GOT</font>).  The dynamic
loader resolves the <font size="-1">GOT</font> entries when the program starts (the dynamic
loader is not part of <font size="-1">GCC</font>; it is part of the operating system).  If
the <font size="-1">GOT</font> size for the linked executable exceeds a machine-specific
maximum size, you get an error message from the linker indicating that
<b>-fpic</b> does not work; in that case, recompile with <b>-fPIC</b>
instead.  (These maximums are 8k on the <font size="-1">SPARC</font> and 32k
on the m68k and <font size="-1">RS/6000</font>.  The 386 has no such limit.)
<p>
<!-- ignored unsupported tag .if -->
Position-independent code requires special support, and therefore works
only on certain machines.  For the 386, <font size="-1">GCC</font> supports <font size="-1">PIC</font> for System V
but not for the Sun 386i.  Code generated for the <font size="-1">IBM</font> <font size="-1">RS/6000</font> is always
position-independent.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fPIC</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If supported for the target machine, emit position-independent code,
suitable for dynamic linking and avoiding any limit on the size of the
global offset table.  This option makes a difference on the m68k,
PowerPC and <font size="-1">SPARC</font>.
<p>
<!-- ignored unsupported tag .if -->
Position-independent code requires special support, and therefore works
only on certain machines.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpie</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fPIE</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These options are similar to <b>-fpic</b> and <b>-fPIC</b>, but
generated position independent code can be only linked into executables.
Usually these options are used when <b>-pie</b> <font size="-1">GCC</font> option will be
used during linking.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-jump-tables</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not use jump tables for switch statements even where it would be
more efficient than other code generation strategies.  This option is
of use in conjunction with <b>-fpic</b> or <b>-fPIC</b> for
building code which forms part of a dynamic linker and cannot
reference the address of a jump table.  On some targets, jump tables
do not require a <font size="-1">GOT</font> and this option is not needed.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ffixed-</b><i>reg</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Treat the register named <i>reg</i> as a fixed register; generated code
should never refer to it (except perhaps as a stack pointer, frame
pointer or in some other fixed role).
<p>
<!-- ignored unsupported tag .if -->
<i>reg</i> must be the name of a register.  The register names accepted
are machine-specific and are defined in the <tt>REGISTER_NAMES</tt>
macro in the machine description macro file.
<p>
<!-- ignored unsupported tag .if -->
This flag does not have a negative form, because it specifies a
three-way choice.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcall-used-</b><i>reg</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Treat the register named <i>reg</i> as an allocable register that is
clobbered by function calls.  It may be allocated for temporaries or
variables that do not live across a call.  Functions compiled this way
will not save and restore the register <i>reg</i>.
<p>
<!-- ignored unsupported tag .if -->
It is an error to used this flag with the frame pointer or stack pointer.
Use of this flag for other registers that have fixed pervasive roles in
the machine&#146;s execution model will produce disastrous results.
<p>
<!-- ignored unsupported tag .if -->
This flag does not have a negative form, because it specifies a
three-way choice.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fcall-saved-</b><i>reg</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Treat the register named <i>reg</i> as an allocable register saved by
functions.  It may be allocated even for temporaries or variables that
live across a call.  Functions compiled this way will save and restore
the register <i>reg</i> if they use it.
<p>
<!-- ignored unsupported tag .if -->
It is an error to used this flag with the frame pointer or stack pointer.
Use of this flag for other registers that have fixed pervasive roles in
the machine&#146;s execution model will produce disastrous results.
<p>
<!-- ignored unsupported tag .if -->
A different sort of disaster will result from the use of this flag for
a register in which function values may be returned.
<p>
<!-- ignored unsupported tag .if -->
This flag does not have a negative form, because it specifies a
three-way choice.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fpack-struct[=</b><i>n</i><b>]</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Without a value specified, pack all structure members together without
holes.  When a value is specified (which must be a small power of two), pack
structure members according to this value, representing the maximum
alignment (that is, objects with default alignment requirements larger than
this will be output potentially unaligned at the next fitting location.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> the <b>-fpack-struct</b> switch causes <font size="-1">GCC</font> to generate
code that is not binary compatible with code generated without that switch.
Additionally, it makes the code suboptimal.
Use it to conform to a non-default application binary interface.
</td></tr>
<tr valign="top"><td width=4%>
<b>-finstrument-functions</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate instrumentation calls for entry and exit to functions.  Just
after function entry and just before function exit, the following
profiling functions will be called with the address of the current
function and its call site.  (On some platforms,
<tt>__builtin_return_address</tt> does not work beyond the current
function, so the call site information may not be available to the
profiling functions otherwise.)
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        void __cyg_profile_func_enter (void *this_fn,
                                       void *call_site);
        void __cyg_profile_func_exit  (void *this_fn,
                                       void *call_site);
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The first argument is the address of the start of the current function,
which may be looked up exactly in the symbol table.
<p>
<!-- ignored unsupported tag .if -->
This instrumentation is also done for functions expanded inline in other
functions.  The profiling calls will indicate where, conceptually, the
inline function is entered and exited.  This means that addressable
versions of such functions must be available.  If all your uses of a
function are expanded inline, this may mean an additional expansion of
code size.  If you use <b>extern inline</b> in your C code, an
addressable version of such functions must be provided.  (This is
normally the case anyways, but if you get lucky and the optimizer always
expands the functions inline, you might have gotten away without
providing static copies.)
<p>
<!-- ignored unsupported tag .if -->
A function may be given the attribute <tt>no_instrument_function</tt>, in
which case this instrumentation will not be done.  This can be used, for
example, for the profiling functions listed above, high-priority
interrupt routines, and any functions from which the profiling functions
cannot safely be called (perhaps signal handlers, if the profiling
routines generate output or allocate memory).
</td></tr>
<tr valign="top"><td width=4%>
<b>-fstack-check</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code to verify that you do not go beyond the boundary of the
stack.  You should specify this flag if you are running in an
environment with multiple threads, but only rarely need to specify it in
a single-threaded environment since stack overflow is automatically
detected on nearly all systems if there is only one stack.
<p>
<!-- ignored unsupported tag .if -->
Note that this switch does not actually cause checking to be done; the
operating system must do that.  The switch causes generation of code
to ensure that the operating system sees the stack being extended.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fstack-limit-register=</b><i>reg</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fstack-limit-symbol=</b><i>sym</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fno-stack-limit</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate code to ensure that the stack does not grow beyond a certain value,
either the value of a register or the address of a symbol.  If the stack
would grow beyond the value, a signal is raised.  For most targets,
the signal is raised before the stack overruns the boundary, so
it is possible to catch the signal without taking special precautions.
<p>
<!-- ignored unsupported tag .if -->
For instance, if the stack starts at absolute address <b>0x80000000</b>
and grows downwards, you can use the flags
<b>-fstack-limit-symbol=__stack_limit</b> and
<b>-Wl,--defsym,__stack_limit=0x7ffe0000</b> to enforce a stack limit
of 128KB.  Note that this may only work with the <font size="-1">GNU</font> linker.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fargument-alias</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fargument-noalias</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-fargument-noalias-global</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the possible relationships among parameters and between
parameters and global data.
<p>
<!-- ignored unsupported tag .if -->
<b>-fargument-alias</b> specifies that arguments (parameters) may
alias each other and may alias global storage.<b>-fargument-noalias</b> specifies that arguments do not alias
each other, but may alias global storage.<b>-fargument-noalias-global</b> specifies that arguments do not
alias each other and do not alias global storage.
<p>
<!-- ignored unsupported tag .if -->
Each language will automatically use whatever option is required by
the language standard.  You should not need to use these options yourself.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fleading-underscore</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option and its counterpart, <b>-fno-leading-underscore</b>, forcibly
change the way C symbols are represented in the object file.  One use
is to help link with legacy assembly code.
<p>
<!-- ignored unsupported tag .if -->
<b>Warning:</b> the <b>-fleading-underscore</b> switch causes <font size="-1">GCC</font> to
generate code that is not binary compatible with code generated without that
switch.  Use it to conform to a non-default application binary interface.
Not all targets provide complete support for this switch.
</td></tr>
<tr valign="top"><td width=4%>
<b>-ftls-model=</b><i>model</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Alter the thread-local storage model to be used.
The <i>model</i> argument should be one of <tt>global-dynamic</tt>,
<tt>local-dynamic</tt>, <tt>initial-exec</tt> or <tt>local-exec</tt>.
<p>
<!-- ignored unsupported tag .if -->
The default without <b>-fpic</b> is <tt>initial-exec</tt>; with
<b>-fpic</b> the default is <tt>global-dynamic</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fvisibility=</b><i>default|internal|hidden|protected</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the default <font size="-1">ELF</font> image symbol visibility to the specified option---all
symbols will be marked with this unless overridden within the code.
Using this feature can very substantially improve linking and
load times of shared object libraries, produce more optimized
code, provide near-perfect <font size="-1">API</font> export and prevent symbol clashes.
It is <b>strongly</b> recommended that you use this in any shared objects
you distribute.
<p>
<!-- ignored unsupported tag .if -->
Despite the nomenclature, <tt>default</tt> always means public ie;
available to be linked against from outside the shared object.
<tt>protected</tt> and <tt>internal</tt> are pretty useless in real-world
usage so the only other commonly used option will be <tt>hidden</tt>.
The default if <b>-fvisibility</b> isn&#146;t specified is
<tt>default</tt>, i.e., make every
symbol public---this causes the same behavior as previous versions of
<font size="-1">GCC</font>.
<p>
<!-- ignored unsupported tag .if -->
A good explanation of the benefits offered by ensuring <font size="-1">ELF</font>
symbols have the correct visibility is given by How To Write
Shared Libraries by Ulrich Drepper (which can be found at
&lt;<b><a href="http://people.redhat.com/~drepper">http://people.redhat.com/~drepper</a>/</b>&gt;)---however a superior
solution made possible by this option to marking things hidden when
the default is public is to make the default hidden and mark things
public.  This is the norm with <font size="-1">DLL</font>&#146;s on Windows and with <b>-fvisibility=hidden</b>
and <tt>__attribute__ ((visibility("default")))</tt> instead of
<tt>__declspec(dllexport)</tt> you get almost identical semantics with
identical syntax.  This is a great boon to those working with
cross-platform projects.
<p>
<!-- ignored unsupported tag .if -->
For those adding visibility support to existing code, you may find
<b>#pragma <font size="-1">GCC</font> visibility</b> of use.  This works by you enclosing
the declarations you wish to set visibility for with (for example)
<b>#pragma <font size="-1">GCC</font> visibility push(hidden)</b> and
<b>#pragma <font size="-1">GCC</font> visibility pop</b>.
Bear in mind that symbol visibility should be viewed <b>as
part of the <font size="-1">API</font> interface contract</b> and thus all new code should
always specify visibility when it is not the default ie; declarations
only for use within the local <font size="-1">DSO</font> should <b>always</b> be marked explicitly
as hidden as so to avoid <font size="-1">PLT</font> indirection overheads---making this
abundantly clear also aids readability and self-documentation of the code.
Note that due to <font size="-1">ISO</font> C<font size="-2">++</font> specification requirements, operator new and
operator delete must always be of default visibility.
<p>
<!-- ignored unsupported tag .if -->
<b>extern</b> declarations are not affected by <b>-fvisibility</b>, so
a lot of code can be recompiled with <b>-fvisibility=hidden</b> with
no modifications.  However, this means that calls to <b>extern</b>
functions with no explicit visibility will use the <font size="-1">PLT</font>, so it is more
effective to use <b>__attribute ((visibility))</b> and/or
<b>#pragma <font size="-1">GCC</font> visibility</b> to tell the compiler which <b>extern</b>
declarations should be treated as hidden.
<p>
<!-- ignored unsupported tag .if -->
Note that <b>-fvisibility</b> does affect C<font size="-2">++</font> vague linkage
entities. This means that, for instance, an exception class that will
be thrown between DSOs must be explicitly marked with default
visibility so that the <b>type_info</b> nodes will be unified between
the DSOs.
<p>
<!-- ignored unsupported tag .if -->
An overview of these techniques, their benefits and how to use them
is at &lt;<b><a href="http://gcc.gnu.org/wiki/Visibility">http://gcc.gnu.org/wiki/Visibility</a></b>&gt;.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fopenmp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable handling of OpenMP directives <tt>#pragma omp</tt> in C/C<font size="-2">++</font> and
<tt>!$omp</tt> in Fortran.  When <b>-fopenmp</b> is specified, the
compiler generates parallel code according to the OpenMP Application
Program Interface v2.5 &lt;<b><a href="http://www.openmp.org/">http://www.openmp.org</a>/</b>&gt;.
</td></tr>
</table>
<h1 class="manpages">ENVIRONMENT</h1>
<!-- ignored unsupported tag .tm -->
This section describes several environment variables that affect how <font size="-1">GCC</font>
operates.  Some of them work by specifying directories or prefixes to use
when searching for various kinds of files.  Some are used to specify other
aspects of the compilation environment.
<p>
Note that you can also specify places to search using options such as
<b>-B</b>, <b>-I</b> and <b>-L</b>.  These
take precedence over places specified using environment variables, which
in turn take precedence over those specified by the configuration of <font size="-1">GCC</font>.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">LANG</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">LC_CTYPE</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">LC_MESSAGES</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">LC_ALL</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
These environment variables control the way that <font size="-1">GCC</font> uses
localization information that allow <font size="-1">GCC</font> to work with different
national conventions.  <font size="-1">GCC</font> inspects the locale categories
<b><font size="-1">LC_CTYPE</font></b> and <b><font size="-1">LC_MESSAGES</font></b> if it has been configured to do
so.  These locale categories can be set to any value supported by your
installation.  A typical value is <b>en_GB.UTF-8</b> for English in the United
Kingdom encoded in <font size="-1">UTF-8</font>.
<p>
<!-- ignored unsupported tag .if -->
The <b><font size="-1">LC_CTYPE</font></b> environment variable specifies character
classification.  <font size="-1">GCC</font> uses it to determine the character boundaries in
a string; this is needed for some multibyte encodings that contain quote
and escape characters that would otherwise be interpreted as a string
end or escape.
<p>
<!-- ignored unsupported tag .if -->
The <b><font size="-1">LC_MESSAGES</font></b> environment variable specifies the language to
use in diagnostic messages.
<p>
<!-- ignored unsupported tag .if -->
If the <b><font size="-1">LC_ALL</font></b> environment variable is set, it overrides the value
of <b><font size="-1">LC_CTYPE</font></b> and <b><font size="-1">LC_MESSAGES</font></b>; otherwise, <b><font size="-1">LC_CTYPE</font></b>
and <b><font size="-1">LC_MESSAGES</font></b> default to the value of the <b><font size="-1">LANG</font></b>
environment variable.  If none of these variables are set, <font size="-1">GCC</font>
defaults to traditional C English behavior.
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">TMPDIR</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
If <b><font size="-1">TMPDIR</font></b> is set, it specifies the directory to use for temporary
files.  <font size="-1">GCC</font> uses temporary files to hold the output of one stage of
compilation which is to be used as input to the next stage: for example,
the output of the preprocessor, which is the input to the compiler
proper.
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">GCC_EXEC_PREFIX</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
If <b><font size="-1">GCC_EXEC_PREFIX</font></b> is set, it specifies a prefix to use in the
names of the subprograms executed by the compiler.  No slash is added
when this prefix is combined with the name of a subprogram, but you can
specify a prefix that ends with a slash if you wish.
<p>
<!-- ignored unsupported tag .if -->
If <b><font size="-1">GCC_EXEC_PREFIX</font></b> is not set, <font size="-1">GCC</font> will attempt to figure out
an appropriate prefix to use based on the pathname it was invoked with.
<p>
<!-- ignored unsupported tag .if -->
If <font size="-1">GCC</font> cannot find the subprogram using the specified prefix, it
tries looking in the usual places for the subprogram.
<p>
<!-- ignored unsupported tag .if -->
The default value of <b><font size="-1">GCC_EXEC_PREFIX</font></b> is
<i></i><i>prefix</i><i>/lib/gcc/</i> where <i>prefix</i> is the value
of <tt>prefix</tt> when you ran the <i>configure</i> script.
<p>
<!-- ignored unsupported tag .if -->
Other prefixes specified with <b>-B</b> take precedence over this prefix.
<p>
<!-- ignored unsupported tag .if -->
This prefix is also used for finding files such as <i>crt0.o</i> that are
used for linking.
<p>
<!-- ignored unsupported tag .if -->
In addition, the prefix is used in an unusual way in finding the
directories to search for header files.  For each of the standard
directories whose name normally begins with <b>/usr/local/lib/gcc</b>
(more precisely, with the value of <b><font size="-1">GCC_INCLUDE_DIR</font></b>), <font size="-1">GCC</font> tries
replacing that beginning with the specified prefix to produce an
alternate directory name.  Thus, with <b>-Bfoo/</b>, <font size="-1">GCC</font> will search
<i>foo/bar</i> where it would normally search <i>/usr/local/lib/bar</i>.
These alternate directories are searched first; the standard directories
come next.
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">COMPILER_PATH</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
The value of <b><font size="-1">COMPILER_PATH</font></b> is a colon-separated list of
directories, much like <b><font size="-1">PATH</font></b>.  <font size="-1">GCC</font> tries the directories thus
specified when searching for subprograms, if it can&#146;t find the
subprograms using <b><font size="-1">GCC_EXEC_PREFIX</font></b>.
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">LIBRARY_PATH</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
The value of <b><font size="-1">LIBRARY_PATH</font></b> is a colon-separated list of
directories, much like <b><font size="-1">PATH</font></b>.  When configured as a native compiler,
<font size="-1">GCC</font> tries the directories thus specified when searching for special
linker files, if it can&#146;t find them using <b><font size="-1">GCC_EXEC_PREFIX</font></b>.  Linking
using <font size="-1">GCC</font> also uses these directories when searching for ordinary
libraries for the <b>-l</b> option (but directories specified with
<b>-L</b> come first).
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">LANG</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
This variable is used to pass locale information to the compiler.  One way in
which this information is used is to determine the character set to be used
when character literals, string literals and comments are parsed in C and C<font size="-2">++</font>.
When the compiler is configured to allow multibyte characters,
the following values for <b><font size="-1">LANG</font></b> are recognized:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>C-JIS</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Recognize <font size="-1">JIS</font> characters.
</td></tr>
<tr valign="top"><td width=4%>
<b>C-SJIS</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Recognize <font size="-1">SJIS</font> characters.
</td></tr>
<tr valign="top"><td width=4%>
<b>C-EUCJP</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Recognize <font size="-1">EUCJP</font> characters.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
If <b><font size="-1">LANG</font></b> is not defined, or if it has some other value, then the
compiler will use mblen and mbtowc as defined by the default locale to
recognize and translate multibyte characters.
</td></tr>
<!-- PP ends table -->
</table>
Some additional environments variables affect the behavior of the
preprocessor.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">CPATH</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>C_INCLUDE_PATH</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">CPLUS_INCLUDE_PATH</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">OBJC_INCLUDE_PATH</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
Each variable&#146;s value is a list of directories separated by a special
character, much like <b><font size="-1">PATH</font></b>, in which to look for header files.
The special character, <tt>PATH_SEPARATOR</tt>, is target-dependent and
determined at <font size="-1">GCC</font> build time.  For Microsoft Windows-based targets it is a
semicolon, and for almost all other targets it is a colon.
<p>
<!-- ignored unsupported tag .if -->
<b><font size="-1">CPATH</font></b> specifies a list of directories to be searched as if
specified with <b>-I</b>, but after any paths given with <b>-I</b>
options on the command line.  This environment variable is used
regardless of which language is being preprocessed.
<p>
<!-- ignored unsupported tag .if -->
The remaining environment variables apply only when preprocessing the
particular language indicated.  Each specifies a list of directories
to be searched as if specified with <b>-isystem</b>, but after any
paths given with <b>-isystem</b> options on the command line.
<p>
<!-- ignored unsupported tag .if -->
In all these variables, an empty element instructs the compiler to
search its current working directory.  Empty elements can appear at the
beginning or end of a path.  For instance, if the value of
<b><font size="-1">CPATH</font></b> is <tt>:/special/include</tt>, that has the same
effect as <b>-I. -I/special/include</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">DEPENDENCIES_OUTPUT</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
If this variable is set, its value specifies how to output
dependencies for Make based on the non-system header files processed
by the compiler.  System header files are ignored in the dependency
output.
<p>
<!-- ignored unsupported tag .if -->
The value of <b><font size="-1">DEPENDENCIES_OUTPUT</font></b> can be just a file name, in
which case the Make rules are written to that file, guessing the target
name from the source file name.  Or the value can have the form
<i>file</i><b> </b><i>target</i>, in which case the rules are written to
file <i>file</i> using <i>target</i> as the target name.
<p>
<!-- ignored unsupported tag .if -->
In other words, this environment variable is equivalent to combining
the options <b>-MM</b> and <b>-MF</b>,
with an optional <b>-MT</b> switch too.
</td></tr>
<tr valign="top"><td width=4%>
<b><font size="-1">SUNPRO_DEPENDENCIES</font></b>
</td><td>
<!-- ignored unsupported tag .tm -->
This variable is the same as <b><font size="-1">DEPENDENCIES_OUTPUT</font></b> (see above),
except that system header files are not ignored, so it implies
<b>-M</b> rather than <b>-MM</b>.  However, the dependence on the
main input file is omitted.
</td></tr>
</table>
<h1 class="manpages">BUGS</h1>
<!-- ignored unsupported tag .tm -->
For instructions on reporting bugs, see
&lt;<b><a href="http://gcc.gnu.org/bugs.html">http://gcc.gnu.org/bugs.html</a></b>&gt;.
<h1 class="manpages">FOOTNOTES</h1>
<!-- ignored unsupported tag .tm -->
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
1.
</td><td>
On some systems, <b>gcc -shared</b>
needs to build supplementary stub code for constructors to work.  On
multi-libbed systems, <b>gcc -shared</b> must select the correct support
libraries to link against.  Failing to supply the correct flags may lead
to subtle defects.  Supplying them in cases where they are not necessary
is innocuous.
</td></tr>
</table>
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<i>gpl</i>(7), <i>gfdl</i>(7), <i>fsf-funding</i>(7),
<i>cpp</i>(1), <i>gcov</i>(1), <i>as</i>(1), <i>ld</i>(1), <i>gdb</i>(1), <i>adb</i>(1), <i>dbx</i>(1), <i>sdb</i>(1)
and the Info entries for <i>gcc</i>, <i>cpp</i>, <i>as</i>,
<i>ld</i>, <i>binutils</i> and <i>gdb</i>.
<h1 class="manpages">AUTHOR</h1>
<!-- ignored unsupported tag .tm -->
See the Info entry for <b>gcc</b>, or
&lt;<b><a href="http://gcc.gnu.org/onlinedocs/gcc/Contributors.html">http://gcc.gnu.org/onlinedocs/gcc/Contributors.html</a></b>&gt;,
for contributors to <font size="-1">GCC</font>.
<h1 class="manpages">COPYRIGHT</h1>
<!-- ignored unsupported tag .tm -->
Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
<p>
Permission is granted to copy, distribute and/or modify this document
under the terms of the <font size="-1">GNU</font> Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being <font size="-1">GNU</font> General Public License and Funding
Free Software, the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the <i>gfdl</i>(7) man page.
<p>
(a) The <font size="-1">FSF</font>&#146;s Front-Cover Text is:
<p>
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
     A GNU Manual
</tt></pre></td></tr>
</table>
<p>
(b) The <font size="-1">FSF</font>&#146;s Back-Cover Text is:
<p>
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.
</tt></pre></td></tr>
</table>
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion1129.html?tutorial=unix_commands&amp;file=gcc.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/gcc.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:40 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
