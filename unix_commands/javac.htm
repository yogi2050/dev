<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/javac.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:50 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>javac - Unix, Linux Command</title>
<meta name="Description" Content="javac - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>javac - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
javac - Java compiler
<h1 class="manpages">SYNOPSIS</h1>
<b>javac</b> [
<b>options</b> ]
[
<b>sourcefiles</b> ]
[
<b>@argfiles</b> ]
<h1 class="manpages">PARAMETERS</h1>
Arguments may be in any order.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>options</i> </td><td valign="bottom">
Command line options.
</td></tr>
<tr valign="top"><td>
<i>sourcefiles</i> </td><td valign="bottom">
One or more source files to be compiled (such as
<b>MyClass.java</b>).
</td></tr>
<tr valign="top"><td>
<b>@</b><i>argfiles</i>
</td><td valign="bottom">
One or more files that list source files.
The -J options are not allowed in these files.
</td></tr>
</table>
<h1 class="manpages">DESCRIPTION</h1>
The
<b>javac</b> tool reads class and interface definitions, written in
the Java programming language, and compiles them into bytecode
class files.
<p>
There are two ways to pass source code file names to
<b>javac</b>: <table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
For a small number of source files, simply list the file
names on the command line.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
For a large number of source files, list the file names
in a file, separated by blanks or line breaks. Then use the
list file name on the
<b>javac</b> command line, preceded by an @
character.
</td></tr>
<!-- LP ends table -->
</table>
Source code file names must have
<b>.java</b> suffixes, class file names
must have
<b>.class</b> suffixes, and both source and class files must
have root names that identify the class.
For example, a class
called
<b>MyClass</b> would be written in a source file called
<b>MyClass.java</b> and compiled into a bytecode class file called
<b>MyClass.class</b>. <p>
Inner class definitions produce additional class files.
These class files have names combining the inner and outer class names,
such as
<b>MyClass$MyInnerClass.class</b>. <p>
You should arrange source files in a directory tree that reflects
their package tree.
For example, if you keep all your source files in
<b>/workspace</b>, the source code for
<b>com.mysoft.mypack.MyClass</b> should be in
<b>/workspace/com/mysoft/mypack/MyClass.java</b>. <p>
By default, the compiler puts each class file in the same
directory as its source file.
You can specify a separate
destination directory with
<b>-d</b> (see
<b><a href=#5>OPTIONS</a></b>, below).
<h2><i>Searching for Types</i></h2>
<!-- ignored unsupported tag .IX -->
When compiling a source file, the compiler often needs information
about a type whose definition did not appear in the source files given
on the command line.
The compiler needs type
information for every class or interface used, extended, or
implemented in the source file.
This includes classes and
interfaces not explicitly mentioned in the source file but which
provide information through inheritance.
<p>
For example, when you subclass
<b>java.applet.Applet</b>, you are also
using Applet&#146;s ancestor classes:
<b>java.awt.Panel</b>, <b>java.awt.Container</b>, <b>java.awt.Component</b>, and
<b>java.awt.Object</b>. <p>
When the compiler needs type information, it looks for a source
file or class file which defines the type.
The compiler searches
first in the bootstrap and extension classes, then in the user
class path (which by default is the current directory).
The user class path is defined by setting the
<b><font size="-1">CLASSPATH</font></b> environment variable or by using the
<b>-classpath</b> command line option.
(For details, see
<b>Setting the Class Path</b>.) <p>
If you use the
<b>-sourcepath</b> option, the compiler
searches the indicated path for source files; otherwise the
compiler searches the user class path both for class files and
source files.
You can specify different bootstrap or extension
classes with the
<b>-bootclasspath</b> and
<b>-extdirs</b> options; see
<b><a href=#7>Cross-Compilation Options</a></b> below.
<p>
A successful type search may produce a class file, a source file,
or both.
Here is how
<b>javac</b> handles each situation:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
Search produces a class file but no source file:
<b>javac</b> uses the class file.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
Search produces a source file but no class file:
<b>javac</b> compiles the source file and uses the resulting class file.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
Search produces both a source file and a class file:
<b>javac</b> determines whether the class file is out of date.
If the class file is out of date,
<b>javac</b> recompiles the source file
and uses the updated class file.
Otherwise,
<b>javac</b> just uses the class file.
<p>
By default,
<b>javac</b> considers a class file out of date only if
it is older than the source file.
</td></tr>
<!-- LP ends table -->
</table>
Note:
<b>javac</b> can silently compile source files not mentioned on
the command line.
Use the
<b>-verbose</b> option to trace automatic compilation.
<h1 class="manpages">OPTIONS</h1>
The compiler has a set of standard options that are supported on
the current development environment and will be supported in
future releases.
An additional set of non-standard options are
specific to the current virtual machine implementation and are
subject to change in the future.
Non-standard options begin with
<b>-X</b>. <h2><i>Standard Options</i></h2>
<!-- ignored unsupported tag .IX -->
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-classpath</b><i> classpath</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Sets the user class path, overriding the user class path in
the
<b><font size="-1">CLASSPATH</font></b> environment variable.
If neither
<b><font size="-1">CLASSPATH</font></b> or
<b>-classpath</b> is specified, the user class path consists of the
current directory.
See
<b>Setting the Class Path</b> for more details.
<p>
If the
<b>-sourcepath</b> option is not specified, the user class
path is searched for both source files and class files.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Djava.ext.dirs=directories</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Override the location of installed extensions.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Djava.endorsed.dirs=directories</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Override the location of endorsed standards path.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-d</b><i> directory</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Sets the destination directory for class files.
The destination directory must already exist; javac
will not create the destination directory.
If a class is part of a package,
<b>javac</b> puts the class file in a
subdirectory reflecting the package name, creating
directories as needed.
For example, if you specify
<b>-d /home/myclasses</b> and the class is called
<b>com.mypackage.MyClass</b>, then the class file is called
<b>/home/myclasses/com/mypackage/MyClass.class</b>. <p>
If
<b>-d</b> is not specified,
<b>javac</b> puts the class file in the same
directory as the source file.
<p>
Note: The directory specified by
<b>-d</b> is not automatically
added to your user class path.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-deprecation</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Shows a description of each use or override of a deprecated
member or class.
Without
<b>-deprecation</b>, <b>javac</b> shows the names
of source files that use or override deprecated members or
classes.
<b>-</b>deprecation is shorthand for
<b>-Xlint:deprecation</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>-encoding</b><i> encoding</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Sets the source file encoding name, such as EUCJIS/SJIS/ISO8859-1/UTF8.
If
<b>-encoding</b> is not specified, the platform default converter is
used.
</td></tr>
<tr valign="top"><td>
<b>-g</b> </td><td valign="bottom">
Generates all debugging information, including local variables.
By default, only line number and source file
information is generated.
</td></tr>
<tr valign="top"><td>
<b>-g:none</b> </td><td valign="bottom">
Does not generate any debugging information.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-g:</b><i>keyword-list</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Generates only some kinds of debugging information, specified
by a comma separated list of keywords. Valid keywords are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>source</b> </td><td valign="bottom">
Source file debugging information
</td></tr>
<tr valign="top"><td>
<b>lines</b> </td><td valign="bottom">
Line number debugging information
</td></tr>
<tr valign="top"><td>
<b>vars</b> </td><td valign="bottom">
Local variable debugging information
</td></tr>
</table>
</td></tr>
<tr valign="top"><td>
<b>-help</b> </td><td valign="bottom">
Prints a synopsis of standard options.
</td></tr>
<tr valign="top"><td>
<b>-nowarn</b> </td><td valign="bottom">
Disables warning messages. This has the same
meaning as
<b>-Xlint:none</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>-source</b><i> release</i> </td></tr><tr valign="top"><td width=10%>&nbsp;</td><td>
Enables support for compiling source code containing assertions.
The following values for
<i>release</i> are allowed:
</td></tr>
</table>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<!-- ignored unsupported tag .if -->
1.5
</td><td valign="bottom">
he compiler accepts code containing generics and other
language features introduced in JDK 1.5. The compiler
defaults to the 1.5 behavior if the -source flag
is not used.
</td></tr>
<tr valign="top"><td>
<!-- ignored unsupported tag .if -->
5
</td><td valign="bottom">
Synonym for 1.5
</td></tr>
<tr valign="top"><td>
<!-- ignored unsupported tag .if -->
1.4
</td><td valign="bottom">
the compiler accepts code containing assertions, which
were introduced in JDK 1.4.
</td></tr>
<tr valign="top"><td>
<!-- ignored unsupported tag .if -->
1.3
</td><td valign="bottom">
the compiler does not support assertions, generics, or
other language features introduced after JDK 1.3.
</td></tr>
</table>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-sourcepath</b><i> sourcepath</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Specify the source code path to search for class or interface
definitions.
As with the user class path, source path entries
are separated by colons
(<b>:</b>) and can be directories,
<font size="-1">JAR</font> archives, or
<font size="-1">ZIP</font> archives.
If packages are used, the local
path name within the directory or archive must reflect the
package name.
<p>
Note: Classes found through the classpath are subject to
automatic recompilation if their sources are found.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-verbose</b> </td><td valign="bottom">
Verbose output.
This includes information about each class
loaded and each source file compiled.
</td></tr>
<tr valign="top"><td>
<b>-X</b> </td><td valign="bottom">
Display information about non-standard options and exit.
</td></tr>
</table>
</td></tr>
</table>
<h2><i>Cross-Compilation Options</i></h2>
<!-- ignored unsupported tag .IX -->
By default, classes are compiled against the bootstrap and
extension classes of the JDK that
<b>javac</b> shipped with. But
<b>javac</b> also supports cross-compiling, where classes are compiled against
a bootstrap and extension classes of a different Java platform
implementation.
It is important to use
<b>-bootclasspath</b> and
<b>-extdirs</b> when cross-compiling; see
<b><a href=#19>Cross-Compilation Example</a></b> below.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-target</b><i> version</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Generates class files that will work on
<font size="-1">VM</font>s with the specified version.
The default is to generate class files to be
compatible with 1.2
<font size="-1">VM</font>s, with one exception. When the <b>-source</b> 1.4 option is used, the default target is 1.4.
The versions supported by javac are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
1.1
</td><td valign="bottom">
Ensures that generated class files will be compatible
with 1.1 and later.
<font size="-1">VM</font>s. </td></tr>
<tr valign="top"><td>
1.2
</td><td valign="bottom">
Generates class files that will run on 1.2 and later
<font size="-1">VM</font>s, but will not run on 1.1
<font size="-1">VM</font>s. </td></tr>
<tr valign="top"><td>
1.3
</td><td valign="bottom">
Generates class files that run on
<font size="-1">VM</font>s in the Java 2 SDK, v1.3 and later, but
will not run on 1.1 or 1.2
<font size="-1">VM</font>s. </td></tr>
<tr valign="top"><td>
1.4
</td><td valign="bottom">
Generates class files that will run on VMs
in JDK 1.4 and later, but will not run on 1.1, 1.2, or 1.3 VMs.
</td></tr>
<tr valign="top"><td>
1.5
</td><td valign="bottom">
Generate class files that are compatible only with JDK 1.5 VMs.
</td></tr>
<tr valign="top"><td>
5
</td><td valign="bottom">
Synonym for 1.5
</td></tr>
</table>
</td></tr>
<tr valign="top"><td colspan="2">
<b>-bootclasspath</b><i> bootclasspath</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Cross-compiles against the specified set of boot classes.
As with the user class path, boot class path entries are
separated by colons
(<b>:</b>) and can be directories,
<font size="-1">JAR</font> archives, or
<font size="-1">ZIP</font> archives.
</td></tr>
<tr valign="top"><td>
<b>-cldc1.0</b> </td><td valign="bottom">
Use to compile CLDC programs. The compiler generates stack
maps making the use of the preverifier unnecessary.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-extdirs</b><i> directories</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Cross-compiles against the specified extension directories.
Directories are a colon-separated list of directories.
Each
<font size="-1">JAR</font> archive in the specified directories is searched for class files.
</td></tr>
</table>
<h2><i>Non-Standard Options</i></h2>
<!-- ignored unsupported tag .IX -->
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>-Xbootclasspath/p:path</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Prepend to the bootstrap class path.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--Xbootclasspath/a:path</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Append to the bootstrap class path.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xbootclasspath/:path</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Override location of bootstrap class files.
</td></tr>
<tr valign="top"><td>
<b>-Xlint</b> </td><td valign="bottom">
Enable all recommended warnings. In this release,
all available warnings are recommended.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xlint:none</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Disable all warnings not mandated by the Java Language Specification.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xlint:-xxx</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Disable warning xxx, where xxx is one of the warning
names supported for -Xlint:xxx, below
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xlint:unchecked</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Give more detail for unchecked conversion warnings
that are mandated by the Java Language Specification.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xlint:path</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Warn about nonexistent path (classpath, sourcepath, etc) directories.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xlint:serial</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Warn about missing serialVersionUID definitions on serializable classes.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xlint:finally</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Warn about finally clauses that cannot complete normally.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-lint:fallthrough</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Check switch blocks for fall-through cases and provide a
warning message for any that are
found. Fall-through cases are cases in a switch
block, other than the last case in the block,
whose code does not include a break statement,
allowing code execution to "fall through"
from that case to the next case. For example,
the code following the case 1 label in this
switch block does not contain a break statement:
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
switch (x) {
case 1:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   System.out.println("1");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//  No  break;  statement here.
case 2:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   System.out.println("2");
}
</pre></td></tr>
</table>
</b></td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
If the -Xlint:fallthrough flag were used when
compiling this code, the compiler would
emit a warning about "possible fall-through into
case," along with the line number of the
case in question.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xmaxerrors  number</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set the maximum number of errors to print.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-Xmaxwarns  number</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set the maximum number of warnings to print.
<b>-Xstdout  filename</b> Send compiler messages to the named file.
By default, compiler
messages go to
<b>System.err</b>. </td></tr>
</table>
<h1 class="manpages">THE -J OPTION</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-Joption</b> </td><td valign="bottom">
Pass option to the java launcher called by javac.
For example, -J-Xms48m sets the
startup memory to 48 megabytes. Although it does
not begin with -X, it is not a &#145;standard
option&#146; of javac. It is a common convention
for -J to pass options to the underlying VM
executing applications written in Java.
</td></tr>
<!-- LP ends table -->
</table>
Note: CLASSPATH, -classpath, -bootclasspath,
and -extdirs do not specify the
classes used to run javac. Fiddling with the
implementation of the compiler in this way is
usually pointless and always risky. If you
do need to do this, use the -J option to pass
through options to the underlying java launcher.
<h1 class="manpages">COMMAND LINE ARGUMENT FILES</h1>
To shorten or simplify the javac command line, you can
specify one or more files that themselves contain
arguments to the
<b>javac</b> command. This enables
you to create javac commands of any length on any operating
system.
<p>
An argument file can include javac options and source filenames in any
combination.  The arguments within a file can be space-separated or
newline-separated.  Filenames within an argument file are relative to
the current directory, not the location of the argument file.
Wildcards (*) are not allowed in these lists (such as for specifying
<b>*.java</b>). Use of the
<b>@</b> character to recursively
interpret files is not supported. 
<p>
When executing javac, pass in the path and name of each argument
file with the
<b>@</b> leading character.
When javac encounters an argument beginning with
the character
<b>@</b>, it expands the contents of
that file into the argument list.
<h2><i>Example - Single Arg File</i></h2>
You could use a single argument file named
<b>argfile</b> to hold
all javac arguments:
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
  C:&gt; javac @argfile
</pre></td></tr>
</table>
</b><p>
This argument file could contain the contents of both files shown
in the next example.
<h2><i>Example - Two Arg Files</i></h2>
You can create two argument files -- one for the javac
options and the other for the source filenames:
(Notice the following lists have no line-continuation characters.)
<p>
Create a file named
<b>options</b> containing:
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
-d classes
-g
-sourcepath \java\pubs\ws\1.3\src\share\classes
</pre></td></tr>
</table>
</b><table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
Create a file named
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
<b>classes</b> containing:
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
MyClass1.java
MyClass2.java
MyClass3.java
</pre></td></tr>
</table>
</b></td></tr>
<tr valign="top"><td colspan="2">
<!-- Suppressing TP body due to .LP -->
You would then run javac with:
<p>
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
% javac @options @classes
</pre></td></tr>
</table>
</b></td></tr>
</table>
<h2><i>Example - Arg Files with Paths</i></h2>
The argument files can have paths, but any filenames inside
the files are relative to the current working directory (not
<b>path1</b> or
<b>path2</b>): <p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
% javac @path1/options @path2/classes
</pre></td></tr>
</table>
</b><h1 class="manpages">EXAMPLES</h1>
<h2><i>Compiling a Simple Program</i></h2>
<!-- ignored unsupported tag .IX -->
One source file,
<b>Hello.java</b>, defines a class called
<b>greetings.Hello</b>. The greetings directory is the package directory
both for the source file and the class file and is off the current
directory.
This allows us to use the default user class path. It
also makes it unnecessary to specify a separate destination
directory with
<b>-d</b>. <p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   % ls
      greetings/
   % ls greetings
      Hello.java
   % cat greetings/Hello.java
      package greetings;
  
      public class Hello {
           public static void main(String[] args) {
              for (int i=0; i &lt; args.length; i++) {
                  System.out.println("Hello " + args[i]);
              }
           }
      }
   % javac greetings/Hello.java
   % ls greetings
      Hello.class   Hello.java
   % java greetings.Hello World Universe Everyone
      Hello World
      Hello Universe
      Hello Everyone
</pre></td></tr>
</table>
</b><h2><i>Compiling Multiple Source Files</i></h2>
<!-- ignored unsupported tag .IX -->
This example compiles all the source files in the package
greetings.
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   % ls
      greetings/
   % ls greetings
      Aloha.java     GutenTag.java     Hello.java      Hi.java
   % javac greetings/*.java
   % ls greetings
      Aloha.class    GutenTag.class    Hello.class     Hi.class
      Aloha.java     GutenTag.java     Hello.java      Hi.java
</pre></td></tr>
</table>
</b><h2><i>Specifying a User Class Path</i></h2>
<!-- ignored unsupported tag .IX -->
Having changed one of the source files in the previous example, we
recompile it:
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   % pwd
      /examples
   % javac greetings/Hi.java
</pre></td></tr>
</table>
</b><p>
Since
<b>greetings.Hi</b> refers to other classes in the greetings
package, the compiler needs to find these other classes.
The example above works, because our default user class path happens
to be the directory containing the package directory.
But suppose
we want to recompile this file and not worry about which directory
we&#146;re in?
Then we need to add
<b>/examples</b> to the user class path.
We can do this by setting <font size="-1"><b>CLASSPATH</b></font><b></b>, but here we&#146;ll use the
<b>-classpath</b> option.
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   % javac -classpath \examples /examples/greetings/Hi.java
</pre></td></tr>
</table>
</b><p>
If we change
<b>greetings.Hi</b> again, to use a banner utility, that
utility also needs to be accessible through the user class path.
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   % javac -classpath /examples:/lib/Banners.jar \
                     /examples/greetings/Hi.java
</pre></td></tr>
</table>
</b><p>
To execute a class in greetings, we need access both to greetings
and to the classes it uses.
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   % java -classpath /examples:/lib/Banners.jar greetings.Hi
</pre></td></tr>
</table>
</b><h2><i>Separating Source Files and Class Files</i></h2>
<!-- ignored unsupported tag .IX -->
It often makes sense to keep source files and class files in
separate directories, especially on large projects.
We use
<b>-d</b> to indicate the separate class file destination.
Since the source files are not in the user class path, we use
<b>-sourcepath</b> to help the compiler find them.
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   % ls
      classes/  lib/      src/
   % ls src
      farewells/
   % ls src/farewells
      Base.java      GoodBye.java
   % ls lib
      Banners.jar
   % ls classes
   % javac -sourcepath src -classpath classes:lib/Banners.jar \
      src/farewells/GoodBye.java -d classes
   % ls classes
      farewells/
   % ls classes/farewells
      Base.class      GoodBye.class
</pre></td></tr>
</table>
</b><p>
Note: The compiler compiled src/farewells/Base.java, even
though we didn&#146;t specify it on the command line.
To trace automatic compiles, use the
<b>-verbose</b> option.
<h2><i>Cross-Compilation Example</i></h2>
<!-- ignored unsupported tag .IX -->
Here we use 
<b>javac</b> to compile code that will run on a 1.4
<font size="-1">VM</font>. <p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   % javac -target 1.4 -bootclasspath jdk1.4.2/lib/classes.zip \
        -extdirs "" OldCode.java
</pre></td></tr>
</table>
</b><p>
The
<b>-target 1.4</b> option ensures that the generated class files will
be compatible with 1.4
<font size="-1">VM</font>s. BY default,
<b>javac</b> compiles for 1.5.
<p>
The Java 2 SDk&#146;s
<b>javac</b> would also by default compile against its own
bootstrap classes, so we need to tell
<b>javac</b> to compile against
JDK 1.4 bootstrap classes instead.
We do this with
<b>-bootclasspath</b> and
<b>-extdirs</b>. Failing to do this might allow compilation against a
Java 2 Platform
<font size="-1">API</font> that would not be present on a 1.4
<font size="-1">VM</font> and would fail at runtime.
<!-- ignored unsupported tag .ne -->
<h1 class="manpages">SEE ALSO</h1>
<ul>
<li><p><a href="jar.html">jar (1)</a></p></li>
<li><p><a href="java.htm">java (1)</a></p></li>
<li><p><a href="javadoc.htm">javadoc (1)</a></p></li>
<li><p><a href="javah.htm">javah (1)</a></p></li>
<li><p><a href="javap.htm">javap (1)</a></p></li>
<li><p><a href="jdb.htm">jdb (1)</a></p></li>
</ul>
See or search the Java web site for the following:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>The Java Extensions Mechanism @</b> </td></tr><tr valign="top"><td width=10%>&nbsp;</td><td>
<a href="http://java.sun.com/j2se/1.5/docs/guide/extensions/index.html">http://java.sun.com/j2se/1.5/docs/guide/extensions/index.html</a>
<p>
</td></tr>
</table>
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversionb2e0.html?tutorial=unix_commands&amp;file=javac.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/javac.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:50 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
