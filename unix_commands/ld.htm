<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/ld.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>ld - Unix, Linux Command</title>
<meta name="Description" Content="ld - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>ld - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<!-- Not defining reserved macro 'Sh' ! -->
<!-- ignored unsupported tag .tr -->
<!-- ignored unsupported tag .ie -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .br\} -->
<!-- ignored unsupported tag .el\{ -->
<!-- ignored unsupported tag .br\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .rr -->
<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .hy -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->

<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->

<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->

<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .tm -->
<h1 class="manpages">NAME</h1>
ld - The GNU linker
<h1 class="manpages">SYNOPSIS</h1>
<!-- ignored unsupported tag .tm -->
ld [<b>options</b>] <i>objfile</i> ...
<h1 class="manpages">DESCRIPTION</h1>
<!-- ignored unsupported tag .tm -->
<b>ld</b> combines a number of object and archive files, relocates
their data and ties up symbol references. Usually the last step in
compiling a program is to run <b>ld</b>.
<p>
<b>ld</b> accepts Linker Command Language files written in
a superset of <font size="-1">AT&T</font>&#146;s Link Editor Command Language syntax,
to provide explicit and total control over the linking process.
<p>
This man page does not describe the command language; see the
<b>ld</b> entry in <tt>info</tt> for full details on the command
language and on other aspects of the <font size="-1">GNU</font> linker.
<p>
This version of <b>ld</b> uses the general purpose <font size="-1">BFD</font> libraries
to operate on object files. This allows <b>ld</b> to read, combine, and
write object files in many different formats---for example, <font size="-1">COFF</font> or
<tt>a.out</tt>.  Different formats may be linked together to produce any
available kind of object file. 
<p>
Aside from its flexibility, the <font size="-1">GNU</font> linker is more helpful than other
linkers in providing diagnostic information.  Many linkers abandon
execution immediately upon encountering an error; whenever possible,
<b>ld</b> continues executing, allowing you to identify other errors
(or, in some cases, to get an output file in spite of the error).
<p>
The <font size="-1">GNU</font> linker <b>ld</b> is meant to cover a broad range of situations,
and to be as compatible as possible with other linkers.  As a result,
you have many choices to control its behavior.
<h1 class="manpages">OPTIONS</h1>
<!-- ignored unsupported tag .tm -->
The linker supports a plethora of command-line options, but in actual
practice few of them are used in any particular context.
For instance, a frequent use of <b>ld</b> is to link standard Unix
object files on a standard, supported Unix system.  On such a system, to
link a file <tt>hello.o</tt>:
<p>
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        ld -o &lt;output&gt; /lib/crt0.o hello.o -lc
</tt></pre></td></tr>
</table>
<p>
This tells <b>ld</b> to produce a file called <i>output</i> as the
result of linking the file <tt>/lib/crt0.o</tt> with <tt>hello.o</tt> and
the library <tt>libc.a</tt>, which will come from the standard search
directories.  (See the discussion of the <b>-l</b> option below.)
<p>
Some of the command-line options to <b>ld</b> may be specified at any
point in the command line.  However, options which refer to files, such
as <b>-l</b> or <b>-T</b>, cause the file to be read at the point at
which the option appears in the command line, relative to the object
files and other file options.  Repeating non-file options with a
different argument will either have no further effect, or override prior
occurrences (those further to the left on the command line) of that
option.  Options which may be meaningfully specified more than once are
noted in the descriptions below.
<p>
Non-option arguments are object files or archives which are to be linked
together.  They may follow, precede, or be mixed in with command-line
options, except that an object file argument may not be placed between
an option and its argument.
<p>
Usually the linker is invoked with at least one object file, but you can
specify other forms of binary input files using <b>-l</b>, <b>-R</b>,
and the script command language.  If <i>no</i> binary input files at all
are specified, the linker does not produce any output, and issues the
message <b>No input files</b>.
<p>
If the linker cannot recognize the format of an object file, it will
assume that it is a linker script.  A script specified in this way
augments the main linker script used for the link (either the default
linker script or the one specified by using <b>-T</b>).  This feature
permits the linker to link against a file which appears to be an object
or an archive, but actually merely defines some symbol values, or uses
<tt>INPUT</tt> or <tt>GROUP</tt> to load other objects.  Note that
specifying a script in this way merely augments the main linker script;
use the <b>-T</b> option to replace the default linker script entirely.
<p>
For options whose names are a single letter,
option arguments must either follow the option letter without intervening
whitespace, or be given as separate arguments immediately following the
option that requires them.
<p>
For options whose names are multiple letters, either one dash or two can
precede the option name; for example, <b>-trace-symbol</b> and
<b>--trace-symbol</b> are equivalent.  Note---there is one exception to
this rule.  Multiple letter options that start with a lower case &#146;o&#146; can
only be preceded by two dashes.  This is to reduce confusion with the
<b>-o</b> option.  So for example <b>-omagic</b> sets the output file
name to <b>magic</b> whereas <b>--omagic</b> sets the <font size="-1">NMAGIC</font> flag on the
output.
<p>
Arguments to multiple-letter options must either be separated from the
option name by an equals sign, or be given as separate arguments
immediately following the option that requires them.  For example,
<b>--trace-symbol foo</b> and <b>--trace-symbol=foo</b> are equivalent.
Unique abbreviations of the names of multiple-letter options are
accepted.
<p>
Note---if the linker is being invoked indirectly, via a compiler driver
(e.g. <b>gcc</b>) then all the linker command line options should be
prefixed by <b>-Wl,</b> (or whatever is appropriate for the particular
compiler driver) like this:
<p>
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
          gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup
</tt></pre></td></tr>
</table>
<p>
This is important, because otherwise the compiler driver program may
silently drop the linker options, resulting in a bad link.
<p>
Here is a table of the generic command line switches accepted by the <font size="-1">GNU</font>
linker:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>@</b><i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Read command-line options from <i>file</i>.  The options read are
inserted in place of the original @<i>file</i> option.  If <i>file</i>
does not exist, or cannot be read, then the option will be treated
literally, and not removed. 
<p>
<!-- ignored unsupported tag .if -->
Options in <i>file</i> are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The <i>file</i> may itself contain additional
@<i>file</i> options; any such options will be processed recursively.
</td></tr>
<tr valign="top"><td width=4%>
<b>-a</b><i>keyword</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is supported for <font size="-1">HP/UX</font> compatibility.  The <i>keyword</i>
argument must be one of the strings <b>archive</b>, <b>shared</b>, or
<b>default</b>.  <b>-aarchive</b> is functionally equivalent to
<b>-Bstatic</b>, and the other two keywords are functionally equivalent
to <b>-Bdynamic</b>.  This option may be used any number of times.
</td></tr>
<tr valign="top"><td width=4%>
<b>-A</b><i>architecture</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--architecture=</b><i>architecture</i>
</td><td>
<!-- ignored unsupported tag .tm -->
In the current release of <b>ld</b>, this option is useful only for the
Intel 960 family of architectures.  In that <b>ld</b> configuration, the
<i>architecture</i> argument identifies the particular architecture in
the 960 family, enabling some safeguards and modifying the
archive-library search path. 
<p>
<!-- ignored unsupported tag .if -->
Future releases of <b>ld</b> may support similar functionality for
other architecture families.
</td></tr>
<tr valign="top"><td width=4%>
<b>-b</b> <i>input-format</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--format=</b><i>input-format</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>ld</b> may be configured to support more than one kind of object
file.  If your <b>ld</b> is configured this way, you can use the
<b>-b</b> option to specify the binary format for input object files
that follow this option on the command line.  Even when <b>ld</b> is
configured to support alternative object formats, you don&#146;t usually need
to specify this, as <b>ld</b> should be configured to expect as a
default input format the most usual format on each machine.
<i>input-format</i> is a text string, the name of a particular format
supported by the <font size="-1">BFD</font> libraries.  (You can list the available binary
formats with <b>objdump -i</b>.)
<p>
<!-- ignored unsupported tag .if -->
You may want to use this option if you are linking files with an unusual
binary format.  You can also use <b>-b</b> to switch formats explicitly (when
linking object files of different formats), by including
<b>-b</b> <i>input-format</i> before each group of object files in a
particular format.
<p>
<!-- ignored unsupported tag .if -->
The default format is taken from the environment variable
<tt>GNUTARGET</tt>.
<p>
<!-- ignored unsupported tag .if -->
You can also define the input format from a script, using the command
<tt>TARGET</tt>;
</td></tr>
<tr valign="top"><td width=4%>
<b>-c</b> <i>MRI-commandfile</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--mri-script=</b><i>MRI-commandfile</i>
</td><td>
<!-- ignored unsupported tag .tm -->
For compatibility with linkers produced by <font size="-1">MRI</font>, <b>ld</b> accepts script
files written in an alternate, restricted command language, described in
the <font size="-1">MRI</font> Compatible Script Files section of <font size="-1">GNU</font> ld documentation.
Introduce <font size="-1">MRI</font> script files with
the option <b>-c</b>; use the <b>-T</b> option to run linker
scripts written in the general-purpose <b>ld</b> scripting language.
If <i>MRI-cmdfile</i> does not exist, <b>ld</b> looks for it in the directories
specified by any <b>-L</b> options.
</td></tr>
<tr valign="top"><td width=4%>
<b>-d</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These three options are equivalent; multiple forms are supported for
compatibility with other linkers.  They assign space to common symbols
even if a relocatable output file is specified (with <b>-r</b>).  The
script command <tt>FORCE_COMMON_ALLOCATION</tt> has the same effect.
</td></tr>
<tr valign="top"><td width=4%>
<b>-e</b> <i>entry</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--entry=</b><i>entry</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <i>entry</i> as the explicit symbol for beginning execution of your
program, rather than the default entry point.  If there is no symbol
named <i>entry</i>, the linker will try to parse <i>entry</i> as a number,
and use that as the entry address (the number will be interpreted in
base 10; you may use a leading <b>0x</b> for base 16, or a leading
<b>0</b> for base 8). 
</td></tr>
<tr valign="top"><td width=4%>
<b>--exclude-libs</b> <i>lib</i><b>,</b><i>lib</i><b>,...</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
<tt>--exclude-libs ALL</tt> excludes symbols in all archive libraries from
automatic export.  This option is available only for the i386 <font size="-1">PE</font> targeted
port of the linker and for <font size="-1">ELF</font> targeted ports.  For i386 <font size="-1">PE</font>, symbols
explicitly listed in a .def file are still exported, regardless of this
option.  For <font size="-1">ELF</font> targeted ports, symbols affected by this option will
be treated as hidden.
</td></tr>
<tr valign="top"><td width=4%>
<b>-E</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--export-dynamic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When creating a dynamically linked executable, add all symbols to the
dynamic symbol table.  The dynamic symbol table is the set of symbols
which are visible from dynamic objects at run time.
<p>
<!-- ignored unsupported tag .if -->
If you do not use this option, the dynamic symbol table will normally
contain only those symbols which are referenced by some dynamic object
mentioned in the link.
<p>
<!-- ignored unsupported tag .if -->
If you use <tt>dlopen</tt> to load a dynamic object which needs to refer
back to the symbols defined by the program, rather than some other
dynamic object, then you will probably need to use this option when
linking the program itself.
<p>
<!-- ignored unsupported tag .if -->
You can also use the dynamic list to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of <b>--dynamic-list</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-EB</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Link big-endian objects.  This affects the default output format.
</td></tr>
<tr valign="top"><td width=4%>
<b>-EL</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Link little-endian objects.  This affects the default output format.
</td></tr>
<tr valign="top"><td width=4%>
<b>-f</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--auxiliary</b> <i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
When creating an <font size="-1">ELF</font> shared object, set the internal <font size="-1">DT_AUXILIARY</font> field
to the specified name.  This tells the dynamic linker that the symbol
table of the shared object should be used as an auxiliary filter on the
symbol table of the shared object <i>name</i>.
<p>
<!-- ignored unsupported tag .if -->
If you later link a program against this filter object, then, when you
run the program, the dynamic linker will see the <font size="-1">DT_AUXILIARY</font> field.  If
the dynamic linker resolves any symbols from the filter object, it will
first check whether there is a definition in the shared object
<i>name</i>.  If there is one, it will be used instead of the definition
in the filter object.  The shared object <i>name</i> need not exist.
Thus the shared object <i>name</i> may be used to provide an alternative
implementation of certain functions, perhaps for debugging or for
machine specific performance.
<p>
<!-- ignored unsupported tag .if -->
This option may be specified more than once.  The <font size="-1">DT_AUXILIARY</font> entries
will be created in the order in which they appear on the command line.
</td></tr>
<tr valign="top"><td width=4%>
<b>-F</b> <i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--filter</b> <i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
When creating an <font size="-1">ELF</font> shared object, set the internal <font size="-1">DT_FILTER</font> field to
the specified name.  This tells the dynamic linker that the symbol table
of the shared object which is being created should be used as a filter
on the symbol table of the shared object <i>name</i>.
<p>
<!-- ignored unsupported tag .if -->
If you later link a program against this filter object, then, when you
run the program, the dynamic linker will see the <font size="-1">DT_FILTER</font> field.  The
dynamic linker will resolve symbols according to the symbol table of the
filter object as usual, but it will actually link to the definitions
found in the shared object <i>name</i>.  Thus the filter object can be
used to select a subset of the symbols provided by the object
<i>name</i>.
<p>
<!-- ignored unsupported tag .if -->
Some older linkers used the <b>-F</b> option throughout a compilation
toolchain for specifying object-file format for both input and output
object files.
The <font size="-1">GNU</font> linker uses other mechanisms for this purpose: the
<b>-b</b>, <b>--format</b>, <b>--oformat</b> options, the
<tt>TARGET</tt> command in linker scripts, and the <tt>GNUTARGET</tt>
environment variable.
The <font size="-1">GNU</font> linker will ignore the <b>-F</b> option when not
creating an <font size="-1">ELF</font> shared object.
</td></tr>
<tr valign="top"><td width=4%>
<b>-fini</b> <i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
When creating an <font size="-1">ELF</font> executable or shared object, call <font size="-1">NAME</font> when the
executable or shared object is unloaded, by setting <font size="-1">DT_FINI</font> to the
address of the function.  By default, the linker uses <tt>_fini</tt> as
the function to call.
</td></tr>
<tr valign="top"><td width=4%>
<b>-g</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Ignored.  Provided for compatibility with other tools.
</td></tr>
<tr valign="top"><td width=4%>
<b>-G</b><i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--gpsize=</b><i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the maximum size of objects to be optimized using the <font size="-1">GP</font> register to
<i>size</i>.  This is only meaningful for object file formats such as
<font size="-1">MIPS</font> <font size="-1">ECOFF</font> which supports putting large and small objects into different
sections.  This is ignored for other object file formats.
</td></tr>
<tr valign="top"><td width=4%>
<b>-h</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-soname=</b><i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
When creating an <font size="-1">ELF</font> shared object, set the internal <font size="-1">DT_SONAME</font> field to
the specified name.  When an executable is linked with a shared object
which has a <font size="-1">DT_SONAME</font> field, then when the executable is run the dynamic
linker will attempt to load the shared object specified by the <font size="-1">DT_SONAME</font>
field rather than the using the file name given to the linker.
</td></tr>
<tr valign="top"><td width=4%>
<b>-i</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Perform an incremental link (same as option <b>-r</b>).
</td></tr>
<tr valign="top"><td width=4%>
<b>-init</b> <i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
When creating an <font size="-1">ELF</font> executable or shared object, call <font size="-1">NAME</font> when the
executable or shared object is loaded, by setting <font size="-1">DT_INIT</font> to the address
of the function.  By default, the linker uses <tt>_init</tt> as the
function to call.
</td></tr>
<tr valign="top"><td width=4%>
<b>-l</b><i>archive</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--library=</b><i>archive</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add archive file <i>archive</i> to the list of files to link.  This
option may be used any number of times.  <b>ld</b> will search its
path-list for occurrences of <tt>lib</tt><tt>archive</tt><tt>.a</tt> for every
<i>archive</i> specified.
<p>
<!-- ignored unsupported tag .if -->
On systems which support shared libraries, <b>ld</b> may also search for
libraries with extensions other than <tt>.a</tt>.  Specifically, on <font size="-1">ELF</font>
and SunOS systems, <b>ld</b> will search a directory for a library with
an extension of <tt>.so</tt> before searching for one with an extension of
<tt>.a</tt>.  By convention, a <tt>.so</tt> extension indicates a shared
library.
<p>
<!-- ignored unsupported tag .if -->
The linker will search an archive only once, at the location where it is
specified on the command line.  If the archive defines a symbol which
was undefined in some object which appeared before the archive on the
command line, the linker will include the appropriate file(s) from the
archive.  However, an undefined symbol in an object appearing later on
the command line will not cause the linker to search the archive again.
<p>
<!-- ignored unsupported tag .if -->
See the <b>-(</b> option for a way to force the linker to search
archives multiple times.
<p>
<!-- ignored unsupported tag .if -->
You may list the same archive multiple times on the command line.
<p>
<!-- ignored unsupported tag .if -->
This type of archive searching is standard for Unix linkers.  However,
if you are using <b>ld</b> on <font size="-1">AIX</font>, note that it is different from the
behaviour of the <font size="-1">AIX</font> linker.
</td></tr>
<tr valign="top"><td width=4%>
<b>-L</b><i>searchdir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--library-path=</b><i>searchdir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add path <i>searchdir</i> to the list of paths that <b>ld</b> will search
for archive libraries and <b>ld</b> control scripts.  You may use this
option any number of times.  The directories are searched in the order
in which they are specified on the command line.  Directories specified
on the command line are searched before the default directories.  All
<b>-L</b> options apply to all <b>-l</b> options, regardless of the
order in which the options appear.
<p>
<!-- ignored unsupported tag .if -->
If <i>searchdir</i> begins with <tt>=</tt>, then the <tt>=</tt> will be replaced
by the <i>sysroot prefix</i>, a path specified when the linker is configured.
<p>
<!-- ignored unsupported tag .if -->
The default set of paths searched (without being specified with
<b>-L</b>) depends on which emulation mode <b>ld</b> is using, and in
some cases also on how it was configured. 
<p>
<!-- ignored unsupported tag .if -->
The paths can also be specified in a link script with the
<tt>SEARCH_DIR</tt> command.  Directories specified this way are searched
at the point in which the linker script appears in the command line.
</td></tr>
<tr valign="top"><td width=4%>
<b>-m</b><i>emulation</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Emulate the <i>emulation</i> linker.  You can list the available
emulations with the <b>--verbose</b> or <b>-V</b> options.
<p>
<!-- ignored unsupported tag .if -->
If the <b>-m</b> option is not used, the emulation is taken from the
<tt>LDEMULATION</tt> environment variable, if that is defined.
<p>
<!-- ignored unsupported tag .if -->
Otherwise, the default emulation depends upon how the linker was
configured.
</td></tr>
<tr valign="top"><td width=4%>
<b>-M</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--print-map</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print a link map to the standard output.  A link map provides
information about the link, including the following:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
*
</td><td>
Where object files are mapped into memory.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
How common symbols are allocated.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
All archive members included in the link, with a mention of the symbol
which caused the archive member to be brought in.
</td></tr>
<tr valign="top"><td width=4%>
*
</td><td>
The values assigned to symbols.
<p>
<!-- ignored unsupported tag .if -->
Note - symbols whose values are computed by an expression which
involves a reference to a previous value of the same symbol may not
have correct result displayed in the link map.  This is because the
linker discards intermediate results and only retains the final value
of an expression.  Under such circumstances the linker will display
the final value enclosed by square brackets.  Thus for example a
linker script containing:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
           foo = 1
           foo = foo * 4
           foo = foo + 8
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
will produce the following output in the link map if the <b>-M</b>
option is used:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
           0x00000001                foo = 0x1
           [0x0000000c]                foo = (foo * 0x4)
           [0x0000000c]                foo = (foo + 0x8)
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
See <b>Expressions</b> for more information about expressions in linker
scripts.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>-n</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--nmagic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Turn off page alignment of sections, and mark the output as
<tt>NMAGIC</tt> if possible.
</td></tr>
<tr valign="top"><td width=4%>
<b>-N</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--omagic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the text and data sections to be readable and writable.  Also, do
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as <tt>OMAGIC</tt>. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-omagic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option negates most of the effects of the <b>-N</b> option.  It
sets the text section to be read-only, and forces the data segment to
be page-aligned.  Note - this option does not enable linking against
shared libraries.  Use <b>-Bdynamic</b> for this.
</td></tr>
<tr valign="top"><td width=4%>
<b>-o</b> <i>output</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--output=</b><i>output</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <i>output</i> as the name for the program produced by <b>ld</b>; if this
option is not specified, the name <i>a.out</i> is used by default.  The
script command <tt>OUTPUT</tt> can also specify the output file name.
</td></tr>
<tr valign="top"><td width=4%>
<b>-O</b> <i>level</i>
</td><td>
<!-- ignored unsupported tag .tm -->
If <i>level</i> is a numeric values greater than zero <b>ld</b> optimizes
the output.  This might take significantly longer and therefore probably
should only be enabled for the final binary.
</td></tr>
<tr valign="top"><td width=4%>
<b>-q</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--emit-relocs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Leave relocation sections and contents in fully linked executables.
Post link analysis and optimization tools may need this information in
order to perform correct modifications of executables.  This results
in larger executables.
<p>
<!-- ignored unsupported tag .if -->
This option is currently only supported on <font size="-1">ELF</font> platforms.
</td></tr>
<tr valign="top"><td width=4%>
<b>--force-dynamic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Force the output file to have dynamic sections.  This option is specific
to VxWorks targets.
</td></tr>
<tr valign="top"><td width=4%>
<b>-r</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--relocatable</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Generate relocatable output---i.e., generate an output file that can in
turn serve as input to <b>ld</b>.  This is often called <i>partial
linking</i>.  As a side effect, in environments that support standard Unix
magic numbers, this option also sets the output file&#146;s magic number to
<tt>OMAGIC</tt>.
If this option is not specified, an absolute file is produced.  When
linking C<font size="-2">++</font> programs, this option <i>will not</i> resolve references to
constructors; to do that, use <b>-Ur</b>.
<p>
<!-- ignored unsupported tag .if -->
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some <tt>a.out</tt>-based formats do not support partial linking
with input files in other formats at all.
<p>
<!-- ignored unsupported tag .if -->
This option does the same thing as <b>-i</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-R</b> <i>filename</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--just-symbols=</b><i>filename</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Read symbol names and their addresses from <i>filename</i>, but do not
relocate it or include it in the output.  This allows your output file
to refer symbolically to absolute locations of memory defined in other
programs.  You may use this option more than once.
<p>
<!-- ignored unsupported tag .if -->
For compatibility with other <font size="-1">ELF</font> linkers, if the <b>-R</b> option is
followed by a directory name, rather than a file name, it is treated as
the <b>-rpath</b> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-s</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--strip-all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Omit all symbol information from the output file.
</td></tr>
<tr valign="top"><td width=4%>
<b>-S</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--strip-debug</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Omit debugger symbol information (but not all symbols) from the output file.
</td></tr>
<tr valign="top"><td width=4%>
<b>-t</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--trace</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the names of the input files as <b>ld</b> processes them.
</td></tr>
<tr valign="top"><td width=4%>
<b>-T</b> <i>scriptfile</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--script=</b><i>scriptfile</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <i>scriptfile</i> as the linker script.  This script replaces
<b>ld</b>&#146;s default linker script (rather than adding to it), so
<i>commandfile</i> must specify everything necessary to describe the
output file.    If <i>scriptfile</i> does not exist in
the current directory, <tt>ld</tt> looks for it in the directories
specified by any preceding <b>-L</b> options.  Multiple <b>-T</b>
options accumulate.
</td></tr>
<tr valign="top"><td width=4%>
<b>-u</b> <i>symbol</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--undefined=</b><i>symbol</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Force <i>symbol</i> to be entered in the output file as an undefined
symbol.  Doing this may, for example, trigger linking of additional
modules from standard libraries.  <b>-u</b> may be repeated with
different option arguments to enter additional undefined symbols.  This
option is equivalent to the <tt>EXTERN</tt> linker script command.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Ur</b>
</td><td>
<!-- ignored unsupported tag .tm -->
For anything other than C<font size="-2">++</font> programs, this option is equivalent to
<b>-r</b>: it generates relocatable output---i.e., an output file that can in
turn serve as input to <b>ld</b>.  When linking C<font size="-2">++</font> programs, <b>-Ur</b>
<i>does</i> resolve references to constructors, unlike <b>-r</b>.
It does not work to use <b>-Ur</b> on files that were themselves linked
with <b>-Ur</b>; once the constructor table has been built, it cannot
be added to.  Use <b>-Ur</b> only for the last partial link, and
<b>-r</b> for the others.
</td></tr>
<tr valign="top"><td width=4%>
<b>--unique[=</b><i><font size="-1">SECTION</font></i><b>]</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Creates a separate output section for every input section matching
<i><font size="-1">SECTION</font></i>, or if the optional wildcard <i><font size="-1">SECTION</font></i> argument is
missing, for every orphan input section.  An orphan section is one not
specifically mentioned in a linker script.  You may use this option
multiple times on the command line;  It prevents the normal merging of
input sections with the same name, overriding output section assignments
in a linker script.
</td></tr>
<tr valign="top"><td width=4%>
<b>-v</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--version</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-V</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Display the version number for <b>ld</b>.  The <b>-V</b> option also
lists the supported emulations.
</td></tr>
<tr valign="top"><td width=4%>
<b>-x</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--discard-all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Delete all local symbols.
</td></tr>
<tr valign="top"><td width=4%>
<b>-X</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--discard-locals</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Delete all temporary local symbols.  (These symbols start with
system-specific local label prefixes, typically <b>.L</b> for <font size="-1">ELF</font> systems
or <b>L</b> for traditional a.out systems.)
</td></tr>
<tr valign="top"><td width=4%>
<b>-y</b> <i>symbol</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--trace-symbol=</b><i>symbol</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Print the name of each linked file in which <i>symbol</i> appears.  This
option may be given any number of times.  On many systems it is necessary
to prepend an underscore.
<p>
<!-- ignored unsupported tag .if -->
This option is useful when you have an undefined symbol in your link but
don&#146;t know where the reference is coming from.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Y</b> <i>path</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add <i>path</i> to the default library search path.  This option exists
for Solaris compatibility.
</td></tr>
<tr valign="top"><td width=4%>
<b>-z</b> <i>keyword</i>
</td><td>
<!-- ignored unsupported tag .tm -->
The recognized keywords are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>combreloc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.
</td></tr>
<tr valign="top"><td width=4%>
<b>defs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.
</td></tr>
<tr valign="top"><td width=4%>
<b>execstack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks the object as requiring executable stack.
</td></tr>
<tr valign="top"><td width=4%>
<b>initfirst</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.
</td></tr>
<tr valign="top"><td width=4%>
<b>interpose</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks the object that its symbol table interposes before all symbols
but the primary executable.
</td></tr>
<tr valign="top"><td width=4%>
<b>lazy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When generating an executable or shared library, mark it to tell the
dynamic linker to defer function call resolution to the point when
the function is called (lazy binding), rather than at load time.
Lazy binding is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>loadfltr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks  the object that its filters be processed immediately at
runtime.
</td></tr>
<tr valign="top"><td width=4%>
<b>muldefs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allows multiple definitions.
</td></tr>
<tr valign="top"><td width=4%>
<b>nocombreloc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disables multiple reloc sections combining.
</td></tr>
<tr valign="top"><td width=4%>
<b>nocopyreloc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Disables production of copy relocs.
</td></tr>
<tr valign="top"><td width=4%>
<b>nodefaultlib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks the object that the search for dependencies of this object will
ignore any default library search paths.
</td></tr>
<tr valign="top"><td width=4%>
<b>nodelete</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks the object shouldn&#146;t be unloaded at runtime.
</td></tr>
<tr valign="top"><td width=4%>
<b>nodlopen</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks the object not available to <tt>dlopen</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>nodump</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks the object can not be dumped by <tt>dldump</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>noexecstack</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks the object as not requiring executable stack.
</td></tr>
<tr valign="top"><td width=4%>
<b>norelro</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Don&#146;t create an <font size="-1">ELF</font> <tt>PT_GNU_RELRO</tt> segment header in the object.
</td></tr>
<tr valign="top"><td width=4%>
<b>now</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.
</td></tr>
<tr valign="top"><td width=4%>
<b>origin</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Marks the object may contain <tt>$ORIGIN</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>relro</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Create an <font size="-1">ELF</font> <tt>PT_GNU_RELRO</tt> segment header in the object.
</td></tr>
<tr valign="top"><td width=4%>
<b>max-page-size=</b><i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the emulation maximum page size to <i>value</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>common-page-size=</b><i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the emulation common page size to <i>value</i>.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Other keywords are ignored for Solaris compatibility.
</td></tr>
<tr valign="top"><td width=4%>
<b>-(</b> <i>archives</i> <b>-)</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--start-group</b> <i>archives</i> <b>--end-group</b>
</td><td>
<!-- ignored unsupported tag .tm -->
The <i>archives</i> should be a list of archive files.  They may be
either explicit file names, or <b>-l</b> options.
<p>
<!-- ignored unsupported tag .if -->
The specified archives are searched repeatedly until no new undefined
references are created.  Normally, an archive is searched only once in
the order that it is specified on the command line.  If a symbol in that
archive is needed to resolve an undefined symbol referred to by an
object in an archive that appears later on the command line, the linker
would not be able to resolve that reference.  By grouping the archives,
they all be searched repeatedly until all possible references are
resolved.
<p>
<!-- ignored unsupported tag .if -->
Using this option has a significant performance cost.  It is best to use
it only when there are unavoidable circular references between two or
more archives.
</td></tr>
<tr valign="top"><td width=4%>
<b>--accept-unknown-input-arch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-accept-unknown-input-arch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the <b>--accept-unknown-input-arch</b> option has been added to
restore the old behaviour.
</td></tr>
<tr valign="top"><td width=4%>
<b>--as-needed</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-as-needed</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option affects <font size="-1">ELF</font> <font size="-1">DT_NEEDED</font> tags for dynamic libraries mentioned
on the command line after the <b>--as-needed</b> option.  Normally,
the linker will add a <font size="-1">DT_NEEDED</font> tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed.  <b>--as-needed</b> causes <font size="-1">DT_NEEDED</font> tags to only be emitted
for libraries that satisfy some symbol reference from regular objects
which is undefined at the point that the library was linked.
<b>--no-as-needed</b> restores the default behaviour.
</td></tr>
<tr valign="top"><td width=4%>
<b>--add-needed</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-add-needed</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option affects the treatment of dynamic libraries from <font size="-1">ELF</font>
<font size="-1">DT_NEEDED</font> tags in dynamic libraries mentioned on the command line after
the <b>--no-add-needed</b> option.  Normally, the linker will add
a <font size="-1">DT_NEEDED</font> tag for each dynamic library from <font size="-1">DT_NEEDED</font> tags.
<b>--no-add-needed</b> causes <font size="-1">DT_NEEDED</font> tags will never be emitted
for those libraries from <font size="-1">DT_NEEDED</font> tags. <b>--add-needed</b> restores
the default behaviour.
</td></tr>
<tr valign="top"><td width=4%>
<b>-assert</b> <i>keyword</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is ignored for SunOS compatibility.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Bdynamic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-call_shared</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Link against dynamic libraries.  This is only meaningful on platforms
for which shared libraries are supported.  This option is normally the
default on such platforms.  The different variants of this option are
for compatibility with various systems.  You may use this option
multiple times on the command line: it affects library searching for
<b>-l</b> options which follow it.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Bgroup</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the <tt>DF_1_GROUP</tt> flag in the <tt>DT_FLAGS_1</tt> entry in the dynamic
section.  This causes the runtime linker to handle lookups in this
object and its dependencies to be performed only inside the group.
<b>--unresolved-symbols=report-all</b> is implied.  This option is
only meaningful on <font size="-1">ELF</font> platforms which support shared libraries.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Bstatic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-dn</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-non_shared</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-static</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not link against shared libraries.  This is only meaningful on
platforms for which shared libraries are supported.  The different
variants of this option are for compatibility with various systems.  You
may use this option multiple times on the command line: it affects
library searching for <b>-l</b> options which follow it.  This
option also implies <b>--unresolved-symbols=report-all</b>.  This
option can be used with <b>-shared</b>.  Doing so means that a
shared library is being created but that all of the library&#146;s external
references must be resolved by pulling in entries from static
libraries.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Bsymbolic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
When creating a shared library, bind references to global symbols to the
definition within the shared library, if any.  Normally, it is possible
for a program linked against a shared library to override the definition
within the shared library.  This option is only meaningful on <font size="-1">ELF</font>
platforms which support shared libraries.
</td></tr>
<tr valign="top"><td width=4%>
<b>--dynamic-list=</b><i>dynamic-list-file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the name of a dynamic list file to the linker.  This is
typically used when creating shared libraries to specify a list of
global symbols whose references shouldn&#146;t be bound to the definition
within the shared library, or creating dynamically linked executables
to specify a list of symbols which should be added to the symbol table
in the executable.  This option is only meaningful on <font size="-1">ELF</font> platforms
which support shared libraries.
<p>
<!-- ignored unsupported tag .if -->
The format of the dynamic list is the same as the version node without
scope and node name.  See <b><font size="-1">VERSION</font></b> for more information.
</td></tr>
<tr valign="top"><td width=4%>
<b>--dynamic-list-cpp-typeinfo</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Provide the builtin dynamic list for C<font size="-2">++</font> runtime type identification.
</td></tr>
<tr valign="top"><td width=4%>
<b>--check-sections</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-check-sections</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Asks the linker <i>not</i> to check section addresses after they have
been assigned to see if there are any overlaps.  Normally the linker will
perform this check, and if it finds any overlaps it will produce
suitable error messages.  The linker does know about, and does make
allowances for sections in overlays.  The default behaviour can be
restored by using the command line switch <b>--check-sections</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>--cref</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Output a cross reference table.  If a linker map file is being
generated, the cross reference table is printed to the map file.
Otherwise, it is printed on the standard output.
<p>
<!-- ignored unsupported tag .if -->
The format of the table is intentionally simple, so that it may be
easily processed by a script if necessary.  The symbols are printed out,
sorted by name.  For each symbol, a list of file names is given.  If the
symbol is defined, the first file listed is the location of the
definition.  The remaining files contain references to the symbol.
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-define-common</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option inhibits the assignment of addresses to common symbols.
The script command <tt>INHIBIT_COMMON_ALLOCATION</tt> has the same effect.
<p>
<!-- ignored unsupported tag .if -->
The <b>--no-define-common</b> option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using <b>--no-define-common</b> allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
</td></tr>
<tr valign="top"><td width=4%>
<b>--defsym</b> <i>symbol</i><b>=</b><i>expression</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Create a global symbol in the output file, containing the absolute
address given by <i>expression</i>.  You may use this option as many
times as necessary to define multiple symbols in the command line.  A
limited form of arithmetic is supported for the <i>expression</i> in this
context: you may give a hexadecimal constant or the name of an existing
symbol, or use <tt>+</tt> and <tt>-</tt> to add or subtract hexadecimal
constants or symbols.  If you need more elaborate expressions, consider
using the linker command language from a script.  <i>Note:</i> there should be no white
space between <i>symbol</i>, the equals sign ("<b>=</b>"), and
<i>expression</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>--demangle[=</b><i>style</i><b>]</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-demangle</b>
</td><td>
<!-- ignored unsupported tag .tm -->
These options control whether to demangle symbol names in error messages
and other output.  When the linker is told to demangle, it tries to
present symbol names in a readable fashion: it strips leading
underscores if they are used by the object file format, and converts C<font size="-2">++</font>
mangled symbol names into user readable names.  Different compilers have
different mangling styles.  The optional demangling style argument can be used
to choose an appropriate demangling style for your compiler.  The linker will
demangle by default unless the environment variable <b><font size="-1">COLLECT_NO_DEMANGLE</font></b>
is set.  These options may be used to override the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>--dynamic-linker</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the name of the dynamic linker.  This is only meaningful when
generating dynamically linked <font size="-1">ELF</font> executables.  The default dynamic
linker is normally correct; don&#146;t use this unless you know what you are
doing.
</td></tr>
<tr valign="top"><td width=4%>
<b>--fatal-warnings</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Treat all warnings as errors.
</td></tr>
<tr valign="top"><td width=4%>
<b>--force-exe-suffix</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Make sure that an output file has a .exe suffix.
<p>
<!-- ignored unsupported tag .if -->
If a successfully built fully linked output file does not have a
<tt>.exe</tt> or <tt>.dll</tt> suffix, this option forces the linker to copy
the output file to one of the same name with a <tt>.exe</tt> suffix. This
option is useful when using unmodified Unix makefiles on a Microsoft
Windows host, since some versions of Windows won&#146;t run an image unless
it ends in a <tt>.exe</tt> suffix.
</td></tr>
<tr valign="top"><td width=4%>
<b>--gc-sections</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-gc-sections</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Enable garbage collection of unused input sections.  It is ignored on
targets that do not support this option.  This option is not compatible
with <b>-r</b> or <b>--emit-relocs</b>. The default behaviour (of not
performing this garbage collection) can be restored by specifying
<b>--no-gc-sections</b> on the command line.
</td></tr>
<tr valign="top"><td width=4%>
<b>--print-gc-sections</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-print-gc-sections</b>
</td><td>
<!-- ignored unsupported tag .tm -->
List all sections removed by garbage collection.  The listing is
printed on stderr.  This option is only effective if garbage
collection has been enabled via the <b>--gc-sections</b>) option.  The
default behaviour (of not listing the sections that are removed) can
be restored by specifying <b>--no-print-gc-sections</b> on the command
line.
</td></tr>
<tr valign="top"><td width=4%>
<b>--help</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print a summary of the command-line options on the standard output and exit.
</td></tr>
<tr valign="top"><td width=4%>
<b>--target-help</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Print a summary of all target specific options on the standard output and exit.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Map</b> <i>mapfile</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Print a link map to the file <i>mapfile</i>.  See the description of the
<b>-M</b> option, above.
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-keep-memory</b>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>ld</b> normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells <b>ld</b> to
instead optimize for memory usage, by rereading the symbol tables as
necessary.  This may be required if <b>ld</b> runs out of memory space
while linking a large executable.
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-undefined</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-z defs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch <b>--[no-]allow-shlib-undefined</b> controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.
</td></tr>
<tr valign="top"><td width=4%>
<b>--allow-multiple-definition</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-z muldefs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
</td></tr>
<tr valign="top"><td width=4%>
<b>--allow-shlib-undefined</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-allow-shlib-undefined</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Allows (the default) or disallows undefined symbols in shared libraries.
This switch is similar to <b>--no-undefined</b> except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.
<p>
<!-- ignored unsupported tag .if -->
The reason that <b>--allow-shlib-undefined</b> is the default is that
the shared library being specified at link time may not be the same as
the one that is available at load time, so the symbols might actually be
resolvable at load time.  Plus there are some systems, (eg BeOS) where
undefined symbols in shared libraries is normal.  (The kernel patches
them at load time to select which function is most appropriate
for the current architecture.  This is used for example to dynamically
select an appropriate memset function).  Apparently it is also normal
for <font size="-1">HPPA</font> shared libraries to have undefined symbols.
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-undefined-version</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
</td></tr>
<tr valign="top"><td width=4%>
<b>--default-symver</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Create and use a default symbol version (the soname) for unversioned
exported symbols.
</td></tr>
<tr valign="top"><td width=4%>
<b>--default-imported-symver</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Create and use a default symbol version (the soname) for unversioned
imported symbols.
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-warn-mismatch</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Normally <b>ld</b> will give an error if you try to link together input
files that are mismatched for some reason, perhaps because they have
been compiled for different processors or for different endiannesses.
This option tells <b>ld</b> that it should silently permit such possible
errors.  This option should only be used with care, in cases when you
have taken some special action that ensures that the linker errors are
inappropriate.
</td></tr>
<tr valign="top"><td width=4%>
<b>--no-whole-archive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Turn off the effect of the <b>--whole-archive</b> option for subsequent
archive files.
</td></tr>
<tr valign="top"><td width=4%>
<b>--noinhibit-exec</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Retain the executable output file whenever it is still usable.
Normally, the linker will not produce an output file if it encounters
errors during the link process; it exits without writing an output file
when it issues any error whatsoever.
</td></tr>
<tr valign="top"><td width=4%>
<b>-nostdlib</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
</td></tr>
<tr valign="top"><td width=4%>
<b>--oformat</b> <i>output-format</i>
</td><td>
<!-- ignored unsupported tag .tm -->
<b>ld</b> may be configured to support more than one kind of object
file.  If your <b>ld</b> is configured this way, you can use the
<b>--oformat</b> option to specify the binary format for the output
object file.  Even when <b>ld</b> is configured to support alternative
object formats, you don&#146;t usually need to specify this, as <b>ld</b>
should be configured to produce as a default output format the most
usual format on each machine.  <i>output-format</i> is a text string, the
name of a particular format supported by the <font size="-1">BFD</font> libraries.  (You can
list the available binary formats with <b>objdump -i</b>.)  The script
command <tt>OUTPUT_FORMAT</tt> can also specify the output format, but
this option overrides it. 
</td></tr>
<tr valign="top"><td width=4%>
<b>-pie</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--pic-executable</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Create a position independent executable.  This is currently only supported on
<font size="-1">ELF</font> platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the <font size="-1">OS</font> chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.
</td></tr>
<tr valign="top"><td width=4%>
<b>-qmagic</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is ignored for Linux compatibility.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Qy</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option is ignored for <font size="-1">SVR4</font> compatibility.
</td></tr>
<tr valign="top"><td width=4%>
<b>--relax</b>
</td><td>
<!-- ignored unsupported tag .tm -->
An option with machine dependent effects.
This option is only supported on a few targets.
<p>
<!-- ignored unsupported tag .if -->
On some platforms, the <b>--relax</b> option performs global
optimizations that become possible when the linker resolves addressing
in the program, such as relaxing address modes and synthesizing new
instructions in the output object file.
<p>
<!-- ignored unsupported tag .if -->
On some platforms these link time global optimizations may make symbolic
debugging of the resulting executable impossible.
This is known to be
the case for the Matsushita <font size="-1">MN10200</font> and <font size="-1">MN10300</font> family of processors.
<p>
<!-- ignored unsupported tag .if -->
On platforms where this is not supported, <b>--relax</b> is accepted,
but ignored.
</td></tr>
<tr valign="top"><td width=4%>
<b>--retain-symbols-file</b> <i>filename</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Retain <i>only</i> the symbols listed in the file <i>filename</i>,
discarding all others.  <i>filename</i> is simply a flat file, with one
symbol name per line.  This option is especially useful in environments
(such as VxWorks)
where a large global symbol table is accumulated gradually, to conserve
run-time memory.
<p>
<!-- ignored unsupported tag .if -->
<b>--retain-symbols-file</b> does <i>not</i> discard undefined symbols,
or symbols needed for relocations.
<p>
<!-- ignored unsupported tag .if -->
You may only specify <b>--retain-symbols-file</b> once in the command
line.  It overrides <b>-s</b> and <b>-S</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-rpath</b> <i>dir</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Add a directory to the runtime library search path.  This is used when
linking an <font size="-1">ELF</font> executable with shared objects.  All <b>-rpath</b>
arguments are concatenated and passed to the runtime linker, which uses
them to locate shared objects at runtime.  The <b>-rpath</b> option is
also used when locating shared objects which are needed by shared
objects explicitly included in the link; see the description of the
<b>-rpath-link</b> option.  If <b>-rpath</b> is not used when linking an
<font size="-1">ELF</font> executable, the contents of the environment variable
<tt>LD_RUN_PATH</tt> will be used if it is defined.
<p>
<!-- ignored unsupported tag .if -->
The <b>-rpath</b> option may also be used on SunOS.  By default, on
SunOS, the linker will form a runtime search patch out of all the
<b>-L</b> options it is given.  If a <b>-rpath</b> option is used, the
runtime search path will be formed exclusively using the <b>-rpath</b>
options, ignoring the <b>-L</b> options.  This can be useful when using
gcc, which adds many <b>-L</b> options which may be on <font size="-1">NFS</font> mounted
file systems.
<p>
<!-- ignored unsupported tag .if -->
For compatibility with other <font size="-1">ELF</font> linkers, if the <b>-R</b> option is
followed by a directory name, rather than a file name, it is treated as
the <b>-rpath</b> option.
</td></tr>
<tr valign="top"><td width=4%>
<b>-rpath-link</b> <i><font size="-1">DIR</font></i>
</td><td>
<!-- ignored unsupported tag .tm -->
When using <font size="-1">ELF</font> or SunOS, one shared library may require another.  This
happens when an <tt>ld -shared</tt> link includes a shared library as one
of the input files.
<p>
<!-- ignored unsupported tag .if -->
When the linker encounters such a dependency when doing a non-shared,
non-relocatable link, it will automatically try to locate the required
shared library and include it in the link, if it is not included
explicitly.  In such a case, the <b>-rpath-link</b> option
specifies the first set of directories to search.  The
<b>-rpath-link</b> option may specify a sequence of directory names
either by specifying a list of names separated by colons, or by
appearing multiple times.
<p>
<!-- ignored unsupported tag .if -->
This option should be used with caution as it overrides the search path
that may have been hard compiled into a shared library. In such a case it
is possible to use unintentionally a different search path than the
runtime linker would do.
<p>
<!-- ignored unsupported tag .if -->
The linker uses the following search paths to locate required shared
libraries:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
1.
</td><td>
Any directories specified by <b>-rpath-link</b> options.
</td></tr>
<tr valign="top"><td width=4%>
2.
</td><td>
Any directories specified by <b>-rpath</b> options.  The difference
between <b>-rpath</b> and <b>-rpath-link</b> is that directories
specified by <b>-rpath</b> options are included in the executable and
used at runtime, whereas the <b>-rpath-link</b> option is only effective
at link time. Searching <b>-rpath</b> in this way is only supported
by native linkers and cross linkers which have been configured with
the <b>--with-sysroot</b> option.
</td></tr>
<tr valign="top"><td width=4%>
3.
</td><td>
On an <font size="-1">ELF</font> system, if the <b>-rpath</b> and <tt>rpath-link</tt> options
were not used, search the contents of the environment variable
<tt>LD_RUN_PATH</tt>. It is for the native linker only.
</td></tr>
<tr valign="top"><td width=4%>
4.
</td><td>
On SunOS, if the <b>-rpath</b> option was not used, search any
directories specified using <b>-L</b> options.
</td></tr>
<tr valign="top"><td width=4%>
5.
</td><td>
For a native linker, the contents of the environment variable
<tt>LD_LIBRARY_PATH</tt>.
</td></tr>
<tr valign="top"><td width=4%>
6.
</td><td>
For a native <font size="-1">ELF</font> linker, the directories in <tt>DT_RUNPATH</tt> or
<tt>DT_RPATH</tt> of a shared library are searched for shared
libraries needed by it. The <tt>DT_RPATH</tt> entries are ignored if
<tt>DT_RUNPATH</tt> entries exist.
</td></tr>
<tr valign="top"><td width=4%>
7.
</td><td>
The default directories, normally <i>/lib</i> and <i>/usr/lib</i>.
</td></tr>
<tr valign="top"><td width=4%>
8.
</td><td>
For a native linker on an <font size="-1">ELF</font> system, if the file <i>/etc/ld.so.conf</i>
exists, the list of directories found in that file.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
If the required shared library is not found, the linker will issue a
warning and continue with the link.
</td></tr>
<tr valign="top"><td width=4%>
<b>-shared</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-Bshareable</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Create a shared library.  This is currently only supported on <font size="-1">ELF</font>, <font size="-1">XCOFF</font>
and SunOS platforms.  On SunOS, the linker will automatically create a
shared library if the <b>-e</b> option is not used and there are
undefined symbols in the link.
</td></tr>
<tr valign="top"><td width=4%>
<b>--sort-common</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option tells <b>ld</b> to sort the common symbols by size when it
places them in the appropriate output sections.  First come all the one
byte symbols, then all the two byte, then all the four byte, and then
everything else.  This is to prevent gaps between symbols due to
alignment constraints.
</td></tr>
<tr valign="top"><td width=4%>
<b>--sort-section name</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option will apply <tt>SORT_BY_NAME</tt> to all wildcard section
patterns in the linker script.
</td></tr>
<tr valign="top"><td width=4%>
<b>--sort-section alignment</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option will apply <tt>SORT_BY_ALIGNMENT</tt> to all wildcard section
patterns in the linker script.
</td></tr>
<tr valign="top"><td width=4%>
<b>--split-by-file [</b><i>size</i><b>]</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Similar to <b>--split-by-reloc</b> but creates a new output section for
each input file when <i>size</i> is reached.  <i>size</i> defaults to a
size of 1 if not given.
</td></tr>
<tr valign="top"><td width=4%>
<b>--split-by-reloc [</b><i>count</i><b>]</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Tries to creates extra sections in the output file so that no single
output section in the file contains more than <i>count</i> relocations.
This is useful when generating huge relocatable files for downloading into
certain real time kernels with the <font size="-1">COFF</font> object file format; since <font size="-1">COFF</font>
cannot represent more than 65535 relocations in a single section.  Note
that this will fail to work with object file formats which do not
support arbitrary sections.  The linker will not split up individual
input sections for redistribution, so if a single input section contains
more than <i>count</i> relocations one output section will contain that
many relocations.  <i>count</i> defaults to a value of 32768.
</td></tr>
<tr valign="top"><td width=4%>
<b>--stats</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Compute and display statistics about the operation of the linker, such
as execution time and memory usage.
</td></tr>
<tr valign="top"><td width=4%>
<b>--sysroot=</b><i>directory</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <i>directory</i> as the location of the sysroot, overriding the
configure-time default.  This option is only supported by linkers
that were configured using <b>--with-sysroot</b>.
</td></tr>
<tr valign="top"><td width=4%>
<b>--traditional-format</b>
</td><td>
<!-- ignored unsupported tag .tm -->
For some targets, the output of <b>ld</b> is different in some ways from
the output of some existing linker.  This switch requests <b>ld</b> to
use the traditional format instead.
<p>
<!-- ignored unsupported tag .if -->
For example, on SunOS, <b>ld</b> combines duplicate entries in the
symbol string table.  This can reduce the size of an output file with
full debugging information by over 30 percent.  Unfortunately, the SunOS
<tt>dbx</tt> program can not read the resulting program (<tt>gdb</tt> has no
trouble).  The <b>--traditional-format</b> switch tells <b>ld</b> to not
combine duplicate entries.
</td></tr>
<tr valign="top"><td width=4%>
<b>--section-start</b> <i>sectionname</i><b>=</b><i>org</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Locate a section in the output file at the absolute
address given by <i>org</i>.  You may use this option as many
times as necessary to locate multiple sections in the command
line.
<i>org</i> must be a single hexadecimal integer;
for compatibility with other linkers, you may omit the leading
<b>0x</b> usually associated with hexadecimal values.  <i>Note:</i> there
should be no white space between <i>sectionname</i>, the equals
sign ("<b>=</b>"), and <i>org</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>-Tbss</b> <i>org</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-Tdata</b> <i>org</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>-Ttext</b> <i>org</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Same as --section-start, with <tt>.bss</tt>, <tt>.data</tt> or
<tt>.text</tt> as the <i>sectionname</i>.
</td></tr>
<tr valign="top"><td width=4%>
<b>--unresolved-symbols=</b><i>method</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Determine how to handle unresolved symbols.  There are four possible
values for <b>method</b>:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>ignore-all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not report any unresolved symbols.
</td></tr>
<tr valign="top"><td width=4%>
<b>report-all</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Report all unresolved symbols.  This is the default.
</td></tr>
<tr valign="top"><td width=4%>
<b>ignore-in-object-files</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.
</td></tr>
<tr valign="top"><td width=4%>
<b>ignore-in-shared-libs</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker&#146;s
command line.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The behaviour for shared libraries on their own can also be controlled
by the <b>--[no-]allow-shlib-undefined</b> option.
<p>
<!-- ignored unsupported tag .if -->
Normally the linker will generate an error message for each reported
unresolved symbol but the option <b>--warn-unresolved-symbols</b>
can change this to a warning.
</td></tr>
<tr valign="top"><td width=4%>
<b>--dll-verbose</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--verbose</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Display the version number for <b>ld</b> and list the linker emulations
supported.  Display which input files can and cannot be opened.  Display
the linker script being used by the linker.
</td></tr>
<tr valign="top"><td width=4%>
<b>--version-script=</b><i>version-scriptfile</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the name of a version script to the linker.  This is typically
used when creating shared libraries to specify additional information
about the version hierarchy for the library being created.  This option
is only meaningful on <font size="-1">ELF</font> platforms which support shared libraries.
</td></tr>
<tr valign="top"><td width=4%>
<b>--warn-common</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn when a common symbol is combined with another common symbol or with
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
but linkers on some other operating systems do not.  This option allows
you to find potential problems from combining global symbols.
Unfortunately, some C libraries use this practise, so you may get some
warnings about symbols in the libraries as well as in your programs.
<p>
<!-- ignored unsupported tag .if -->
There are three kinds of global symbols, illustrated here by C examples:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>int i = 1;</b>
</td><td>
<!-- ignored unsupported tag .tm -->
A definition, which goes in the initialized data section of the output
file.
</td></tr>
<tr valign="top"><td width=4%>
<b>extern int i;</b>
</td><td>
<!-- ignored unsupported tag .tm -->
An undefined reference, which does not allocate space.
There must be either a definition or a common symbol for the
variable somewhere.
</td></tr>
<tr valign="top"><td width=4%>
<b>int i;</b>
</td><td>
<!-- ignored unsupported tag .tm -->
A common symbol.  If there are only (one or more) common symbols for a
variable, it goes in the uninitialized data area of the output file.
The linker merges multiple common symbols for the same variable into a
single symbol.  If they are of different sizes, it picks the largest
size.  The linker turns a common symbol into a declaration, if there is
a definition of the same variable.
</td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
The <b>--warn-common</b> option can produce five kinds of warnings.
Each warning consists of a pair of lines: the first describes the symbol
just encountered, and the second describes the previous symbol
encountered with the same name.  One or both of the two symbols will be
a common symbol.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
1.
</td><td>
Turning a common symbol into a reference, because there is already a
definition for the symbol.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        &lt;file&gt;(&lt;section&gt;): warning: common of &#145;&lt;symbol&gt;&#146;
           overridden by definition
        &lt;file&gt;(&lt;section&gt;): warning: defined here
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
2.
</td><td>
Turning a common symbol into a reference, because a later definition for
the symbol is encountered.  This is the same as the previous case,
except that the symbols are encountered in a different order.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        &lt;file&gt;(&lt;section&gt;): warning: definition of &#145;&lt;symbol&gt;&#146;
           overriding common
        &lt;file&gt;(&lt;section&gt;): warning: common is here
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
3.
</td><td>
Merging a common symbol with a previous same-sized common symbol.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        &lt;file&gt;(&lt;section&gt;): warning: multiple common
           of &#145;&lt;symbol&gt;&#146;
        &lt;file&gt;(&lt;section&gt;): warning: previous common is here
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
4.
</td><td>
Merging a common symbol with a previous larger common symbol.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        &lt;file&gt;(&lt;section&gt;): warning: common of &#145;&lt;symbol&gt;&#146;
           overridden by larger common
        &lt;file&gt;(&lt;section&gt;): warning: larger common is here
</tt></pre></td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
5.
</td><td>
Merging a common symbol with a previous smaller common symbol.  This is
the same as the previous case, except that the symbols are
encountered in a different order.
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        &lt;file&gt;(&lt;section&gt;): warning: common of &#145;&lt;symbol&gt;&#146;
           overriding smaller common
        &lt;file&gt;(&lt;section&gt;): warning: smaller common is here
</tt></pre></td></tr>
</table>
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=4%>
<b>--warn-constructors</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if any global constructors are used.  This is only useful for a few
object file formats.  For formats like <font size="-1">COFF</font> or <font size="-1">ELF</font>, the linker can not
detect the use of global constructors.
</td></tr>
<tr valign="top"><td width=4%>
<b>--warn-multiple-gp</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if multiple global pointer values are required in the output file.
This is only meaningful for certain processors, such as the Alpha.
Specifically, some processors put large-valued constants in a special
section.  A special register (the global pointer) points into the middle
of this section, so that constants can be loaded efficiently via a
base-register relative addressing mode.  Since the offset in
base-register relative mode is fixed and relatively small (e.g., 16
bits), this limits the maximum size of the constant pool.  Thus, in
large programs, it is often necessary to use multiple global pointer
values in order to be able to address all possible constants.  This
option causes a warning to be issued whenever this case occurs.
</td></tr>
<tr valign="top"><td width=4%>
<b>--warn-once</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Only warn once for each undefined symbol, rather than once per module
which refers to it.
</td></tr>
<tr valign="top"><td width=4%>
<b>--warn-section-align</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if the address of an output section is changed because of
alignment.  Typically, the alignment will be set by an input section.
The address will only be changed if it not explicitly specified; that
is, if the <tt>SECTIONS</tt> command does not specify a start address for
the section.
</td></tr>
<tr valign="top"><td width=4%>
<b>--warn-shared-textrel</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Warn if the linker adds a <font size="-1">DT_TEXTREL</font> to a shared object.
</td></tr>
<tr valign="top"><td width=4%>
<b>--warn-unresolved-symbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If the linker is going to report an unresolved symbol (see the option
<b>--unresolved-symbols</b>) it will normally generate an error.
This option makes it generate a warning instead.
</td></tr>
<tr valign="top"><td width=4%>
<b>--error-unresolved-symbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This restores the linker&#146;s default behaviour of generating errors when
it is reporting unresolved symbols.
</td></tr>
<tr valign="top"><td width=4%>
<b>--whole-archive</b>
</td><td>
<!-- ignored unsupported tag .tm -->
For each archive mentioned on the command line after the
<b>--whole-archive</b> option, include every object file in the archive
in the link, rather than searching the archive for the required object
files.  This is normally used to turn an archive file into a shared
library, forcing every object to be included in the resulting shared
library.  This option may be used more than once.
<p>
<!-- ignored unsupported tag .if -->
Two notes when using this option from gcc: First, gcc doesn&#146;t know
about this option, so you have to use <b>-Wl,-whole-archive</b>.
Second, don&#146;t forget to use <b>-Wl,-no-whole-archive</b> after your
list of archives, because gcc will add its own list of archives to
your link and you may not want this flag to affect those as well.
</td></tr>
<tr valign="top"><td width=4%>
<b>--wrap</b> <i>symbol</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use a wrapper function for <i>symbol</i>.  Any undefined reference to
<i>symbol</i> will be resolved to <tt>__wrap_</tt><tt>symbol</tt><tt></tt>.  Any
undefined reference to <tt>__real_</tt><tt>symbol</tt><tt></tt> will be resolved to
<i>symbol</i>.
<p>
<!-- ignored unsupported tag .if -->
This can be used to provide a wrapper for a system function.  The
wrapper function should be called <tt>__wrap_</tt><tt>symbol</tt><tt></tt>.  If it
wishes to call the system function, it should call
<tt>__real_</tt><tt>symbol</tt><tt></tt>.
<p>
<!-- ignored unsupported tag .if -->
Here is a trivial example:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        void *
        __wrap_malloc (size_t c)
        {
          printf ("malloc called with %zu&#92;n", c);
          return __real_malloc (c);
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
If you link other code with this file using <b>--wrap malloc</b>, then
all calls to <tt>malloc</tt> will call the function <tt>__wrap_malloc</tt>
instead.  The call to <tt>__real_malloc</tt> in <tt>__wrap_malloc</tt> will
call the real <tt>malloc</tt> function.
<p>
<!-- ignored unsupported tag .if -->
You may wish to provide a <tt>__real_malloc</tt> function as well, so that
links without the <b>--wrap</b> option will succeed.  If you do this,
you should not put the definition of <tt>__real_malloc</tt> in the same
file as <tt>__wrap_malloc</tt>; if you do, the assembler may resolve the
call before the linker has a chance to wrap it to <tt>malloc</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>--eh-frame-hdr</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Request creation of <tt>.eh_frame_hdr</tt> section and <font size="-1">ELF</font>
<tt>PT_GNU_EH_FRAME</tt> segment header.
</td></tr>
<tr valign="top"><td width=4%>
<b>--enable-new-dtags</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--disable-new-dtags</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This linker can create the new dynamic tags in <font size="-1">ELF</font>. But the older <font size="-1">ELF</font>
systems may not understand them. If you specify
<b>--enable-new-dtags</b>, the dynamic tags will be created as needed.
If you specify <b>--disable-new-dtags</b>, no new dynamic tags will be
created. By default, the new dynamic tags are not created. Note that
those options are only available for <font size="-1">ELF</font> systems.
</td></tr>
<tr valign="top"><td width=4%>
<b>--hash-size=</b><i>number</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the default size of the linker&#146;s hash tables to a prime number
close to <i>number</i>.  Increasing this value can reduce the length of
time it takes the linker to perform its tasks, at the expense of
increasing the linker&#146;s memory requirements.  Similarly reducing this
value can reduce the memory requirements at the expense of speed.
</td></tr>
<tr valign="top"><td width=4%>
<b>--hash-style=</b><i>style</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Set the type of linker&#146;s hash table(s).  <i>style</i> can be either
<tt>sysv</tt> for classic <font size="-1">ELF</font> <tt>.hash</tt> section, <tt>gnu</tt> for
new style <font size="-1">GNU</font> <tt>.gnu.hash</tt> section or <tt>both</tt> for both
the classic <font size="-1">ELF</font> <tt>.hash</tt> and new style <font size="-1">GNU</font> <tt>.gnu.hash</tt>
hash tables.  The default is <tt>sysv</tt>.
</td></tr>
<tr valign="top"><td width=4%>
<b>--reduce-memory-overheads</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option reduces memory requirements at ld runtime, at the expense of
linking speed.  This was introduced to select the old O(n^2) algorithm
for link map file generation, rather than the new O(n) algorithm which uses
about 40% more memory for symbol storage.
<p>
<!-- ignored unsupported tag .if -->
Another effect of the switch is to set the default hash table size to
1021, which again saves memory at the cost of lengthening the linker&#146;s
run time.  This is not done however if the <b>--hash-size</b> switch
has been used.
<p>
<!-- ignored unsupported tag .if -->
The <b>--reduce-memory-overheads</b> switch may be also be used to
enable other tradeoffs in future versions of the linker.
</td></tr>
<!-- PP ends table -->
</table>
The i386 <font size="-1">PE</font> linker supports the <b>-shared</b> option, which causes
the output to be a dynamically linked library (<font size="-1">DLL</font>) instead of a
normal executable.  You should name the output <tt>*.dll</tt> when you
use this option.  In addition, the linker fully supports the standard
<tt>*.def</tt> files, which may be specified on the linker command line
like an object file (in fact, it should precede archives it exports
symbols from, to ensure that they get linked in, just like a normal
object file).
<p>
In addition to the options common to all targets, the i386 <font size="-1">PE</font> linker
support additional command line options that are specific to the i386
<font size="-1">PE</font> target.  Options that take values may be separated from their
values by either a space or an equals sign.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>--add-stdcall-alias</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If given, symbols with a stdcall suffix (@<i>nn</i>) will be exported
as-is and also with the suffix stripped.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--base-file</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <i>file</i> as the name of a file in which to save the base
addresses of all the relocations needed for generating DLLs with
<i>dlltool</i>.
[This is an i386 <font size="-1">PE</font> specific option]
</td></tr>
<tr valign="top"><td width=4%>
<b>--dll</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Create a <font size="-1">DLL</font> instead of a regular executable.  You may also use
<b>-shared</b> or specify a <tt>LIBRARY</tt> in a given <tt>.def</tt>
file.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--enable-stdcall-fixup</b>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--disable-stdcall-fixup</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If the link finds a symbol that it cannot resolve, it will attempt to
do fuzzy linking by looking for another defined symbol that differs
only in the format of the symbol name (cdecl vs stdcall) and will
resolve that symbol by linking to the match.  For example, the
undefined symbol <tt>_foo</tt> might be linked to the function
<tt>_foo@12</tt>, or the undefined symbol <tt>_bar@16</tt> might be linked
to the function <tt>_bar</tt>.  When the linker does this, it prints a
warning, since it normally should have failed to link, but sometimes
import libraries generated from third-party dlls may need this feature
to be usable.  If you specify <b>--enable-stdcall-fixup</b>, this
feature is fully enabled and warnings are not printed.  If you specify
<b>--disable-stdcall-fixup</b>, this feature is disabled and such
mismatches are considered to be errors.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--export-all-symbols</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If given, all global symbols in the objects used to build a <font size="-1">DLL</font> will
be exported by the <font size="-1">DLL</font>.  Note that this is the default if there
otherwise wouldn&#146;t be any exported symbols.  When symbols are
explicitly exported via <font size="-1">DEF</font> files or implicitly exported via function
attributes, the default is to not export anything else unless this
option is given.  Note that the symbols <tt>DllMain@12</tt>,
<tt>DllEntryPoint@0</tt>, <tt>DllMainCRTStartup@12</tt>, and
<tt>impure_ptr</tt> will not be automatically
exported.  Also, symbols imported from other DLLs will not be
re-exported, nor will symbols specifying the <font size="-1">DLL</font>&#146;s internal layout
such as those beginning with <tt>_head_</tt> or ending with
<tt>_iname</tt>.  In addition, no symbols from <tt>libgcc</tt>,
<tt>libstd++</tt>, <tt>libmingw32</tt>, or <tt>crtX.o</tt> will be exported.
Symbols whose names begin with <tt>__rtti_</tt> or <tt>__builtin_</tt> will
not be exported, to help with C<font size="-2">++</font> DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: <tt>_cygwin_dll_entry@12</tt>,
<tt>_cygwin_crt0_common@8</tt>, <tt>_cygwin_noncygwin_dll_entry@12</tt>,
<tt>_fmode</tt>, <tt>_impure_ptr</tt>, <tt>cygwin_attach_dll</tt>,
<tt>cygwin_premain0</tt>, <tt>cygwin_premain1</tt>, <tt>cygwin_premain2</tt>,
<tt>cygwin_premain3</tt>, and <tt>environ</tt>.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--exclude-symbols</b> <i>symbol</i><b>,</b><i>symbol</i><b>,...</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies a list of symbols which should not be automatically
exported.  The symbol names may be delimited by commas or colons.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--file-alignment</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the file alignment.  Sections in the file will always begin at
file offsets which are multiples of this number.  This defaults to
512.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--heap</b> <i>reserve</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--heap</b> <i>reserve</i><b>,</b><i>commit</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the amount of memory to reserve (and optionally commit) to be
used as heap for this program.  The default is 1Mb reserved, 4K
committed.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--image-base</b> <i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Use <i>value</i> as the base address of your program or dll.  This is
the lowest memory location that will be used when your program or dll
is loaded.  To reduce the need to relocate and improve performance of
your dlls, each should have a unique base address and not overlap any
other dlls.  The default is 0x400000 for executables, and 0x10000000
for dlls.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--kill-at</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If given, the stdcall suffixes (@<i>nn</i>) will be stripped from
symbols before they are exported.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--large-address-aware</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If given, the appropriate bit in the Characteristics field of the <font size="-1">COFF</font>
header is set to indicate that this executable supports virtual addresses
greater than 2 gigabytes.  This should be used in conjunction with the /3GB
or /USERVA=<i>value</i> megabytes switch in the [operating systems]
section of the <font size="-1">BOOT</font>.INI.  Otherwise, this bit has no effect.
[This option is specific to <font size="-1">PE</font> targeted ports of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--major-image-version</b> <i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets the major number of the image version.  Defaults to 1.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--major-os-version</b> <i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets the major number of the os version.  Defaults to 4.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--major-subsystem-version</b> <i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets the major number of the subsystem version.  Defaults to 4.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--minor-image-version</b> <i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets the minor number of the image version.  Defaults to 0.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--minor-os-version</b> <i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets the minor number of the os version.  Defaults to 0.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--minor-subsystem-version</b> <i>value</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets the minor number of the subsystem version.  Defaults to 0.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--output-def</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
The linker will create the file <i>file</i> which will contain a <font size="-1">DEF</font>
file corresponding to the <font size="-1">DLL</font> the linker is generating.  This <font size="-1">DEF</font> file
(which should be called <tt>*.def</tt>) may be used to create an import
library with <tt>dlltool</tt> or may be used as a reference to
automatically or implicitly exported symbols.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--out-implib</b> <i>file</i>
</td><td>
<!-- ignored unsupported tag .tm -->
The linker will create the file <i>file</i> which will contain an
import lib corresponding to the <font size="-1">DLL</font> the linker is generating. This
import lib (which should be called <tt>*.dll.a</tt> or <tt>*.a</tt>
may be used to link clients against the generated <font size="-1">DLL</font>; this behaviour
makes it possible to skip a separate <tt>dlltool</tt> import library
creation step.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--enable-auto-image-base</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Automatically choose the image base for DLLs, unless one is specified
using the <tt>--image-base</tt> argument.  By using a hash generated
from the dllname to create unique image bases for each <font size="-1">DLL</font>, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--disable-auto-image-base</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not automatically generate a unique image base.  If there is no
user-specified image base (<tt>--image-base</tt>) then use the platform
default.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--dll-search-prefix</b> <i>string</i>
</td><td>
<!-- ignored unsupported tag .tm -->
When linking dynamically to a dll without an import library,
search for <tt>&lt;string&gt;&lt;basename&gt;.dll</tt> in preference to
<tt>lib&lt;basename&gt;.dll</tt>. This behaviour allows easy distinction
between DLLs built for the various subplatforms: native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
<tt>--dll-search-prefix=cyg</tt>.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--enable-auto-import</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do sophisticated linking of <tt>_symbol</tt> to <tt>__imp__symbol</tt> for
<font size="-1">DATA</font> imports from DLLs, and create the necessary thunking symbols when
building the import libraries with those <font size="-1">DATA</font> exports. Note: Use of the
&#146;auto-import&#146; extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.
<p>
<!-- ignored unsupported tag .if -->
Using &#146;auto-import&#146; generally will &#146;just work&#146; &#151; but sometimes you may
see this message:
<p>
<!-- ignored unsupported tag .if -->
"variable &#146;&lt;var&gt;&#146; can&#146;t be auto-imported. Please read the
documentation for ld&#146;s <tt>--enable-auto-import</tt> for details."
<p>
<!-- ignored unsupported tag .if -->
This message occurs when some (sub)expression accesses an address
ultimately given by the sum of two constants (Win32 import tables only
allow one).  Instances where this may occur include accesses to member
fields of struct variables imported from a <font size="-1">DLL</font>, as well as using a
constant index into an array variable imported from a <font size="-1">DLL</font>.  Any
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
<p>
<!-- ignored unsupported tag .if -->
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
<p>
<!-- ignored unsupported tag .if -->
One way is to use --enable-runtime-pseudo-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.
<p>
<!-- ignored unsupported tag .if -->
A second solution is to force one of the &#146;constants&#146; to be a variable &#151;
that is, unknown and un-optimizable at compile time.  For arrays,
there are two possibilities: a) make the indexee (the array&#146;s address)
a variable, or b) make the &#146;constant&#146; index a variable.  Thus:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        extern type extern_array[];
        extern_array[1] --&gt;
           { volatile type *t=extern_array; t[1] }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
or
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        extern type extern_array[];
        extern_array[1] --&gt;
           { volatile int t=1; extern_array[t] }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
For structs (and most other multiword data types) the only option
is to make the struct itself (or the long long, or the ...) variable:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        extern struct s extern_struct;
        extern_struct.field --&gt;
           { volatile struct s *t=&extern_struct; t-&gt;field }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
or
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        extern long long extern_ll;
        extern_ll --&gt;
          { volatile long long * local_ll=&extern_ll; *local_ll }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
A third method of dealing with this difficulty is to abandon
&#146;auto-import&#146; for the offending symbol and mark it with
<tt>__declspec(dllimport)</tt>.  However, in practise that
requires using compile-time #defines to indicate whether you are
building a <font size="-1">DLL</font>, building client code that will link to the <font size="-1">DLL</font>, or
merely building/linking to a static library.   In making the choice
between the various methods of resolving the &#146;direct address with
constant offset&#146; problem, you should consider typical real-world usage:
<p>
<!-- ignored unsupported tag .if -->
Original:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        --foo.h
        extern int arr[];
        --foo.c
        #include "foo.h"
        void main(int argc, char **argv){
          printf("%d&#92;n",arr[1]);
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Solution 1:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        --foo.h
        extern int arr[];
        --foo.c
        #include "foo.h"
        void main(int argc, char **argv){
          /* This workaround is for win32 and cygwin; do not "optimize" */
          volatile int *parr = arr;
          printf("%d&#92;n",parr[1]);
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
Solution 2:
<p>
<!-- ignored unsupported tag .if -->
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- ignored unsupported tag .ne -->
        --foo.h
        /* Note: auto-export is assumed (no __declspec(dllexport)) */
        #if (defined(_WIN32) || defined(__CYGWIN__)) && &#92;
          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
        #define FOO_IMPORT __declspec(dllimport)
        #else
        #define FOO_IMPORT
        #endif
        extern FOO_IMPORT int arr[];
        --foo.c
        #include "foo.h"
        void main(int argc, char **argv){
          printf("%d&#92;n",arr[1]);
        }
</tt></pre></td></tr>
</table>
<p>
<!-- ignored unsupported tag .if -->
A fourth way to avoid this problem is to re-code your
library to use a functional interface rather than a data interface
for the offending variables (e.g. <i>set_foo()</i> and <i>get_foo()</i> accessor
functions).
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--disable-auto-import</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not attempt to do sophisticated linking of <tt>_symbol</tt> to
<tt>__imp__symbol</tt> for <font size="-1">DATA</font> imports from DLLs.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--enable-runtime-pseudo-reloc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
If your code contains expressions described in --enable-auto-import section,
that is, <font size="-1">DATA</font> imports from <font size="-1">DLL</font> with non-zero offset, this switch will create
a vector of &#146;runtime pseudo relocations&#146; which can be used by runtime
environment to adjust references to such data in your client code.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--disable-runtime-pseudo-reloc</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Do not create pseudo relocations for non-zero offset <font size="-1">DATA</font> imports from
DLLs.  This is the default.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--enable-extra-pe-debug</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--section-alignment</b>
</td><td>
<!-- ignored unsupported tag .tm -->
Sets the section alignment.  Sections in memory will always begin at
addresses which are a multiple of this number.  Defaults to 0x1000.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--stack</b> <i>reserve</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--stack</b> <i>reserve</i><b>,</b><i>commit</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specify the amount of memory to reserve (and optionally commit) to be
used as stack for this program.  The default is 2Mb reserved, 4K
committed.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<tr valign="top"><td width=4%>
<b>--subsystem</b> <i>which</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--subsystem</b> <i>which</i><b>:</b><i>major</i>
</td><td>
<!-- ignored unsupported tag .tm -->
</td></tr>
<tr valign="top"><td width=4%>
<b>--subsystem</b> <i>which</i><b>:</b><i>major</i><b>.</b><i>minor</i>
</td><td>
<!-- ignored unsupported tag .tm -->
Specifies the subsystem under which your program will execute.  The
legal values for <i>which</i> are <tt>native</tt>, <tt>windows</tt>,
<tt>console</tt>, <tt>posix</tt>, and <tt>xbox</tt>.  You may optionally set
the subsystem version also.  Numeric values are also accepted for
<i>which</i>.
[This option is specific to the i386 <font size="-1">PE</font> targeted port of the linker]
</td></tr>
<!-- PP ends table -->
</table>
The 68HC11 and 68HC12 linkers support specific options to control the
memory bank switching mapping and trampoline code generation.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=4%>
<b>--no-trampoline</b>
</td><td>
<!-- ignored unsupported tag .tm -->
This option disables the generation of trampoline. By default a trampoline
is generated for each far function which is called using a <tt>jsr</tt>
instruction (this happens when a pointer to a far function is taken).
</td></tr>
<tr valign="top"><td width=4%>
<b>--bank-window</b> <i>name</i>
</td><td>
<!-- ignored unsupported tag .tm -->
This option indicates to the linker the name of the memory region in
the <b><font size="-1">MEMORY</font></b> specification that describes the memory bank window.
The definition of such region is then used by the linker to compute
paging and addresses within the memory window.
</td></tr>
</table>
<h1 class="manpages">ENVIRONMENT</h1>
<!-- ignored unsupported tag .tm -->
You can change the behaviour of <b>ld</b> with the environment variables
<tt>GNUTARGET</tt>,
<tt>LDEMULATION</tt> and <tt>COLLECT_NO_DEMANGLE</tt>.
<p>
<tt>GNUTARGET</tt> determines the input-file object format if you don&#146;t
use <b>-b</b> (or its synonym <b>--format</b>).  Its value should be one
of the <font size="-1">BFD</font> names for an input format.  If there is no
<tt>GNUTARGET</tt> in the environment, <b>ld</b> uses the natural format
of the target. If <tt>GNUTARGET</tt> is set to <tt>default</tt> then <font size="-1">BFD</font>
attempts to discover the input format by examining binary input files;
this method often succeeds, but there are potential ambiguities, since
there is no method of ensuring that the magic number used to specify
object-file formats is unique.  However, the configuration procedure for
<font size="-1">BFD</font> on each system places the conventional format for that system first
in the search-list, so ambiguities are resolved in favor of convention.
<p>
<tt>LDEMULATION</tt> determines the default emulation if you don&#146;t use the
<b>-m</b> option.  The emulation can affect various aspects of linker
behaviour, particularly the default linker script.  You can list the
available emulations with the <b>--verbose</b> or <b>-V</b> options.  If
the <b>-m</b> option is not used, and the <tt>LDEMULATION</tt> environment
variable is not defined, the default emulation depends upon how the
linker was configured.
<p>
Normally, the linker will default to demangling symbols.  However, if
<tt>COLLECT_NO_DEMANGLE</tt> is set in the environment, then it will
default to not demangling symbols.  This environment variable is used in
a similar fashion by the <tt>gcc</tt> linker wrapper program.  The default
may be overridden by the <b>--demangle</b> and <b>--no-demangle</b>
options.
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<i>ar</i>(1), <i>nm</i>(1), <i>objcopy</i>(1), <i>objdump</i>(1), <i>readelf</i>(1) and
the Info entries for <i>binutils</i> and
<i>ld</i>.
<h1 class="manpages">COPYRIGHT</h1>
<!-- ignored unsupported tag .tm -->
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
<p>
Permission is granted to copy, distribute and/or modify this document
under the terms of the <font size="-1">GNU</font> Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled <font size="-1">GNU</font> Free Documentation License.
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversiona32a.html?tutorial=unix_commands&amp;file=ld.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/ld.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:52 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
