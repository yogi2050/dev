<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/tcpdump.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:31 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>tcpdump - Unix, Linux Command</title>
<meta name="Description" Content="tcpdump - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>tcpdump - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
tcpdump - dump traffic on a network
<h1 class="manpages">SYNOPSIS</h1>
<!-- ignored unsupported tag .na -->
<b>tcpdump</b> [
<b>-AdDeflLnNOpqRStuUvxX</b> ] [
<b>-c</b> <i>count</i> ]
&nbsp; &nbsp;<!-- Need break --><br />
[
<b>-C</b> <i>file_size</i> ] [
<b>-F</b> <i>file</i> ]
&nbsp; &nbsp;<!-- Need break --><br />
[
<b>-i</b> <i>interface</i> ]
[
<b>-m</b> <i>module</i> ]
[
<b>-M</b> <i>secret</i> ]
&nbsp; &nbsp;<!-- Need break --><br />
[
<b>-r</b> <i>file</i> ]
[
<b>-s</b> <i>snaplen</i> ]
[
<b>-T</b> <i>type</i> ]
[
<b>-w</b> <i>file</i> ]
&nbsp; &nbsp;<!-- Need break --><br />
[
<b>-W</b> <i>filecount</i> ]
&nbsp; &nbsp;<!-- Need break --><br />
[
<b>-E</b> <i>spi@ipaddr algo:secret,...</i> ]
&nbsp; &nbsp;<!-- Need break --><br />
[
<b>-y</b> <i>datalinktype</i> ]
[
<b>-Z</b> <i>user</i> ]
&nbsp; &nbsp;[
<i>expression</i> ]
<!-- ignored unsupported tag .ad -->
<h1 class="manpages">DESCRIPTION</h1>
<p>
<i>Tcpdump</i> prints out the headers of packets on a network interface
that match the boolean <i>expression</i>.  It can also be run with the
<b>-w</b> flag, which causes it to save the packet data to a file for later
analysis, and/or with the
<b>-r</b> flag, which causes it to read from a saved packet file rather than to
read packets from a network interface.  In all cases, only packets that
match
<i>expression</i> will be processed by
<i>tcpdump</i>. <p>
<i>Tcpdump</i> will, if not run with the
<b>-c</b> flag, continue capturing packets until it is interrupted by a SIGINT
signal (generated, for example, by typing your interrupt character,
typically control-C) or a SIGTERM signal (typically generated with the
<b>kill</b>(1)
command); if run with the
<b>-c</b> flag, it will capture packets until it is interrupted by a SIGINT or
SIGTERM signal or the specified number of packets have been processed.
<p>
When
<i>tcpdump</i> finishes capturing packets, it will report counts of:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>

</td><td>
packets &#145;&#145;captured&#146;&#146; (this is the number of packets that
<i>tcpdump</i> has received and processed);
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
packets &#145;&#145;received by filter&#146;&#146; (the meaning of this depends on the OS on
which you&#146;re running
<i>tcpdump</i>, and possibly on the way the OS was configured - if a filter was
specified on the command line, on some OSes it counts packets regardless
of whether they were matched by the filter expression and, even if they
were matched by the filter expression, regardless of whether
<i>tcpdump</i> has read and processed them yet, on other OSes it counts only packets that were
matched by the filter expression regardless of whether
<i>tcpdump</i> has read and processed them yet, and on other OSes it counts only
packets that were matched by the filter expression and were processed by
<i>tcpdump</i>); </td></tr>
<tr valign="top"><td width=6%>

</td><td>
packets &#145;&#145;dropped by kernel&#146;&#146; (this is the number of packets that were
dropped, due to a lack of buffer space, by the packet capture mechanism
in the OS on which
<i>tcpdump</i> is running, if the OS reports that information to applications; if not,
it will be reported as 0).
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
On platforms that support the SIGINFO signal, such as most BSDs
(including Mac OS X) and Digital/Tru64 UNIX, it will report those counts
when it receives a SIGINFO signal (generated, for example, by typing
your &#145;&#145;status&#146;&#146; character, typically control-T, although on some
platforms, such as Mac OS X, the &#145;&#145;status&#146;&#146; character is not set by
default, so you must set it with
<b>stty</b>(1)
in order to use it) and will continue capturing packets.
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
Reading packets from a network interface may require that you have
special privileges:
</td></tr>
<tr valign="top"><td colspan="2">
<b>Under SunOS 3.x or 4.x with NIT or BPF:</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
You must have read access to
<i>/dev/nit</i> or
<i>/dev/bpf*</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>Under Solaris with DLPI:</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
You must have read/write access to the network pseudo device, e.g.
<i>/dev/le</i>. On at least some versions of Solaris, however, this is not sufficient to
allow
<i>tcpdump</i> to capture in promiscuous mode; on those versions of Solaris, you must
be root, or
<i>tcpdump</i> must be installed setuid to root, in order to capture in promiscuous
mode.  Note that, on many (perhaps all) interfaces, if you don&#146;t capture
in promiscuous mode, you will not see any outgoing packets, so a capture
not done in promiscuous mode may not be very useful.
</td></tr>
<tr valign="top"><td colspan="2">
<b>Under HP-UX with DLPI:</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
You must be root or
<i>tcpdump</i> must be installed setuid to root.
</td></tr>
<tr valign="top"><td colspan="2">
<b>Under IRIX with snoop:</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
You must be root or
<i>tcpdump</i> must be installed setuid to root.
</td></tr>
<tr valign="top"><td colspan="2">
<b>Under Linux:</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
You must be root or
<i>tcpdump</i> must be installed setuid to root (unless your distribution has a kernel
that supports capability bits such as CAP_NET_RAW and code to allow
those capability bits to be given to particular accounts and to cause
those bits to be set on a user&#146;s initial processes when they log in, in
which case you  must have CAP_NET_RAW in order to capture and
CAP_NET_ADMIN to enumerate network devices with, for example, the
<b>-D</b> flag).
</td></tr>
<tr valign="top"><td colspan="2">
<b>Under ULTRIX and Digital UNIX/Tru64 UNIX:</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Any user may capture network traffic with
<i>tcpdump</i>. However, no user (not even the super-user) can capture in promiscuous
mode on an interface unless the super-user has enabled promiscuous-mode
operation on that interface using
<b>pfconfig</b>(8),
and no user (not even the super-user) can capture unicast traffic
received by or sent by the machine on an interface unless the super-user
has enabled copy-all-mode operation on that interface using
<i>pfconfig</i>, so
<i>useful</i> packet capture on an interface probably requires that either
promiscuous-mode or copy-all-mode operation, or both modes of
operation, be enabled on that interface.
</td></tr>
<tr valign="top"><td colspan="2">
<b>Under BSD (this includes Mac OS X):</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
You must have read access to
<i>/dev/bpf*</i>. On BSDs with a devfs (this includes Mac OS X), this might involve more
than just having somebody with super-user access setting the ownership
or permissions on the BPF devices - it might involve configuring devfs
to set the ownership or permissions every time the system is booted,
if the system even supports that; if it doesn&#146;t support that, you might
have to find some other way to make that happen at boot time.
</td></tr>
<!-- LP ends table -->
</table>
Reading a saved packet file doesn&#146;t require special privileges.
<h1 class="manpages">OPTIONS</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-A</b> </td><td valign="bottom">
Print each packet (minus its link level header) in ASCII.  Handy for
capturing web pages.
</td></tr>
<tr valign="top"><td>
<b>-c</b> </td><td valign="bottom">
Exit after receiving <i>count</i> packets.
</td></tr>
<tr valign="top"><td>
<b>-C</b> </td><td valign="bottom">
Before writing a raw packet to a savefile, check whether the file is
currently larger than <i>file_size</i> and, if so, close the current
savefile and open a new one.  Savefiles after the first savefile will
have the name specified with the
<b>-w</b> flag, with a number after it, starting at 1 and continuing upward.
The units of <i>file_size</i> are millions of bytes (1,000,000 bytes,
not 1,048,576 bytes).
<p>
Note that when used with <b>-Z</b> option (enabled by default), privileges
are dropped before opening first savefile.
</td></tr>
<tr valign="top"><td>
<b>-d</b> </td><td valign="bottom">
Dump the compiled packet-matching code in a human readable form to
standard output and stop.
</td></tr>
<tr valign="top"><td>
<b>-dd</b> </td><td valign="bottom">
Dump packet-matching code as a
<b>C</b> program fragment.
</td></tr>
<tr valign="top"><td>
<b>-ddd</b> </td><td valign="bottom">
Dump packet-matching code as decimal numbers (preceded with a count).
</td></tr>
<tr valign="top"><td>
<b>-D</b> </td><td valign="bottom">
Print the list of the network interfaces available on the system and on
which
<i>tcpdump</i> can capture packets.  For each network interface, a number and an
interface name, possibly followed by a text description of the
interface, is printed.  The interface name or the number can be supplied
to the
<b>-i</b> flag to specify an interface on which to capture.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
This can be useful on systems that don&#146;t have a command to list them
(e.g., Windows systems, or UNIX systems lacking
<b>ifconfig -a</b>); the number can be useful on Windows 2000 and later systems, where the
interface name is a somewhat complex string.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
The
<b>-D</b> flag will not be supported if
<i>tcpdump</i> was built with an older version of
<i>libpcap</i> that lacks the
<b>pcap_findalldevs()</b> function.
</td></tr>
<tr valign="top"><td>
<b>-e</b> </td><td valign="bottom">
Print the link-level header on each dump line.
</td></tr>
<tr valign="top"><td>
<b>-E</b> </td><td valign="bottom">
Use <i>spi@ipaddr algo:secret</i> for decrypting IPsec ESP packets that
are addressed to <i>addr</i> and contain Security Parameter Index value
<i>spi</i>. This combination may be repeated with comma or newline seperation.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Note that setting the secret for IPv4 ESP packets is supported at this time.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Algorithms may be
<b>des-cbc</b>,
<b>3des-cbc</b>,
<b>blowfish-cbc</b>,
<b>rc3-cbc</b>,
<b>cast128-cbc</b>, or
<b>none</b>.
The default is <b>des-cbc</b>.
The ability to decrypt packets is only present if <i>tcpdump</i> was compiled
with cryptography enabled.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
<i>secret</i> is the ASCII text for ESP secret key.
If preceeded by 0x, then a hex value will be read.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
The option assumes RFC2406 ESP, not RFC1827 ESP.
The option is only for debugging purposes, and
the use of this option with a true &#145;secret&#146; key is discouraged.
By presenting IPsec secret key onto command line
you make it visible to others, via
<b>ps</b>(1)
and other occasions.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
In addition to the above syntax, the syntax <i>file name</i> may be used
to have tcpdump read the provided file in. The file is opened upon
receiving the first ESP packet, so any special permissions that tcpdump
may have been given should already have been given up.
</td></tr>
<tr valign="top"><td>
<b>-f</b> </td><td valign="bottom">
Print &#145;foreign&#146; IPv4 addresses numerically rather than symbolically
(this option is intended to get around serious brain damage in
Sun&#146;s NIS server &#151; usually it hangs forever translating non-local
internet numbers).
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
The test for &#145;foreign&#146; IPv4 addresses is done using the IPv4 address and
netmask of the interface on which capture is being done.  If that
address or netmask are not available, available, either because the
interface on which capture is being done has no address or netmask or
because the capture is being done on the Linux "any" interface, which
can capture on more than one interface, this option will not work
correctly.
</td></tr>
<tr valign="top"><td>
<b>-F</b> </td><td valign="bottom">
Use <i>file</i> as input for the filter expression.
An additional expression given on the command line is ignored.
</td></tr>
<tr valign="top"><td>
<b>-i</b> </td><td valign="bottom">
Listen on <i>interface</i>.
If unspecified, <i>tcpdump</i> searches the system interface list for the
lowest numbered, configured up interface (excluding loopback).
Ties are broken by choosing the earliest match.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
On Linux systems with 2.2 or later kernels, an
<i>interface</i> argument of &#145;&#145;any&#146;&#146; can be used to capture packets from all interfaces.
Note that captures on the &#145;&#145;any&#146;&#146; device will not be done in promiscuous
mode.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
If the
<b>-D</b> flag is supported, an interface number as printed by that flag can be
used as the
<i>interface</i> argument.
</td></tr>
<tr valign="top"><td>
<b>-l</b> </td><td valign="bottom">
Make stdout line buffered.
Useful if you want to see the data
while capturing it.
E.g.,
<!-- Need break --><br />
&#145;&#145;tcpdump  -l  |  tee dat&#146;&#146; or
&#145;&#145;tcpdump  -l   &gt; dat  &  tail  -f  dat&#146;&#146;.
</td></tr>
<tr valign="top"><td>
<b>-L</b> </td><td valign="bottom">
List the known data link types for the interface and exit.
</td></tr>
<tr valign="top"><td>
<b>-m</b> </td><td valign="bottom">
Load SMI MIB module definitions from file <i>module</i>.
This option
can be used several times to load several MIB modules into <i>tcpdump</i>.
</td></tr>
<tr valign="top"><td>
<b>-M</b> </td><td valign="bottom">
Use <i>secret</i> as a shared secret for validating the digests found in
TCP segments with the TCP-MD5 option (RFC 2385), if present.
</td></tr>
<tr valign="top"><td>
<b>-n</b> </td><td valign="bottom">
Don&#146;t convert host addresses to names.  This can be used to avoid
DNS lookups.
</td></tr>
<tr valign="top"><td>
<b>-nn</b> </td><td valign="bottom">
Don&#146;t convert protocol and port numbers etc. to names either. 
</td></tr>
<tr valign="top"><td>
<b>-N</b> </td><td valign="bottom">
Don&#146;t print domain name qualification of host names.
E.g.,
if you give this flag then <i>tcpdump</i> will print &#145;&#145;nic&#146;&#146;
instead of &#145;&#145;nic.ddn.mil&#146;&#146;.
</td></tr>
<tr valign="top"><td>
<b>-O</b> </td><td valign="bottom">
Do not run the packet-matching code optimizer.
This is useful only
if you suspect a bug in the optimizer.
</td></tr>
<tr valign="top"><td>
<b>-p</b> </td><td valign="bottom">
<i>Don&#146;t</i> put the interface
into promiscuous mode.
Note that the interface might be in promiscuous
mode for some other reason; hence, &#145;-p&#146; cannot be used as an abbreviation for
&#145;ether host {local-hw-addr} or ether broadcast&#146;.
</td></tr>
<tr valign="top"><td>
<b>-q</b> </td><td valign="bottom">
Quick (quiet?) output.
Print less protocol information so output
lines are shorter.
</td></tr>
<tr valign="top"><td>
<b>-R</b> </td><td valign="bottom">
Assume ESP/AH packets to be based on old specification (RFC1825 to RFC1829).
If specified, <i>tcpdump</i> will not print replay prevention field.
Since there is no protocol version field in ESP/AH specification,
<i>tcpdump</i> cannot deduce the version of ESP/AH protocol.
</td></tr>
<tr valign="top"><td>
<b>-r</b> </td><td valign="bottom">
Read packets from <i>file</i> (which was created with the
<b>-w</b> option).
Standard input is used if <i>file</i> is &#145;&#145;-&#146;&#146;.
</td></tr>
<tr valign="top"><td>
<b>-S</b> </td><td valign="bottom">
Print absolute, rather than relative, TCP sequence numbers.
</td></tr>
<tr valign="top"><td>
<b>-s</b> </td><td valign="bottom">
Snarf <i>snaplen</i> bytes of data from each packet rather than the
default of 68 (with SunOS&#146;s NIT, the minimum is actually 96).
68 bytes is adequate for IP, ICMP, TCP
and UDP but may truncate protocol information from name server and NFS
packets (see below).
Packets truncated because of a limited snapshot
are indicated in the output with &#145;&#145;[|<i>proto</i>]&#146;&#146;, where <i>proto</i>
is the name of the protocol level at which the truncation has occurred.
Note that taking larger snapshots both increases
the amount of time it takes to process packets and, effectively,
decreases the amount of packet buffering.
This may cause packets to be
lost.
You should limit <i>snaplen</i> to the smallest number that will
capture the protocol information you&#146;re interested in.
Setting
<i>snaplen</i> to 0 means use the required length to catch whole packets.
</td></tr>
<tr valign="top"><td>
<b>-T</b> </td><td valign="bottom">
Force packets selected by "<i>expression</i>" to be interpreted the
specified <i>type</i>.
Currently known types are
<b>aodv</b> (Ad-hoc On-demand Distance Vector protocol),
<b>cnfp</b> (Cisco NetFlow protocol),
<b>rpc</b> (Remote Procedure Call),
<b>rtp</b> (Real-Time Applications protocol),
<b>rtcp</b> (Real-Time Applications control protocol),
<b>snmp</b> (Simple Network Management Protocol),
<b>tftp</b> (Trivial File Transfer Protocol),
<b>vat</b> (Visual Audio Tool),
and
<b>wb</b> (distributed White Board).
</td></tr>
<tr valign="top"><td>
<b>-t</b> </td><td valign="bottom">
<i>Don&#146;t</i> print a timestamp on each dump line.
</td></tr>
<tr valign="top"><td>
<b>-tt</b> </td><td valign="bottom">
Print an unformatted timestamp on each dump line.
</td></tr>
<tr valign="top"><td>
<b>-ttt</b> </td><td valign="bottom">
Print a delta (in micro-seconds) between current and previous line
on each dump line.
</td></tr>
<tr valign="top"><td>
<b>-tttt</b> </td><td valign="bottom">
Print a timestamp in default format proceeded by date on each dump line.
</td></tr>
<tr valign="top"><td>
<b>-u</b> </td><td valign="bottom">
Print undecoded NFS handles.
</td></tr>
<tr valign="top"><td>
<b>-U</b> </td><td valign="bottom">
Make output saved via the
<b>-w</b> option &#145;&#145;packet-buffered&#146;&#146;; i.e., as each packet is saved, it will be
written to the output file, rather than being written only when the
output buffer fills.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
The
<b>-U</b> flag will not be supported if
<i>tcpdump</i> was built with an older version of
<i>libpcap</i> that lacks the
<b>pcap_dump_flush()</b> function.
</td></tr>
<tr valign="top"><td>
<b>-v</b> </td><td valign="bottom">
When parsing and printing, produce (slightly more) verbose output.
For example, the time to live,
identification, total length and options in an IP packet are printed.
Also enables additional packet integrity checks such as verifying the
IP and ICMP header checksum.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
When writing to a file with the
<b>-w</b> option, report, every 10 seconds, the number of packets captured.
</td></tr>
<tr valign="top"><td>
<b>-vv</b> </td><td valign="bottom">
Even more verbose output.
For example, additional fields are
printed from NFS reply packets, and SMB packets are fully decoded.
</td></tr>
<tr valign="top"><td>
<b>-vvv</b> </td><td valign="bottom">
Even more verbose output.
For example,
telnet <b>SB</b> ... <b>SE</b> options
are printed in full.
With
<b>-X</b> Telnet options are printed in hex as well.
</td></tr>
<tr valign="top"><td>
<b>-w</b> </td><td valign="bottom">
Write the raw packets to <i>file</i> rather than parsing and printing
them out.
They can later be printed with the -r option.
Standard output is used if <i>file</i> is &#145;&#145;-&#146;&#146;.
</td></tr>
<tr valign="top"><td>
<b>-W</b> </td><td valign="bottom">
Used in conjunction with the
<i>-C</i> option, this will limit the number
of files created to the specified number, and begin overwriting files
from the beginning, thus creating a &#146;rotating&#146; buffer.
In addition, it will name
the files with enough leading 0s to support the maximum number of
files, allowing them to sort correctly.
</td></tr>
<tr valign="top"><td>
<b>-x</b> </td><td valign="bottom">
Print each packet (minus its link level header) in hex.
The smaller of the entire packet or
<i>snaplen</i> bytes will be printed.  Note that this is the entire link-layer
packet, so for link layers that pad (e.g. Ethernet), the padding bytes
will also be printed when the higher layer packet is shorter than the
required padding.
</td></tr>
<tr valign="top"><td>
<b>-xx</b> </td><td valign="bottom">
Print each packet,
<i>including</i> its link level header, in hex.
</td></tr>
<tr valign="top"><td>
<b>-X</b> </td><td valign="bottom">
Print each packet (minus its link level header) in hex and ASCII.
This is very handy for analysing new protocols.
</td></tr>
<tr valign="top"><td>
<b>-XX</b> </td><td valign="bottom">
Print each packet,
<i>including</i> its link level header, in hex and ASCII.
</td></tr>
<tr valign="top"><td>
<b>-y</b> </td><td valign="bottom">
Set the data link type to use while capturing packets to <i>datalinktype</i>.
</td></tr>
<tr valign="top"><td>
<b>-Z</b> </td><td valign="bottom">
Drops privileges (if root) and changes user ID to
<i>user</i> and the group ID to the primary group of
<i>user</i>. </td></tr>
<tr valign="top"><td width=6%>

</td><td>
This behavior is enabled by default (<b>-Z pcap</b>), and can
be disabled by <b>-Z root</b>.
<p>
</td></tr>
<tr valign="top"><td width=6%>
<i> expression</i>
</td><td>
selects which packets will be dumped.
If no <i>expression</i>
is given, all packets on the net will be dumped.
Otherwise,
only packets for which <i>expression</i> is &#145;true&#146; will be dumped.
<p>
The <i>expression</i> consists of one or more
<i>primitives.</i> Primitives usually consist of an
<i>id</i> (name or number) preceded by one or more qualifiers.
There are three
different kinds of qualifier:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>
<i>type</i>
</td><td>
qualifiers say what kind of thing the id name or number refers to.
Possible types are
<b>host</b>, <b>net ,</b> <b>port</b> and
<b>portrange</b>. E.g., &#145;host foo&#146;, &#145;net 128.3&#146;, &#145;port 20&#146;, &#145;portrange 6000-6008&#146;.
If there is no type
qualifier,
<b>host</b> is assumed.
</td></tr>
<tr valign="top"><td width=6%>
<i>dir</i>
</td><td>
qualifiers specify a particular transfer direction to and/or from
<i>id</i>. Possible directions are
<b>src</b>, <b>dst</b>, <b>src or dst</b> and
<b>src and</b> <b>dst</b>. E.g., &#145;src foo&#146;, &#145;dst net 128.3&#146;, &#145;src or dst port ftp-data&#146;.
If
there is no dir qualifier,
<b>src or dst</b> is assumed.
For some link layers, such as SLIP and the &#145;&#145;cooked&#146;&#146; Linux capture mode
used for the &#145;&#145;any&#146;&#146; device and for some other device types, the
<b>inbound</b> and
<b>outbound</b> qualifiers can be used to specify a desired direction.
</td></tr>
<tr valign="top"><td width=6%>
<i>proto</i>
</td><td>
qualifiers restrict the match to a particular protocol.
Possible
protos are:
<b>ether</b>, <b>fddi</b>, <b>tr</b>, <b>wlan</b>, <b>ip</b>, <b>ip6</b>, <b>arp</b>, <b>rarp</b>, <b>decnet</b>, <b>tcp</b> and
<b>udp</b>. E.g., &#145;ether src foo&#146;, &#145;arp net 128.3&#146;, &#145;tcp port 21&#146;, &#145;udp portrange
7000-7009&#146;.
If there is
no proto qualifier, all protocols consistent with the type are
assumed.
E.g., &#145;src foo&#146; means &#145;(ip or arp or rarp) src foo&#146;
(except the latter is not legal syntax), &#145;net bar&#146; means &#145;(ip or
arp or rarp) net bar&#146; and &#145;port 53&#146; means &#145;(tcp or udp) port 53&#146;.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
[&#145;fddi&#146; is actually an alias for &#145;ether&#146;; the parser treats them
identically as meaning &#145;&#145;the data link level used on the specified
network interface.&#146;&#146;  FDDI headers contain Ethernet-like source
and destination addresses, and often contain Ethernet-like packet
types, so you can filter on these FDDI fields just as with the
analogous Ethernet fields.
FDDI headers also contain other fields,
but you cannot name them explicitly in a filter expression.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Similarly, &#145;tr&#146; and &#145;wlan&#146; are aliases for &#145;ether&#146;; the previous
paragraph&#146;s statements about FDDI headers also apply to Token Ring
and 802.11 wireless LAN headers.  For 802.11 headers, the destination
address is the DA field and the source address is the SA field; the
BSSID, RA, and TA fields aren&#146;t tested.]
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
In addition to the above, there are some special &#145;primitive&#146; keywords
that don&#146;t follow the pattern:
<b>gateway</b>, <b>broadcast</b>, <b>less</b>, <b>greater</b> and arithmetic expressions.
All of these are described below.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
More complex filter expressions are built up by using the words
<b>and</b>, <b>or</b> and
<b>not</b> to combine primitives.
E.g., &#145;host foo and not port ftp and not port ftp-data&#146;.
To save typing, identical qualifier lists can be omitted.
E.g.,
&#145;tcp dst port ftp or ftp-data or domain&#146; is exactly the same as
&#145;tcp dst port ftp or tcp dst port ftp-data or tcp dst port domain&#146;.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Allowable primitives are:
</td></tr>
<tr valign="top"><td width=6%>
<b>dst host </b><i>host</i>
</td><td>
True if the IPv4/v6 destination field of the packet is <i>host</i>,
which may be either an address or a name.
</td></tr>
<tr valign="top"><td width=6%>
<b>src host </b><i>host</i>
</td><td>
True if the IPv4/v6 source field of the packet is <i>host</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>host
</td><td>
True if either the IPv4/v6 source or destination of the packet is </b><i>host</i>.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Any of the above host expressions can be prepended with the keywords,
<b>ip</b>, <b>arp</b>, <b>rarp</b>, or <b>ip6</b> as in:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>ip host </b><i>host</i>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
which is equivalent to:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>ether proto </b><i>\ip</i><b> and host </b><i>host</i>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
If <i>host</i> is a name with multiple IP addresses, each address will
be checked for a match.
</td></tr>
<tr valign="top"><td width=6%>
<b>ether
</td><td>
True if the Ethernet destination address is </b><i>ehost</i>.
<i>Ehost</i>
may be either a name from /etc/ethers or a number (see
<b>ethers</b>(3N)
for numeric format).
</td></tr>
<tr valign="top"><td width=6%>
<b>ether
</td><td>
True if the Ethernet source address is </b><i>ehost</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>ether
</td><td>
True if either the Ethernet source or destination address is </b><i>ehost</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>gateway</b>
</td><td>
True if the packet used <i>host</i> as a gateway.
I.e., the Ethernet
source or destination address was <i>host</i> but neither the IP source
nor the IP destination was <i>host</i>.
<i>Host</i> must be a name and
must be found both by the machine&#146;s host-name-to-IP-address resolution
mechanisms (host name file, DNS, NIS, etc.) and by the machine&#146;s
host-name-to-Ethernet-address resolution mechanism (/etc/ethers, etc.).
(An equivalent expression is
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>ether host </b><i>ehost </i><b>and not host </b><i>host</i>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
which can be used with either names or numbers for <i>host / ehost</i>.)
This syntax does not work in IPv6-enabled configuration at this moment.
</td></tr>
<tr valign="top"><td width=6%>
<b>dst net </b><i>net</i>
</td><td>
True if the IPv4/v6 destination address of the packet has a network
number of <i>net</i>.
<i>Net</i> may be either a name from /etc/networks
or a network number (see <i>networks(4)</i> for details).
</td></tr>
<tr valign="top"><td width=6%>
<b>src net </b><i>net</i>
</td><td>
True if the IPv4/v6 source address of the packet has a network
number of <i>net</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>net </b><i>net</i>
</td><td>
True if either the IPv4/v6 source or destination address of the packet has a network
number of <i>net</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>net </b><i>net</i> <b>mask </b><i>netmask</i>
</td><td>
True if the IPv4 address matches <i>net</i> with the specific <i>netmask</i>.
May be qualified with <b>src</b> or <b>dst</b>.
Note that this syntax is not valid for IPv6 <i>net</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>net </b><i>net</i>/<i>len</i>
</td><td>
True if the IPv4/v6 address matches <i>net</i> with a netmask <i>len</i>
bits wide.
May be qualified with <b>src</b> or <b>dst</b>.
</td></tr>
<tr valign="top"><td width=6%>
<b>dst port </b><i>port</i>
</td><td>
True if the packet is ip/tcp, ip/udp, ip6/tcp or ip6/udp and has a
destination port value of <i>port</i>.
The <i>port</i> can be a number or a name used in /etc/services (see
<b>tcp</b>(4P)
and
<b>udp</b>(4P)).
If a name is used, both the port
number and protocol are checked.
If a number or ambiguous name is used,
only the port number is checked (e.g., <b>dst port 513</b> will print both
tcp/login traffic and udp/who traffic, and <b>port domain</b> will print
both tcp/domain and udp/domain traffic).
</td></tr>
<tr valign="top"><td width=6%>
<b>src port </b><i>port</i>
</td><td>
True if the packet has a source port value of <i>port</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>port </b><i>port</i>
</td><td>
True if either the source or destination port of the packet is <i>port</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>dst portrange </b><i>port1</i><b>-</b><i>port2</i>
</td><td>
True if the packet is ip/tcp, ip/udp, ip6/tcp or ip6/udp and has a
destination port value between <i>port1</i> and <i>port2</i>.
<i>port1</i> and
<i>port2</i> are interpreted in the same fashion as the
<i>port</i> parameter for
<b>port</b>. </td></tr>
<tr valign="top"><td width=6%>
<b>src portrange </b><i>port1</i><b>-</b><i>port2</i>
</td><td>
True if the packet has a source port value between <i>port1</i> and
<i>port2</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>portrange </b><i>port1</i><b>-</b><i>port2</i>
</td><td>
True if either the source or destination port of the packet is between
<i>port1</i> and <i>port2</i>.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Any of the above port or port range expressions can be prepended with
the keywords, <b>tcp</b> or <b>udp</b>, as in:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>tcp src port </b><i>port</i>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
which matches only tcp packets whose source port is <i>port</i>.
</td></tr>
<tr valign="top"><td width=6%>
<b>less </b><i>length</i>
</td><td>
True if the packet has a length less than or equal to <i>length</i>.
This is equivalent to:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>len &lt;= </b><i>length</i>.
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
</td></tr>
<tr valign="top"><td width=6%>
<b>greater </b><i>length</i>
</td><td>
True if the packet has a length greater than or equal to <i>length</i>.
This is equivalent to:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>len &gt;= </b><i>length</i>.
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
</td></tr>
<tr valign="top"><td width=6%>
<b>ip proto </b><i>protocol</i>
</td><td>
True if the packet is an IPv4 packet (see
<b>ip</b>(4P))
of protocol type <i>protocol</i>.
<i>Protocol</i> can be a number or one of the names
<b>icmp</b>, <b>icmp6</b>, <b>igmp</b>, <b>igrp</b>, <b>pim</b>, <b>ah</b>,
<b>esp</b>, <b>vrrp</b>, <b>udp</b>, or <b>tcp</b>.
Note that the identifiers <b>tcp</b>, <b>udp</b>, and <b>icmp</b> are also
keywords and must be escaped via backslash (\), which is \\ in the C-shell.
Note that this primitive does not chase the protocol header chain.
</td></tr>
<tr valign="top"><td width=6%>
<b>ip6 proto </b><i>protocol</i>
</td><td>
True if the packet is an IPv6 packet of protocol type <i>protocol</i>.
Note that this primitive does not chase the protocol header chain.
</td></tr>
<tr valign="top"><td width=6%>
<b>ip6 protochain </b><i>protocol</i>
</td><td>
True if the packet is IPv6 packet,
and contains protocol header with type <i>protocol</i>
in its protocol header chain.
For example,
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>ip6 protochain 6</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
matches any IPv6 packet with TCP protocol header in the protocol header chain.
The packet may contain, for example,
authentication header, routing header, or hop-by-hop option header,
between IPv6 header and TCP header.
The BPF code emitted by this primitive is complex and
cannot be optimized by BPF optimizer code in <i>tcpdump</i>,
so this can be somewhat slow.
</td></tr>
<tr valign="top"><td width=6%>
<b>ip protochain </b><i>protocol</i>
</td><td>
Equivalent to <b>ip6 protochain </b><i>protocol</i>, but this is for IPv4.
</td></tr>
<tr valign="top"><td width=6%>
<b>ether broadcast</b>
</td><td>
True if the packet is an Ethernet broadcast packet.
The <i>ether</i>
keyword is optional.
</td></tr>
<tr valign="top"><td width=6%>
<b>ip broadcast</b>
</td><td>
True if the packet is an IPv4 broadcast packet.
It checks for both the all-zeroes and all-ones broadcast conventions,
and looks up the subnet mask on the interface on which the capture is
being done.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
If the subnet mask of the interface on which the capture is being done
is not available, either because the interface on which capture is being
done has no netmask or because the capture is being done on the Linux
"any" interface, which can capture on more than one interface, this
check will not work correctly.
</td></tr>
<tr valign="top"><td width=6%>
<b>ether multicast</b>
</td><td>
True if the packet is an Ethernet multicast packet.
The <b>ether</b>
keyword is optional.
This is shorthand for &#145;<b>ether[0] & 1 != 0</b>&#146;.
</td></tr>
<tr valign="top"><td width=6%>
<b>ip multicast</b>
</td><td>
True if the packet is an IPv4 multicast packet.
</td></tr>
<tr valign="top"><td width=6%>
<b>ip6 multicast</b>
</td><td>
True if the packet is an IPv6 multicast packet.
</td></tr>
<tr valign="top"><td width=6%>
<b>ether proto </b><i>protocol</i>
</td><td>
True if the packet is of ether type <i>protocol</i>.
<i>Protocol</i> can be a number or one of the names
<b>ip</b>, <b>ip6</b>, <b>arp</b>, <b>rarp</b>, <b>atalk</b>, <b>aarp</b>,
<b>decnet</b>, <b>sca</b>, <b>lat</b>, <b>mopdl</b>, <b>moprc</b>,
<b>iso</b>, <b>stp</b>, <b>ipx</b>, or <b>netbeui</b>.
Note these identifiers are also keywords
and must be escaped via backslash (\).
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
[In the case of FDDI (e.g., &#145;<b>fddi protocol arp</b>&#146;), Token Ring
(e.g., &#145;<b>tr protocol arp</b>&#146;), and IEEE 802.11 wireless LANS (e.g.,
&#145;<b>wlan protocol arp</b>&#146;), for most of those protocols, the
protocol identification comes from the 802.2 Logical Link Control (LLC)
header, which is usually layered on top of the FDDI, Token Ring, or
802.11 header.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
When filtering for most protocol identifiers on FDDI, Token Ring, or
802.11, <i>tcpdump</i> checks only the protocol ID field of an LLC header
in so-called SNAP format with an Organizational Unit Identifier (OUI) of
0x000000, for encapsulated Ethernet; it doesn&#146;t check whether the packet
is in SNAP format with an OUI of 0x000000.
The exceptions are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>iso</b>
</td><td valign="bottom">
<i>tcpdump</i> checks the DSAP (Destination Service Access Point) and
SSAP (Source Service Access Point) fields of the LLC header;
</td></tr>
<tr valign="top"><td colspan="2">
<b>stp</b> and <b>netbeui</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
<i>tcpdump</i> checks the DSAP of the LLC header;
</td></tr>
<tr valign="top"><td>
<b>atalk</b>
</td><td valign="bottom">
<i>tcpdump</i> checks for a SNAP-format packet with an OUI of 0x080007
and the AppleTalk etype.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
In the case of Ethernet, <i>tcpdump</i> checks the Ethernet type field
for most of those protocols.  The exceptions are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>iso</b>, <b>stp</b>, and <b>netbeui</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
<i>tcpdump</i> checks for an 802.3 frame and then checks the LLC header as
it does for FDDI, Token Ring, and 802.11;
</td></tr>
<tr valign="top"><td>
<b>atalk</b>
</td><td valign="bottom">
<i>tcpdump</i> checks both for the AppleTalk etype in an Ethernet frame and
for a SNAP-format packet as it does for FDDI, Token Ring, and 802.11;
</td></tr>
<tr valign="top"><td>
<b>aarp</b>
</td><td valign="bottom">
<i>tcpdump</i> checks for the AppleTalk ARP etype in either an Ethernet
frame or an 802.2 SNAP frame with an OUI of 0x000000;
</td></tr>
<tr valign="top"><td>
<b>ipx</b>
</td><td valign="bottom">
<i>tcpdump</i> checks for the IPX etype in an Ethernet frame, the IPX
DSAP in the LLC header, the 802.3-with-no-LLC-header encapsulation of
IPX, and the IPX etype in a SNAP frame.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td width=6%>
<b>decnet src </b><i>host</i>
</td><td>
True if the DECNET source address is
<i>host</i>, which may be an address of the form &#145;&#145;10.123&#146;&#146;, or a DECNET host
name.
[DECNET host name support is only available on ULTRIX systems
that are configured to run DECNET.]
</td></tr>
<tr valign="top"><td width=6%>
<b>decnet dst </b><i>host</i>
</td><td>
True if the DECNET destination address is
<i>host</i>. </td></tr>
<tr valign="top"><td width=6%>
<b>decnet host </b><i>host</i>
</td><td>
True if either the DECNET source or destination address is
<i>host</i>. </td></tr>
<tr valign="top"><td width=6%>
<b>ifname </b><i>interface</i>
</td><td>
True if the packet was logged as coming from the specified interface (applies
only to packets logged by OpenBSD&#146;s
<b>pf</b>(4)).
</td></tr>
<tr valign="top"><td width=6%>
<b>on </b><i>interface</i>
</td><td>
Synonymous with the
<b>ifname</b> modifier.
</td></tr>
<tr valign="top"><td width=6%>
<b>rnr </b><i>num</i>
</td><td>
True if the packet was logged as matching the specified PF rule number
(applies only to packets logged by OpenBSD&#146;s
<b>pf</b>(4)).
</td></tr>
<tr valign="top"><td width=6%>
<b>rulenum </b><i>num</i>
</td><td>
Synonomous with the
<b>rnr</b> modifier.
</td></tr>
<tr valign="top"><td width=6%>
<b>reason </b><i>code</i>
</td><td>
True if the packet was logged with the specified PF reason code.  The known
codes are:
<b>match</b>, <b>bad-offset</b>, <b>fragment</b>, <b>short</b>, <b>normalize</b>, and
<b>memory</b> (applies only to packets logged by OpenBSD&#146;s
<b>pf</b>(4)).
</td></tr>
<tr valign="top"><td width=6%>
<b>rset </b><i>name</i>
</td><td>
True if the packet was logged as matching the specified PF ruleset
name of an anchored ruleset (applies only to packets logged by
<b>pf</b>(4)).
</td></tr>
<tr valign="top"><td width=6%>
<b>ruleset </b><i>name</i>
</td><td>
Synonomous with the
<b>rset</b> modifier.
</td></tr>
<tr valign="top"><td width=6%>
<b>srnr </b><i>num</i>
</td><td>
True if the packet was logged as matching the specified PF rule number
of an anchored ruleset (applies only to packets logged by
<b>pf</b>(4)).
</td></tr>
<tr valign="top"><td width=6%>
<b>subrulenum </b><i>num</i>
</td><td>
Synonomous with the
<b>srnr</b> modifier.
</td></tr>
<tr valign="top"><td width=6%>
<b>action </b><i>act</i>
</td><td>
True if PF took the specified action when the packet was logged.  Known actions
are:
<b>pass</b> and
<b>block</b> (applies only to packets logged by OpenBSD&#146;s
<b>pf</b>(4)).
</td></tr>
<tr valign="top"><td width=6%>
<b>ip</b>, <b>ip6</b>, <b>arp</b>, <b>rarp</b>, <b>atalk</b>, <b>aarp</b>, <b>decnet</b>, <b>iso</b>, <b>stp</b>, <b>ipx</b>, <i>netbeui</i>
</td><td>
Abbreviations for:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>ether proto </b><i>p</i>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
where <i>p</i> is one of the above protocols.
</td></tr>
<tr valign="top"><td width=6%>
<b>lat</b>, <b>moprc</b>, <b>mopdl</b>
</td><td>
Abbreviations for:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>ether proto </b><i>p</i>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
where <i>p</i> is one of the above protocols.
Note that
<i>tcpdump</i> does not currently know how to parse these protocols.
</td></tr>
<tr valign="top"><td width=6%>
<b>vlan </b><i>[vlan_id]</i>
</td><td>
True if the packet is an IEEE 802.1Q VLAN packet.
If <i>[vlan_id]</i> is specified, only true if the packet has the specified
<i>vlan_id</i>.
Note that the first <b>vlan</b> keyword encountered in <i>expression</i>
changes the decoding offsets for the remainder of <i>expression</i> on
the assumption that the packet is a VLAN packet.  The <b>vlan
</b><i>[vlan_id]</i> expression may be used more than once, to filter on VLAN
hierarchies.  Each use of that expression increments the filter offsets
by 4.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
For example:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>vlan 100 && vlan 200</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
filters on VLAN 200 encapsulated within VLAN 100, and
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>vlan && vlan 300 && ip</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
filters IPv4 protocols encapsulated in VLAN 300 encapsulated within any
higher order VLAN.
</td></tr>
<tr valign="top"><td width=6%>
<b>mpls </b><i>[label_num]</i>
</td><td>
True if the packet is an MPLS packet.
If <i>[label_num]</i> is specified, only true is the packet has the specified
<i>label_num</i>.
Note that the first <b>mpls</b> keyword encountered in <i>expression</i>
changes the decoding offsets for the remainder of <i>expression</i> on
the assumption that the packet is a MPLS-encapsulated IP packet.  The
<b>mpls </b><i>[label_num]</i> expression may be used more than once, to
filter on MPLS hierarchies.  Each use of that expression increments the
filter offsets by 4.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
For example:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>mpls 100000 && mpls 1024</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
filters packets with an outer label of 100000 and an inner label of
1024, and
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>mpls && mpls 1024 && host 192.9.200.1</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
filters packets to or from 192.9.200.1 with an inner label of 1024 and
any outer label.
</td></tr>
<tr valign="top"><td width=6%>
<b>pppoed</b>
</td><td>
True if the packet is a PPP-over-Ethernet Discovery packet (Ethernet
type 0x8863).
</td></tr>
<tr valign="top"><td width=6%>
<b>pppoes</b>
</td><td>
True if the packet is a PPP-over-Ethernet Session packet (Ethernet
type 0x8864).
Note that the first <b>pppoes</b> keyword encountered in <i>expression</i>
changes the decoding offsets for the remainder of <i>expression</i> on
the assumption that the packet is a PPPoE session packet.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
For example:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>pppoes && ip</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
filters IPv4 protocols encapsulated in PPPoE.
</td></tr>
<tr valign="top"><td width=6%>
<b>tcp</b>, <b>udp</b>, <b>icmp</b>
</td><td>
Abbreviations for:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>ip proto </b><i>p</i><b> or ip6 proto </b><i>p</i>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
where <i>p</i> is one of the above protocols.
</td></tr>
<tr valign="top"><td width=6%>
<b>iso proto </b><i>protocol</i>
</td><td>
True if the packet is an OSI packet of protocol type <i>protocol</i>.
<i>Protocol</i> can be a number or one of the names
<b>clnp</b>, <b>esis</b>, or <b>isis</b>.
</td></tr>
<tr valign="top"><td width=6%>
<b>clnp</b>, <b>esis</b>, <b>isis</b>
</td><td>
Abbreviations for:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>iso proto </b><i>p</i>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
where <i>p</i> is one of the above protocols.
</td></tr>
<tr valign="top"><td width=6%>
<b>l1</b>, <b>l2</b>, <b>iih</b>, <b>lsp</b>, <b>snp</b>, <b>csnp</b>, <b>psnp</b>
</td><td>
Abbreviations for IS-IS PDU types.
</td></tr>
<tr valign="top"><td width=6%>
<b>vpi</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, with a
virtual path identifier of
<i>n</i>. </td></tr>
<tr valign="top"><td width=6%>
<b>vci</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, with a
virtual channel identifier of
<i>n</i>. </td></tr>
<tr valign="top"><td width=6%>
<b>lane</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
an ATM LANE packet.
Note that the first <b>lane</b> keyword encountered in <i>expression</i>
changes the tests done in the remainder of <i>expression</i>
on the assumption that the packet is either a LANE emulated Ethernet
packet or a LANE LE Control packet.  If <b>lane</b> isn&#146;t specified, the
tests are done under the assumption that the packet is an
LLC-encapsulated packet.
</td></tr>
<tr valign="top"><td width=6%>
<b>llc</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
an LLC-encapsulated packet.
</td></tr>
<tr valign="top"><td width=6%>
<b>oamf4s</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
a segment OAM F4 flow cell (VPI=0 & VCI=3).
</td></tr>
<tr valign="top"><td width=6%>
<b>oamf4e</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
an end-to-end OAM F4 flow cell (VPI=0 & VCI=4).
</td></tr>
<tr valign="top"><td width=6%>
<b>oamf4</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
a segment or end-to-end OAM F4 flow cell (VPI=0 & (VCI=3 | VCI=4)).
</td></tr>
<tr valign="top"><td width=6%>
<b>oam</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
a segment or end-to-end OAM F4 flow cell (VPI=0 & (VCI=3 | VCI=4)).
</td></tr>
<tr valign="top"><td width=6%>
<b>metac</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
on a meta signaling circuit (VPI=0 & VCI=1).
</td></tr>
<tr valign="top"><td width=6%>
<b>bcc</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
on a broadcast signaling circuit (VPI=0 & VCI=2).
</td></tr>
<tr valign="top"><td width=6%>
<b>sc</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
on a signaling circuit (VPI=0 & VCI=5).
</td></tr>
<tr valign="top"><td width=6%>
<b>ilmic</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
on an ILMI circuit (VPI=0 & VCI=16).
</td></tr>
<tr valign="top"><td width=6%>
<b>connectmsg</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
on a signaling circuit and is a Q.2931 Setup, Call Proceeding, Connect,
Connect Ack, Release, or Release Done message.
</td></tr>
<tr valign="top"><td width=6%>
<b>metaconnect</b>
</td><td>
True if the packet is an ATM packet, for SunATM on Solaris, and is
on a meta signaling circuit and is a Q.2931 Setup, Call Proceeding, Connect,
Release, or Release Done message.
</td></tr>
<tr valign="top"><td width=6%>
<i>expr relop expr</i>
</td><td>
True if the relation holds, where <i>relop</i> is one of &gt;, &lt;, &gt;=, &lt;=, =,
!=, and <i>expr</i> is an arithmetic expression composed of integer
constants (expressed in standard C syntax), the normal binary operators
[+, -, *, /, &, |, &lt;&lt;, &gt;&gt;], a length operator, and special packet data
accessors.  Note that all comparisons are unsigned, so that, for example,
0x80000000 and 0xffffffff are &gt; 0.
To access
data inside the packet, use the following syntax:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<i>proto</i><b> [ </b><i>expr</i><b> : </b><i>size</i><b> ]</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
<i>Proto</i> is one of <b>ether, fddi, tr, wlan, ppp, slip, link,
ip, arp, rarp, tcp, udp, icmp, ip6</b> or <b>radio</b>, and
indicates the protocol layer for the index operation.
(<b>ether, fddi, wlan, tr, ppp, slip</b> and <b>link</b> all refer to the
link layer. <b>radio</b> refers to the "radio header" added to some
802.11 captures.)
Note that <i>tcp, udp</i> and other upper-layer protocol types only
apply to IPv4, not IPv6 (this will be fixed in the future).
The byte offset, relative to the indicated protocol layer, is
given by <i>expr</i>.
<i>Size</i> is optional and indicates the number of bytes in the
field of interest; it can be either one, two, or four, and defaults to one.
The length operator, indicated by the keyword <b>len</b>, gives the
length of the packet.
<p>
For example, &#145;<b>ether[0] & 1 != 0</b>&#146; catches all multicast traffic.
The expression &#145;<b>ip[0] & 0xf != 5</b>&#146;
catches all IPv4 packets with options.
The expression
&#145;<b>ip[6:2] & 0x1fff = 0</b>&#146;
catches only unfragmented IPv4 datagrams and frag zero of fragmented
IPv4 datagrams.
This check is implicitly applied to the <b>tcp</b> and <b>udp</b>
index operations.
For instance, <b>tcp[0]</b> always means the first
byte of the TCP <i>header</i>, and never means the first byte of an
intervening fragment.
<p>
Some offsets and field values may be expressed as names rather than
as numeric values.
The following protocol header field offsets are
available: <b>icmptype</b> (ICMP type field), <b>icmpcode</b> (ICMP
code field), and <b>tcpflags</b> (TCP flags field).
<p>
The following ICMP type field values are available: <b>icmp-echoreply</b>,
<b>icmp-unreach</b>, <b>icmp-sourcequench</b>, <b>icmp-redirect</b>,
<b>icmp-echo</b>, <b>icmp-routeradvert</b>, <b>icmp-routersolicit</b>,
<b>icmp-timxceed</b>, <b>icmp-paramprob</b>, <b>icmp-tstamp</b>,
<b>icmp-tstampreply</b>, <b>icmp-ireq</b>, <b>icmp-ireqreply</b>,
<b>icmp-maskreq</b>, <b>icmp-maskreply</b>.
<p>
The following TCP flags field values are available: <b>tcp-fin</b>,
<b>tcp-syn</b>, <b>tcp-rst</b>, <b>tcp-push</b>,
<b>tcp-ack</b>, <b>tcp-urg</b>.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Primitives may be combined using:
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
A parenthesized group of primitives and operators
(parentheses are special to the Shell and must be escaped).
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Negation (&#145;<b>!</b>&#146; or &#145;<b>not</b>&#146;).
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Concatenation (&#145;<b>&&</b>&#146; or &#145;<b>and</b>&#146;).
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
Alternation (&#145;<b>||</b>&#146; or &#145;<b>or</b>&#146;).
</td></tr>
<!-- LP ends table -->
</table>
Negation has highest precedence.
Alternation and concatenation have equal precedence and associate
left to right.
Note that explicit <b>and</b> tokens, not juxtaposition,
are now required for concatenation.
<p>
If an identifier is given without a keyword, the most recent keyword
is assumed.
For example,
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>not host vs and ace</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
is short for
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>not host vs and host ace</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
which should not be confused with
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>not ( host vs or ace )</b>
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
<p>
Expression arguments can be passed to <i>tcpdump</i> as either a single
argument or as multiple arguments, whichever is more convenient.
Generally, if the expression contains Shell metacharacters, it is
easier to pass it as a single, quoted argument.
Multiple arguments are concatenated with spaces before being parsed.
</td></tr>
</table>
<h1 class="manpages">EXAMPLES</h1>
<p>
To print all packets arriving at or departing from <i>sundown</i>:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>tcpdump host sundown</b>
</pre></td></tr>
</table>
<p>
To print traffic between <i>helios</i> and either <i>hot</i> or <i>ace</i>:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>tcpdump host helios and \( hot or ace \)</b>
</pre></td></tr>
</table>
<p>
To print all IP packets between <i>ace</i> and any host except <i>helios</i>:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>tcpdump ip host ace and not helios</b>
</pre></td></tr>
</table>
<p>
To print all traffic between local hosts and hosts at Berkeley:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b></b> 
tcpdump net ucb-ether
</pre></td></tr>
</table>
<p>
To print all ftp traffic through internet gateway <i>snup</i>:
(note that the expression is quoted to prevent the shell from
(mis-)interpreting the parentheses):
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b></b> 
tcpdump &#146;gateway snup and (port ftp or ftp-data)&#146;
</pre></td></tr>
</table>
<p>
To print traffic neither sourced from nor destined for local hosts
(if you gateway to one other net, this stuff should never make it
onto your local net).
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b></b> 
tcpdump ip and not net <i>localnet</i>
</pre></td></tr>
</table>
<p>
To print the start and end packets (the SYN and FIN packets) of each
TCP conversation that involves a non-local host.
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b></b> 
tcpdump &#146;tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 and not src and dst net <i>localnet</i>&#146;
</pre></td></tr>
</table>
<p>
To print all IPv4 HTTP packets to and from port 80, i.e. print only
packets that contain data, not, for example, SYN and FIN packets and
ACK-only packets.  (IPv6 is left as an exercise for the reader.)
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b></b> 
tcpdump &#146;tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)&lt;&lt;2)) - ((tcp[12]&0xf0)&gt;&gt;2)) != 0)&#146;
</pre></td></tr>
</table>
<p>
To print IP packets longer than 576 bytes sent through gateway <i>snup</i>:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b></b> 
tcpdump &#146;gateway snup and ip[2:2] &gt; 576&#146;
</pre></td></tr>
</table>
<p>
To print IP broadcast or multicast packets that were
<i>not</i> sent via Ethernet broadcast or multicast:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b></b> 
tcpdump &#146;ether[0] & 1 = 0 and ip[16] &gt;= 224&#146;
</pre></td></tr>
</table>
<p>
To print all ICMP packets that are not echo requests/replies (i.e., not
ping packets):
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b></b> 
tcpdump &#146;icmp[icmptype] != icmp-echo and icmp[icmptype] != icmp-echoreply&#146;
</pre></td></tr>
</table>
<h1 class="manpages">OUTPUT FORMAT</h1>
<p>
The output of <i>tcpdump</i> is protocol dependent.
The following
gives a brief description and examples of most of the formats.
<p>
<b></b> Link Level Headers
<p>
If the &#146;-e&#146; option is given, the link level header is printed out.
On Ethernets, the source and destination addresses, protocol,
and packet length are printed.
<p>
On FDDI networks, the  &#146;-e&#146; option causes <i>tcpdump</i> to print
the &#145;frame control&#146; field,  the source and destination addresses,
and the packet length.
(The &#145;frame control&#146; field governs the
interpretation of the rest of the packet.
Normal packets (such
as those containing IP datagrams) are &#145;async&#146; packets, with a priority
value between 0 and 7; for example, &#145;<b>async4</b>&#146;.
Such packets
are assumed to contain an 802.2 Logical Link Control (LLC) packet;
the LLC header is printed if it is <i>not</i> an ISO datagram or a
so-called SNAP packet.
<p>
On Token Ring networks, the &#146;-e&#146; option causes <i>tcpdump</i> to print
the &#145;access control&#146; and &#145;frame control&#146; fields, the source and
destination addresses, and the packet length.
As on FDDI networks,
packets are assumed to contain an LLC packet.
Regardless of whether
the &#146;-e&#146; option is specified or not, the source routing information is
printed for source-routed packets.
<p>
On 802.11 networks, the &#146;-e&#146; option causes <i>tcpdump</i> to print
the &#145;frame control&#146; fields, all of the addresses in the 802.11 header,
and the packet length.
As on FDDI networks,
packets are assumed to contain an LLC packet.
<p>
<i>(N.B.: The following description assumes familiarity with
the SLIP compression algorithm described in RFC-1144.)</i>
<p>
On SLIP links, a direction indicator (&#145;&#145;I&#146;&#146; for inbound, &#145;&#145;O&#146;&#146; for outbound),
packet type, and compression information are printed out.
The packet type is printed first.
The three types are <i>ip</i>, <i>utcp</i>, and <i>ctcp</i>.
No further link information is printed for <i>ip</i> packets.
For TCP packets, the connection identifier is printed following the type.
If the packet is compressed, its encoded header is printed out.
The special cases are printed out as
<b>*S+</b><i>n</i> and <b>*SA+</b><i>n</i>, where <i>n</i> is the amount by which
the sequence number (or sequence number and ack) has changed.
If it is not a special case,
zero or more changes are printed.
A change is indicated by U (urgent pointer), W (window), A (ack),
S (sequence number), and I (packet ID), followed by a delta (+n or -n),
or a new value (=n).
Finally, the amount of data in the packet and compressed header length
are printed.
<p>
For example, the following line shows an outbound compressed TCP packet,
with an implicit connection identifier; the ack has changed by 6,
the sequence number by 49, and the packet ID by 6; there are 3 bytes of
data and 6 bytes of compressed header:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>O ctcp * A+6 S+49 I+6 3 (6)</b>
</pre></td></tr>
</table>
<p>
<b></b> ARP/RARP Packets
<p>
Arp/rarp output shows the type of request and its arguments.
The
format is intended to be self explanatory.
Here is a short sample taken from the start of an &#145;rlogin&#146; from
host <i>rtsg</i> to host <i>csam</i>:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>arp who-has csam tell rtsg
arp reply csam is-at CSAM</tt>
<p>
</pre></td></tr>
</table>
The first line says that rtsg sent an arp packet asking
for the Ethernet address of internet host csam.
Csam
replies with its Ethernet address (in this example, Ethernet addresses
are in caps and internet addresses in lower case).
<p>
This would look less redundant if we had done <i>tcpdump -n</i>:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>arp who-has 128.3.254.6 tell 128.3.254.68
arp reply 128.3.254.6 is-at 02:07:01:00:01:c4</tt>
</pre></td></tr>
</table>
<p>
If we had done <i>tcpdump -e</i>, the fact that the first packet is
broadcast and the second is point-to-point would be visible:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>RTSG Broadcast 0806  64: arp who-has csam tell rtsg
CSAM RTSG 0806  64: arp reply csam is-at CSAM</tt>
<p>
</pre></td></tr>
</table>
For the first packet this says the Ethernet source address is RTSG, the
destination is the Ethernet broadcast address, the type field
contained hex 0806 (type ETHER_ARP) and the total length was 64 bytes.
<p>
<b></b> TCP Packets
<p>
<i>(N.B.:The following description assumes familiarity with
the TCP protocol described in RFC-793.
If you are not familiar
with the protocol, neither this description nor </i><i>tcpdump</i> will
be of much use to you.)
<p>
The general format of a tcp protocol line is:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<i>src &gt; dst: flags data-seqno ack window urgent options</i>
<p>
</pre></td></tr>
</table>
<i>Src</i> and <i>dst</i> are the source and destination IP
addresses and ports.
<i>Flags</i> are some combination of S (SYN),
F (FIN), P (PUSH), R (RST), W (ECN CWR) or E (ECN-Echo), or a single
&#145;.&#146; (no flags).
<i>Data-seqno</i> describes the portion of sequence space covered
by the data in this packet (see example below).
<i>Ack</i> is sequence number of the next data expected the other
direction on this connection.
<i>Window</i> is the number of bytes of receive buffer space available
the other direction on this connection.
<i>Urg</i> indicates there is &#145;urgent&#146; data in the packet.
<i><a href=#3>Options</a></i> are tcp options enclosed in angle brackets (e.g., &lt;mss 1024&gt;).
<p>
<i>Src, dst</i> and <i>flags</i> are always present.
The other fields
depend on the contents of the packet&#146;s tcp protocol header and
are output only if appropriate.
<p>
Here is the opening portion of an rlogin from host <i>rtsg</i> to
host <i>csam</i>.
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>rtsg.1023 &gt; csam.login: S 768512:768512(0) win 4096 &lt;mss 1024&gt;
csam.login &gt; rtsg.1023: S 947648:947648(0) ack 768513 win 4096 &lt;mss 1024&gt;
rtsg.1023 &gt; csam.login: . ack 1 win 4096
rtsg.1023 &gt; csam.login: P 1:2(1) ack 1 win 4096
csam.login &gt; rtsg.1023: . ack 2 win 4096
rtsg.1023 &gt; csam.login: P 2:21(19) ack 1 win 4096
csam.login &gt; rtsg.1023: P 1:2(1) ack 21 win 4077
csam.login &gt; rtsg.1023: P 2:3(1) ack 21 win 4077 urg 1
csam.login &gt; rtsg.1023: P 3:4(1) ack 21 win 4077 urg 1</tt>
<p>
</pre></td></tr>
</table>
The first line says that tcp port 1023 on rtsg sent a packet
to port <i>login</i>
on csam.
The <b>S</b> indicates that the <i>SYN</i> flag was set.
The packet sequence number was 768512 and it contained no data.
(The notation is &#145;first:last(nbytes)&#146; which means &#145;sequence
numbers <i>first</i>
up to but not including <i>last</i> which is <i>nbytes</i> bytes of user data&#146;.)
There was no piggy-backed ack, the available receive window was 4096
bytes and there was a max-segment-size option requesting an mss of
1024 bytes.
<p>
Csam replies with a similar packet except it includes a piggy-backed
ack for rtsg&#146;s SYN.
Rtsg then acks csam&#146;s SYN.
The &#145;.&#146; means no
flags were set.
The packet contained no data so there is no data sequence number.
Note that the ack sequence
number is a small integer (1).
The first time <i>tcpdump</i> sees a
tcp &#145;conversation&#146;, it prints the sequence number from the packet.
On subsequent packets of the conversation, the difference between
the current packet&#146;s sequence number and this initial sequence number
is printed.
This means that sequence numbers after the
first can be interpreted
as relative byte positions in the conversation&#146;s data stream (with the
first data byte each direction being &#145;1&#146;).
&#145;-S&#146; will override this
feature, causing the original sequence numbers to be output.
<p>
On the 6th line, rtsg sends csam 19 bytes of data (bytes 2 through 20
in the rtsg -&gt; csam side of the conversation).
The PUSH flag is set in the packet.
On the 7th line, csam says it&#146;s received data sent by rtsg up to
but not including byte 21.
Most of this data is apparently sitting in the
socket buffer since csam&#146;s receive window has gotten 19 bytes smaller.
Csam also sends one byte of data to rtsg in this packet.
On the 8th and 9th lines,
csam sends two bytes of urgent, pushed data to rtsg.
<p>
If the snapshot was small enough that <i>tcpdump</i> didn&#146;t capture
the full TCP header, it interprets as much of the header as it can
and then reports &#145;&#145;[|<i>tcp</i>]&#146;&#146; to indicate the remainder could not
be interpreted.
If the header contains a bogus option (one with a length
that&#146;s either too small or beyond the end of the header), <i>tcpdump</i>
reports it as &#145;&#145;[<i>bad opt</i>]&#146;&#146; and does not interpret any further
options (since it&#146;s impossible to tell where they start).
If the header
length indicates options are present but the IP datagram length is not
long enough for the options to actually be there, <i>tcpdump</i> reports
it as &#145;&#145;[<i>bad hdr length</i>]&#146;&#146;.
<p>
<b></b> <b>Capturing TCP packets with particular flag combinations (SYN-ACK, URG-ACK, etc.)</b> <p>
There are 8 bits in the control bits section of the TCP header:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>

</td><td>
<i>CWR | ECE | URG | ACK | PSH | RST | SYN | FIN</i> </td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Let&#146;s assume that we want to watch packets used in establishing
a TCP connection.
Recall that TCP uses a 3-way handshake protocol
when it initializes a new connection; the connection sequence with
regard to the TCP control bits is
<p>
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
1) Caller sends SYN
2) Recipient responds with SYN, ACK
3) Caller sends ACK
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Now we&#146;re interested in capturing packets that have only the
SYN bit set (Step 1).
Note that we don&#146;t want packets from step 2
(SYN-ACK), just a plain initial SYN.
What we need is a correct filter
expression for <i>tcpdump</i>.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Recall the structure of a TCP header without options:
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
 0                            15                              31
-----------------------------------------------------------------
|          source port          |       destination port        |
-----------------------------------------------------------------
|                        sequence number                        |
-----------------------------------------------------------------
|                     acknowledgment number                     |
-----------------------------------------------------------------
|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |
-----------------------------------------------------------------
|         TCP checksum          |       urgent pointer          |
-----------------------------------------------------------------
</pre></td></tr>
</table>
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
A TCP header usually holds 20 octets of data, unless options are
present.
The first line of the graph contains octets 0 - 3, the
second line shows octets 4 - 7 etc.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Starting to count with 0, the relevant TCP control bits are contained
in octet 13:
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
 0             7|             15|             23|             31
----------------|---------------|---------------|----------------
|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |
----------------|---------------|---------------|----------------
|               |  13th octet   |               |               |
</pre></td></tr>
</table>
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Let&#146;s have a closer look at octet no. 13:
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
                |               |
                |---------------|
                |C|E|U|A|P|R|S|F|
                |---------------|
                |7   5   3     0|
</pre></td></tr>
</table>
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
These are the TCP control bits we are interested
in.
We have numbered the bits in this octet from 0 to 7, right to
left, so the PSH bit is bit number 3, while the URG bit is number 5.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Recall that we want to capture packets with only SYN set.
Let&#146;s see what happens to octet 13 if a TCP datagram arrives
with the SYN bit set in its header:
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
                |C|E|U|A|P|R|S|F|
                |---------------|
                |0 0 0 0 0 0 1 0|
                |---------------|
                |7 6 5 4 3 2 1 0|
</pre></td></tr>
</table>
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Looking at the
control bits section we see that only bit number 1 (SYN) is set.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Assuming that octet number 13 is an 8-bit unsigned integer in
network byte order, the binary value of this octet is
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
00000010
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
and its decimal representation is
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   7     6     5     4     3     2     1     0
0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2
</pre></td></tr>
</table>
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
We&#146;re almost done, because now we know that if only SYN is set,
the value of the 13th octet in the TCP header, when interpreted
as a 8-bit unsigned integer in network byte order, must be exactly 2.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
This relationship can be expressed as
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<b></b> tcp[13] == 2
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
We can use this expression as the filter for <i>tcpdump</i> in order
to watch packets which have only SYN set:
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<b></b> tcpdump -i xl0 tcp[13] == 2
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
The expression says "let the 13th octet of a TCP datagram have
the decimal value 2", which is exactly what we want.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Now, let&#146;s assume that we need to capture SYN packets, but we
don&#146;t care if ACK or any other TCP control bit is set at the
same time.
Let&#146;s see what happens to octet 13 when a TCP datagram
with SYN-ACK set arrives:
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
     |C|E|U|A|P|R|S|F|
     |---------------|
     |0 0 0 1 0 0 1 0|
     |---------------|
     |7 6 5 4 3 2 1 0|
</pre></td></tr>
</table>
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Now bits 1 and 4 are set in the 13th octet.
The binary value of
octet 13 is
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
     00010010
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
which translates to decimal
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
   7     6     5     4     3     2     1     0
0*2 + 0*2 + 0*2 + 1*2 + 0*2 + 0*2 + 1*2 + 0*2   = 18
</pre></td></tr>
</table>
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
Now we can&#146;t just use &#146;tcp[13] == 18&#146; in the <i>tcpdump</i> filter
expression, because that would select only those packets that have
SYN-ACK set, but not those with only SYN set.
Remember that we don&#146;t care
if ACK or any other control bit is set as long as SYN is set.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
In order to achieve our goal, we need to logically AND the
binary value of octet 13 with some other value to preserve
the SYN bit.
We know that we want SYN to be set in any case,
so we&#146;ll logically AND the value in the 13th octet with
the binary value of a SYN:
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
          00010010 SYN-ACK              00000010 SYN
     AND  00000010 (we want SYN)   AND  00000010 (we want SYN)
          --------                      --------
     =    00000010                 =    00000010
</pre></td></tr>
</table>
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
We see that this AND operation delivers the same result
regardless whether ACK or another TCP control bit is set.
The decimal representation of the AND value as well as
the result of this operation is 2 (binary 00000010),
so we know that for packets with SYN set the following
relation must hold true:
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
( ( value of octet 13 ) AND ( 2 ) ) == ( 2 )
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
This points us to the <i>tcpdump</i> filter expression
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<b></b> <br />
     tcpdump -i xl0 &#146;tcp[13] & 2 == 2&#146;
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Note that you should use single quotes or a backslash
in the expression to hide the AND (&#146;&&#146;) special character
from the shell.
<p>
<b></b> <b></b> UDP Packets
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
UDP format is illustrated by this rwho packet:
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>actinide.who &gt; broadcast.who: udp 84</tt>
<p>
</pre></td></tr>
</table>
This says that port <i>who</i> on host <i>actinide</i> sent a udp
datagram to port <i>who</i> on host <i>broadcast</i>, the Internet
broadcast address.
The packet contained 84 bytes of user data.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Some UDP services are recognized (from the source or destination
port number) and the higher level protocol information printed.
In particular, Domain Name service requests (RFC-1034/1035) and Sun
RPC calls (RFC-1050) to NFS.
<p>
<b></b> UDP Name Server Requests
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
<i>(N.B.:The following description assumes familiarity with
the Domain Service protocol described in RFC-1035.
If you are not familiar
with the protocol, the following description will appear to be written
in greek.)</i>
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Name server requests are formatted as
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<i>src &gt; dst: id op? flags qtype qclass name (len)</i>
<p>
<tt>h2opolo.1538 &gt; helios.domain: 3+ A? ucbvax.berkeley.edu. (37)</tt>
<p>
</pre></td></tr>
</table>
Host <i>h2opolo</i> asked the domain server on <i>helios</i> for an
address record (qtype=A) associated with the name <i>ucbvax.berkeley.edu.</i>
The query id was &#145;3&#146;.
The &#145;+&#146; indicates the <i>recursion desired</i> flag
was set.
The query length was 37 bytes, not including the UDP and
IP protocol headers.
The query operation was the normal one, <i>Query</i>,
so the op field was omitted.
If the op had been anything else, it would
have been printed between the &#145;3&#146; and the &#145;+&#146;.
Similarly, the qclass was the normal one,
<i>C_IN</i>, and omitted.
Any other qclass would have been printed
immediately after the &#145;A&#146;.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
A few anomalies are checked and may result in extra fields enclosed in
square brackets:  If a query contains an answer, authority records or
additional records section,
<i>ancount</i>, <i>nscount</i>, or
<i>arcount</i> are printed as &#145;[<i>n</i>a]&#146;, &#145;[<i>n</i>n]&#146; or  &#145;[<i>n</i>au]&#146; where <i>n</i>
is the appropriate count.
If any of the response bits are set (AA, RA or rcode) or any of the
&#145;must be zero&#146; bits are set in bytes two and three, &#145;[b2&3=<i>x</i>]&#146;
is printed, where <i>x</i> is the hex value of header bytes two and three.
<p>
<b></b> UDP Name Server Responses
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Name server responses are formatted as
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<i>src &gt; dst:  id op rcode flags a/n/au type class data (len)</i>
<p>
<tt>helios.domain &gt; h2opolo.1538: 3 3/3/7 A 128.32.137.3 (273)
helios.domain &gt; h2opolo.1537: 2 NXDomain* 0/1/0 (97)</tt>
<p>
</pre></td></tr>
</table>
In the first example, <i>helios</i> responds to query id 3 from <i>h2opolo</i>
with 3 answer records, 3 name server records and 7 additional records.
The first answer record is type A (address) and its data is internet
address 128.32.137.3.
The total size of the response was 273 bytes,
excluding UDP and IP headers.
The op (Query) and response code
(NoError) were omitted, as was the class (C_IN) of the A record.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
In the second example, <i>helios</i> responds to query 2 with a
response code of non-existent domain (NXDomain) with no answers,
one name server and no authority records.
The &#145;*&#146; indicates that
the <i>authoritative answer</i> bit was set.
Since there were no
answers, no type, class or data were printed.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Other flag characters that might appear are &#145;-&#146; (recursion available,
RA, <i>not</i> set) and &#145;|&#146; (truncated message, TC, set).
If the
&#145;question&#146; section doesn&#146;t contain exactly one entry, &#145;[<i>n</i>q]&#146;
is printed.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Note that name server requests and responses tend to be large and the
default <i>snaplen</i> of 68 bytes may not capture enough of the packet
to print.
Use the <b>-s</b> flag to increase the snaplen if you
need to seriously investigate name server traffic.
&#145;<b>-s 128</b>&#146;
has worked well for me.
<p>
<p>
<b></b> SMB/CIFS decoding
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
<i>tcpdump</i> now includes fairly extensive SMB/CIFS/NBT decoding for data
on UDP/137, UDP/138 and TCP/139.
Some primitive decoding of IPX and
NetBEUI SMB data is also done.
<p>
By default a fairly minimal decode is done, with a much more detailed
decode done if -v is used.
Be warned that with -v a single SMB packet
may take up a page or more, so only use -v if you really want all the
gory details.
<p>
For information on SMB packet formats and what all te fields mean see
www.cifs.org or the pub/samba/specs/ directory on your favorite
samba.org mirror site.
The SMB patches were written by Andrew Tridgell
(<a href="mailto:tridge@samba.org">tridge@samba.org</a>).
<p>
<p>
<b></b> NFS Requests and Replies
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Sun NFS (Network File System) requests and replies are printed as:
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<i>src.xid &gt; dst.nfs: len op args</i>
<i>src.nfs &gt; dst.xid: reply stat len op results</i>
<p>
<tt>
sushi.6709 &gt; wrl.nfs: 112 readlink fh 21,24/10.73165
wrl.nfs &gt; sushi.6709: reply ok 40 readlink "../var"
sushi.201b &gt; wrl.nfs:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;144 lookup fh 9,74/4096.6878 "xcolors"
wrl.nfs &gt; sushi.201b:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reply ok 128 lookup fh 9,74/4134.3150
</tt>
<p>
</pre></td></tr>
</table>
In the first line, host <i>sushi</i> sends a transaction with id <i>6709</i>
to <i>wrl</i> (note that the number following the src host is a
transaction id, <i>not</i> the source port).
The request was 112 bytes,
excluding the UDP and IP headers.
The operation was a <i>readlink</i>
(read symbolic link) on file handle (<i>fh</i>) 21,24/10.731657119.
(If one is lucky, as in this case, the file handle can be interpreted
as a major,minor device number pair, followed by the inode number and
generation number.)
<i>Wrl</i> replies &#145;ok&#146; with the contents of the link.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
In the third line, <i>sushi</i> asks <i>wrl</i> to lookup the name
&#145;<i>xcolors</i>&#146; in directory file 9,74/4096.6878.
Note that the data printed
depends on the operation type.
The format is intended to be self
explanatory if read in conjunction with
an NFS protocol spec.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
If the -v (verbose) flag is given, additional information is printed.
For example:
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>
sushi.1372a &gt; wrl.nfs:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;148 read fh 21,11/12.195 8192 bytes @ 24576
wrl.nfs &gt; sushi.1372a:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reply ok 1472 read REG 100664 ids 417/0 sz 29388
</tt>
<p>
</pre></td></tr>
</table>
(-v also prints the IP header TTL, ID, length, and fragmentation fields,
which have been omitted from this example.)  In the first line,
<i>sushi</i> asks <i>wrl</i> to read 8192 bytes from file 21,11/12.195,
at byte offset 24576.
<i>Wrl</i> replies &#145;ok&#146;; the packet shown on the
second line is the first fragment of the reply, and hence is only 1472
bytes long (the other bytes will follow in subsequent fragments, but
these fragments do not have NFS or even UDP headers and so might not be
printed, depending on the filter expression used).
Because the -v flag
is given, some of the file attributes (which are returned in addition
to the file data) are printed: the file type (&#145;&#145;REG&#146;&#146;, for regular file),
the file mode (in octal), the uid and gid, and the file size.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
If the -v flag is given more than once, even more details are printed.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Note that NFS requests are very large and much of the detail won&#146;t be printed
unless <i>snaplen</i> is increased.
Try using &#145;<b>-s 192</b>&#146; to watch
NFS traffic.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
NFS reply packets do not explicitly identify the RPC operation.
Instead,
<i>tcpdump</i> keeps track of &#145;&#145;recent&#146;&#146; requests, and matches them to the
replies using the transaction ID.
If a reply does not closely follow the
corresponding request, it might not be parsable.
<p>
<b></b> AFS Requests and Replies
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Transarc AFS (Andrew File System) requests and replies are printed
as:
<p>
<b></b> </td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<i>src.sport &gt; dst.dport: rx packet-type</i>
<i>src.sport &gt; dst.dport: rx packet-type service call call-name args</i>
<i>src.sport &gt; dst.dport: rx packet-type service reply call-name args</i>
<p>
<tt>
elvis.7001 &gt; pike.afsfs:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rx data fs call rename old fid 536876964/1/1 ".newsrc.new"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new fid 536876964/1/1 ".newsrc"
pike.afsfs &gt; elvis.7001: rx data fs reply rename
</tt>
<p>
</pre></td></tr>
</table>
In the first line, host elvis sends a RX packet to pike.
This was
a RX data packet to the fs (fileserver) service, and is the start of
an RPC call.
The RPC call was a rename, with the old directory file id
of 536876964/1/1 and an old filename of &#145;.newsrc.new&#146;, and a new directory
file id of 536876964/1/1 and a new filename of &#145;.newsrc&#146;.
The host pike
responds with a RPC reply to the rename call (which was successful, because
it was a data packet and not an abort packet).
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
In general, all AFS RPCs are decoded at least by RPC call name.
Most
AFS RPCs have at least some of the arguments decoded (generally only
the &#145;interesting&#146; arguments, for some definition of interesting).
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
The format is intended to be self-describing, but it will probably
not be useful to people who are not familiar with the workings of
AFS and RX.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
If the -v (verbose) flag is given twice, acknowledgement packets and
additional header information is printed, such as the the RX call ID,
call number, sequence number, serial number, and the RX packet flags.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
If the -v flag is given twice, additional information is printed,
such as the the RX call ID, serial number, and the RX packet flags.
The MTU negotiation information is also printed from RX ack packets.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
If the -v flag is given three times, the security index and service id
are printed.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Error codes are printed for abort packets, with the exception of Ubik
beacon packets (because abort packets are used to signify a yes vote
for the Ubik protocol).
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Note that AFS requests are very large and many of the arguments won&#146;t
be printed unless <i>snaplen</i> is increased.
Try using &#145;<b>-s 256</b>&#146;
to watch AFS traffic.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
AFS reply packets do not explicitly identify the RPC operation.
Instead,
<i>tcpdump</i> keeps track of &#145;&#145;recent&#146;&#146; requests, and matches them to the
replies using the call number and service ID.
If a reply does not closely
follow the
corresponding request, it might not be parsable.
<p>
<p>
<b></b> KIP AppleTalk (DDP in UDP)
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
AppleTalk DDP packets encapsulated in UDP datagrams are de-encapsulated
and dumped as DDP packets (i.e., all the UDP header information is
discarded).
The file
<i>/etc/atalk.names</i> is used to translate AppleTalk net and node numbers to names.
Lines in this file have the form
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<i>number&nbsp;&nbsp;name</i>
<p>
<tt>1.254&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ether
16.1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;icsd-net
1.254.110&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ace</tt>
<p>
</pre></td></tr>
</table>
The first two lines give the names of AppleTalk networks.
The third
line gives the name of a particular host (a host is distinguished
from a net by the 3rd octet in the number -
a net number <i>must</i> have two octets and a host number <i>must</i>
have three octets.)  The number and name should be separated by
whitespace (blanks or tabs).
The
<i>/etc/atalk.names</i> file may contain blank lines or comment lines (lines starting with
a &#145;#&#146;).
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
AppleTalk addresses are printed in the form
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<i>net.host.port</i>
<p>
<tt>144.1.209.2 &gt; icsd-net.112.220
office.2 &gt; icsd-net.112.220
jssmag.149.235 &gt; icsd-net.2</tt>
<p>
</pre></td></tr>
</table>
(If the
<i>/etc/atalk.names</i> doesn&#146;t exist or doesn&#146;t contain an entry for some AppleTalk
host/net number, addresses are printed in numeric form.)
In the first example, NBP (DDP port 2) on net 144.1 node 209
is sending to whatever is listening on port 220 of net icsd node 112.
The second line is the same except the full name of the source node
is known (&#145;office&#146;).
The third line is a send from port 235 on
net jssmag node 149 to broadcast on the icsd-net NBP port (note that
the broadcast address (255) is indicated by a net name with no host
number - for this reason it&#146;s a good idea to keep node names and
net names distinct in /etc/atalk.names).
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
NBP (name binding protocol) and ATP (AppleTalk transaction protocol)
packets have their contents interpreted.
Other protocols just dump
the protocol name (or number if no name is registered for the
protocol) and packet size.
<p>
<b>NBP packets</b> are formatted like the following examples:
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>icsd-net.112.220 &gt; jssmag.2: nbp-lkup 190: "=:LaserWriter@*"
jssmag.209.2 &gt; icsd-net.112.220: nbp-reply 190: "RM1140:LaserWriter@*" 250
techpit.2 &gt; icsd-net.112.220: nbp-reply 190: "techpit:LaserWriter@*" 186</tt>
<p>
</pre></td></tr>
</table>
The first line is a name lookup request for laserwriters sent by net icsd host
112 and broadcast on net jssmag.
The nbp id for the lookup is 190.
The second line shows a reply for this request (note that it has the
same id) from host jssmag.209 saying that it has a laserwriter
resource named "RM1140" registered on port 250.
The third line is
another reply to the same request saying host techpit has laserwriter
"techpit" registered on port 186.
<p>
<b>ATP packet</b> formatting is demonstrated by the following example:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>jssmag.209.165 &gt; helios.132: atp-req  12266&lt;0-7&gt; 0xae030001
helios.132 &gt; jssmag.209.165: atp-resp 12266:0 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:1 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:2 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:4 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:6 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp*12266:7 (512) 0xae040000
jssmag.209.165 &gt; helios.132: atp-req  12266&lt;3,5&gt; 0xae030001
helios.132 &gt; jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 &gt; jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
jssmag.209.165 &gt; helios.132: atp-rel  12266&lt;0-7&gt; 0xae030001
jssmag.209.133 &gt; helios.132: atp-req* 12267&lt;0-7&gt; 0xae030002</tt>
<p>
</pre></td></tr>
</table>
Jssmag.209 initiates transaction id 12266 with host helios by requesting
up to 8 packets (the &#145;&lt;0-7&gt;&#146;).
The hex number at the end of the line
is the value of the &#145;userdata&#146; field in the request.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Helios responds with 8 512-byte packets.
The &#145;:digit&#146; following the
transaction id gives the packet sequence number in the transaction
and the number in parens is the amount of data in the packet,
excluding the atp header.
The &#145;*&#146; on packet 7 indicates that the
EOM bit was set.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Jssmag.209 then requests that packets 3 & 5 be retransmitted.
Helios
resends them then jssmag.209 releases the transaction.
Finally,
jssmag.209 initiates the next request.
The &#145;*&#146; on the request
indicates that XO (&#145;exactly once&#146;) was <i>not</i> set.
<p>
<p>
<b></b> IP Fragmentation
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
Fragmented Internet datagrams are printed as
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<b>(frag </b><i>id</i><b>:</b><i>size</i><b>@</b><i>offset</i><b>+)</b>
<b>(frag </b><i>id</i><b>:</b><i>size</i><b>@</b><i>offset</i><b>)</b>
<p>
</pre></td></tr>
</table>
(The first form indicates there are more fragments.
The second
indicates this is the last fragment.)
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
<i>Id</i> is the fragment id.
<i>Size</i> is the fragment
size (in bytes) excluding the IP header.
<i>Offset</i> is this
fragment&#146;s offset (in bytes) in the original datagram.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
The fragment information is output for each fragment.
The first
fragment contains the higher level protocol header and the frag
info is printed after the protocol info.
Fragments
after the first contain no higher level protocol header and the
frag info is printed after the source and destination addresses.
For example, here is part of an ftp from arizona.edu to lbl-rtsg.arpa
over a CSNET connection that doesn&#146;t appear to handle 576 byte datagrams:
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
<tt>arizona.ftp-data &gt; rtsg.1170: . 1024:1332(308) ack 1 win 4096 (frag 595a:328@0+)
arizona &gt; rtsg: (frag 595a:204@328)
rtsg.1170 &gt; arizona.ftp-data: . ack 1536 win 2560</tt>
<p>
</pre></td></tr>
</table>
There are a couple of things to note here:  First, addresses in the
2nd line don&#146;t include port numbers.
This is because the TCP
protocol information is all in the first fragment and we have no idea
what the port or sequence numbers are when we print the later fragments.
Second, the tcp sequence information in the first line is printed as if there
were 308 bytes of user data when, in fact, there are 512 bytes (308 in
the first frag and 204 in the second).
If you are looking for holes
in the sequence space or trying to match up acks
with packets, this can fool you.
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
A packet with the IP <i>don&#146;t fragment</i> flag is marked with a
trailing <b>(DF)</b>.
<p>
<b></b> Timestamps
</td></tr>
<!-- Found tag RS -->
<tr><td colspan="2">
By default, all output lines are preceded by a timestamp.
The timestamp
is the current clock time in the form
</td></tr>
<tr><td width=6%>&nbsp;</td><td>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<i>hh:mm:ss.frac</i>
</pre></td></tr>
</table>
and is as accurate as the kernel&#146;s clock.
The timestamp reflects the time the kernel first saw the packet.
No attempt
is made to account for the time lag between when the
Ethernet interface removed the packet from the wire and when the kernel
serviced the &#145;new packet&#146; interrupt.
</td></tr>
</table>
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<h1 class="manpages">AUTHORS</h1>
The original authors are:
<p>
Van Jacobson,
Craig Leres and
Steven McCanne, all of the
Lawrence Berkeley National Laboratory, University of California, Berkeley, CA.
<p>
It is currently being maintained by tcpdump.org.
<p>
The current version is available via http:
<p>
<i><a href="http://www.tcpdump.org/">http://www.tcpdump.org</a>/</i> <p>
The original distribution is available via anonymous ftp:
<p>
<i><a href="ftp://ftp.ee.lbl.gov/tcpdump.tar.Z">ftp://ftp.ee.lbl.gov/tcpdump.tar.Z</a></i> <p>
IPv6/IPsec support is added by WIDE/KAME project.
This program uses Eric Young&#146;s SSLeay library, under specific configuration.
<h1 class="manpages">BUGS</h1>
Please send problems, bugs, questions, desirable enhancements, etc. to:
<p>
<a href="mailto:tcpdump-workers@tcpdump.org">tcpdump-workers@tcpdump.org</a>
<p>
Please send source code contributions, etc. to:
<p>
<a href="mailto:patches@tcpdump.org">patches@tcpdump.org</a>
<p>
NIT doesn&#146;t let you watch your own outbound traffic, BPF will.
We recommend that you use the latter.
<p>
On Linux systems with 2.0[.x] kernels:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>

</td><td>
packets on the loopback device will be seen twice;
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
packet filtering cannot be done in the kernel, so that all packets must
be copied from the kernel in order to be filtered in user mode;
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
all of a packet, not just the part that&#146;s within the snapshot length,
will be copied from the kernel (the 2.0[.x] packet capture mechanism, if
asked to copy only part of a packet to userland, will not report the
true length of the packet; this would cause most IP packets to get an
error from
<b>tcpdump</b>); </td></tr>
<tr valign="top"><td width=6%>

</td><td>
capturing on some PPP devices won&#146;t work correctly.
</td></tr>
<!-- LP ends table -->
</table>
We recommend that you upgrade to a 2.2 or later kernel.
<p>
Some attempt should be made to reassemble IP fragments or, at least
to compute the right length for the higher level protocol.
<p>
Name server inverse queries are not dumped correctly: the (empty)
question section is printed rather than real query in the answer
section.
Some believe that inverse queries are themselves a bug and
prefer to fix the program generating them rather than <i>tcpdump</i>.
<p>
A packet trace that crosses a daylight savings time change will give
skewed time stamps (the time change is ignored).
<p>
Filter expressions on fields other than those in Token Ring headers will
not correctly handle source-routed Token Ring packets.
<p>
Filter expressions on fields other than those in 802.11 headers will not
correctly handle 802.11 data packets with both To DS and From DS set.
<p>
<b>ip6 proto</b> should chase header chain, but at this moment it does not.
<b>ip6 protochain</b> is supplied for this behavior.
<p>
Arithmetic expression against transport layer headers, like <b>tcp[0]</b>,
does not work against IPv6 packets.
It only looks at IPv4 packets.
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion57a2.html?tutorial=unix_commands&amp;file=tcpdump.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/tcpdump.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:31 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
