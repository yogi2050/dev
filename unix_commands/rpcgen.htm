<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/rpcgen.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:21 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>rpcgen - Unix, Linux Command</title>
<meta name="Description" Content="rpcgen - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>rpcgen - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<h1 class="manpages">NAME</h1>
<tt>rpcgen</tt> - an RPC protocol compiler
<h1 class="manpages">SYNOPSIS</h1>
<tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
rpcgen </tt><i>infile</i><tt>
</pre></td></tr>
</table>
</tt><tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- Need break --><br />
rpcgen [-D</tt><i>name</i><tt>[=</tt><i>value</i><tt>]] [-T] [-K </tt><i>secs</i>] <i>infile</i><tt>
</pre></td></tr>
</table>
</tt><tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- Need break --><br />
rpcgen -c|-h|-l|-m|-t [-o </tt><i>outfile</i><tt> ] </tt><i>infile</i><tt>
</pre></td></tr>
</table>
</tt><tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- Need break --><br />
rpcgen [-I] -s </tt><i>nettype</i><tt> [-o </tt><i>outfile</i><tt>] </tt><i>infile</i><tt>
</pre></td></tr>
</table>
</tt><tt><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<!-- Need break --><br />
rpcgen -n </tt><i>netid</i><tt> [-o </tt><i>outfile</i><tt>] </tt><i>infile</i><tt>
</tt></pre></td></tr>
</table>
<h1 class="manpages">DESCRIPTION</h1>
<p>
<tt>rpcgen</tt>
is a tool that generates C code to implement an RPC protocol.
The input to
<tt>rpcgen</tt>
is a language similar to C known as
RPC Language (Remote Procedure Call Language).
<p>
<tt>rpcgen</tt>
is normally used as in the first synopsis where
it takes an input file and generates up to four output files.
If the
<i>infile</i>
is named
<tt>proto.x</tt>,
then
<tt>rpcgen</tt>
will generate a header file in
<tt>proto.h</tt>,
XDR routines in
<tt>proto_xdr.c</tt>,
server-side stubs in
<tt>proto_svc.c</tt>,
and client-side stubs in
<tt>proto_clnt.c</tt>.
With the
<tt>-T</tt>
option,
it will also generate the RPC dispatch table in
<tt>proto_tbl.i</tt>.
With the
<tt>-Sc</tt>
option,
it will also generate  sample code which would illustrate how to use the
remote procedures on the client side. This code would be created in
<tt>proto_client.c</tt>.
With the
<tt>-Ss</tt>
option,
it will also generate a sample server code which would illustrate how to write
the remote procedures. This code would be created in
<tt>proto_server.c</tt>.
<p>
The server created can be started both by the port monitors
(for example, <tt>inetd</tt> or <tt>listen</tt>)
or by itself.
When it is started by a port monitor,
it creates servers only for the transport for which
the file descriptor <tt>0</tt> was passed.
The name of the transport must be specified
by setting up the environmental variable
<tt>PM_TRANSPORT</tt>.
When the server generated by
<tt>rpcgen</tt>
is executed,
it creates server handles for all the transports
specified in
<tt>NETPATH</tt>
environment variable,
or if it is unset,
it creates server handles for all the visible transports from
<tt>/etc/netconfig</tt>
file.
Note:
the transports are chosen at run time and not at compile time.
When the server is self-started,
it backgrounds itself by default.
A special define symbol
<tt>RPC_SVC_FG</tt>
can be used to run the server process in foreground.
<p>
The second synopsis provides special features which allow
for the creation of more sophisticated RPC servers.
These features include support for user provided
<tt>#defines</tt>
and RPC dispatch tables.
The entries in the RPC dispatch table contain:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
pointers to the service routine corresponding to that procedure,
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
a pointer to the input and output arguments
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
the size of these routines
</td></tr>
</table>
A server can use the dispatch table to check authorization
and then to execute the service routine;
a client library may use it to deal with the details of storage
management and XDR data conversion.
<p>
The other three synopses shown above are used when
one does not want to generate all the output files,
but only a particular one.
Some examples of their usage is described in the
EXAMPLE
section below.
When
<tt>rpcgen</tt>
is executed with the
<tt>-s</tt>
option,
it creates servers for that particular class of transports.
When
executed with the
<tt>-n</tt>
option,
it creates a server for the transport specified by
<i>netid</i>.
If
<i>infile</i>
is not specified,
<tt>rpcgen</tt>
accepts the standard input.
<p>
The C preprocessor,
<tt>cc -E</tt>
[see <tt>cc</tt>(1)],
is run on the input file before it is actually interpreted by
<tt>rpcgen</tt>.
For each type of output file,
<tt>rpcgen</tt>
defines a special preprocessor symbol for use by the
<tt>rpcgen</tt>
programmer:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<tt>RPC_HDR</tt>
</td><td valign="bottom">
defined when compiling into header files
</td></tr>
<tr valign="top"><td>
<tt>RPC_XDR</tt>
</td><td valign="bottom">
defined when compiling into XDR routines
</td></tr>
<tr valign="top"><td>
<tt>RPC_SVC</tt>
</td><td valign="bottom">
defined when compiling into server-side stubs
</td></tr>
<tr valign="top"><td>
<tt>RPC_CLNT</tt>
</td><td valign="bottom">
defined when compiling into client-side stubs
</td></tr>
<tr valign="top"><td>
<tt>RPC_TBL</tt>
</td><td valign="bottom">
defined when compiling into RPC dispatch tables
</td></tr>
<!-- P ends table -->
</table>
Any line beginning with
&#145;<tt>%</tt>&#146;
is passed directly into the output file,
uninterpreted by
<tt>rpcgen</tt>.
<p>
For every data type referred to in
<i>infile</i>,
<tt>rpcgen</tt>
assumes that there exists a
routine with the string
<tt>xdr_</tt>
prepended to the name of the data type.
If this routine does not exist in the RPC/XDR
library, it must be provided.
Providing an undefined data type
allows customization of XDR routines.
<!-- ignored unsupported tag .ne -->
<p>
The following options are available:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<tt>-a</tt>
</td><td valign="bottom">
Generate all the files including sample code for client and server side.
</td></tr>
<tr valign="top"><td>
<tt>-b</tt>
</td><td valign="bottom">
This generates code for the SunOS4.1 style of rpc. It is
for backward compatibilty.  This is the default.
</td></tr>
<tr valign="top"><td>
<tt>-5</tt>
</td><td valign="bottom">
This generates code for the SysVr4 style of rpc. It is used by the
Transport Independent RPC that is in Svr4 systems.
By default rpcgen generates code for SunOS4.1 stype of rpc.
</td></tr>
<tr valign="top"><td>
<tt>-c</tt>
</td><td valign="bottom">
Compile into XDR routines.
</td></tr>
<tr valign="top"><td>
<tt>-C</tt>
</td><td valign="bottom">
Generate code in ANSI C. This option also generates code that could be
compiled with the C++ compiler.  This is the default.
</td></tr>
<tr valign="top"><td>
<tt>-k</tt>
</td><td valign="bottom">
Generate code in K&R C.  The default is ANSI C.
</td></tr>
<tr valign="top"><td colspan="2">
<tt>-D</tt><i>name</i><tt>[=</tt><i>value</i><tt>]</tt>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Define a symbol
<i>name</i>.
Equivalent to the
<tt>#define</tt>
directive in the source.
If no
<i>value</i>
is given,
<i>value</i>
is defined as <tt>1</tt>.
This option may be specified more than once.
</td></tr>
<tr valign="top"><td>
<tt>-h</tt>
</td><td valign="bottom">
Compile into
<tt>C</tt>
data-definitions (a header file).
<tt>-T</tt>
option can be used in conjunction to produce a
header file which supports RPC dispatch tables.
</td></tr>
<tr valign="top"><td>
<tt>-I</tt>
</td><td valign="bottom">
Generate a service that can be started from inetd.  The default is
to generate a static service that handles transports selected with <tt>-s</tt>.
Using <tt>-I</tt> allows starting a service by either method.
</td></tr>
<tr valign="top"><td colspan="2">
<tt>-K</tt><i> secs</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
By default, services created using <tt>rpcgen</tt> wait <tt>120</tt> seconds
after servicing a request before exiting.
That interval can be changed using the <tt>-K</tt> flag.
To create a server that exits immediately upon servicing a request,
<tt>-K 0</tt> can be used.
To create a server that never exits, the appropriate argument is
<tt>-K -1</tt>.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
When monitoring for a server,
some portmonitors, like
<tt>listen</tt>(1M),
<i>always</i> spawn a new process in response to a service request.
If it is known that a server will be used with such a monitor, the
server should exit immediately on completion.
For such servers, <tt>rpcgen</tt> should be used with <tt>-K -1</tt>.
</td></tr>
<tr valign="top"><td>
<tt>-l</tt>
</td><td valign="bottom">
Compile into client-side stubs.
</td></tr>
<tr valign="top"><td>
<tt>-m</tt>
</td><td valign="bottom">
Compile into server-side stubs,
but do not generate a <blink><blink>\(</blink>lq</blink>main<blink><blink>\(</blink>rq</blink> routine.
This option is useful for doing callback-routines
and for users who need to write their own
<blink><blink>\(</blink>lq</blink>main<blink><blink>\(</blink>rq</blink> routine to do initialization.
</td></tr>
<tr valign="top"><td>
<tt>-n </tt><i>netid</i>
</td><td valign="bottom">
Compile into server-side stubs for the transport
specified by
<i>netid</i>.
There should be an entry for
<i>netid</i>
in the
netconfig database.
This option may be specified more than once,
so as to compile a server that serves multiple transports.
</td></tr>
<tr valign="top"><td>
<tt>-N</tt>
</td><td valign="bottom">
Use the newstyle of rpcgen. This allows procedures to have multiple arguments.
It also uses the style of parameter passing that closely resembles C. So, when
passing an argument to a remote procedure you do not have to pass a pointer to
the argument but the argument itself. This behaviour is different from the oldstyle
of rpcgen generated code. The newstyle is not the default case because of
backward compatibility.
</td></tr>
<tr valign="top"><td colspan="2">
<tt>-o </tt><i>outfile</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Specify the name of the output file.
If none is specified,
standard output is used
(<tt>-c</tt>,
<tt>-h</tt>,
<tt>-l</tt>,
<tt>-m</tt>,
<tt>-n</tt>,
<tt>-s</tt>,
<tt>-s<blink>\S</blink>c,
</tt><tt>-s<blink>\S</blink>s
and
</tt><tt>-t</tt>
modes only).
</td></tr>
<tr valign="top"><td colspan="2">
<tt>-s </tt><i>nettype</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Compile into server-side stubs for all the
transports belonging to the class
<i>nettype</i>.
The supported classes are
<tt>netpath</tt>,
<tt>visible</tt>,
<tt>circuit_n</tt>,
<tt>circuit_v</tt>,
<tt>datagram_n</tt>,
<tt>datagram_v</tt>,
<tt>tcp</tt>,
and
<tt>udp</tt>
[see <tt>rpc</tt>(3N)
for the meanings associated with these classes].
This option may be specified more than once.
Note:
the transports are chosen at run time and not at compile time.
</td></tr>
<tr valign="top"><td>
<tt>-Sc</tt>
</td><td valign="bottom">
Generate sample code to show the use of remote procedure and how to bind
to the server before calling the client side stubs generated by rpcgen.
</td></tr>
<tr valign="top"><td>
<tt>-Ss</tt>
</td><td valign="bottom">
Generate skeleton code for the remote procedures on the server side. You would need
to fill in the actual code for the remote procedures.
</td></tr>
<tr valign="top"><td>
<tt>-t</tt>
</td><td valign="bottom">
Compile into RPC dispatch table.
</td></tr>
<tr valign="top"><td>
<tt>-T</tt>
</td><td valign="bottom">
Generate the code to support RPC dispatch tables.
</td></tr>
<!-- P ends table -->
</table>
The options
<tt>-c</tt>,
<tt>-h</tt>,
<tt>-l</tt>,
<tt>-m</tt>,
<tt>-s</tt>
and
<tt>-t</tt>
are used exclusively to generate a particular type of file,
while the options
<tt>-D</tt>
and
<tt>-T</tt>
are global and can be used with the other options.
<!-- ignored unsupported tag .ne -->
<h1 class="manpages">NOTES</h1>
The RPC Language does not support nesting of structures.
As a work-around,
structures can be declared at the top-level,
and their name used inside other structures in
order to achieve the same effect.
<p>
Name clashes can occur when using program definitions,
since the apparent scoping does not really apply.
Most of these can be avoided by giving
unique names for programs,
versions,
procedures and types.
<p>
The server code generated with
<tt>-n</tt>
option refers to the transport indicated by
<i>netid</i>
and hence is very site specific.
<h1 class="manpages">EXAMPLE</h1>
The following example:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td width=6%>

</td><td>
<tt>$ rpcgen -T prot.x
</tt></td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
generates the five files:
<tt>prot.h</tt>,
<tt>prot_clnt.c</tt>,
<tt>prot_svc.c</tt>,
<tt>prot_xdr.c</tt>
and
<tt>prot_tbl.i</tt>.
</td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
The following example sends the C data-definitions (header file)
to the standard output.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
<tt>$ rpcgen -h prot.x
</tt></td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
To send the test version of the
<tt>-DTEST</tt>,
server side stubs for
all the transport belonging to the class
<tt>datagram_n</tt>
to standard output, use:
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
<tt>$ rpcgen -s datagram_n -DTEST prot.x
</tt></td></tr>
<!-- Found tag IP -->
<tr><td colspan="2">
To create the server side stubs for the transport indicated
by
<i>netid</i>
<tt>tcp</tt>,
use:
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
<tt>$ rpcgen -n tcp -o prot_svc.c prot.x
</tt></td></tr>
</table>
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversione828.html?tutorial=unix_commands&amp;file=rpcgen.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/rpcgen.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:21 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
