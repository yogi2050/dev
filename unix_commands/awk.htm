<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_commands/awk.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:26 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>awk - Unix, Linux Command</title>
<meta name="Description" Content="awk - Unix, Linux Command Manual Pages (Manpages) ,  Learning fundamentals of UNIX and Linux in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="../unix_system_calls/index.html">Unix - System Calls</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - Commands List</b></a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>awk - Unix, Linux Command</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .if -->
<!-- ignored unsupported tag .\} -->
<!-- ignored unsupported tag .\} -->
<h1 class="manpages">NAME</h1>
gawk - pattern scanning and processing language
<h1 class="manpages">SYNOPSIS</h1>
<b>gawk</b> [ <font size="-1">POSIX</font> or <font size="-1">GNU</font> style options ]
<b>-f</b> <i>program-file</i> [
<b>--</b> ] file ...
<!-- Need break --><br />
<b>gawk</b> [ <font size="-1">POSIX</font> or <font size="-1">GNU</font> style options ]
[
<b>--</b> ]
<i>program-text</i> file ...
<p>
<b>pgawk</b> [ <font size="-1">POSIX</font> or <font size="-1">GNU</font> style options ]
<b>-f</b> <i>program-file</i> [
<b>--</b> ] file ...
<!-- Need break --><br />
<b>pgawk</b> [ <font size="-1">POSIX</font> or <font size="-1">GNU</font> style options ]
[
<b>--</b> ]
<i>program-text</i> file ...
<h1 class="manpages">DESCRIPTION</h1>
<i>Gawk</i> is the <font size="-1">GNU</font> Project&#146;s implementation of the <font size="-1">AWK</font> programming language.
It conforms to the definition of the language in
the <font size="-1">POSIX</font> 1003.2 Command Language And Utilities Standard.
This version in turn is based on the description in
<i>The AWK Programming Language</i>, by Aho, Kernighan, and Weinberger,
with the additional features found in the System V Release 4 version
of <font size="-1">UNIX</font>
<i>awk</i>. <i>Gawk</i> also provides more recent Bell Laboratories
<i>awk</i> extensions, and a number of <font size="-1">GNU</font>-specific extensions.
<p>
<i>Pgawk</i> is the profiling version of
<i>gawk</i>. It is identical in every way to
<i>gawk</i>, except that programs run more slowly,
and it automatically produces an execution profile in the file
<b>awkprof.out</b> when done.
See the
<b>--profile</b> option, below.
<p>
The command line consists of options to
<i>gawk</i> itself, the <font size="-1">AWK</font> program text (if not supplied via the
<b>-f</b> or
<b>--file</b> options), and values to be made
available in the
<b>ARGC</b> and
<b>ARGV</b> pre-defined <font size="-1">AWK</font> variables.
<h1 class="manpages">OPTION FORMAT</h1>
<p>
<i>Gawk</i> options may be either traditional <font size="-1">POSIX</font> one letter options,
or <font size="-1">GNU</font> style long options.  <font size="-1">POSIX</font> options start with a single &#145;&#145;-&#146;&#146;,
while long options start with &#145;&#145;--&#146;&#146;.
Long options are provided for both <font size="-1">GNU</font>-specific features and
for <font size="-1">POSIX</font>-mandated features.
<p>
Following the <font size="-1">POSIX</font> standard,
<i>gawk</i>-specific options are supplied via arguments to the
<b>-W</b> option.  Multiple
<b>-W</b> options may be supplied
Each
<b>-W</b> option has a corresponding long option, as detailed below.
Arguments to long options are either joined with the option
by an
<b>=</b> sign, with no intervening spaces, or they may be provided in the
next command line argument.
Long options may be abbreviated, as long as the abbreviation
remains unique.
<h1 class="manpages">OPTIONS</h1>
<p>
<i>Gawk</i> accepts the following options, listed alphabetically.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>-F</b><i> fs</i> <!-- Consumed .TP -->
<br />
<b>--field-separator</b><i> fs</i> </td><td valign="bottom">
Use
<i>fs</i> for the input field separator (the value of the
<b>FS</b> predefined
variable).
</td></tr>
<tr valign="top"><td colspan="2">
<b>-v</b><i> var</i><b>=</b><i>val</i>
<!-- Consumed .TP -->
<br />
<b>--assign </b><i>var</i><b>=</b><i>val</i>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Assign the value
<i>val</i> to the variable
<i>var</i>, before execution of the program begins.
Such variable values are available to the
<b>BEGIN</b> block of an <font size="-1">AWK</font> program.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-f</b><i> program-file</i> <!-- Consumed .TP -->
<br />
<b>--file</b><i> program-file</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Read the <font size="-1">AWK</font> program source from the file
<i>program-file</i>, instead of from the first command line argument.
Multiple
<b>-f</b> (or
<b>--file</b>) options may be used.
</td></tr>
<tr valign="top"><td>
<b>-mf</b><i> NNN</i> <!-- Consumed .TP -->
<br />
<b>-mr</b><i> NNN</i> </td><td valign="bottom">
Set various memory limits to the value
<i>NNN</i>. The
<b>f</b> flag sets the maximum number of fields, and the
<b>r</b> flag sets the maximum record size.  These two flags and the
<b>-m</b> option are from the Bell Laboratories research version of <font size="-1">UNIX</font>
<i>awk</i>. They are ignored by
<i>gawk</i>, since
<i>gawk</i> has no pre-defined limits.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W compat</b> <!-- Consumed .TP -->
<br />
<b>-W traditional</b> <!-- Consumed .TP -->
<br />
<b>--compat</b> <!-- Consumed .TP -->
<br />
<b>--traditional</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Run in
<i>compatibility</i> mode.  In compatibility mode,
<i>gawk</i> behaves identically to <font size="-1">UNIX</font>
<i>awk</i>; none of the <font size="-1">GNU</font>-specific extensions are recognized.
The use of
<b>--traditional</b> is preferred over the other forms of this option.
See
<b><a href=#34>GNU EXTENSIONS</a></b>, below, for more information.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W copyleft</b> <!-- Consumed .TP -->
<br />
<b>-W copyright</b> <!-- Consumed .TP -->
<br />
<b>--copyleft</b> <!-- Consumed .TP -->
<br />
<b>--copyright</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Print the short version of the <font size="-1">GNU</font> copyright information message on
the standard output and exit successfully.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W dump-variables</b>[<b>=</b><i>file</i>]
<!-- Consumed .TP -->
<br />
<b>--dump-variables</b>[<b>=</b><i>file</i>]
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Print a sorted list of global variables, their types and final values to
<i>file</i>. If no
<i>file</i> is provided,
<i>gawk</i> uses a file named
<i>awkvars.out</i> in the current directory.
<p>
Having a list of all the global variables is a good way to look for
typographical errors in your programs.
You would also use this option if you have a large program with a lot of
functions, and you want to be sure that your functions don&#146;t
inadvertently use global variables that you meant to be local.
(This is a particularly easy mistake to make with simple variable
names like
<b>i</b>, <b>j</b>, and so on.)
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W exec </b><i>file</i> <!-- Consumed .TP -->
<br />
<b>--exec</b><i> file</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Similar to
<b>-f</b>, however, this is option is the last one processed.
This should be used with
<b>#!</b> scripts, particularly for CGI applications, to avoid
passing in options or source code (!) on the command line
from a URL.
This option disables command-line variable assignments.
</td></tr>
<tr valign="top"><td>
<b>-W gen-po</b> <!-- Consumed .TP -->
<br />
<b>--gen-po</b> </td><td valign="bottom">
Scan and parse the <font size="-1">AWK</font> program, and generate a <font size="-1">GNU</font>
<b>&#46;po</b> format file on standard output with entries for all localizable
strings in the program.  The program itself is not executed.
See the <font size="-1">GNU</font>
<i>gettext</i> distribution for more information on
<b>&#46;po</b> files.
</td></tr>
<tr valign="top"><td>
<b>-W help</b> <!-- Consumed .TP -->
<br />
<b>-W usage</b> <!-- Consumed .TP -->
<br />
<b>--help</b> <!-- Consumed .TP -->
<br />
<b>--usage</b> </td><td valign="bottom">
Print a relatively short summary of the available options on
the standard output.
(Per the
<i>GNU Coding Standards</i>, these options cause an immediate, successful exit.)
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W lint</b>[<b>=</b><i>value</i>] <!-- Consumed .TP -->
<br />
<b>--lint</b>[<b>=</b><i>value</i>] </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Provide warnings about constructs that are
dubious or non-portable to other <font size="-1">AWK</font> implementations.
With an optional argument of
<b>fatal</b>, lint warnings become fatal errors.
This may be drastic, but its use will certainly encourage the
development of cleaner <font size="-1">AWK</font> programs.
With an optional argument of
<b>invalid</b>, only warnings about things that are
actually invalid are issued. (This is not fully implemented yet.)
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W lint-old</b> <!-- Consumed .TP -->
<br />
<b>--lint-old</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Provide warnings about constructs that are
not portable to the original version of Unix
<i>awk</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>-W non-decimal-data</b> <!-- Consumed .TP -->
<br />
<b>--non-decimal-data</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Recognize octal and hexadecimal values in input data.
<i>Use this option with great caution!</i> </td></tr>
<tr valign="top"><td colspan="2">
<b>-W posix</b> <!-- Consumed .TP -->
<br />
<b>--posix</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This turns on
<i>compatibility</i> mode, with the following additional restrictions:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
<b>&#92;x</b> escape sequences are not recognized.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
Only space and tab act as field separators when
<b>FS</b> is set to a single space, newline does not.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
You cannot continue lines after
<b>?</b> and
<b>:</b>. </td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The synonym
<b>func</b> for the keyword
<b>function</b> is not recognized.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The operators
<b>**</b> and
<b>**=</b> cannot be used in place of
<b>^</b> and
<b>^=</b>. </td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>fflush()</b> function is not available.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W profile</b>[<b>=</b><i>prof_file</i>]
<!-- Consumed .TP -->
<br />
<b>--profile</b>[<b>=</b><i>prof_file</i>]
</td></tr><tr valign="top"><td width=1%>&nbsp;</td><td>
Send profiling data to
<i>prof_file</i>. The default is
<b>awkprof.out</b>. When run with
<i>gawk</i>, the profile is just a &#145;&#145;pretty printed&#146;&#146; version of the program.
When run with
<i>pgawk</i>, the profile contains execution counts of each statement in the program
in the left margin and function call counts for each user-defined function.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W re-interval</b> <!-- Consumed .TP -->
<br />
<b>--re-interval</b> </td></tr><tr valign="top"><td width=1%>&nbsp;</td><td>
Enable the use of
<i>interval expressions</i> in regular expression matching
(see
<b><a href=#16>Regular Expressions</a></b>, below).
Interval expressions were not traditionally available in the
<font size="-1">AWK</font> language.  The <font size="-1">POSIX</font> standard added them, to make
<i>awk</i> and
<i>egrep</i> consistent with each other.
However, their use is likely
to break old <font size="-1">AWK</font> programs, so
<i>gawk</i> only provides them if they are requested with this option, or when
<b>--posix</b> is specified.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W source </b><i>program-text</i> <!-- Consumed .TP -->
<br />
<b>--source</b><i> program-text</i> </td></tr><tr valign="top"><td width=1%>&nbsp;</td><td>
Use
<i>program-text</i> as <font size="-1">AWK</font> program source code.
This option allows the easy intermixing of library functions (used via the
<b>-f</b> and
<b>--file</b> options) with source code entered on the command line.
It is intended primarily for medium to large <font size="-1">AWK</font> programs used
in shell scripts.
</td></tr>
<tr valign="top"><td colspan="2">
<b>-W version</b> <!-- Consumed .TP -->
<br />
<b>--version</b> </td></tr><tr valign="top"><td width=1%>&nbsp;</td><td>
Print version information for this particular copy of
<i>gawk</i> on the standard output.
This is useful mainly for knowing if the current copy of
<i>gawk</i> on your system
is up to date with respect to whatever the Free Software Foundation
is distributing.
This is also useful when reporting bugs.
(Per the
<i>GNU Coding Standards</i>, these options cause an immediate, successful exit.)
</td></tr>
<tr valign="top"><td>
<b>--</b> </td><td valign="bottom">
Signal the end of options. This is useful to allow further arguments to the
<font size="-1">AWK</font> program itself to start with a &#145;&#145;-&#146;&#146;.
This is mainly for consistency with the argument parsing convention used
by most other <font size="-1">POSIX</font> programs.
</td></tr>
<!-- PP ends table -->
</table>
In compatibility mode,
any other options are flagged as invalid, but are otherwise ignored.
In normal operation, as long as program text has been supplied, unknown
options are passed on to the <font size="-1">AWK</font> program in the
<b>ARGV</b> array for processing.  This is particularly useful for running <font size="-1">AWK</font>
programs via the &#145;&#145;#!&#146;&#146; executable interpreter mechanism.
<h1 class="manpages">AWK PROGRAM EXECUTION</h1>
<p>
An <font size="-1">AWK</font> program consists of a sequence of pattern-action statements
and optional function definitions.
<p>
<i>pattern</i><b>&nbsp;{ </b><i>action statements</i><b> }</b>
<!-- Need break --><br />
<b>function </b><i>name</i><b>(</b><i>parameter list</i><b>) { </b><i>statements</i><b> }</b>
<p>
<i>Gawk</i> first reads the program source from the
<i>program-file</i>(s) if specified,
from arguments to
<b>--source</b>, or from the first non-option argument on the command line.
The
<b>-f</b> and
<b>--source</b> options may be used multiple times on the command line.
<i>Gawk</i> reads the program text as if all the
<i>program-file</i>s and command line source texts
had been concatenated together.  This is useful for building libraries
of <font size="-1">AWK</font> functions, without having to include them in each new <font size="-1">AWK</font>
program that uses them.  It also provides the ability to mix library
functions with command line programs.
<p>
The environment variable
<b>AWKPATH</b> specifies a search path to use when finding source files named with
the
<b>-f</b> option.  If this variable does not exist, the default path is
<b>".:/usr/local/share/awk"</b>.
(The actual directory may vary, depending upon how
<i>gawk</i> was built and installed.)
If a file name given to the
<b>-f</b> option contains a &#145;&#145;/&#146;&#146; character, no path search is performed.
<p>
<i>Gawk</i> executes <font size="-1">AWK</font> programs in the following order.
First,
all variable assignments specified via the
<b>-v</b> option are performed.
Next,
<i>gawk</i> compiles the program into an internal form.
Then,
<i>gawk</i> executes the code in the
<b>BEGIN</b> block(s) (if any),
and then proceeds to read
each file named in the
<b>ARGV</b> array.
If there are no files named on the command line,
<i>gawk</i> reads the standard input.
<p>
If a filename on the command line has the form
<i>var</i><b>=</b><i>val</i> it is treated as a variable assignment.  The variable
<i>var</i> will be assigned the value
<i>val</i>. (This happens after any
<b>BEGIN</b> block(s) have been run.)
Command line variable assignment
is most useful for dynamically assigning values to the variables
<font size="-1">AWK</font> uses to control how input is broken into fields and records.
It is also useful for controlling state if multiple passes are needed over
a single data file.
<p>
If the value of a particular element of
<b>ARGV</b> is empty (<b>""</b>),
<i>gawk</i> skips over it.
<p>
For each record in the input,
<i>gawk</i> tests to see if it matches any
<i>pattern</i> in the <font size="-1">AWK</font> program.
For each pattern that the record matches, the associated
<i>action</i> is executed.
The patterns are tested in the order they occur in the program.
<p>
Finally, after all the input is exhausted,
<i>gawk</i> executes the code in the
<b>END</b> block(s) (if any).
<h1 class="manpages">VARIABLES, RECORDS AND FIELDS</h1>
<font size="-1">AWK</font> variables are dynamic; they come into existence when they are
first used.  Their values are either floating-point numbers or strings,
or both,
depending upon how they are used.  <font size="-1">AWK</font> also has one dimensional
arrays; arrays with multiple dimensions may be simulated.
Several pre-defined variables are set as a program
runs; these will be described as needed and summarized below.
<h2><i>Records</i></h2>
Normally, records are separated by newline characters.  You can control how
records are separated by assigning values to the built-in variable
<b>RS</b>. If
<b>RS</b> is any single character, that character separates records.
Otherwise,
<b>RS</b> is a regular expression.  Text in the input that matches this
regular expression separates the record.
However, in compatibility mode,
only the first character of its string
value is used for separating records.
If
<b>RS</b> is set to the null string, then records are separated by
blank lines.
When
<b>RS</b> is set to the null string, the newline character always acts as
a field separator, in addition to whatever value
<b>FS</b> may have.
<h2><i>Fields</i></h2>
<p>
As each input record is read,
<i>gawk</i> splits the record into
<i>fields</i>, using the value of the
<b>FS</b> variable as the field separator.
If
<b>FS</b> is a single character, fields are separated by that character.
If
<b>FS</b> is the null string, then each individual character becomes a
separate field.
Otherwise,
<b>FS</b> is expected to be a full regular expression.
In the special case that
<b>FS</b> is a single space, fields are separated
by runs of spaces and/or tabs and/or newlines.
(But see the discussion of
<b>--posix</b>, below).
<b>NOTE:</b> The value of
<b>IGNORECASE</b> (see below) also affects how fields are split when
<b>FS</b> is a regular expression, and how records are separated when
<b>RS</b> is a regular expression.
<p>
If the
<b>FIELDWIDTHS</b> variable is set to a space separated list of numbers, each field is
expected to have fixed width, and
<i>gawk</i> splits up the record using the specified widths.  The value of
<b>FS</b> is ignored.
Assigning a new value to
<b>FS</b> overrides the use of
<b>FIELDWIDTHS</b>, and restores the default behavior.
<p>
Each field in the input record may be referenced by its position,
<b>$1</b>, <b>$2</b>, and so on.
<b>$0</b> is the whole record.
Fields need not be referenced by constants:
<p>
<b>n = 5
<!-- Need break --><br />
print $n
</b><p>
prints the fifth field in the input record.
<p>
The variable
<b>NF</b> is set to the total number of fields in the input record.
<p>
References to non-existent fields (i.e. fields after
<b>$NF</b>) produce the null-string.  However, assigning to a non-existent field
(e.g.,
<b>$(NF+2) = 5</b>) increases the value of
<b>NF</b>, creates any intervening fields with the null string as their value, and
causes the value of
<b>$0</b> to be recomputed, with the fields being separated by the value of
<b>OFS</b>. References to negative numbered fields cause a fatal error.
Decrementing
<b>NF</b> causes the values of fields past the new value to be lost, and the value of
<b>$0</b> to be recomputed, with the fields being separated by the value of
<b>OFS</b>. <p>
Assigning a value to an existing field
causes the whole record to be rebuilt when
<b>$0</b> is referenced.
Similarly, assigning a value to
<b>$0</b> causes the record to be resplit, creating new
values for the fields.
<h2><i>Built-in Variables</i></h2>
<p>
<i>Gawk</i>&#146;s built-in variables are:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>ARGC</b> </td><td valign="bottom">
The number of command line arguments (does not include options to
<i>gawk</i>, or the program source).
</td></tr>
<tr valign="top"><td>
<b>ARGIND</b> </td><td valign="bottom">
The index in
<b>ARGV</b> of the current file being processed.
</td></tr>
<tr valign="top"><td>
<b>ARGV</b> </td><td valign="bottom">
Array of command line arguments.  The array is indexed from
0 to
<b>ARGC</b> - 1.
Dynamically changing the contents of
<b>ARGV</b> can control the files used for data.
</td></tr>
<tr valign="top"><td>
<b>BINMODE</b> </td><td valign="bottom">
On non-POSIX systems, specifies use of &#145;&#145;binary&#146;&#146; mode for all file I/O.
Numeric values of 1, 2, or 3, specify that input files, output files, or
all files, respectively, should use binary I/O.
String values of <b>"r"</b>, or <b>"w"</b> specify that input files, or output files,
respectively, should use binary I/O.
String values of <b>"rw"</b> or <b>"wr"</b> specify that all files
should use binary I/O.
Any other string value is treated as <b>"rw"</b>, but generates a warning message.
</td></tr>
<tr valign="top"><td>
<b>CONVFMT</b> </td><td valign="bottom">
The conversion format for numbers, <b>"%.6g"</b>, by default.
</td></tr>
<tr valign="top"><td>
<b>ENVIRON</b> </td><td valign="bottom">
An array containing the values of the current environment.
The array is indexed by the environment variables, each element being
the value of that variable (e.g., <b>ENVIRON["HOME"]</b> might be
<b>/home/arnold</b>). Changing this array does not affect the environment seen by programs which
<i>gawk</i> spawns via redirection or the
<b>system()</b> function.
</td></tr>
<tr valign="top"><td>
<b>ERRNO</b> </td><td valign="bottom">
If a system error occurs either doing a redirection for
<b>getline</b>, during a read for
<b>getline</b>, or during a
<b>close()</b>, then
<b>ERRNO</b> will contain
a string describing the error.
The value is subject to translation in non-English locales.
</td></tr>
<tr valign="top"><td>
<b>FIELDWIDTHS</b> </td><td valign="bottom">
A white-space separated list of fieldwidths.  When set,
<i>gawk</i> parses the input into fields of fixed width, instead of using the
value of the
<b>FS</b> variable as the field separator.
</td></tr>
<tr valign="top"><td>
<b>FILENAME</b> </td><td valign="bottom">
The name of the current input file.
If no files are specified on the command line, the value of
<b>FILENAME</b> is &#145;&#145;-&#146;&#146;.
However,
<b>FILENAME</b> is undefined inside the
<b>BEGIN</b> block
(unless set by
<b>getline</b>). </td></tr>
<tr valign="top"><td>
<b>FNR</b> </td><td valign="bottom">
The input record number in the current input file.
</td></tr>
<tr valign="top"><td>
<b>FS</b> </td><td valign="bottom">
The input field separator, a space by default.  See
<b><a href=#8>Fields</a></b>, above.
</td></tr>
<tr valign="top"><td>
<b>IGNORECASE</b> </td><td valign="bottom">
Controls the case-sensitivity of all regular expression
and string operations.  If
<b>IGNORECASE</b> has a non-zero value, then string comparisons and
pattern matching in rules,
field splitting with
<b>FS</b>, record separating with
<b>RS</b>, regular expression
matching with
<b>~</b> and
<b>!~</b>, and the
<b>gensub()</b>, <b>gsub()</b>, <b>index()</b>, <b>match()</b>, <b>split()</b>, and
<b>sub()</b> built-in functions all ignore case when doing regular expression
operations.
<b>NOTE:</b> Array subscripting is
<i>not</i> affected.
However, the
<b>asort()</b> and
<b>asorti()</b> functions are affected.
<p>
Thus, if
<b>IGNORECASE</b> is not equal to zero,
<b>/aB/</b> matches all of the strings <b>"ab"</b>, <b>"aB"</b>, <b>"Ab"</b>,
and <b>"AB"</b>.
As with all <font size="-1">AWK</font> variables, the initial value of
<b>IGNORECASE</b> is zero, so all regular expression and string
operations are normally case-sensitive.
Under Unix, the full ISO 8859-1 Latin-1 character set is used
when ignoring case.
As of
<i>gawk</i> 3.1.4, the case equivalencies are fully locale-aware, based on
the C
<b>&lt;ctype.h&gt;</b> facilities such as
<b>isalpha()</b>, and
<b>tolupper()</b>. </td></tr>
<tr valign="top"><td>
<b>LINT</b> </td><td valign="bottom">
Provides dynamic control of the
<b>--lint</b> option from within an <font size="-1">AWK</font> program.
When true,
<i>gawk</i> prints lint warnings. When false, it does not.
When assigned the string value <b>"fatal"</b>,
lint warnings become fatal errors, exactly like
<b>--lint=fatal</b>. Any other true value just prints warnings.
</td></tr>
<tr valign="top"><td>
<b>NF</b> </td><td valign="bottom">
The number of fields in the current input record.
</td></tr>
<tr valign="top"><td>
<b>NR</b> </td><td valign="bottom">
The total number of input records seen so far.
</td></tr>
<tr valign="top"><td>
<b>OFMT</b> </td><td valign="bottom">
The output format for numbers, <b>"%.6g"</b>, by default.
</td></tr>
<tr valign="top"><td>
<b>OFS</b> </td><td valign="bottom">
The output field separator, a space by default.
</td></tr>
<tr valign="top"><td>
<b>ORS</b> </td><td valign="bottom">
The output record separator, by default a newline.
</td></tr>
<tr valign="top"><td>
<b>PROCINFO</b> </td><td valign="bottom">
The elements of this array provide access to information about the
running <font size="-1">AWK</font> program.
On some systems,
there may be elements in the array, <b>"group1"</b> through
<b>"group</b><i>n</i><b>"</b> for some
<i>n</i>, which is the number of supplementary groups that the process has.
Use the
<b>in</b> operator to test for these elements.
The following elements are guaranteed to be available:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>PROCINFO["egid"]</b>
</td><td valign="bottom">
the value of the
<b>getegid</b>(2)
system call.
</td></tr>
<tr valign="top"><td>
<b>PROCINFO["euid"]</b>
</td><td valign="bottom">
the value of the
<b>geteuid</b>(2)
system call.
</td></tr>
<tr valign="top"><td>
<b>PROCINFO["FS"]</b>
</td><td valign="bottom">
<b>"FS"</b> if field splitting with
<b>FS</b> is in effect, or <b>"FIELDWIDTHS"</b> if field splitting with
<b>FIELDWIDTHS</b> is in effect.
</td></tr>
<tr valign="top"><td>
<b>PROCINFO["gid"]</b>
</td><td valign="bottom">
the value of the
<b>getgid</b>(2)
system call.
</td></tr>
<tr valign="top"><td>
<b>PROCINFO["pgrpid"]</b>
</td><td valign="bottom">
the process group ID of the current process.
</td></tr>
<tr valign="top"><td>
<b>PROCINFO["pid"]</b>
</td><td valign="bottom">
the process ID of the current process.
</td></tr>
<tr valign="top"><td>
<b>PROCINFO["ppid"]</b>
</td><td valign="bottom">
the parent process ID of the current process.
</td></tr>
<tr valign="top"><td>
<b>PROCINFO["uid"]</b>
</td><td valign="bottom">
the value of the
<b>getuid</b>(2)
system call.
</td></tr>
<tr valign="top"><td colspan="2">
<b>PROCINFO["version"]</b>
</td></tr><tr valign="top"><td width=17%>&nbsp;</td><td>
The version of
<i>gawk</i>. This is available from
version 3.1.4 and later.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td>
<b>RS</b> </td><td valign="bottom">
The input record separator, by default a newline.
</td></tr>
<tr valign="top"><td>
<b>RT</b> </td><td valign="bottom">
The record terminator.
<i>Gawk</i> sets
<b>RT</b> to the input text that matched the character or regular expression
specified by
<b>RS</b>. </td></tr>
<tr valign="top"><td>
<b>RSTART</b> </td><td valign="bottom">
The index of the first character matched by
<b>match()</b>; 0 if no match.
(This implies that character indices start at one.)
</td></tr>
<tr valign="top"><td>
<b>RLENGTH</b> </td><td valign="bottom">
The length of the string matched by
<b>match()</b>; -1 if no match.
</td></tr>
<tr valign="top"><td>
<b>SUBSEP</b> </td><td valign="bottom">
The character used to separate multiple subscripts in array
elements, by default <b>"&#92;034"</b>.
</td></tr>
<tr valign="top"><td>
<b>TEXTDOMAIN</b> </td><td valign="bottom">
The text domain of the <font size="-1">AWK</font> program; used to find the localized
translations for the program&#146;s strings.
</td></tr>
</table>
<h2><i>Arrays</i></h2>
<p>
Arrays are subscripted with an expression between square brackets
(<b>[</b> and <b>]</b>). If the expression is an expression list
(<i>expr</i>, <i>expr</i> ...) then the array subscript is a string consisting of the
concatenation of the (string) value of each expression,
separated by the value of the
<b>SUBSEP</b> variable.
This facility is used to simulate multiply dimensioned
arrays.  For example:
<p>
<b>i = "A"; j = "B"; k = "C"
<!-- Need break --><br />
x[i, j, k] = "hello, world&#92;n"
</b><p>
assigns the string <b>"hello, world&#92;n"</b> to the element of the array
<b>x</b> which is indexed by the string <b>"A&#92;034B&#92;034C"</b>.  All arrays in <font size="-1">AWK</font>
are associative, i.e. indexed by string values.
<p>
The special operator
<b>in</b> may be used in an
<b>if</b> or
<b>while</b> statement to see if an array has an index consisting of a particular
value.
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
if (val in array)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print array[val]
</pre></td></tr>
</table>
</b><p>
If the array has multiple subscripts, use
<b>(i, j) in array</b>. <p>
The
<b>in</b> construct may also be used in a
<b>for</b> loop to iterate over all the elements of an array.
<p>
An element may be deleted from an array using the
<b>delete</b> statement.
The
<b>delete</b> statement may also be used to delete the entire contents of an array,
just by specifying the array name without a subscript.
<h2><i>Variable Typing And Conversion</i></h2>
<p>
Variables and fields
may be (floating point) numbers, or strings, or both.  How the
value of a variable is interpreted depends upon its context.  If used in
a numeric expression, it will be treated as a number, if used as a string
it will be treated as a string.
<p>
To force a variable to be treated as a number, add 0 to it; to force it
to be treated as a string, concatenate it with the null string.
<p>
When a string must be converted to a number, the conversion is accomplished
using
<b>strtod</b>(3).
A number is converted to a string by using the value of
<b>CONVFMT</b> as a format string for
<b>sprintf</b>(3),
with the numeric value of the variable as the argument.
However, even though all numbers in <font size="-1">AWK</font> are floating-point,
integral values are
<i>always</i> converted as integers.  Thus, given
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
CONVFMT = "%2.2f"
a = 12
b = a ""
</pre></td></tr>
</table>
</b><p>
the variable
<b>b</b> has a string value of <b>"12"</b> and not <b>"12.00"</b>.
<p>
<i>Gawk</i> performs comparisons as follows:
If two variables are numeric, they are compared numerically.
If one value is numeric and the other has a string value that is a
&#145;&#145;numeric string,&#146;&#146; then comparisons are also done numerically.
Otherwise, the numeric value is converted to a string and a string
comparison is performed.
Two strings are compared, of course, as strings.
Note that the POSIX standard applies the concept of
&#145;&#145;numeric string&#146;&#146; everywhere, even to string constants.
However, this is
clearly incorrect, and
<i>gawk</i> does not do this.
(Fortunately, this is fixed in the next version of the standard.)
<p>
Note that string constants, such as <b>"57"</b>, are
<i>not</i> numeric strings, they are string constants.
The idea of &#145;&#145;numeric string&#146;&#146;
only applies to fields,
<b>getline</b> input,
<b>FILENAME</b>, <b>ARGV</b> elements,
<b>ENVIRON</b> elements and the elements of an array created by
<b>split()</b> that are numeric strings.
The basic idea is that
<i>user input</i>, and only user input, that looks numeric,
should be treated that way.
<p>
Uninitialized variables have the numeric value 0 and the string value ""
(the null, or empty, string).
<h2><i>Octal and Hexadecimal Constants</i></h2>
Starting with version 3.1 of
<i>gawk ,</i> you may use C-style octal and hexadecimal constants in your AWK
program source code.
For example, the octal value
<b>011</b> is equal to decimal
<b>9</b>, and the hexadecimal value
<b>0x11</b> is equal to decimal 17.
<h2><i>String Constants</i></h2>
<p>
String constants in <font size="-1">AWK</font> are sequences of characters enclosed
between double quotes (<b>"</b>).  Within strings, certain
<i>escape sequences</i> are recognized, as in C.  These are:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>&#92;&#92;</b> </td><td valign="bottom">
A literal backslash.
</td></tr>
<tr valign="top"><td>
<b>&#92;a</b> </td><td valign="bottom">
The &#145;&#145;alert&#146;&#146; character; usually the <font size="-1">ASCII</font> <font size="-1">BEL</font> character.
</td></tr>
<tr valign="top"><td>
<b>&#92;b</b> </td><td valign="bottom">
backspace.
</td></tr>
<tr valign="top"><td>
<b>&#92;f</b> </td><td valign="bottom">
form-feed.
</td></tr>
<tr valign="top"><td>
<b>&#92;n</b> </td><td valign="bottom">
newline.
</td></tr>
<tr valign="top"><td>
<b>&#92;r</b> </td><td valign="bottom">
carriage return.
</td></tr>
<tr valign="top"><td>
<b>&#92;t</b> </td><td valign="bottom">
horizontal tab.
</td></tr>
<tr valign="top"><td>
<b>&#92;v</b> </td><td valign="bottom">
vertical tab.
</td></tr>
<tr valign="top"><td colspan="2">
<b>&#92;x</b><i>hex digits</i> </td></tr><tr valign="top"><td width=4%>&nbsp;</td><td>
The character represented by the string of hexadecimal digits following
the
<b>&#92;x</b>. As in <font size="-1">ANSI</font> C, all following hexadecimal digits are considered part of
the escape sequence.
(This feature should tell us something about language design by committee.)
E.g., <b>"&#92;x1B"</b> is the <font size="-1">ASCII</font> <font size="-1">ESC</font> (escape) character.
</td></tr>
<tr valign="top"><td>
<b>&#92;</b><i>ddd</i> </td><td valign="bottom">
The character represented by the 1-, 2-, or 3-digit sequence of octal
digits.
E.g., <b>"&#92;033"</b> is the <font size="-1">ASCII</font> <font size="-1">ESC</font> (escape) character.
</td></tr>
<tr valign="top"><td>
<b>&#92;</b><i>c</i> </td><td valign="bottom">
The literal character
<i>c</i>. </td></tr>
<!-- PP ends table -->
</table>
The escape sequences may also be used inside constant regular expressions
(e.g.,
<b>/[ &#92;t&#92;f&#92;n&#92;r&#92;v]/</b> matches whitespace characters).
<p>
In compatibility mode, the characters represented by octal and
hexadecimal escape sequences are treated literally when used in
regular expression constants.  Thus,
<b>/a&#92;52b/</b> is equivalent to
<b>/a&#92;*b/</b>. <h1 class="manpages">PATTERNS AND ACTIONS</h1>
<font size="-1">AWK</font> is a line-oriented language.  The pattern comes first, and then the
action.  Action statements are enclosed in
<b>{</b> and
<b>}</b>. Either the pattern may be missing, or the action may be missing, but,
of course, not both.  If the pattern is missing, the action is
executed for every single record of input.
A missing action is equivalent to
<p>
<b>{ print }</b> <p>
which prints the entire record.
<p>
Comments begin with the &#145;&#145;#&#146;&#146; character, and continue until the
end of the line.
Blank lines may be used to separate statements.
Normally, a statement ends with a newline, however, this is not the
case for lines ending in
a &#145;&#145;,&#146;&#146;,
<b>{</b>, <b>?</b>, <b>:</b>, <b>&&</b>, or
<b>||</b>. Lines ending in
<b>do</b> or
<b>else</b> also have their statements automatically continued on the following line.
In other cases, a line can be continued by ending it with a &#145;&#145;&#92;&#146;&#146;,
in which case the newline will be ignored.
<p>
Multiple statements may
be put on one line by separating them with a &#145;&#145;;&#146;&#146;.
This applies to both the statements within the action part of a
pattern-action pair (the usual case),
and to the pattern-action statements themselves.
<h2><i>Patterns</i></h2>
<font size="-1">AWK</font> patterns may be one of the following:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>BEGIN</b> 
<b>END</b> 
<b>/</b><i>regular expression</i><b>/</b> 
<i>relational expression</i> 
<i>pattern</i><b> && </b><i>pattern</i> 
<i>pattern</i><b> || </b><i>pattern</i> 
<i>pattern</i><b> ? </b><i>pattern</i><b> : </b><i>pattern</i> 
<b>(</b><i>pattern</i><b>)</b> 
<b>!</b><i> pattern</i> 
<i>pattern1</i><b>, </b><i>pattern2</i> 
</pre></td></tr>
</table>
<p>
<b>BEGIN</b> and
<b>END</b> are two special kinds of patterns which are not tested against
the input.
The action parts of all
<b>BEGIN</b> patterns are merged as if all the statements had
been written in a single
<b>BEGIN</b> block.  They are executed before any
of the input is read.  Similarly, all the
<b>END</b> blocks are merged,
and executed when all the input is exhausted (or when an
<b>exit</b> statement is executed).
<b>BEGIN</b> and
<b>END</b> patterns cannot be combined with other patterns in pattern expressions.
<b>BEGIN</b> and
<b>END</b> patterns cannot have missing action parts.
<p>
For
<b>/</b><i>regular expression</i><b>/</b> patterns, the associated statement is executed for each input record that matches
the regular expression.
Regular expressions are the same as those in
<b>egrep</b>(1),
and are summarized below.
<p>
A
<i>relational expression</i> may use any of the operators defined below in the section on actions.
These generally test whether certain fields match certain regular expressions.
<p>
The
<b>&&</b>, <b>||</b>, and
<b>!</b> operators are logical AND, logical OR, and logical NOT, respectively, as in C.
They do short-circuit evaluation, also as in C, and are used for combining
more primitive pattern expressions.  As in most languages, parentheses
may be used to change the order of evaluation.
<p>
The
<b>?:</b> operator is like the same operator in C.  If the first pattern is true
then the pattern used for testing is the second pattern, otherwise it is
the third.  Only one of the second and third patterns is evaluated.
<p>
The
<i>pattern1</i><b>, </b><i>pattern2</i> form of an expression is called a
<i>range pattern</i>. It matches all input records starting with a record that matches
<i>pattern1</i>, and continuing until a record that matches
<i>pattern2</i>, inclusive.  It does not combine with any other sort of pattern expression.
<h2><i>Regular Expressions</i></h2>
Regular expressions are the extended kind found in
<i>egrep</i>. They are composed of characters as follows:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<i>c</i> </td><td valign="bottom">
matches the non-metacharacter
<i>c</i>. </td></tr>
<tr valign="top"><td>
<i>&#92;c</i> </td><td valign="bottom">
matches the literal character
<i>c</i>. </td></tr>
<tr valign="top"><td>
<b>.</b> </td><td valign="bottom">
matches any character
<i>including</i> newline.
</td></tr>
<tr valign="top"><td>
<b>^</b> </td><td valign="bottom">
matches the beginning of a string.
</td></tr>
<tr valign="top"><td>
<b>$</b> </td><td valign="bottom">
matches the end of a string.
</td></tr>
<tr valign="top"><td>
<b>[</b><i>abc...</i><b>]</b> </td><td valign="bottom">
character list, matches any of the characters
<i>abc...</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>[^</b><i>abc...</i><b>]</b> </td></tr><tr valign="top"><td width=6.5%>&nbsp;</td><td>
negated character list, matches any character except
<i>abc...</i>. </td></tr>
<tr valign="top"><td>
<i>r1</i><b>|</b><i>r2</i> </td><td valign="bottom">
alternation: matches either
<i>r1</i> or
<i>r2</i>. </td></tr>
<tr valign="top"><td>
<i>r1r2</i> </td><td valign="bottom">
concatenation: matches
<i>r1</i>, and then
<i>r2</i>. </td></tr>
<tr valign="top"><td>
<i>r</i><b>+</b> </td><td valign="bottom">
matches one or more
<i>r</i>&#146;s. </td></tr>
<tr valign="top"><td>
<i>r</i><b>*</b> </td><td valign="bottom">
matches zero or more
<i>r</i>&#146;s. </td></tr>
<tr valign="top"><td>
<i>r</i><b>?</b> </td><td valign="bottom">
matches zero or one
<i>r</i>&#146;s. </td></tr>
<tr valign="top"><td>
<b>(</b><i>r</i><b>)</b> </td><td valign="bottom">
grouping: matches
<i>r</i>. </td></tr>
<tr valign="top"><td>
<i>r</i><b>{</b><i>n</i><b>}</b> <!-- Consumed .TP -->
<br />
<i>r</i><b>{</b><i>n</i><b>,}</b> <!-- Consumed .TP -->
<br />
<i>r</i><b>{</b><i>n</i><b>,</b><i>m</i><b>}</b> </td><td valign="bottom">
One or two numbers inside braces denote an
<i>interval expression</i>. If there is one number in the braces, the preceding regular expression
<i>r</i> is repeated
<i>n</i> times.  If there are two numbers separated by a comma,
<i>r</i> is repeated
<i>n</i> to
<i>m</i> times.
If there is one number followed by a comma, then
<i>r</i> is repeated at least
<i>n</i> times.
<p>
Interval expressions are only available if either
<b>--posix</b> or
<b>--re-interval</b> is specified on the command line.
</td></tr>
<tr valign="top"><td>
<b>&#92;y</b> </td><td valign="bottom">
matches the empty string at either the beginning or the
end of a word.
</td></tr>
<tr valign="top"><td>
<b>&#92;B</b> </td><td valign="bottom">
matches the empty string within a word.
</td></tr>
<tr valign="top"><td>
<b>&#92;&lt;</b> </td><td valign="bottom">
matches the empty string at the beginning of a word.
</td></tr>
<tr valign="top"><td>
<b>&#92;&gt;</b> </td><td valign="bottom">
matches the empty string at the end of a word.
</td></tr>
<tr valign="top"><td>
<b>&#92;w</b> </td><td valign="bottom">
matches any word-constituent character (letter, digit, or underscore).
</td></tr>
<tr valign="top"><td>
<b>&#92;W</b> </td><td valign="bottom">
matches any character that is not word-constituent.
</td></tr>
<tr valign="top"><td>
<b>&#92;&#145;</b> </td><td valign="bottom">
matches the empty string at the beginning of a buffer (string).
</td></tr>
<tr valign="top"><td>
<b>&#92;&#146;</b> </td><td valign="bottom">
matches the empty string at the end of a buffer.
</td></tr>
<!-- PP ends table -->
</table>
The escape sequences that are valid in string constants (see below)
are also valid in regular expressions.
<p>
<i>Character classes</i> are a new feature introduced in the <font size="-1">POSIX</font> standard.
A character class is a special notation for describing
lists of characters that have a specific attribute, but where the
actual characters themselves can vary from country to country and/or
from character set to character set.  For example, the notion of what
is an alphabetic character differs in the USA and in France.
<p>
A character class is only valid in a regular expression
<i>inside</i> the brackets of a character list.  Character classes consist of
<b>[:</b>, a keyword denoting the class, and
<b>:]</b>. The character
classes defined by the <font size="-1">POSIX</font> standard are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>[:alnum:]</b> </td><td valign="bottom">
Alphanumeric characters.
</td></tr>
<tr valign="top"><td>
<b>[:alpha:]</b> </td><td valign="bottom">
Alphabetic characters.
</td></tr>
<tr valign="top"><td>
<b>[:blank:]</b> </td><td valign="bottom">
Space or tab characters.
</td></tr>
<tr valign="top"><td>
<b>[:cntrl:]</b> </td><td valign="bottom">
Control characters.
</td></tr>
<tr valign="top"><td>
<b>[:digit:]</b> </td><td valign="bottom">
Numeric characters.
</td></tr>
<tr valign="top"><td>
<b>[:graph:]</b> </td><td valign="bottom">
Characters that are both printable and visible.
(A space is printable, but not visible, while an
<b>a</b> is both.)
</td></tr>
<tr valign="top"><td>
<b>[:lower:]</b> </td><td valign="bottom">
Lower-case alphabetic characters.
</td></tr>
<tr valign="top"><td>
<b>[:print:]</b> </td><td valign="bottom">
Printable characters (characters that are not control characters.)
</td></tr>
<tr valign="top"><td>
<b>[:punct:]</b> </td><td valign="bottom">
Punctuation characters (characters that are not letter, digits,
control characters, or space characters).
</td></tr>
<tr valign="top"><td>
<b>[:space:]</b> </td><td valign="bottom">
Space characters (such as space, tab, and formfeed, to name a few).
</td></tr>
<tr valign="top"><td>
<b>[:upper:]</b> </td><td valign="bottom">
Upper-case alphabetic characters.
</td></tr>
<tr valign="top"><td colspan="2">
<b>[:xdigit:]</b> </td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Characters that are hexadecimal digits.
</td></tr>
<!-- PP ends table -->
</table>
For example, before the <font size="-1">POSIX</font> standard, to match alphanumeric
characters, you would have had to write
<b>/[A-Za-z0-9]/</b>. If your character set had other alphabetic characters in it, this would not
match them, and if your character set collated differently from
<font size="-1">ASCII</font>, this might not even match the
<font size="-1">ASCII</font> alphanumeric characters.
With the <font size="-1">POSIX</font> character classes, you can write
<b>/[[:alnum:]]/</b>, and this matches
the alphabetic and numeric characters in your character set.
<p>
Two additional special sequences can appear in character lists.
These apply to non-<font size="-1">ASCII</font> character sets, which can have single symbols
(called
<i>collating elements</i>) that are represented with more than one
character, as well as several characters that are equivalent for
<i>collating</i>, or sorting, purposes.  (E.g., in French, a plain &#145;&#145;e&#146;&#146;
and a grave-accented e&#96; are equivalent.)
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
Collating Symbols
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
A collating symbol is a multi-character collating element enclosed in
<b>[.</b> and
<b>.]</b>. For example, if
<b>ch</b> is a collating element, then
<b>[[.ch.]]</b> is a regular expression that matches this collating element, while
<b>[ch]</b> is a regular expression that matches either
<b>c</b> or
<b>h</b>. </td></tr>
<tr valign="top"><td colspan="2">
Equivalence Classes
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
An equivalence class is a locale-specific name for a list of
characters that are equivalent.  The name is enclosed in
<b>[=</b> and
<b>=]</b>. For example, the name
<b>e</b> might be used to represent all of
&#145;&#145;e,&#146;&#146; &#145;&#145;e&#39;,&#146;&#146; and &#145;&#145;e&#96;.&#146;&#146;
In this case,
<b>[[=e=]]</b> is a regular expression
that matches any of
<b>e</b>, <b>e&#39;</b>, or
<b>e&#96;</b>. </td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
These features are very valuable in non-English speaking locales.
The library functions that
<i>gawk</i> uses for regular expression matching
currently only recognize <font size="-1">POSIX</font> character classes; they do not recognize
collating symbols or equivalence classes.
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
The
<b>&#92;y</b>, <b>&#92;B</b>, <b>&#92;&lt;</b>, <b>&#92;&gt;</b>, <b>&#92;w</b>, <b>&#92;W</b>, <b>&#92;&#145;</b>, and
<b>&#92;&#146;</b> operators are specific to
<i>gawk</i>; they are extensions based on facilities in the <font size="-1">GNU</font> regular expression libraries.
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
The various command line options
control how
<i>gawk</i> interprets characters in regular expressions.
</td></tr>
<tr valign="top"><td colspan="2">
No options
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
In the default case,
<i>gawk</i> provide all the facilities of
<font size="-1">POSIX</font> regular expressions and the <font size="-1">GNU</font> regular expression operators described above.
However, interval expressions are not supported.
</td></tr>
<tr valign="top"><td>
<b>--posix</b> </td><td valign="bottom">
Only <font size="-1">POSIX</font> regular expressions are supported, the <font size="-1">GNU</font> operators are not special.
(E.g.,
<b>&#92;w</b> matches a literal
<b>w</b>). Interval expressions are allowed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--traditional</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Traditional Unix
<i>awk</i> regular expressions are matched.  The <font size="-1">GNU</font> operators
are not special, interval expressions are not available, and neither
are the <font size="-1">POSIX</font> character classes
(<b>[[:alnum:]]</b> and so on).
Characters described by octal and hexadecimal escape sequences are
treated literally, even if they represent regular expression metacharacters.
</td></tr>
<tr valign="top"><td colspan="2">
<b>--re-interval</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Allow interval expressions in regular expressions, even if
<b>--traditional</b> has been provided.
</td></tr>
</table>
<h2><i>Actions</i></h2>
Action statements are enclosed in braces,
<b>{</b> and
<b>}</b>. Action statements consist of the usual assignment, conditional, and looping
statements found in most languages.  The operators, control statements,
and input/output statements
available are patterned after those in C.
<h2><i>Operators</i></h2>
<p>
The operators in <font size="-1">AWK</font>, in order of decreasing precedence, are
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>(</b>&#46;..<b>)</b> </td><td valign="bottom">
Grouping
</td></tr>
<tr valign="top"><td>
<b>$</b> </td><td valign="bottom">
Field reference.
</td></tr>
<tr valign="top"><td>
<b>++ --</b> </td><td valign="bottom">
Increment and decrement, both prefix and postfix.
</td></tr>
<tr valign="top"><td>
<b>^</b> </td><td valign="bottom">
Exponentiation (<b>**</b> may also be used, and <b>**=</b> for
the assignment operator).
</td></tr>
<tr valign="top"><td>
<b>+ - !</b> </td><td valign="bottom">
Unary plus, unary minus, and logical negation.
</td></tr>
<tr valign="top"><td>
<b>* / %</b> </td><td valign="bottom">
Multiplication, division, and modulus.
</td></tr>
<tr valign="top"><td>
<b>+ -</b> </td><td valign="bottom">
Addition and subtraction.
</td></tr>
<tr valign="top"><td>
<i>space</i> </td><td valign="bottom">
String concatenation.
</td></tr>
<tr valign="top"><td>
<b>&lt; &gt;</b> <!-- Consumed .TP -->
<br />
<b>&lt;= &gt;=</b> <!-- Consumed .TP -->
<br />
<b>!= ==</b> </td><td valign="bottom">
The regular relational operators.
</td></tr>
<tr valign="top"><td>
<b>~ !~</b> </td><td valign="bottom">
Regular expression match, negated match.
<b>NOTE:</b> Do not use a constant regular expression
(<b>/foo/</b>) on the left-hand side of a
<b>~</b> or
<b>!~</b>. Only use one on the right-hand side.  The expression
<b>/foo/ ~ </b><i>exp</i> has the same meaning as <b>(($0 ~ /foo/) ~ </b><i>exp</i><b>)</b>.
This is usually
<i>not</i> what was intended.
</td></tr>
<tr valign="top"><td>
<b>in</b> </td><td valign="bottom">
Array membership.
</td></tr>
<tr valign="top"><td>
<b>&&</b> </td><td valign="bottom">
Logical AND.
</td></tr>
<tr valign="top"><td>
<b>||</b> </td><td valign="bottom">
Logical OR.
</td></tr>
<tr valign="top"><td>
<b>?:</b> </td><td valign="bottom">
The C conditional expression.  This has the form
<i>expr1</i><b> ? </b><i>expr2</i><b> : </b><i>expr3</i> &#46;
If
<i>expr1</i> is true, the value of the expression is
<i>expr2</i>, otherwise it is
<i>expr3</i>. Only one of
<i>expr2</i> and
<i>expr3</i> is evaluated.
</td></tr>
<tr valign="top"><td>
<b>= += -=</b> <!-- Consumed .TP -->
<br />
<b>*= /= %= ^=</b> </td><td valign="bottom">
Assignment.  Both absolute assignment
<b>(</b><i>var</i><b> = </b><i>value</i><b>)</b> and operator-assignment (the other forms) are supported.
</td></tr>
</table>
<h2><i>Control Statements</i></h2>
<p>
The control statements are
as follows:
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>if (</b><i>condition</i><b>) </b><i>statement</i> [ <b>else</b><i> statement </i>]
<b>while (</b><i>condition</i><b>) </b><i>statement </i>
<b>do </b><i>statement </i><b>while (</b><i>condition</i><b>)</b>
<b>for (</b><i>expr1</i><b>; </b><i>expr2</i><b>; </b><i>expr3</i><b>) </b><i>statement</i>
<b>for (</b><i>var </i><b>in</b><i> array</i><b>) </b><i>statement</i>
<b>break</b>
<b>continue</b>
<b>delete </b><i>array</i><b>[</b><i>index</i><b>]</b>
<b>delete </b><i>array</i>
<b>exit</b> [ <i>expression</i> ]
<b>{ </b><i>statements </i><b>}</b>
</pre></td></tr>
</table>
<h2><i>I/O Statements</i></h2>
<p>
The input/output statements are as follows:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>close(</b><i>file </i>[<b>, </b><i>how</i>]<b>)</b>
</td><td valign="bottom">
Close file, pipe or co-process.
The optional
<i>how</i> should only be used when closing one end of a
two-way pipe to a co-process.
It must be a string value, either
<b>"to"</b> or <b>"from"</b>.
</td></tr>
<tr valign="top"><td>
<b>getline</b> </td><td valign="bottom">
Set
<b>$0</b> from next input record; set
<b>NF</b>, <b>NR</b>, <b>FNR</b>. </td></tr>
<tr valign="top"><td>
<b>getline &lt;</b><i>file</i> </td><td valign="bottom">
Set
<b>$0</b> from next record of
<i>file</i>; set
<b>NF</b>. </td></tr>
<tr valign="top"><td>
<b>getline</b><i> var</i> </td><td valign="bottom">
Set
<i>var</i> from next input record; set
<b>NR</b>, <b>FNR</b>. </td></tr>
<tr valign="top"><td>
<b>getline</b><i> var</i><b> &lt;</b><i>file</i> </td><td valign="bottom">
Set
<i>var</i> from next record of
<i>file</i>. </td></tr>
<tr valign="top"><td colspan="2">
<i>command</i><b> | getline </b>[<i>var</i>]
</td></tr><tr valign="top"><td width=19.5%>&nbsp;</td><td>
Run
<i>command</i> piping the output either into
<b>$0</b> or
<i>var</i>, as above.
</td></tr>
<tr valign="top"><td colspan="2">
<i>command</i><b> |& getline </b>[<i>var</i>]
</td></tr><tr valign="top"><td width=19.5%>&nbsp;</td><td>
Run
<i>command</i> as a co-process
piping the output either into
<b>$0</b> or
<i>var</i>, as above.
Co-processes are a
<i>gawk</i> extension.
</td></tr>
<tr valign="top"><td>
<b>next</b> </td><td valign="bottom">
Stop processing the current input record.  The next input record
is read and processing starts over with the first pattern in the
<font size="-1">AWK</font> program.  If the end of the input data is reached, the
<b>END</b> block(s), if any, are executed.
</td></tr>
<tr valign="top"><td>
<b>nextfile</b> </td><td valign="bottom">
Stop processing the current input file.  The next input record read
comes from the next input file.
<b>FILENAME</b> and
<b>ARGIND</b> are updated,
<b>FNR</b> is reset to 1, and processing starts over with the first pattern in the
<font size="-1">AWK</font> program. If the end of the input data is reached, the
<b>END</b> block(s), if any, are executed.
</td></tr>
<tr valign="top"><td>
<b>print</b> </td><td valign="bottom">
Prints the current record.
The output record is terminated with the value of the
<b>ORS</b> variable.
</td></tr>
<tr valign="top"><td>
<b>print</b><i> expr-list</i> </td><td valign="bottom">
Prints expressions.
Each expression is separated by the value of the
<b>OFS</b> variable.
The output record is terminated with the value of the
<b>ORS</b> variable.
</td></tr>
<tr valign="top"><td colspan="2">
<b>print</b><i> expr-list</i><b> &gt;</b><i>file</i> </td></tr><tr valign="top"><td width=19.5%>&nbsp;</td><td>
Prints expressions on
<i>file</i>. Each expression is separated by the value of the
<b>OFS</b> variable.  The output record is terminated with the value of the
<b>ORS</b> variable.
</td></tr>
<tr valign="top"><td colspan="2">
<b>printf</b><i> fmt, expr-list</i> </td></tr><tr valign="top"><td width=19.5%>&nbsp;</td><td>
Format and print.
</td></tr>
<tr valign="top"><td colspan="2">
<b>printf</b><i> fmt, expr-list</i><b> &gt;</b><i>file</i> </td></tr><tr valign="top"><td width=19.5%>&nbsp;</td><td>
Format and print on
<i>file</i>. </td></tr>
<tr valign="top"><td>
<b>system(</b><i>cmd-line</i><b>)</b> </td><td valign="bottom">
Execute the command
<i>cmd-line</i>, and return the exit status.
(This may not be available on non-<font size="-1">POSIX</font> systems.)
</td></tr>
<tr valign="top"><td>
<b>fflush(</b>[<i>file</i>]<b>)</b>
</td><td valign="bottom">
Flush any buffers associated with the open output file or pipe
<i>file</i>. If
<i>file</i> is missing, then standard output is flushed.
If
<i>file</i> is the null string,
then all open output files and pipes
have their buffers flushed.
</td></tr>
<!-- PP ends table -->
</table>
Additional output redirections are allowed for
<b>print</b> and
<b>printf</b>. <table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>print ... &gt;&gt;</b><i> file</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
appends output to the
<i>file</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>print ... |</b><i> command</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
writes on a pipe.
</td></tr>
<tr valign="top"><td colspan="2">
<b>print ... |&</b><i> command</i> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
sends data to a co-process.
</td></tr>
<!-- PP ends table -->
</table>
The
<b>getline</b> command returns 0 on end of file and -1 on an error.
Upon an error,
<b>ERRNO</b> contains a string describing the problem.
<p>
<b>NOTE:</b> If using a pipe or co-process to
<b>getline</b>, or from
<b>print</b> or
<b>printf</b> within a loop, you
<i>must</i> use
<b>close()</b> to create new instances of the command.
<font size="-1">AWK</font> does not automatically close pipes or co-processes when
they return EOF.
<h2><i>The printf Statement</i></h2>
<p>
The <font size="-1">AWK</font> versions of the
<b>printf</b> statement and
<b>sprintf()</b> function
(see below)
accept the following conversion specification formats:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>%c</b> </td><td valign="bottom">
An <font size="-1">ASCII</font> character.
If the argument used for
<b>%c</b> is numeric, it is treated as a character and printed.
Otherwise, the argument is assumed to be a string, and the only first
character of that string is printed.
</td></tr>
<tr valign="top"><td colspan="2">
<b>%d</b>,<b> %i</b> </td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
A decimal number (the integer part).
</td></tr>
<tr valign="top"><td colspan="2">
<b>%e ,  %E</b> </td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
A floating point number of the form
<b>[-]d.dddddde[+-]dd</b>. The
<b>%E</b> format uses
<b>E</b> instead of
<b>e</b>. </td></tr>
<tr valign="top"><td>
<b>%f</b> </td><td valign="bottom">
A floating point number of the form
<b>[-]ddd.dddddd</b>. </td></tr>
<tr valign="top"><td colspan="2">
<b>%g ,  %G</b> </td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
Use
<b>%e</b> or
<b>%f</b> conversion, whichever is shorter, with nonsignificant zeros suppressed.
The
<b>%G</b> format uses
<b>%E</b> instead of
<b>%e</b>. </td></tr>
<tr valign="top"><td>
<b>%o</b> </td><td valign="bottom">
An unsigned octal number (also an integer).
</td></tr>
<tr valign="top"><td>
<b>%u</b> </td><td valign="bottom">
An unsigned decimal number (again, an integer).
</td></tr>
<tr valign="top"><td>
<b>%s</b> </td><td valign="bottom">
A character string.
</td></tr>
<tr valign="top"><td colspan="2">
<b>%x ,  %X</b> </td></tr><tr valign="top"><td width=5%>&nbsp;</td><td>
An unsigned hexadecimal number (an integer).
The
<b>%X</b> format uses
<b>ABCDEF</b> instead of
<b>abcdef</b>. </td></tr>
<tr valign="top"><td>
<b>%%</b> </td><td valign="bottom">
A single
<b>%</b> character; no argument is converted.
</td></tr>
<!-- PP ends table -->
</table>
<b>NOTE</b>: When using the integer format-control letters for values that are
outside the range of a C
<b>long</b> integer,
<i>gawk</i> switches to the
<b>%g</b> format specifier. If
<b>--lint</b> is provided on the command line
<i>gawk</i> warns about this.  Other versions of
<i>awk</i> may print invalid values or do something else entirely.
<p>
Optional, additional parameters may lie between the
<b>%</b> and the control letter:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<i>count</i><b>$</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Use the
<i>count</i>&#146;th argument at this point in the formatting.
This is called a
<i>positional specifier</i> and
is intended primarily for use in translated versions of
format strings, not in the original text of an AWK program.
It is a
<i>gawk</i> extension.
</td></tr>
<tr valign="top"><td>
<b>-</b> </td><td valign="bottom">
The expression should be left-justified within its field.
</td></tr>
<tr valign="top"><td>
<i>space</i> </td><td valign="bottom">
For numeric conversions, prefix positive values with a space, and
negative values with a minus sign.
</td></tr>
<tr valign="top"><td>
<b>+</b> </td><td valign="bottom">
The plus sign, used before the width modifier (see below),
says to always supply a sign for numeric conversions, even if the data
to be formatted is positive.  The
<b>+</b> overrides the space modifier.
</td></tr>
<tr valign="top"><td>
<b>#</b> </td><td valign="bottom">
Use an &#145;&#145;alternate form&#146;&#146; for certain control letters.
For
<b>%o</b>, supply a leading zero.
For
<b>%x</b>, and
<b>%X</b>, supply a leading
<b>0x</b> or
<b>0X</b> for
a nonzero result.
For
<b>%e</b>, <b>%E</b>, and
<b>%f</b>, the result always contains a
decimal point.
For
<b>%g</b>, and
<b>%G</b>, trailing zeros are not removed from the result.
</td></tr>
<tr valign="top"><td>
<b>0</b> </td><td valign="bottom">
A leading
<b>0</b> (zero) acts as a flag, that indicates output should be
padded with zeroes instead of spaces.
This applies even to non-numeric output formats.
This flag only has an effect when the field width is wider than the
value to be printed.
</td></tr>
<tr valign="top"><td>
<i>width</i> </td><td valign="bottom">
The field should be padded to this width.  The field is normally padded
with spaces.  If the
<b>0</b> flag has been used, it is padded with zeroes.
</td></tr>
<tr valign="top"><td>
<b>&#46;</b><i>prec</i> </td><td valign="bottom">
A number that specifies the precision to use when printing.
For the
<b>%e</b>, <b>%E</b>, and
<b>%f</b> formats, this specifies the
number of digits you want printed to the right of the decimal point.
For the
<b>%g</b>, and
<b>%G</b> formats, it specifies the maximum number
of significant digits.  For the
<b>%d</b>, <b>%o</b>, <b>%i</b>, <b>%u</b>, <b>%x</b>, and
<b>%X</b> formats, it specifies the minimum number of
digits to print.  For
<b>%s</b>, it specifies the maximum number of
characters from the string that should be printed.
</td></tr>
<!-- PP ends table -->
</table>
The dynamic
<i>width</i> and
<i>prec</i> capabilities of the <font size="-1">ANSI</font> C
<b>printf()</b> routines are supported.
A
<b>*</b> in place of either the
<b>width</b> or
<b>prec</b> specifications causes their values to be taken from
the argument list to
<b>printf</b> or
<b>sprintf()</b>. To use a positional specifier with a dynamic width or precision,
supply the
<i>count</i><b>$</b> after the
<b>*</b> in the format string.
For example, <b>"%3$*2$.*1$s"</b>.
<h2><i>Special File Names</i></h2>
<p>
When doing I/O redirection from either
<b>print</b> or
<b>printf</b> into a file,
or via
<b>getline</b> from a file,
<i>gawk</i> recognizes certain special filenames internally.  These filenames
allow access to open file descriptors inherited from
<i>gawk</i>&#146;s parent process (usually the shell).
These file names may also be used on the command line to name data files.
The filenames are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>/dev/stdin</b> </td><td valign="bottom">
The standard input.
</td></tr>
<tr valign="top"><td>
<b>/dev/stdout</b> </td><td valign="bottom">
The standard output.
</td></tr>
<tr valign="top"><td>
<b>/dev/stderr</b> </td><td valign="bottom">
The standard error output.
</td></tr>
<tr valign="top"><td>
<b>/dev/fd/</b><i>n</i> </td><td valign="bottom">
The file associated with the open file descriptor
<i>n</i>. </td></tr>
<!-- PP ends table -->
</table>
These are particularly useful for error messages.  For example:
<p>
<b>print "You blew it!" &gt; "/dev/stderr"
</b><p>
whereas you would otherwise have to use
<p>
<b>print "You blew it!" | "cat 1&gt;&2"
</b><p>
The following special filenames may be used with the
<b>|&</b> co-process operator for creating TCP/IP network connections.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>/inet/tcp/</b><i>lport</i><b>/</b><i>rhost</i><b>/</b><i>rport</i> </td></tr><tr valign="top"><td width=27%>&nbsp;</td><td>
File for TCP/IP connection on local port
<i>lport</i> to
remote host
<i>rhost</i> on remote port
<i>rport</i>. Use a port of
<b>0</b> to have the system pick a port.
</td></tr>
<tr valign="top"><td colspan="2">
<b>/inet/udp/</b><i>lport</i><b>/</b><i>rhost</i><b>/</b><i>rport</i> </td></tr><tr valign="top"><td width=27%>&nbsp;</td><td>
Similar, but use UDP/IP instead of TCP/IP.
</td></tr>
<tr valign="top"><td colspan="2">
<b>/inet/raw/</b><i>lport</i><b>/</b><i>rhost</i><b>/</b><i>rport</i> </td></tr><tr valign="top"><td width=27%>&nbsp;</td><td>
Reserved for future use.
</td></tr>
<!-- PP ends table -->
</table>
Other special filenames provide access to information about the running
<i>gawk</i> process.
<b>These filenames are now obsolete.</b> Use the
<b>PROCINFO</b> array to obtain the information they provide.
The filenames are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>/dev/pid</b> </td><td valign="bottom">
Reading this file returns the process ID of the current process,
in decimal, terminated with a newline.
</td></tr>
<tr valign="top"><td>
<b>/dev/ppid</b> </td><td valign="bottom">
Reading this file returns the parent process ID of the current process,
in decimal, terminated with a newline.
</td></tr>
<tr valign="top"><td>
<b>/dev/pgrpid</b> </td><td valign="bottom">
Reading this file returns the process group ID of the current process,
in decimal, terminated with a newline.
</td></tr>
<tr valign="top"><td>
<b>/dev/user</b> </td><td valign="bottom">
Reading this file returns a single record terminated with a newline.
The fields are separated with spaces.
<b>$1</b> is the value of the
<b>getuid</b>(2)
system call,
<b>$2</b> is the value of the
<b>geteuid</b>(2)
system call,
<b>$3</b> is the value of the
<b>getgid</b>(2)
system call, and
<b>$4</b> is the value of the
<b>getegid</b>(2)
system call.
If there are any additional fields, they are the group IDs returned by
<b>getgroups</b>(2).
Multiple groups may not be supported on all systems.
</td></tr>
</table>
<h2><i>Numeric Functions</i></h2>
<p>
<font size="-1">AWK</font> has the following built-in arithmetic functions:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>atan2(</b><i>y</i><b>,</b><i> x</i><b>)</b> </td><td valign="bottom">
Returns the arctangent of
<i>y/x</i> in radians.
</td></tr>
<tr valign="top"><td>
<b>cos(</b><i>expr</i><b>)</b> </td><td valign="bottom">
Returns the cosine of
<i>expr</i>, which is in radians.
</td></tr>
<tr valign="top"><td>
<b>exp(</b><i>expr</i><b>)</b> </td><td valign="bottom">
The exponential function.
</td></tr>
<tr valign="top"><td>
<b>int(</b><i>expr</i><b>)</b> </td><td valign="bottom">
Truncates to integer.
</td></tr>
<tr valign="top"><td>
<b>log(</b><i>expr</i><b>)</b> </td><td valign="bottom">
The natural logarithm function.
</td></tr>
<tr valign="top"><td>
<b>rand()</b> </td><td valign="bottom">
Returns a random number
<i>N</i>, between 0 and 1,
such that 0 &lt;= <i>N</i> &lt; 1.
</td></tr>
<tr valign="top"><td>
<b>sin(</b><i>expr</i><b>)</b> </td><td valign="bottom">
Returns the sine of
<i>expr</i>, which is in radians.
</td></tr>
<tr valign="top"><td>
<b>sqrt(</b><i>expr</i><b>)</b> </td><td valign="bottom">
The square root function.
</td></tr>
<tr valign="top"><td colspan="2">
<b>srand(</b>[<i>expr</i>]<b>)</b>
</td></tr><tr valign="top"><td width=14%>&nbsp;</td><td>
Uses
<i>expr</i> as a new seed for the random number generator.  If no
<i>expr</i> is provided, the time of day is used.
The return value is the previous seed for the random
number generator.
</td></tr>
</table>
<h2><i>String Functions</i></h2>
<p>
<i>Gawk</i> has the following built-in string functions:
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>asort(</b><i>s </i>[<b>, </b><i>d</i>]<b>)</b>
</td><td valign="bottom">
Returns the number of elements in the source
array
<i>s</i>. The contents of
<i>s</i> are sorted using
<i>gawk</i>&#146;s normal rules for
comparing values, and the indexes of the
sorted values of
<i>s</i> are replaced with sequential
integers starting with 1. If the optional
destination array
<i>d</i> is specified, then
<i>s</i> is first duplicated into
<i>d</i>, and then
<i>d</i> is sorted, leaving the indexes of the
source array
<i>s</i> unchanged.
</td></tr>
<tr valign="top"><td>
<b>asorti(</b><i>s </i>[<b>, </b><i>d</i>]<b>)</b>
</td><td valign="bottom">
Returns the number of elements in the source
array
<i>s</i>. The behavior is the same as that of
<b>asort()</b>, except that the array
<i>indices</i> are used for sorting, not the array values.
When done, the array is indexed numerically, and
the values are those of the original indices.
The original values are lost; thus provide
a second array if you wish to preserve the original.
</td></tr>
<tr valign="top"><td>
<b>gensub(</b><i>r</i><b>, </b><i>s</i><b>, </b><i>h </i>[<b>, </b><i>t</i>]<b>)</b>
</td><td valign="bottom">
Search the target string
<i>t</i> for matches of the regular expression
<i>r</i>. If
<i>h</i> is a string beginning with
<b>g</b> or
<b>G</b>, then replace all matches of
<i>r</i> with
<i>s</i>. Otherwise,
<i>h</i> is a number indicating which match of
<i>r</i> to replace.
If
<i>t</i> is not supplied,
<b>$0</b> is used instead.
Within the replacement text
<i>s</i>, the sequence
<b>&#92;</b><i>n</i>, where
<i>n</i> is a digit from 1 to 9, may be used to indicate just the text that
matched the
<i>n</i>&#146;th parenthesized subexpression.  The sequence
<b>&#92;0</b> represents the entire matched text, as does the character
<b>&</b>. Unlike
<b>sub()</b> and
<b>gsub()</b>, the modified string is returned as the result of the function,
and the original target string is
<i>not</i> changed.
</td></tr>
<tr valign="top"><td>
<b>gsub(</b><i>r</i><b>, </b><i>s </i>[<b>, </b><i>t</i>]<b>)</b>
</td><td valign="bottom">
For each substring matching the regular expression
<i>r</i> in the string
<i>t</i>, substitute the string
<i>s</i>, and return the number of substitutions.
If
<i>t</i> is not supplied, use
<b>$0</b>. An
<b>&</b> in the replacement text is replaced with the text that was actually matched.
Use
<b>&#92;&</b> to get a literal
<b>&</b>. (This must be typed as <b>"&#92;&#92;&"</b>;
see <i>GAWK: Effective AWK Programming</i>
for a fuller discussion of the rules for
<b>&&#146;s</b> and backslashes in the replacement text of
<b>sub()</b>, <b>gsub()</b>, and
<b>gensub()</b>.) </td></tr>
<tr valign="top"><td>
<b>index(</b><i>s</i><b>,</b><i> t</i><b>)</b> </td><td valign="bottom">
Returns the index of the string
<i>t</i> in the string
<i>s</i>, or 0 if
<i>t</i> is not present.
(This implies that character indices start at one.)
</td></tr>
<tr valign="top"><td>
<b>length(</b>[<i>s</i>]<b>)
</td><td valign="bottom">
Returns the length of the string
</b><i>s</i>, or the length of
<b>$0</b> if
<i>s</i> is not supplied.
Starting with version 3.1.5,
as a non-standard extension, with an array argument,
<b>length()</b> returns the number of elements in the array.
</td></tr>
<tr valign="top"><td>
<b>match(</b><i>s</i><b>, </b><i>r </i>[<b>, </b><i>a</i>]<b>)</b>
</td><td valign="bottom">
Returns the position in
<i>s</i> where the regular expression
<i>r</i> occurs, or 0 if
<i>r</i> is not present, and sets the values of
<b>RSTART</b> and
<b>RLENGTH</b>. Note that the argument order is the same as for the
<b>~</b> operator:
<i>str</i><b> ~</b> <i>re</i>. If array
<i>a</i> is provided,
<i>a</i> is cleared and then elements 1 through
<i>n</i> are filled with the portions of
<i>s</i> that match the corresponding parenthesized
subexpression in
<i>r</i>. The 0&#146;th element of
<i>a</i> contains the portion
of
<i>s</i> matched by the entire regular expression
<i>r</i>. Subscripts
<b>a[</b><i>n</i><b>, "start"]</b>,
and
<b>a[</b><i>n</i><b>, "length"]</b>
provide the starting index in the string and length
respectively, of each matching substring.
</td></tr>
<tr valign="top"><td>
<b>split(</b><i>s</i><b>, </b><i>a </i>[<b>, </b><i>r</i>]<b>)</b>
</td><td valign="bottom">
Splits the string
<i>s</i> into the array
<i>a</i> on the regular expression
<i>r</i>, and returns the number of fields.  If
<i>r</i> is omitted,
<b>FS</b> is used instead.
The array
<i>a</i> is cleared first.
Splitting behaves identically to field splitting, described above.
</td></tr>
<tr valign="top"><td>
<b>sprintf(</b><i>fmt</i><b>,</b><i> expr-list</i><b>)</b> </td><td valign="bottom">
Prints
<i>expr-list</i> according to
<i>fmt</i>, and returns the resulting string.
</td></tr>
<tr valign="top"><td>
<b>strtonum(</b><i>str</i><b>)</b> </td><td valign="bottom">
Examines
<i>str</i>, and returns its numeric value.
If
<i>str</i> begins
with a leading
<b>0</b>, <b>strtonum()</b> assumes that
<i>str</i> is an octal number.
If
<i>str</i> begins
with a leading
<b>0x</b> or
<b>0X</b>, <b>strtonum()</b> assumes that
<i>str</i> is a hexadecimal number.
</td></tr>
<tr valign="top"><td>
<b>sub(</b><i>r</i><b>, </b><i>s </i>[<b>, </b><i>t</i>]<b>)</b>
</td><td valign="bottom">
Just like
<b>gsub()</b>, but only the first matching substring is replaced.
</td></tr>
<tr valign="top"><td>
<b>substr(</b><i>s</i><b>, </b><i>i </i>[<b>, </b><i>n</i>]<b>)</b>
</td><td valign="bottom">
Returns the at most
<i>n</i>-character substring of
<i>s</i> starting at
<i>i</i>. If
<i>n</i> is omitted, the rest of
<i>s</i> is used.
</td></tr>
<tr valign="top"><td>
<b>tolower(</b><i>str</i><b>)</b> </td><td valign="bottom">
Returns a copy of the string
<i>str</i>, with all the upper-case characters in
<i>str</i> translated to their corresponding lower-case counterparts.
Non-alphabetic characters are left unchanged.
</td></tr>
<tr valign="top"><td>
<b>toupper(</b><i>str</i><b>)</b> </td><td valign="bottom">
Returns a copy of the string
<i>str</i>, with all the lower-case characters in
<i>str</i> translated to their corresponding upper-case counterparts.
Non-alphabetic characters are left unchanged.
</td></tr>
</table>
<h2><i>Time Functions</i></h2>
Since one of the primary uses of <font size="-1">AWK</font> programs is processing log files
that contain time stamp information,
<i>gawk</i> provides the following functions for obtaining time stamps and
formatting them.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>mktime(</b><i>datespec</i><b>)</b>
</td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Turns
<i>datespec</i> into a time stamp of the same form as returned by
<b>systime()</b>. The
<i>datespec</i> is a string of the form
<i>YYYY MM DD HH MM SS[ DST]</i>. The contents of the string are six or seven numbers representing respectively
the full year including century,
the month from 1 to 12,
the day of the month from 1 to 31,
the hour of the day from 0 to 23,
the minute from 0 to 59,
and the second from 0 to 60,
and an optional daylight saving flag.
The values of these numbers need not be within the ranges specified;
for example, an hour of -1 means 1 hour before midnight.
The origin-zero Gregorian calendar is assumed,
with year 0 preceding year 1 and year -1 preceding year 0.
The time is assumed to be in the local timezone.
If the daylight saving flag is positive,
the time is assumed to be daylight saving time;
if zero, the time is assumed to be standard time;
and if negative (the default),
<b>mktime()</b> attempts to determine whether daylight saving time is in effect
for the specified time.
If
<i>datespec</i> does not contain enough elements or if the resulting time
is out of range,
<b>mktime()</b> returns -1.
</td></tr>
<tr valign="top"><td colspan="2">
<b>strftime(</b>[<i>format </i>[<b>, </b><i>timestamp</i>]]<b>)</b>
</td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Formats
<i>timestamp</i> according to the specification in
<i>format.</i> The
<i>timestamp</i> should be of the same form as returned by
<b>systime()</b>. If
<i>timestamp</i> is missing, the current time of day is used.
If
<i>format</i> is missing, a default format equivalent to the output of
<b>date</b>(1)
is used.
See the specification for the
<b>strftime()</b> function in <font size="-1">ANSI</font> C for the format conversions that are
guaranteed to be available.
A public-domain version of
<b>strftime</b>(3)
and a man page for it come with
<i>gawk</i>; if that version was used to build
<i>gawk</i>, then all of the conversions described in that man page are available to
<i>gawk.</i> </td></tr>
<tr valign="top"><td>
<b>systime()</b> </td><td valign="bottom">
Returns the current time of day as the number of seconds since the Epoch
(1970-01-01 00:00:00 UTC on <font size="-1">POSIX</font> systems).
</td></tr>
</table>
<h2><i>Bit Manipulations Functions</i></h2>
Starting with version 3.1 of
<i>gawk</i>, the following bit manipulation functions are available.
They work by converting double-precision floating point
values to
<b>unsigned long</b> integers, doing the operation, and then converting the
result back to floating point.
The functions are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>and(</b><i>v1</i><b>, </b><i>v2</i><b>)</b>
</td><td valign="bottom">
Return the bitwise AND of the values provided by
<i>v1</i> and
<i>v2</i>. </td></tr>
<tr valign="top"><td>
<b>compl(</b><i>val</i><b>)</b>
</td><td valign="bottom">
Return the bitwise complement of
<i>val</i>. </td></tr>
<tr valign="top"><td>
<b>lshift(</b><i>val</i><b>, </b><i>count</i><b>)</b>
</td><td valign="bottom">
Return the value of
<i>val</i>, shifted left by
<i>count</i> bits.
</td></tr>
<tr valign="top"><td>
<b>or(</b><i>v1</i><b>, </b><i>v2</i><b>)</b>
</td><td valign="bottom">
Return the bitwise OR of the values provided by
<i>v1</i> and
<i>v2</i>. </td></tr>
<tr valign="top"><td>
<b>rshift(</b><i>val</i><b>, </b><i>count</i><b>)</b>
</td><td valign="bottom">
Return the value of
<i>val</i>, shifted right by
<i>count</i> bits.
</td></tr>
<tr valign="top"><td>
<b>xor(</b><i>v1</i><b>, </b><i>v2</i><b>)</b>
</td><td valign="bottom">
Return the bitwise XOR of the values provided by
<i>v1</i> and
<i>v2</i>. </td></tr>
<!-- PP ends table -->
</table>
<h2><i>Internationalization Functions</i></h2>
Starting with version 3.1 of
<i>gawk</i>, the following functions may be used from within your AWK program for
translating strings at run-time.
For full details, see <i>GAWK: Effective AWK Programming</i>.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>bindtextdomain(</b><i>directory </i>[<b>, </b><i>domain</i>]<b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Specifies the directory where
<i>gawk</i> looks for the
<b>&#46;mo</b> files, in case they
will not or cannot be placed in the &#145;&#145;standard&#146;&#146; locations
(e.g., during testing).
It returns the directory where
<i>domain</i> is &#145;&#145;bound.&#146;&#146;
<p>
The default
<i>domain</i> is the value of
<b>TEXTDOMAIN</b>. If
<i>directory</i> is the null string (<b>""</b>), then
<b>bindtextdomain()</b> returns the current binding for the
given
<i>domain</i>. </td></tr>
<tr valign="top"><td colspan="2">
<b>dcgettext(</b><i>string </i>[<b>, </b><i>domain </i>[<b>, </b><i>category</i>]]<b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Returns the translation of
<i>string</i> in
text domain
<i>domain</i> for locale category
<i>category</i>. The default value for
<i>domain</i> is the current value of
<b>TEXTDOMAIN</b>. The default value for
<i>category</i> is <b>"LC_MESSAGES"</b>.
<p>
If you supply a value for
<i>category</i>, it must be a string equal to
one of the known locale categories described
in <i>GAWK: Effective AWK Programming</i>.
You must also supply a text domain.  Use
<b>TEXTDOMAIN</b> if you want to use the current domain.
</td></tr>
<tr valign="top"><td colspan="2">
<b>dcngettext(</b><i>string1 </i>, <i>string2 </i>, <i>number </i>[<b>, </b><i>domain </i>[<b>, </b><i>category</i>]]<b>)</b>
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Returns the plural form used for
<i>number</i> of the translation of
<i>string1</i> and
<i>string2</i> in
text domain
<i>domain</i> for locale category
<i>category</i>. The default value for
<i>domain</i> is the current value of
<b>TEXTDOMAIN</b>. The default value for
<i>category</i> is <b>"LC_MESSAGES"</b>.
<p>
If you supply a value for
<i>category</i>, it must be a string equal to
one of the known locale categories described
in <i>GAWK: Effective AWK Programming</i>.
You must also supply a text domain.  Use
<b>TEXTDOMAIN</b> if you want to use the current domain.
</td></tr>
</table>
<h1 class="manpages">USER-DEFINED FUNCTIONS</h1>
Functions in <font size="-1">AWK</font> are defined as follows:
<p>
<b>function </b><i>name</i><b>(</b><i>parameter list</i><b>) { </b><i>statements </i><b>}</b>
<p>
Functions are executed when they are called from within expressions
in either patterns or actions.  Actual parameters supplied in the function
call are used to instantiate the formal parameters declared in the function.
Arrays are passed by reference, other variables are passed by value.
<p>
Since functions were not originally part of the <font size="-1">AWK</font> language, the provision
for local variables is rather clumsy: They are declared as extra parameters
in the parameter list.  The convention is to separate local variables from
real parameters by extra spaces in the parameter list.  For example:
<p>
<b><table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
function  f(p, q,     a, b)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# a and b are local
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#46;..
}
<p>
/abc/&nbsp;&nbsp;&nbsp;{ ... ; f(1, 2) ; ... }
</pre></td></tr>
</table>
</b><p>
The left parenthesis in a function call is required
to immediately follow the function name,
without any intervening white space.
This is to avoid a syntactic ambiguity with the concatenation operator.
This restriction does not apply to the built-in functions listed above.
<p>
Functions may call each other and may be recursive.
Function parameters used as local variables are initialized
to the null string and the number zero upon function invocation.
<p>
Use
<b>return</b><i> expr</i> to return a value from a function.  The return value is undefined if no
value is provided, or if the function returns by &#145;&#145;falling off&#146;&#146; the
end.
<p>
If
<b>--lint</b> has been provided,
<i>gawk</i> warns about calls to undefined functions at parse time,
instead of at run time.
Calling an undefined function at run time is a fatal error.
<p>
The word
<b>func</b> may be used in place of
<b>function</b>. <h1 class="manpages">DYNAMICALLY LOADING NEW FUNCTIONS</h1>
Beginning with version 3.1 of
<i>gawk</i>, you can dynamically add new built-in functions to the running
<i>gawk</i> interpreter.
The full details are beyond the scope of this manual page;
see <i>GAWK: Effective AWK Programming</i> for the details.
<p>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>extension(</b><i>object</i><b>, </b><i>function</i><b>)</b>
</td></tr><tr valign="top"><td width=8%>&nbsp;</td><td>
Dynamically link the shared object file named by
<i>object</i>, and invoke
<i>function</i> in that object, to perform initialization.
These should both be provided as strings.
Returns the value returned by
<i>function</i>. </td></tr>
<!-- PP ends table -->
</table>
<b>This function is provided and documented in </b><i>GAWK: Effective AWK Programming</i>,
but everything about this feature is likely to change
in the next release.
We STRONGLY recommend that you do not use this feature
for anything that you aren&#146;t willing to redo.
<h1 class="manpages">SIGNALS</h1>
<i>pgawk</i> accepts two signals.
<b>SIGUSR1</b> causes it to dump a profile and function call stack to the
profile file, which is either
<b>awkprof.out</b>, or whatever file was named with the
<b>--profile</b> option.  It then continues to run.
<b>SIGHUP</b> causes it to dump the profile and function call stack and then exit.
<h1 class="manpages">EXAMPLES</h1>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
Print and sort the login names of all users:
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BEGIN&nbsp;&nbsp;&nbsp;{ FS = ":" }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ print $1 | "sort" }
<p>
</b>Count lines in a file:
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ nlines++ }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ print nlines }
<p>
</b>Precede each line by its number in the file:
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ print FNR, $0 }
<p>
</b>Concatenate and line number (a variation on a theme):
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ print NR, $0 }
</b>Run an external command for particular lines of data:
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tail -f access_log |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk &#146;/myhome.html/ { system("nmap " $1 "&gt;&gt; logdir/myhome.html") }&#146;
</b></pre></td></tr>
</table>
<h1 class="manpages">INTERNATIONALIZATION</h1>
<p>
String constants are sequences of characters enclosed in double
quotes.  In non-English speaking environments, it is possible to mark
strings in the <font size="-1">AWK</font> program as requiring translation to the native
natural language. Such strings are marked in the <font size="-1">AWK</font> program with
a leading underscore (&#145;&#145;_&#146;&#146;).  For example,
<p>
<b>gawk &#146;BEGIN { print "hello, world" }&#146;
<p>
</b>always prints
<b>hello, world</b>. But,
<p>
<b>gawk &#146;BEGIN { print _"hello, world" }&#146;
<p>
</b>might print
<b>bonjour, monde</b> in France.
<p>
There are several steps involved in producing and running a localizable
<font size="-1">AWK</font> program.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
1.
</td><td valign="bottom">
Add a
<b>BEGIN</b> action to assign a value to the
<b>TEXTDOMAIN</b> variable to set the text domain to a name associated with your program.
<p>
&nbsp; &nbsp;<b>BEGIN { TEXTDOMAIN = "myprog" }
</b><p>
This allows
<i>gawk</i> to find the
<b>&#46;mo</b> file associated with your program.
Without this step,
<i>gawk</i> uses the
<b>messages</b> text domain,
which likely does not contain translations for your program.
</td></tr>
<tr valign="top"><td>
2.
</td><td valign="bottom">
Mark all strings that should be translated with leading underscores.
</td></tr>
<tr valign="top"><td>
3.
</td><td valign="bottom">
If necessary, use the
<b>dcgettext()</b> and/or
<b>bindtextdomain()</b> functions in your program, as appropriate.
</td></tr>
<tr valign="top"><td>
4.
</td><td valign="bottom">
Run
<b>gawk --gen-po -f myprog.awk &gt; myprog.po</b> to generate a
<b>&#46;po</b> file for your program.
</td></tr>
<tr valign="top"><td>
5.
</td><td valign="bottom">
Provide appropriate translations, and build and install a corresponding
<b>&#46;mo</b> file.
</td></tr>
<!-- PP ends table -->
</table>
The internationalization features are described in full detail in <i>GAWK: Effective AWK Programming</i>.
<h1 class="manpages">POSIX COMPATIBILITY</h1>
A primary goal for
<i>gawk</i> is compatibility with the <font size="-1">POSIX</font> standard, as well as with the
latest version of <font size="-1">UNIX</font>
<i>awk</i>. To this end,
<i>gawk</i> incorporates the following user visible
features which are not described in the <font size="-1">AWK</font> book,
but are part of the Bell Laboratories version of
<i>awk</i>, and are in the <font size="-1">POSIX</font> standard.
<p>
The book indicates that command line variable assignment happens when
<i>awk</i> would otherwise open the argument as a file, which is after the
<b>BEGIN</b> block is executed.  However, in earlier implementations, when such an
assignment appeared before any file names, the assignment would happen
<i>before</i> the
<b>BEGIN</b> block was run.  Applications came to depend on this &#145;&#145;feature.&#146;&#146;
When
<i>awk</i> was changed to match its documentation, the
<b>-v</b> option for assigning variables before program execution was added to
accommodate applications that depended upon the old behavior.
(This feature was agreed upon by both the Bell Laboratories and the <font size="-1">GNU</font> developers.)
<p>
The
<b>-W</b> option for implementation specific features is from the <font size="-1">POSIX</font> standard.
<p>
When processing arguments,
<i>gawk</i> uses the special option &#145;&#145;--&#146;&#146; to signal the end of
arguments.
In compatibility mode, it warns about but otherwise ignores
undefined options.
In normal operation, such arguments are passed on to the <font size="-1">AWK</font> program for
it to process.
<p>
The <font size="-1">AWK</font> book does not define the return value of
<b>srand()</b>. The <font size="-1">POSIX</font> standard
has it return the seed it was using, to allow keeping track
of random number sequences.  Therefore
<b>srand()</b> in
<i>gawk</i> also returns its current seed.
<p>
Other new features are:
The use of multiple
<b>-f</b> options (from MKS
<i>awk</i>); the
<b>ENVIRON</b> array; the
<b>&#92;a</b>, and
<b>&#92;v</b> escape sequences (done originally in
<i>gawk</i> and fed back into the Bell Laboratories version); the
<b>tolower()</b> and
<b>toupper()</b> built-in functions (from the Bell Laboratories version); and the <font size="-1">ANSI</font> C conversion specifications in
<b>printf</b> (done first in the Bell Laboratories version).
<h1 class="manpages">HISTORICAL FEATURES</h1>
There are two features of historical <font size="-1">AWK</font> implementations that
<i>gawk</i> supports.
First, it is possible to call the
<b>length()</b> built-in function not only with no argument, but even without parentheses!
Thus,
<p>
<b>a = length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Holy Algol 60, Batman!
</b><p>
is the same as either of
<p>
<b>a = length()
<!-- Need break --><br />
a = length($0)
</b><p>
This feature is marked as &#145;&#145;deprecated&#146;&#146; in the <font size="-1">POSIX</font> standard, and
<i>gawk</i> issues a warning about its use if
<b>--lint</b> is specified on the command line.
<p>
The other feature is the use of either the
<b>continue</b> or the
<b>break</b> statements outside the body of a
<b>while</b>, <b>for</b>, or
<b>do</b> loop.  Traditional <font size="-1">AWK</font> implementations have treated such usage as
equivalent to the
<b>next</b> statement.
<i>Gawk</i> supports this usage if
<b>--traditional</b> has been specified.
<h1 class="manpages">GNU EXTENSIONS</h1>
<i>Gawk</i> has a number of extensions to <font size="-1">POSIX</font>
<i>awk</i>. They are described in this section.  All the extensions described here
can be disabled by
invoking
<i>gawk</i> with the
<b>--traditional</b> option.
<p>
The following features of
<i>gawk</i> are not available in
<font size="-1">POSIX</font>
<i>awk</i>. <table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
No path search is performed for files named via the
<b>-f</b> option.  Therefore the
<b>AWKPATH</b> environment variable is not special.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>&#92;x</b> escape sequence.
(Disabled with
<b>--posix</b>.) </td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>fflush()</b> function.
(Disabled with
<b>--posix</b>.) </td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The ability to continue lines after
<b>?</b> and
<b>:</b>. (Disabled with
<b>--posix</b>.) </td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
Octal and hexadecimal constants in AWK programs.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>ARGIND</b>, <b>BINMODE</b>, <b>ERRNO</b>, <b>LINT</b>, <b>RT</b> and
<b>TEXTDOMAIN</b> variables are not special.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>IGNORECASE</b> variable and its side-effects are not available.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>FIELDWIDTHS</b> variable and fixed-width field splitting.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>PROCINFO</b> array is not available.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The use of
<b>RS</b> as a regular expression.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The special file names available for I/O redirection are not recognized.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>|&</b> operator for creating co-processes.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The ability to split out individual characters using the null string
as the value of
<b>FS</b>, and as the third argument to
<b>split()</b>. </td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The optional second argument to the
<b>close()</b> function.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The optional third argument to the
<b>match()</b> function.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The ability to use positional specifiers with
<b>printf</b> and
<b>sprintf()</b>. </td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The use of
<b>delete</b><i> array</i> to delete the entire contents of an array.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The use of
<b>nextfile</b> to abandon processing of the current input file.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
The
<b>and()</b>, <b>asort()</b>, <b>asorti()</b>, <b>bindtextdomain()</b>, <b>compl()</b>, <b>dcgettext()</b>, <b>dcngettext()</b>, <b>gensub()</b>, <b>lshift()</b>, <b>mktime()</b>, <b>or()</b>, <b>rshift()</b>, <b>strftime()</b>, <b>strtonum()</b>, <b>systime()</b> and
<b>xor()</b> functions.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
Localizable strings.
</td></tr>
<tr valign="top"><td>
o
</td><td valign="bottom">
Adding new built-in functions dynamically with the
<b>extension()</b> function.
</td></tr>
<!-- PP ends table -->
</table>
The <font size="-1">AWK</font> book does not define the return value of the
<b>close()</b> function.
<i>Gawk</i>&#146;s <b>close()</b> returns the value from
<b>fclose</b>(3),
or
<b>pclose</b>(3),
when closing an output file or pipe, respectively.
It returns the process&#146;s exit status when closing an input pipe.
The return value is -1 if the named file, pipe
or co-process was not opened with a redirection.
<p>
When
<i>gawk</i> is invoked with the
<b>--traditional</b> option,
if the
<i>fs</i> argument to the
<b>-F</b> option is &#145;&#145;t&#146;&#146;, then
<b>FS</b> is set to the tab character.
Note that typing
<b>gawk -F&#92;t &#46;..</b> simply causes the shell to quote the &#145;&#145;t,&#146;&#146;, and does not pass
&#145;&#145;&#92;t&#146;&#146; to the
<b>-F</b> option.
Since this is a rather ugly special case, it is not the default behavior.
This behavior also does not occur if
<b>--posix</b> has been specified.
To really get a tab character as the field separator, it is best to use
single quotes:
<b>gawk -F&#146;&#92;t&#146; &#46;..</b>. <p>
If
<i>gawk</i> is
<i>configured</i> with the
<b>--enable-switch</b> option to the
<i>configure</i> command, then it accepts an additional control-flow statement:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>switch (</b><i>expression</i><b>) {
</b><b>case </b><i>value</i><b>|</b><i>regex</i><b> : </b><i>statement
&#46;..
</i>[ <b>default: </b><i>statement </i>]
<b>}</b>
</pre></td></tr>
</table>
<h1 class="manpages">ENVIRONMENT VARIABLES</h1>
The
<b>AWKPATH</b> environment variable can be used to provide a list of directories that
<i>gawk</i> searches when looking for files named via the
<b>-f</b> and
<b>--file</b> options.
<p>
If
<b>POSIXLY_CORRECT</b> exists in the environment, then
<i>gawk</i> behaves exactly as if
<b>--posix</b> had been specified on the command line.
If
<b>--lint</b> has been specified,
<i>gawk</i> issues a warning message to this effect.
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<b>getpid</b>(2),
<b>getppid</b>(2),
<b>getpgrp</b>(2),
<b>getuid</b>(2),
<b>geteuid</b>(2),
<b>getgid</b>(2),
<b>getegid</b>(2),
<b>getgroups</b>(2)
<p>
<i>The AWK Programming Language</i>, Alfred V. Aho, Brian W. Kernighan, Peter J. Weinberger,
Addison-Wesley, 1988.  ISBN 0-201-07981-X.
<p>
<i>GAWK: Effective AWK Programming</i>,
Edition 3.0, published by the Free Software Foundation, 2001.
<h1 class="manpages">BUGS</h1>
The
<b>-F</b> option is not necessary given the command line variable assignment feature;
it remains only for backwards compatibility.
<p>
Syntactically invalid single character programs tend to overflow
the parse stack, generating a rather unhelpful message.  Such programs
are surprisingly difficult to diagnose in the completely general case,
and the effort to do so really is not worth it.
<h1 class="manpages">AUTHORS</h1>
The original version of <font size="-1">UNIX</font>
<i>awk</i> was designed and implemented by Alfred Aho,
Peter Weinberger, and Brian Kernighan of Bell Laboratories.  Brian Kernighan
continues to maintain and enhance it.
<p>
Paul Rubin and Jay Fenlason,
of the Free Software Foundation, wrote
<i>gawk</i>, to be compatible with the original version of
<i>awk</i> distributed in Seventh Edition <font size="-1">UNIX</font>.
John Woods contributed a number of bug fixes.
David Trueman, with contributions
from Arnold Robbins, made
<i>gawk</i> compatible with the new version of <font size="-1">UNIX</font>
<i>awk</i>. Arnold Robbins is the current maintainer.
<p>
The initial DOS port was done by Conrad Kwok and Scott Garfinkle.
Scott Deifik is the current DOS maintainer.  Pat Rankin did the
port to VMS, and Michal Jaegermann did the port to the Atari ST.
The port to OS/2 was done by Kai Uwe Rommel, with contributions and
help from Darrel Hankerson.  Fred Fish supplied support for the Amiga,
Stephen Davies provided the Tandem port,
and Martin Brown provided the BeOS port.
<h1 class="manpages">VERSION INFORMATION</h1>
This man page documents
<i>gawk</i>, version 3.1.5.
<h1 class="manpages">BUG REPORTS</h1>
If you find a bug in
<i>gawk</i>, please send electronic mail to
<b><a href="mailto:bug-gawk@gnu.org">bug-gawk@gnu.org</a></b>. Please include your operating system and its revision, the version of
<i>gawk</i> (from
<b>gawk --version</b>), what C compiler you used to compile it, and a test program
and data that are as small as possible for reproducing the problem.
<p>
Before sending a bug report, please do two things.  First, verify that
you have the latest version of
<i>gawk</i>. Many bugs (usually subtle ones) are fixed at each release, and if
yours is out of date, the problem may already have been solved.
Second, please read this man page and the reference manual carefully to
be sure that what you think is a bug really is, instead of just a quirk
in the language.
<p>
Whatever you do, do
<b>NOT</b> post a bug report in
<b>comp.lang.awk</b>. While the
<i>gawk</i> developers occasionally read this newsgroup, posting bug reports there
is an unreliable way to report bugs.  Instead, please use the electronic mail
addresses given above.
<p>
If you&#146;re using a GNU/Linux system or BSD-based system,
you may wish to submit a bug report to the vendor of your distribution.
That&#146;s fine, but please send a copy to the official email address as well,
since there&#146;s no guarantee that the bug will be forwarded to the
<i>gawk</i> maintainer.
<h1 class="manpages">ACKNOWLEDGEMENTS</h1>
Brian Kernighan of Bell Laboratories
provided valuable assistance during testing and debugging.
We thank him.
<h1 class="manpages">COPYING PERMISSIONS</h1>
Copyright &#169; 1989, 1991, 1992, 1993, 1994, 1995, 1996,
1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
<p>
Permission is granted to make and distribute verbatim copies of
this manual page provided the copyright notice and this permission
notice are preserved on all copies.
<p>
Permission is granted to copy and distribute modified versions of this
manual page under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
<p>
Permission is granted to copy and distribute translations of this
manual page into another language, under the above conditions for
modified versions, except that this permission notice may be stated in
a translation approved by the Foundation.
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion7efd.html?tutorial=unix_commands&amp;file=awk.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_commands/awk.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:26 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
