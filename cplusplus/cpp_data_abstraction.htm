<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/cplusplus/cpp_data_abstraction.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 20:01:26 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Data Abstraction in C++</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="Keywords" content="C++, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces, Signal Handling" />
<meta name="description" content="Data Abstraction in C++ - Learning C++ in simple and easy steps : A beginner's tutorial containing complete knowledge of C++ Syntax Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces and Signal Handling" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
/* C++ Scheme */
#topmenu a:link {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#topmenu a:visited {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#topmenu a:hover {text-decoration:none;color:#d6a432 !important;background-color:transparent;font-weight:bold;}
#header{ 
background:#d6a432 !important;
}
#topmenu
{
background-color:#3b2b1e !important;
}
#leftcol ul.menu li.heading 
{
background:#d6a432 !important;
border:1px solid #3b2b1e !important;
}
#leftcol, #middlecol, #rightcol {min-height:1600px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/cpp-mini-logo.png" alt="C++ Tutorial" />
</div>
<ul class="menu">
<li class="heading">C++ Basics</li>
<li><a target="_top" href="index.htm">C++ Home</a></li>
<li><a target="_top" href="cpp_overview.htm">C++ Overview</a></li>
<li><a target="_top" href="cpp_environment_setup.htm">C++ Environment Setup</a></li>
<li><a target="_top" href="cpp_basic_syntax.htm">C++ Basic Syntax</a></li>
<li><a target="_top" href="cpp_comments.htm">C++ Comments</a></li>
<li><a target="_top" href="cpp_data_types.htm">C++ Data Types</a></li>
<li><a target="_top" href="cpp_variable_types.htm">C++  Variable Types</a></li>
<li><a target="_top" href="cpp_variable_scope.htm">C++  Variable Scope</a></li>
<li><a target="_top" href="cpp_constants_literals.htm">C++ Constants/Literals</a></li>
<li><a target="_top" href="cpp_modifier_types.htm">C++ Modifier Types</a></li>
<li><a target="_top" href="cpp_storage_classes.htm">C++ Storage Classes</a></li>
<li><a target="_top" href="cpp_operators.htm">C++ Operators</a></li>
<li><a target="_top" href="cpp_loop_types.htm">C++ Loop Types</a></li>
<li><a target="_top" href="cpp_decision_making.htm">C++ Decision Making </a></li>
<li><a target="_top" href="cpp_functions.htm">C++ Functions</a></li>
<li><a target="_top" href="cpp_numbers.htm">C++ Numbers</a></li>
<li><a target="_top" href="cpp_arrays.htm">C++ Arrays</a></li>
<li><a target="_top" href="cpp_strings.htm">C++ Strings</a></li>
<li><a target="_top" href="cpp_pointers.htm">C++ Pointers</a></li>
<li><a target="_top" href="cpp_references.htm">C++ References</a></li>
<li><a target="_top" href="cpp_date_time.htm">C++ Date &amp; Time</a></li>
<li><a target="_top" href="cpp_basic_input_output.htm">C++ Basic Input/Output</a></li>
<li><a target="_top" href="cpp_data_structures.htm">C++ Data Structures</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Object Oriented</li>
<li><a class="left" target="_top" href="cpp_classes_objects.htm">C++ Classes &amp; Objects</a></li>
<li><a class="left" target="_top" href="cpp_inheritance.htm">C++ Inheritance</a></li>
<li><a class="left" target="_top" href="cpp_overloading.htm">C++ Overloading</a></li>
<li><a class="left" target="_top" href="cpp_polymorphism.htm">C++ Polymorphism</a></li>
<li><a class="left" target="_top" href="cpp_data_abstraction.htm"><b>C++ Abstraction</b></a></li>
<li><a class="left" target="_top" href="cpp_data_encapsulation.htm">C++ Encapsulation</a></li>
<li><a class="left" target="_top" href="cpp_interfaces.htm">C++ Interfaces</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Advanced</li>
<li><a class="left" target="_top" href="cpp_files_streams.htm">C++ Files and Streams</a></li>
<li><a class="left" target="_top" href="cpp_exceptions_handling.htm">C++ Exception Handling</a></li>
<li><a class="left" target="_top" href="cpp_dynamic_memory.htm">C++ Dynamic Memory</a></li>
<li><a class="left" target="_top" href="cpp_namespaces.htm">C++ Namespaces</a></li>
<li><a class="left" target="_top" href="cpp_templates.htm">C++ Templates</a></li>
<li><a class="left" target="_top" href="cpp_preprocessor.htm">C++ Preprocessor</a></li>
<li><a class="left" target="_top" href="cpp_signal_handling.htm">C++ Signal Handling</a></li>
<li><a class="left" target="_top" href="cpp_multithreading.htm">C++ Multithreading</a></li>
<li><a class="left" target="_top" href="cpp_web_programming.htm">C++ Web Programming</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Useful Resources</li>
<li><a class="left" target="_top" href="cpp_quick_guide.htm">C++ Quick Guide</a></li>
<li><a class="left" target="_top" href="cpp_stl_tutorial.htm">C++ STL Tutorial</a></li>
<li><a class="left" target="_top" href="cpp_standard_library.htm">C++ Standard Library</a></li>
<li><a class="left" target="_top" href="cpp_useful_resources.htm">C++ Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Data Abstraction in C++</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="cpp_polymorphism.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="cpp_data_encapsulation.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>Data abstraction refers to, providing only essential information to the outside word and hiding their background details ie. to represent the needed information in program without presenting the details.</p>
<p>Data abstraction is a programming (and design) technique that relies on the separation of interface and implementation.</p>
<p>Let's take one real life example of a TV which you can turn on and off, change the channel, adjust the volume, and add external components such as speakers, VCRs, and DVD players BUT you do not know it's internal detail that is, you do not know how it receives signals over the air or through a cable, how it translates them, and  finally displays them on the screen.</p>
<p>Thus we can say, a television clearly separates its internal implementation from its external interface and you can play with its interfaces like the power button, channel changer, and volume control without having zero knowledge of its internals.</p>
<p>Now if we talk in terms of C++ Programming, C++ classes provides great level of <b>data abstraction</b>. They provide sufficient public methods to the outside world to play with the functionality of the object and to manipulate object data ie. state without actually knowing how class has been implemented internally.</p>
<p>For example, your program can make a call to the <b>sort()</b> function without knowing what algorithm the function actually uses to sort the given values. In fact, the underlying implementation of the sorting functionality could change between releases of the library, and as long as the interface stays the same, your function call will still work.</p>
<p>In C++ we use <b>classes</b> to define our own abstract data types (ADT). You can use the <b>cout</b> object of class <b>ostream</b> to stream data to standard output like this:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

int main( )
{
   cout &lt;&lt; "Hello C++" &lt;&lt;endl;
   return 0;
}
</pre>
<p>Here you don't need to understand how <b>cout</b> displays the text on the user's screen. You need only know the public interface and the underlying implementation of cout is free to change.</p>
<h2>Access Labels Enforce Abstraction:</h2>
<p>In C++ we use access labels to define the abstract interface to the class. A class may contain zero or more access labels:</p>
<ul class="list">
<li><p>Members defined with a public label are accessible to all parts of the program. The data-abstraction view of a type is defined by its public members.</p></li>
<li><p>Members defined with a private label are not accessible to code that uses the class. The private sections hides the implementation from code that uses the type.</p></li>
</ul>
<p>There are no restrictions on how often an access label may appear. Each access label specifies the access level of the succeeding member definitions. The specified access level remains in effect until the next access label is encountered or the closing right brace of the class body is seen.</p>
<h2>Benefits of Data Abstraction:</h2>
<p>Data abstraction provide two important advantages:</p>
<ul class="list">
<li><p>Class internals are protected from inadvertent user-level errors, which might corrupt the state of the object.</p></li>
<li><p>The class implementation may evolve over time in response to changing requirements or bug reports without requiring change in user-level code.</p></li>
</ul>
<p>By defining data members only in the private section of the class, the class author is free to make changes in the data. If the implementation changes, only the class code needs to be examined to see what affect the change may have. If data are public, then any function that directly accesses the data members of the old representation might be broken.</p>
<h2>Data Abstraction Example:</h2>
<p>Any C++ program where you implement a class with public and private members is an example of data abstraction. Consider the following example:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

class Adder{
   public:
      // constructor
      Adder(int i = 0)
      {
        total = i;
      }
      // interface to outside world
      void addNum(int number)
      {
          total += number;
      }
      // interface to outside world
      int getTotal()
      {
          return total;
      };
   private:
      // hidden data from outside world
      int total;
};
int main( )
{
   Adder a;
   
   a.addNum(10);
   a.addNum(20);
   a.addNum(30);

   cout &lt;&lt; "Total " &lt;&lt; a.getTotal() &lt;&lt;endl;
   return 0;
}
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="prettyprint">
Total 60
</pre>
<p>Above class adds numbers together, and returns the sum. The public members <b>addNum</b> and <b>getTotal</b> are the interfaces to the outside world and a user needs to know them to use the class. The private member <b>total</b> is something that the user doesn't need to know about, but is needed for the class to operate properly.</p>
<h2>Designing Strategy:</h2>
<p>Abstraction separates code into interface and implementation. So while designing your component, you must keep interface independent of the implementation so that if you change underlying implementation then interface would remain intact.</p>
<p>In this case whatever programs are using these interfaces, they would not be impacted and would just need a recompilation with the latest implementation.</p>
<br />
<hr />
<div class="pre-btn">
<a href="cpp_polymorphism.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/cpp_data_abstraction.pdf" alt="Data Abstraction in C++" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="cpp_data_encapsulation.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/cplusplus/cpp_data_abstraction.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 20:01:31 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>