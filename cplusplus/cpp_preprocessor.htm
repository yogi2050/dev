<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/cplusplus/cpp_preprocessor.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 20:01:43 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>C++ Preprocessor</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="Keywords" content="C++, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces, Signal Handling" />
<meta name="description" content="C++ Preprocessor, directives examples #include, #define and function like macros - Learning C++ in simple and easy steps : A beginner's tutorial containing complete knowledge of C++ Syntax Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces and Signal Handling" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
/* C++ Scheme */
#topmenu a:link {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#topmenu a:visited {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#topmenu a:hover {text-decoration:none;color:#d6a432 !important;background-color:transparent;font-weight:bold;}
#header{ 
background:#d6a432 !important;
}
#topmenu
{
background-color:#3b2b1e !important;
}
#leftcol ul.menu li.heading 
{
background:#d6a432 !important;
border:1px solid #3b2b1e !important;
}
#leftcol, #middlecol, #rightcol {min-height:1600px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/cpp-mini-logo.png" alt="C++ Tutorial" />
</div>
<ul class="menu">
<li class="heading">C++ Basics</li>
<li><a target="_top" href="index.htm">C++ Home</a></li>
<li><a target="_top" href="cpp_overview.htm">C++ Overview</a></li>
<li><a target="_top" href="cpp_environment_setup.htm">C++ Environment Setup</a></li>
<li><a target="_top" href="cpp_basic_syntax.htm">C++ Basic Syntax</a></li>
<li><a target="_top" href="cpp_comments.htm">C++ Comments</a></li>
<li><a target="_top" href="cpp_data_types.htm">C++ Data Types</a></li>
<li><a target="_top" href="cpp_variable_types.htm">C++  Variable Types</a></li>
<li><a target="_top" href="cpp_variable_scope.htm">C++  Variable Scope</a></li>
<li><a target="_top" href="cpp_constants_literals.htm">C++ Constants/Literals</a></li>
<li><a target="_top" href="cpp_modifier_types.htm">C++ Modifier Types</a></li>
<li><a target="_top" href="cpp_storage_classes.htm">C++ Storage Classes</a></li>
<li><a target="_top" href="cpp_operators.htm">C++ Operators</a></li>
<li><a target="_top" href="cpp_loop_types.htm">C++ Loop Types</a></li>
<li><a target="_top" href="cpp_decision_making.htm">C++ Decision Making </a></li>
<li><a target="_top" href="cpp_functions.htm">C++ Functions</a></li>
<li><a target="_top" href="cpp_numbers.htm">C++ Numbers</a></li>
<li><a target="_top" href="cpp_arrays.htm">C++ Arrays</a></li>
<li><a target="_top" href="cpp_strings.htm">C++ Strings</a></li>
<li><a target="_top" href="cpp_pointers.htm">C++ Pointers</a></li>
<li><a target="_top" href="cpp_references.htm">C++ References</a></li>
<li><a target="_top" href="cpp_date_time.htm">C++ Date &amp; Time</a></li>
<li><a target="_top" href="cpp_basic_input_output.htm">C++ Basic Input/Output</a></li>
<li><a target="_top" href="cpp_data_structures.htm">C++ Data Structures</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Object Oriented</li>
<li><a class="left" target="_top" href="cpp_classes_objects.htm">C++ Classes &amp; Objects</a></li>
<li><a class="left" target="_top" href="cpp_inheritance.htm">C++ Inheritance</a></li>
<li><a class="left" target="_top" href="cpp_overloading.htm">C++ Overloading</a></li>
<li><a class="left" target="_top" href="cpp_polymorphism.htm">C++ Polymorphism</a></li>
<li><a class="left" target="_top" href="cpp_data_abstraction.htm">C++ Abstraction</a></li>
<li><a class="left" target="_top" href="cpp_data_encapsulation.htm">C++ Encapsulation</a></li>
<li><a class="left" target="_top" href="cpp_interfaces.htm">C++ Interfaces</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Advanced</li>
<li><a class="left" target="_top" href="cpp_files_streams.htm">C++ Files and Streams</a></li>
<li><a class="left" target="_top" href="cpp_exceptions_handling.htm">C++ Exception Handling</a></li>
<li><a class="left" target="_top" href="cpp_dynamic_memory.htm">C++ Dynamic Memory</a></li>
<li><a class="left" target="_top" href="cpp_namespaces.htm">C++ Namespaces</a></li>
<li><a class="left" target="_top" href="cpp_templates.htm">C++ Templates</a></li>
<li><a class="left" target="_top" href="cpp_preprocessor.htm"><b>C++ Preprocessor</b></a></li>
<li><a class="left" target="_top" href="cpp_signal_handling.htm">C++ Signal Handling</a></li>
<li><a class="left" target="_top" href="cpp_multithreading.htm">C++ Multithreading</a></li>
<li><a class="left" target="_top" href="cpp_web_programming.htm">C++ Web Programming</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Useful Resources</li>
<li><a class="left" target="_top" href="cpp_quick_guide.htm">C++ Quick Guide</a></li>
<li><a class="left" target="_top" href="cpp_stl_tutorial.htm">C++ STL Tutorial</a></li>
<li><a class="left" target="_top" href="cpp_standard_library.htm">C++ Standard Library</a></li>
<li><a class="left" target="_top" href="cpp_useful_resources.htm">C++ Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>C++ Preprocessor</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="cpp_templates.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="cpp_signal_handling.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>The preprocessors are the directives which gives instruction to the compiler to preprocess the information before actual compilation starts.</p>
<p>All preprocessor directives begin with #, and only white-space characters may appear before a preprocessor directive on a line. Preprocessor directives are not C++ statements, so they do not end in a semicolon (;).</p>
<p>You already have seen a <b>#include</b> directive in all the examples. This macro is used to include a header file into the source file.</p>
<p>There are number of preprocessor directives supported by C++ like #include, #define, #if, #else, #line etc. Let us see important directives:</p>
<h2>The #define Preprocessor:</h2>
<p>The #define preprocessor directive creates symbolic constants. The symbolic constant is called a <b>macro</b> and the general form of the directive is:</p>
<pre class="prettyprint">
#define macro-name replacement-text 
</pre>
<p>When this line appears in a file, all subsequent occurrences of macro in that file will be replaced by replacement-text before the program is compiled. For example:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

#define PI 3.14159

int main ()
{
 
    cout &lt;&lt; "Value of PI :" &lt;&lt; PI &lt;&lt; endl; 

    return 0;
}
</pre>
<p>Now let us do the preprocessing of this code  to see the result, assume we have source code file, so let us compile it with -E option and redirect the result to test.p. Now if you will check test.p it will have lots of information and at the bottom you will fine the value replaced as follows:</p>
<pre class="prettyprint">
$gcc -E test.cpp &gt; test.p

...
int main ()
{
 
    cout &lt;&lt; "Value of PI :" &lt;&lt; 3.14159 &lt;&lt; endl; 

    return 0;
}
</pre>
<h2>Function-Like Macros:</h2>
<p>You can use #define to define a macro which will take argument as follows:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

#define MIN(a,b) (((a)&lt;(b)) ? a : b)

int main ()
{
   int i, j;
   i = 100;
   j = 30;
   cout &lt;&lt;"The minimum is " &lt;&lt; MIN(i, j) &lt;&lt; endl;

    return 0;
}
</pre>
<p>If we compile and run above code, this would produce following result:</p>
<pre class="prettyprint">
The minimum is 30
</pre>
<h2>Conditional Compilation:</h2>
<p>There are several directives which can use to compile selectively portions of your program's source code. This process, called conditional compilation.</p>
<p>The conditional preprocessor construct is much like the if selection structure. Consider the following preprocessor code:</p>
<pre class="prettyprint">
#ifndef NULL
   #define NULL 0
#endif
</pre>
<p>You can compile a program for debugging purpose and can debugging turn on or off using a single macro as follows:</p>
<pre class="prettyprint">
#ifdef DEBUG
   cerr &lt;&lt;"Variable x = " &lt;&lt; x &lt;&lt; endl;
#endif
</pre>
<p>causes the <b>cerr</b> statement to be compiled in the program if the symbolic constant DEBUG has been defined before directive #ifdef DEBUG. You can use #if 0 statment to comment out a portion of the program as follows:</p>
<pre class="prettyprint">
#if 0
   code prevented from compiling
#endif
</pre>
<p>Let us try the following example:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;
#define DEBUG

#define MIN(a,b) (((a)&lt;(b)) ? a : b)

int main ()
{
   int i, j;
   i = 100;
   j = 30;
#ifdef DEBUG
   cerr &lt;&lt;"Trace: Inside main function" &lt;&lt; endl;
#endif

#if 0
   /* This is commented part */
   cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;
#endif

   cout &lt;&lt;"The minimum is " &lt;&lt; MIN(i, j) &lt;&lt; endl;

#ifdef DEBUG
   cerr &lt;&lt;"Trace: Coming out of main function" &lt;&lt; endl;
#endif
    return 0;
}
</pre>
<p>If we compile and run above code, this would produce following result:</p>
<pre class="prettyprint">
Trace: Inside main function
The minimum is 30
Trace: Coming out of main function
</pre>
<h2>The # and ## Operators:</h2>
<p>The # and ## preprocessor operators are available in C++ and ANSI/ISO C. The # operator causes a replacement-text token to be converted to a string surrounded by quotes. </p>
<p>Consider the following macro definition:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

#define MKSTR( x ) #x

int main ()
{
    cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;

    return 0;
}
</pre>
<p>If we compile and run above code, this would produce following result:</p>
<pre class="prettyprint">
HELLO C++
</pre>
<p>Let us see how it worked. It is simple to understand that the C++ preprocessor turns the line:</p>
<pre class="prettyprint">
  cout &lt;&lt; MKSTR(HELLO C++) &lt;&lt; endl;
</pre>
<p>into the following line:</p>
<pre class="prettyprint">
  cout &lt;&lt; "HELLO C++" &lt;&lt; endl;
</pre>
<p>The ## operator is used to concatenate two tokens. Here is an example:</p>
<pre class="prettyprint">
#define CONCAT( x, y )  x ## y
</pre>
<p>When CONCAT appears in the program, its arguments are concatenated and used to replace the macro. For example, CONCAT(HELLO, C++) is replaced by "HELLO C++" in the program as follows.</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

#define concat(a, b) a ## b
int main()
{
   int xy = 100;
   
   cout &lt;&lt; concat(x, y);
   return 0;
}
</pre>
<p>If we compile and run above code, this would produce following result:</p>
<pre class="prettyprint">
100
</pre>
<p>Let us see how it worked. It is simple to understand that the C++ preprocessor transforms:</p>
<pre class="prettyprint">
  cout &lt;&lt; concat(x, y);
</pre>
<p>into the following line:</p>
<pre class="prettyprint">
  cout &lt;&lt; xy;
</pre>
<h2>Predefined C++ Macros:</h2>
<p>C++ provides a number of predefined macros mentioned below:</p>
<table class="src">
<tr><th width="30%">Macro</th><th>Description</th></tr>
<tr><td>__LINE__</td><td>This contain the current line number of the program when it is being compiled.</td></tr>
<tr><td>__FILE__</td><td>This contain the current file name of the program when it is being compiled.</td></tr>
<tr><td>__DATE__</td><td>This contains a string of the form month/day/year that is the date of the translation of the source file into object code.</td></tr>
<tr><td>__TIME__</td><td>This contains a string of the form hour:minute:second that is the time at which the program was compiled.</td></tr>
</table>
<p>Let us see an example for all the above macros:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

int main ()
{
    cout &lt;&lt; "Value of __LINE__ : " &lt;&lt; __LINE__ &lt;&lt; endl;
    cout &lt;&lt; "Value of __FILE__ : " &lt;&lt; __FILE__ &lt;&lt; endl;
    cout &lt;&lt; "Value of __DATE__ : " &lt;&lt; __DATE__ &lt;&lt; endl;
    cout &lt;&lt; "Value of __TIME__ : " &lt;&lt; __TIME__ &lt;&lt; endl;

    return 0;
}
</pre>
<p>If we compile and run above code, this would produce following result:</p>
<pre class="prettyprint">
Value of __LINE__ : 6
Value of __FILE__ : test.cpp
Value of __DATE__ : Feb 28 2011
Value of __TIME__ : 18:52:48
</pre>
<br />
<hr />
<div class="pre-btn">
<a href="cpp_templates.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/cpp_preprocessor.pdf" alt="C++ Preprocessor" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="cpp_signal_handling.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/cplusplus/cpp_preprocessor.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 20:01:44 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>