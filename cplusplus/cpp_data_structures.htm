<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/cplusplus/cpp_data_structures.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 20:01:05 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>C++ Data Structures</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="Keywords" content="C++, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces, Signal Handling" />
<meta name="description" content="C++ Data Structures - Learning C++ in simple and easy steps : A beginner's tutorial containing complete knowledge of C++ Syntax Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces and Signal Handling" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
/* C++ Scheme */
#topmenu a:link {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#topmenu a:visited {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#topmenu a:hover {text-decoration:none;color:#d6a432 !important;background-color:transparent;font-weight:bold;}
#header{ 
background:#d6a432 !important;
}
#topmenu
{
background-color:#3b2b1e !important;
}
#leftcol ul.menu li.heading 
{
background:#d6a432 !important;
border:1px solid #3b2b1e !important;
}
#leftcol, #middlecol, #rightcol {min-height:1600px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/cpp-mini-logo.png" alt="C++ Tutorial" />
</div>
<ul class="menu">
<li class="heading">C++ Basics</li>
<li><a target="_top" href="index.htm">C++ Home</a></li>
<li><a target="_top" href="cpp_overview.htm">C++ Overview</a></li>
<li><a target="_top" href="cpp_environment_setup.htm">C++ Environment Setup</a></li>
<li><a target="_top" href="cpp_basic_syntax.htm">C++ Basic Syntax</a></li>
<li><a target="_top" href="cpp_comments.htm">C++ Comments</a></li>
<li><a target="_top" href="cpp_data_types.htm">C++ Data Types</a></li>
<li><a target="_top" href="cpp_variable_types.htm">C++  Variable Types</a></li>
<li><a target="_top" href="cpp_variable_scope.htm">C++  Variable Scope</a></li>
<li><a target="_top" href="cpp_constants_literals.htm">C++ Constants/Literals</a></li>
<li><a target="_top" href="cpp_modifier_types.htm">C++ Modifier Types</a></li>
<li><a target="_top" href="cpp_storage_classes.htm">C++ Storage Classes</a></li>
<li><a target="_top" href="cpp_operators.htm">C++ Operators</a></li>
<li><a target="_top" href="cpp_loop_types.htm">C++ Loop Types</a></li>
<li><a target="_top" href="cpp_decision_making.htm">C++ Decision Making </a></li>
<li><a target="_top" href="cpp_functions.htm">C++ Functions</a></li>
<li><a target="_top" href="cpp_numbers.htm">C++ Numbers</a></li>
<li><a target="_top" href="cpp_arrays.htm">C++ Arrays</a></li>
<li><a target="_top" href="cpp_strings.htm">C++ Strings</a></li>
<li><a target="_top" href="cpp_pointers.htm">C++ Pointers</a></li>
<li><a target="_top" href="cpp_references.htm">C++ References</a></li>
<li><a target="_top" href="cpp_date_time.htm">C++ Date &amp; Time</a></li>
<li><a target="_top" href="cpp_basic_input_output.htm">C++ Basic Input/Output</a></li>
<li><a target="_top" href="cpp_data_structures.htm"><b>C++ Data Structures</b></a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Object Oriented</li>
<li><a class="left" target="_top" href="cpp_classes_objects.htm">C++ Classes &amp; Objects</a></li>
<li><a class="left" target="_top" href="cpp_inheritance.htm">C++ Inheritance</a></li>
<li><a class="left" target="_top" href="cpp_overloading.htm">C++ Overloading</a></li>
<li><a class="left" target="_top" href="cpp_polymorphism.htm">C++ Polymorphism</a></li>
<li><a class="left" target="_top" href="cpp_data_abstraction.htm">C++ Abstraction</a></li>
<li><a class="left" target="_top" href="cpp_data_encapsulation.htm">C++ Encapsulation</a></li>
<li><a class="left" target="_top" href="cpp_interfaces.htm">C++ Interfaces</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Advanced</li>
<li><a class="left" target="_top" href="cpp_files_streams.htm">C++ Files and Streams</a></li>
<li><a class="left" target="_top" href="cpp_exceptions_handling.htm">C++ Exception Handling</a></li>
<li><a class="left" target="_top" href="cpp_dynamic_memory.htm">C++ Dynamic Memory</a></li>
<li><a class="left" target="_top" href="cpp_namespaces.htm">C++ Namespaces</a></li>
<li><a class="left" target="_top" href="cpp_templates.htm">C++ Templates</a></li>
<li><a class="left" target="_top" href="cpp_preprocessor.htm">C++ Preprocessor</a></li>
<li><a class="left" target="_top" href="cpp_signal_handling.htm">C++ Signal Handling</a></li>
<li><a class="left" target="_top" href="cpp_multithreading.htm">C++ Multithreading</a></li>
<li><a class="left" target="_top" href="cpp_web_programming.htm">C++ Web Programming</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Useful Resources</li>
<li><a class="left" target="_top" href="cpp_quick_guide.htm">C++ Quick Guide</a></li>
<li><a class="left" target="_top" href="cpp_stl_tutorial.htm">C++ STL Tutorial</a></li>
<li><a class="left" target="_top" href="cpp_standard_library.htm">C++ Standard Library</a></li>
<li><a class="left" target="_top" href="cpp_useful_resources.htm">C++ Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>C++ Data Structures</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="cpp_basic_input_output.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="cpp_classes_objects.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>C/C++ arrays allow you to define variables that combine several data items of the same kind but <b>structure</b> is another user defined data type which allows you to combine data items of different kinds.</p>
<p>Structures are used to represent a record, Suppose you want to keep track of your books in a library. You might want to track the following attributes about each book:</p>
<ul class="list">
<li>Title </li>
<li>Author  </li>
<li>Subject </li>
<li>Book ID</li>
</ul>
<h2>Defining a Structure:</h2>
<p>To define a structure, you must use the struct statement. The struct statement defines a new data type, with more than one member, for your program. The format of the struct statement is this:</p>
<pre class="prettyprint">
struct [structure tag]
{
   member definition;
   member definition;
   ...
   member definition;
} [one or more structure variables];  
</pre>
<p>The <b>structure tag</b> is optional and each member definition is a normal variable definition, such as int i; or float f; or any other valid variable definition. At the end of the structure's definition, before the final semicolon, you can specify one or more structure variables but it is optional. Here is the way you would declare the Book structure:</p>
<pre class="prettyprint">
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
}book;  
</pre>
<h2>Accessing Structure Members:</h2>
<p>To access any member of a structure, we use the <b>member access operator (.)</b>. The member access operator is coded as a period between the structure variable name and the structure member that we wish to access. You would use <b>struct</b> keyword to define variables of structure type. Following is the example to explain usage of structure:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
 
using namespace std;
 
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
};
 
int main( )
{
   struct Books Book1;        // Declare Book1 of type Book
   struct Books Book2;        // Declare Book2 of type Book
 
   // book 1 specification
   strcpy( Book1.title, "Learn C++ Programming");
   strcpy( Book1.author, "Chand Miyan"); 
   strcpy( Book1.subject, "C++ Programming");
   Book1.book_id = 6495407;

   // book 2 specification
   strcpy( Book2.title, "Telecom Billing");
   strcpy( Book2.author, "Yakit Singha");
   strcpy( Book2.subject, "Telecom");
   Book2.book_id = 6495700;
 
   // Print Book1 info
   cout &lt;&lt; "Book 1 title : " &lt;&lt; Book1.title &lt;&lt;endl;
   cout &lt;&lt; "Book 1 author : " &lt;&lt; Book1.author &lt;&lt;endl;
   cout &lt;&lt; "Book 1 subject : " &lt;&lt; Book1.subject &lt;&lt;endl;
   cout &lt;&lt; "Book 1 id : " &lt;&lt; Book1.book_id &lt;&lt;endl;

   // Print Book2 info
   cout &lt;&lt; "Book 2 title : " &lt;&lt; Book2.title &lt;&lt;endl;
   cout &lt;&lt; "Book 2 author : " &lt;&lt; Book2.author &lt;&lt;endl;
   cout &lt;&lt; "Book 2 subject : " &lt;&lt; Book2.subject &lt;&lt;endl;
   cout &lt;&lt; "Book 2 id : " &lt;&lt; Book2.book_id &lt;&lt;endl;

   return 0;
}
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="prettyprint">
Book 1 title : Learn C++ Programming
Book 1 author : Chand Miyan
Book 1 subject : C++ Programming
Book 1 id : 6495407
Book 2 title : Telecom Billing
Book 2 author : Yakit Singha
Book 2 subject : Telecom
Book 2 id : 6495700
</pre>
<h2>Structures as Function Arguments:</h2>
<p>You can pass a structure as a function argument in very similar way as you pass any other variable or pointer. You would access structure variables in the similar way as you have accessed in the above example:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
 
using namespace std;
void printBook( struct Books book );

struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
};
 
int main( )
{
   struct Books Book1;        // Declare Book1 of type Book
   struct Books Book2;        // Declare Book2 of type Book
 
   // book 1 specification
   strcpy( Book1.title, "Learn C++ Programming");
   strcpy( Book1.author, "Chand Miyan"); 
   strcpy( Book1.subject, "C++ Programming");
   Book1.book_id = 6495407;

   // book 2 specification
   strcpy( Book2.title, "Telecom Billing");
   strcpy( Book2.author, "Yakit Singha");
   strcpy( Book2.subject, "Telecom");
   Book2.book_id = 6495700;
 
   // Print Book1 info
   printBook( Book1 );

   // Print Book2 info
   printBook( Book2 );

   return 0;
}
void printBook( struct Books book )
{
   cout &lt;&lt; "Book title : " &lt;&lt; book.title &lt;&lt;endl;
   cout &lt;&lt; "Book author : " &lt;&lt; book.author &lt;&lt;endl;
   cout &lt;&lt; "Book subject : " &lt;&lt; book.subject &lt;&lt;endl;
   cout &lt;&lt; "Book id : " &lt;&lt; book.book_id &lt;&lt;endl;
}
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="prettyprint">
Book title : Learn C++ Programming
Book author : Chand Miyan
Book subject : C++ Programming
Book id : 6495407
Book title : Telecom Billing
Book author : Yakit Singha
Book subject : Telecom
Book id : 6495700
</pre>
<h2>Pointers to Structures:</h2>
<p>You can define pointers to structures in very similar way as you define pointer to any other variable as follows:</p>
<pre class="prettyprint">
struct Books *struct_pointer;
</pre>
<p>Now you can store the address of a structure variable in the above defined pointer variable. To find the address of a structure variable, place the &amp; operator before the structure's name as follows:</p>
<pre class="prettyprint">
struct_pointer = &amp;Book1;
</pre>
<p>To access the members of a structure using a pointer to that structure, you must use the -&gt; operator as follows:</p>
<pre class="prettyprint">
struct_pointer-&gt;title;
</pre>
<p>Let us re-write above example using structure pointer, hope this will be easy for you to understand the concept:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
 
using namespace std;
void printBook( struct Books *book );

struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
};
 
int main( )
{
   struct Books Book1;        // Declare Book1 of type Book
   struct Books Book2;        // Declare Book2 of type Book
 
   // Book 1 specification
   strcpy( Book1.title, "Learn C++ Programming");
   strcpy( Book1.author, "Chand Miyan"); 
   strcpy( Book1.subject, "C++ Programming");
   Book1.book_id = 6495407;

   // Book 2 specification
   strcpy( Book2.title, "Telecom Billing");
   strcpy( Book2.author, "Yakit Singha");
   strcpy( Book2.subject, "Telecom");
   Book2.book_id = 6495700;
 
   // Print Book1 info, passing address of structure
   printBook( &amp;Book1 );

   // Print Book1 info, passing address of structure
   printBook( &amp;Book2 );

   return 0;
}
// This function accept pointer to structure as parameter.
void printBook( struct Books *book )
{
   cout &lt;&lt; "Book title : " &lt;&lt; book-&gt;title &lt;&lt;endl;
   cout &lt;&lt; "Book author : " &lt;&lt; book-&gt;author &lt;&lt;endl;
   cout &lt;&lt; "Book subject : " &lt;&lt; book-&gt;subject &lt;&lt;endl;
   cout &lt;&lt; "Book id : " &lt;&lt; book-&gt;book_id &lt;&lt;endl;
}
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="prettyprint">
Book title : Learn C++ Programming
Book author : Chand Miyan
Book subject : C++ Programming
Book id : 6495407
Book title : Telecom Billing
Book author : Yakit Singha
Book subject : Telecom
Book id : 6495700
</pre>
<h2>The typedef Keyword</h2>
<p>There is an easier way to define structs or you could "alias" types you create. For example:</p>
<pre class="prettyprint">
typedef struct
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
}Books;
</pre>
<p>Now you can use <i>Books</i> directly to define variables of <i>Books</i> type  without using struct keyword. Following is the example:</p>
<pre class="prettyprint">
Books Book1, Book2;
</pre>
<p>You can use <b>typedef</b> keyword for non-structs as well as follows:</p>
<pre class="prettyprint">
typedef long int *pint32;
 
pint32 x, y, z;
</pre>
<p>x, y and z are all pointers to long ints</p>
<br />
<hr />
<div class="pre-btn">
<a href="cpp_basic_input_output.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/cpp_data_structures.pdf" alt="C++ Data Structures" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="cpp_classes_objects.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/cplusplus/cpp_data_structures.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 20:01:08 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>