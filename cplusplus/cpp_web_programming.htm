<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/cplusplus/cpp_web_programming.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 20:01:48 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>C++ Web Programming</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="Keywords" content="C++, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces, Signal Handling" />
<meta name="description" content="C++ Web Programming ( CGI Programming ) Tutorial - Learning C++ in simple and easy steps : A beginner's tutorial containing complete knowledge of C++ Syntax Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces and Signal Handling" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
/* C++ Scheme */
#topmenu a:link {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#topmenu a:visited {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#topmenu a:hover {text-decoration:none;color:#d6a432 !important;background-color:transparent;font-weight:bold;}
#header{ 
background:#d6a432 !important;
}
#topmenu
{
background-color:#3b2b1e !important;
}
#leftcol ul.menu li.heading 
{
background:#d6a432 !important;
border:1px solid #3b2b1e !important;
}
#leftcol, #middlecol, #rightcol {min-height:1600px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/cpp-mini-logo.png" alt="C++ Tutorial" />
</div>
<ul class="menu">
<li class="heading">C++ Basics</li>
<li><a target="_top" href="index.htm">C++ Home</a></li>
<li><a target="_top" href="cpp_overview.htm">C++ Overview</a></li>
<li><a target="_top" href="cpp_environment_setup.htm">C++ Environment Setup</a></li>
<li><a target="_top" href="cpp_basic_syntax.htm">C++ Basic Syntax</a></li>
<li><a target="_top" href="cpp_comments.htm">C++ Comments</a></li>
<li><a target="_top" href="cpp_data_types.htm">C++ Data Types</a></li>
<li><a target="_top" href="cpp_variable_types.htm">C++  Variable Types</a></li>
<li><a target="_top" href="cpp_variable_scope.htm">C++  Variable Scope</a></li>
<li><a target="_top" href="cpp_constants_literals.htm">C++ Constants/Literals</a></li>
<li><a target="_top" href="cpp_modifier_types.htm">C++ Modifier Types</a></li>
<li><a target="_top" href="cpp_storage_classes.htm">C++ Storage Classes</a></li>
<li><a target="_top" href="cpp_operators.htm">C++ Operators</a></li>
<li><a target="_top" href="cpp_loop_types.htm">C++ Loop Types</a></li>
<li><a target="_top" href="cpp_decision_making.htm">C++ Decision Making </a></li>
<li><a target="_top" href="cpp_functions.htm">C++ Functions</a></li>
<li><a target="_top" href="cpp_numbers.htm">C++ Numbers</a></li>
<li><a target="_top" href="cpp_arrays.htm">C++ Arrays</a></li>
<li><a target="_top" href="cpp_strings.htm">C++ Strings</a></li>
<li><a target="_top" href="cpp_pointers.htm">C++ Pointers</a></li>
<li><a target="_top" href="cpp_references.htm">C++ References</a></li>
<li><a target="_top" href="cpp_date_time.htm">C++ Date &amp; Time</a></li>
<li><a target="_top" href="cpp_basic_input_output.htm">C++ Basic Input/Output</a></li>
<li><a target="_top" href="cpp_data_structures.htm">C++ Data Structures</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Object Oriented</li>
<li><a class="left" target="_top" href="cpp_classes_objects.htm">C++ Classes &amp; Objects</a></li>
<li><a class="left" target="_top" href="cpp_inheritance.htm">C++ Inheritance</a></li>
<li><a class="left" target="_top" href="cpp_overloading.htm">C++ Overloading</a></li>
<li><a class="left" target="_top" href="cpp_polymorphism.htm">C++ Polymorphism</a></li>
<li><a class="left" target="_top" href="cpp_data_abstraction.htm">C++ Abstraction</a></li>
<li><a class="left" target="_top" href="cpp_data_encapsulation.htm">C++ Encapsulation</a></li>
<li><a class="left" target="_top" href="cpp_interfaces.htm">C++ Interfaces</a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Advanced</li>
<li><a class="left" target="_top" href="cpp_files_streams.htm">C++ Files and Streams</a></li>
<li><a class="left" target="_top" href="cpp_exceptions_handling.htm">C++ Exception Handling</a></li>
<li><a class="left" target="_top" href="cpp_dynamic_memory.htm">C++ Dynamic Memory</a></li>
<li><a class="left" target="_top" href="cpp_namespaces.htm">C++ Namespaces</a></li>
<li><a class="left" target="_top" href="cpp_templates.htm">C++ Templates</a></li>
<li><a class="left" target="_top" href="cpp_preprocessor.htm">C++ Preprocessor</a></li>
<li><a class="left" target="_top" href="cpp_signal_handling.htm">C++ Signal Handling</a></li>
<li><a class="left" target="_top" href="cpp_multithreading.htm">C++ Multithreading</a></li>
<li><a class="left" target="_top" href="cpp_web_programming.htm"><b>C++ Web Programming</b></a></li>
</ul>
<ul class="menu">
<li class="heading">C++ Useful Resources</li>
<li><a class="left" target="_top" href="cpp_quick_guide.htm">C++ Quick Guide</a></li>
<li><a class="left" target="_top" href="cpp_stl_tutorial.htm">C++ STL Tutorial</a></li>
<li><a class="left" target="_top" href="cpp_standard_library.htm">C++ Standard Library</a></li>
<li><a class="left" target="_top" href="cpp_useful_resources.htm">C++ Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>C++ Web Programming</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="cpp_multithreading.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="cpp_quick_guide.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<h2>What is CGI ?</h2>
<ul class="list">
<li><p>The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script.</p></li>
<li><p>The CGI specs are currently maintained by the NCSA and NCSA defines CGI is as follows:</p></li>
<li><p>The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.</p> </li>
<li><p>The current version is CGI/1.1 and CGI/1.2 is under progress.</p></li>
</ul>
<h2>Web Browsing</h2>
<p>To understand the concept of CGI, let's see what happens when we click a hyperlink to browse a particular web page or URL.</p>
<ul class="list">
<li><p>Your browser contacts the HTTP web server and demand for the URL ie. filename.</p></li>
<li><p>Web Server will parse the URL and will look for the filename. If it finds requested file then web server sends that file back to the browser otherwise sends an error message indicating that you have requested a wrong file.</p></li>
<li><p>Web browser takes response from web server and displays either the received file or error message based on the received response.</p></li>
</ul>
<p>However, it is possible to set up the HTTP server in such a way that whenever a file in a certain directory is requested, that file is not sent back; instead it is executed as a program, and produced output from the program is sent back to your browser to display.</p>
<p>The Common Gateway Interface (CGI) is a standard protocol for enabling applications (called CGI programs or CGI scripts) to interact with Web servers and with clients. These CGI programs can be a written in Python, PERL, Shell, C or C++ etc.</p>
<h2>CGI Architecture Diagram</h2>
<p>The following simple program shows a simple architecture of CGI:</p>
<img src="../images/cgiarch.gif" alt="CGI Architecture" />
<h2>Web Server Configuration</h2>
<p class="alignment">Before you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI directory and by convention it is named as /var/www/cgi-bin. By convention CGI files will have extension as <b>.cgi</b>, though they are C++ executable.</p>
<p>By default, Apache Web Server is configured to run CGI programs in /var/www/cgi-bin. If you want to specify any other directory to run your CGI scripts, you can modify the following section in the httpd.conf file:</p>
<pre class="prettyprint">
&lt;Directory "/var/www/cgi-bin"&gt;
   AllowOverride None
   Options ExecCGI
   Order allow,deny
   Allow from all
&lt;/Directory&gt;
 
&lt;Directory "/var/www/cgi-bin"&gt;
Options All
&lt;/Directory&gt;
</pre>
<p>Here I assumed that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell etc.</p>
<h2>First CGI Program</h2>
<p>Consider the following C++ Program content:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;
 
int main ()
{
    
   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;Hello World - First CGI Program&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";
   cout &lt;&lt; "&lt;h2&gt;Hello World! This is my first CGI program&lt;/h2&gt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<p>Compile above code and name the executable  as cplusplus.cgi. This file is being kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program make sure you have change mode of file using <b>chmod 755 cplusplus.cgi</b> UNIX command to make file executable. Now if you click <a href="../cgi-bin/cplusplus.html" target="_blank">cplusplus.cgi</a> then this produces following output:</p>
<h2>Hello World! This is my first CGI program</h2>
<p>Above C++ program is a simple program which is writing its output on STDOUT file ie. screen. There is one important and extra feature available which is first line to be printed <b>Content-type:text/html\r\n\r\n</b>. This line is sent back to the browser and specify the content type to be displayed on the browser screen. Now you must have understood basic concept of CGI and you can write many complicated CGI programs using Python. A C++ CGI program can interact with any other exernal system, such as RDBMS, to exchange information.</p>
<h2>HTTP Header</h2>
<p>The line <b>Content-type:text/html\r\n\r\n</b> is part of HTTP header which is sent to the browser to understand the content.  All the HTTP header will be in the following form</p>
<pre class="prettyprint">
HTTP Field Name: Field Content
 
For Example
Content-type: text/html\r\n\r\n
</pre>
<p>There are few other important HTTP headers which you will use frequently in your CGI Programming.</p>
<table class="src" border="1" cellpadding="5" cellspacing="0">
<tr><th  width="30%">Header</th><th>Description</th></tr>
<tr> <td>Content-type: </td><td>A MIME string defining the format of the file being returned. Example is Content-type:text/html</td></tr>
<tr> <td>Expires: Date </td><td>The date the information becomes invalid. This should be used by the browser to decide when a page needs to be refreshed. A valid date string should be in the format 01 Jan 1998 12:00:00 GMT.</td> </tr>
<tr> <td>Location: URL </td><td>The URL that should be returned instead of the URL requested. You can use this filed to redirect a request to any file.</td> </tr>
<tr> <td>Last-modified: Date</td><td>The date of last modification of the resource.</td> </tr>
<tr> <td>Content-length: N</td><td>The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.</td> </tr>
<tr> <td>Set-Cookie: String </td><td>Set the cookie passed through the <i>string</i></td> </tr>
</table>
<h2>CGI Environment Variables</h2>
<p>All the CGI program will have access to the following environment variables. These variables play an important role while writing any CGI program.</p>
<table class="src" border="1" cellpadding="5" cellspacing="0">
<tr><th width="30%">Variable Name</th><th>Description</th></tr>
<tr> <td>CONTENT_TYPE</td><td>The data type of the content. Used when the client is sending attached content to the server. For example file upload etc.</td> </tr>
<tr> <td>CONTENT_LENGTH</td><td>The length of the query information. It's available only for POST requests</td> </tr>
<tr> <td>HTTP_COOKIE</td><td>Return the set cookies in the form of key &amp; value pair.</td> </tr>
<tr> <td>HTTP_USER_AGENT</td><td>The User-Agent request-header field contains information about the user agent originating the request. Its name of the web browser.</td> </tr>
<tr> <td>PATH_INFO</td><td>The path for the CGI script.</td> </tr>
<tr> <td>QUERY_STRING</td><td>The URL-encoded information that is sent with GET method request.</td> </tr>
<tr> <td>REMOTE_ADDR</td><td>The IP address of the remote host making the request. This can be useful for logging or for authentication purpose.</td> </tr>
<tr> <td>REMOTE_HOST</td><td>The fully qualified name of the host making the request. If this information is not available then REMOTE_ADDR can be used to get IR address.</td> </tr>
<tr> <td>REQUEST_METHOD</td><td>The method used to make the request. The most common methods are GET and POST.</td></tr>
<tr> <td>SCRIPT_FILENAME</td><td>The full path to the CGI script.</td></tr>
<tr> <td>SCRIPT_NAME</td><td>The name of the CGI script.</td></tr>
<tr> <td>SERVER_NAME</td><td>The server's hostname or IP Address</td></tr>
<tr> <td>SERVER_SOFTWARE</td><td>The name and version of the software the server is running.</td></tr>
</table>
<br />
<p>Here is small CGI program to list out all the CGI variables. Click this link to see the result <a href="../cgi-bin/cpp_env.html" target="_blank">Get Environment</a></p><br />
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

const string ENV[ 24 ] = {                 
        "COMSPEC", "DOCUMENT_ROOT", "GATEWAY_INTERFACE",   
        "HTTP_ACCEPT", "HTTP_ACCEPT_ENCODING",             
        "HTTP_ACCEPT_LANGUAGE", "HTTP_CONNECTION",         
        "HTTP_HOST", "HTTP_USER_AGENT", "PATH",            
        "QUERY_STRING", "REMOTE_ADDR", "REMOTE_PORT",      
        "REQUEST_METHOD", "REQUEST_URI", "SCRIPT_FILENAME",
        "SCRIPT_NAME", "SERVER_ADDR", "SERVER_ADMIN",      
        "SERVER_NAME","SERVER_PORT","SERVER_PROTOCOL",     
        "SERVER_SIGNATURE","SERVER_SOFTWARE" };   

int main ()
{
    
   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;CGI Envrionment Variables&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";
   cout &lt;&lt; "&lt;table border = \"0\" cellspacing = \"2\"&gt;";

   for ( int i = 0; i &lt; 24; i++ )
   {
       cout &lt;&lt; "&lt;tr&gt;&lt;td&gt;" &lt;&lt; ENV[ i ] &lt;&lt; "&lt;/td&gt;&lt;td&gt;";
       // attempt to retrieve value of environment variable
       char *value = getenv( ENV[ i ].c_str() );  
       if ( value != 0 ){
         cout &lt;&lt; value;                                 
       }else{
         cout &lt;&lt; "Environment variable does not exist.";
       }
       cout &lt;&lt; "&lt;/td&gt;&lt;/tr&gt;\n";
   }
   cout &lt;&lt; "&lt;/table&gt;&lt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<h2>C++ CGI Library</h2>
<p>For real examples, you would need to do many operations by your CGI program. There is a CGI library written for C++ program which you can download from <a rel="nofollow" href="ftp://ftp.gnu.org/gnu/cgicc/" target="_blank">ftp://ftp.gnu.org/gnu/cgicc/</a> and following the following steps to install the library:</p>
<pre class="prettyprint">
$tar xzf cgicc-X.X.X.tar.gz 
$cd cgicc-X.X.X/ 
$./configure --prefix=/usr 
$make
$make install
</pre>
<p>You can check related documentation available at <a rel="nofollow" href="http://www.gnu.org/software/cgicc/doc/index.html" target="_blank">C++ CGI Lib Documentation</a>.</p>
<h2>GET and POST Methods</h2>
<p>You must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently browser uses two methods two pass this information to web server. These methods are GET Method and POST Method.</p>
<h2>Passing Information using GET method:</h2>
<p>The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows:</p>
<pre class="prettyprint">
http://www.test.com/cgi-bin/cpp.cgi?key1=value1&amp;key2=value2
</pre>
<p>The GET method is the default  method to pass information from browser to web server and it produces a long string that appears in your browser's Location:box. Never use the GET method if you have password or other sensitive information to pass to the server. The GET method has size limitation  and you can pass upto 1024 characters in a request string. </p>
<p>When using GET method, information is passed using QUERY_STRING http header and will be accessible in your CGI Program through QUERY_STRING environment variable</p>
<p>You can pass information by simply concatenating key and value pairs alongwith any URL or you can use HTML &lt;FORM&gt; tags to pass information using GET method.</p>
<h2>Simple URL Example :  Get Method  </h2>
<p>Here is a simple URL which will pass two values to hello_get.py program using GET method.</p>
<a style="text-decoration:none;" href="../cgi-bin/cpp_geta571.html?first_name=ZARA&amp;last_name=ALI" target="_blank">/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI</a>
<p>Below is program to generate <b>cpp_get.cgi</b> CGI program to handle input given by web browser. We are going to use C++ CGI library which makes it very easy to access passed information:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
#include &lt;vector&gt;  
#include &lt;string&gt;  
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt; 

#include &lt;cgicc/CgiDefs.h&gt; 
#include &lt;cgicc/Cgicc.h&gt; 
#include &lt;cgicc/HTTPHTMLHeader.h&gt; 
#include &lt;cgicc/HTMLClasses.h&gt;  

using namespace std;
using namespace cgicc;

int main ()
{
   Cgicc formData;
   
   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;Using GET and POST Methods&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";

   form_iterator fi = formData.getElement("first_name");  
   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  
      cout &lt;&lt; "First name: " &lt;&lt; **fi &lt;&lt; endl;  
   }else{
      cout &lt;&lt; "No text entered for first name" &lt;&lt; endl;  
   }
   cout &lt;&lt; "&lt;br/&gt;\n";
   fi = formData.getElement("last_name");  
   if( !fi-&gt;isEmpty() &amp;&amp;fi != (*formData).end()) {  
      cout &lt;&lt; "Last name: " &lt;&lt; **fi &lt;&lt; endl;  
   }else{
      cout &lt;&lt; "No text entered for last name" &lt;&lt; endl;  
   }
   cout &lt;&lt; "&lt;br/&gt;\n";

   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<p>Now compile the above program as follows:</p>
<pre class="prettyprint">
$g++ -o cpp_get.cgi cpp_get.cpp -lcgicc
</pre>
<p>Generate cpp_get.cgi and put it in your CGI directory and try to access using following link:</p>
<a style="text-decoration:none;" href="../cgi-bin/cpp_geta571.html?first_name=ZARA&amp;last_name=ALI" target="_blank">/cgi-bin/cpp_get.cgi?first_name=ZARA&amp;last_name=ALI</a>
<p>This would generate following result:</p>
<pre class="prettyprint">
First name: ZARA 
Last name: ALI 
</pre>
<h2>Simple FORM Example: GET Method</h2>
<p>Here is a simple example which passes two values using HTML FORM and submit button. We are going to use same CGI script cpp_get.cgi to handle this input.</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/cpp_get.cgi" method="get"&gt;
First Name: &lt;input type="text" name="first_name"&gt;  &lt;br /&gt;
 
Last Name: &lt;input type="text" name="last_name" /&gt;
&lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</pre>
<p>Here is the actual output of the above form, You enter First and Last Name and then click submit button to see the result.</p>
<br />
<form action="http://www.tutorialspoint.com/cgi-bin/cpp_get.cgi" method="get" target="_blank">
First Name: <input type="text" name="first_name" />  <br />
 
Last Name: <input type="text" name="last_name" />
<input type="submit" value="Submit" />
</form>
<hr />
<h2>Passing Information using POST method:</h2>
<p>A generally more reliable method  of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.</p>
<p>The same cpp_get.cgi program will handle POST method as well. Let us take same example as above, which passes two values using HTML FORM and submit button but this time with POST method as follows:</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/cpp_get.cgi" method="post"&gt;
First Name: &lt;input type="text" name="first_name"&gt;&lt;br /&gt;
Last Name: &lt;input type="text" name="last_name" /&gt;
 
&lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</pre>
<p>Here is the actual output of the above form, You enter First and Last Name and then click submit button to see the result.</p>
<br />
<form action="http://www.tutorialspoint.com/cgi-bin/cpp_get.cgi" method="post" target="_blank">
First Name: <input type="text" name="first_name" />  <br />
 
Last Name: <input type="text" name="last_name" />
<input type="submit" value="Submit" />
</form>
<hr />
<h2>Passing Checkbox Data to CGI Program</h2>
<p>Checkboxes are used when more than one option is required to be selected.</p>
<p>Here is example HTML code for a form with two checkboxes</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/cpp_checkbox.cgi" 
         method="POST" 
         target="_blank"&gt;
&lt;input type="checkbox" name="maths" value="on" /&gt; Maths
&lt;input type="checkbox" name="physics" value="on" /&gt; Physics
&lt;input type="submit" value="Select Subject" /&gt;
&lt;/form&gt;
</pre>
<p> The result of this code is the following form</p>
<form action="http://www.tutorialspoint.com/cgi-bin/cpp_checkbox.cgi" method="post" target="_blank" >
<input type="checkbox" name="maths" value="on" /> Maths
<input type="checkbox" name="physics" value="on" /> Physics
<input type="submit" value="Select Subject" />
</form>
<p>Below is C++ program which will generate cpp_checkbox.cgi script to handle input given by web browser through checkbox button.</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
#include &lt;vector&gt;  
#include &lt;string&gt;  
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt; 

#include &lt;cgicc/CgiDefs.h&gt; 
#include &lt;cgicc/Cgicc.h&gt; 
#include &lt;cgicc/HTTPHTMLHeader.h&gt; 
#include &lt;cgicc/HTMLClasses.h&gt; 

using namespace std;
using namespace cgicc;

int main ()
{
   Cgicc formData;
   bool maths_flag, physics_flag;

   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;Checkbox Data to CGI&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";

   maths_flag = formData.queryCheckbox("maths");
   if( maths_flag ) {  
      cout &lt;&lt; "Maths Flag: ON " &lt;&lt; endl;  
   }else{
      cout &lt;&lt; "Maths Flag: OFF " &lt;&lt; endl;  
   }
   cout &lt;&lt; "&lt;br/&gt;\n";

   physics_flag = formData.queryCheckbox("physics");
   if( physics_flag ) {  
      cout &lt;&lt; "Physics Flag: ON " &lt;&lt; endl;  
   }else{
      cout &lt;&lt; "Physics Flag: OFF " &lt;&lt; endl;  
   }
   cout &lt;&lt; "&lt;br/&gt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<h2>Passing Radio Button Data to CGI Program</h2>
<p>Radio Buttons are used when only one option is required to be selected.</p>
<p>Here is example HTML code for a form with two radio button:</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/cpp_radiobutton.cgi" 
         method="post" 
         target="_blank"&gt;
&lt;input type="radio" name="subject" value="maths" 
                                    checked="checked"/&gt; Maths 
&lt;input type="radio" name="subject" value="physics" /&gt; Physics
&lt;input type="submit" value="Select Subject" /&gt;
&lt;/form&gt;
</pre>
<p> The result of this code is the following form</p>
<form action="http://www.tutorialspoint.com/cgi-bin/cpp_radiobutton.cgi" method="post" target="_blank">
<input type="radio" name="subject" value="Maths" checked="checked" /> Maths
<input type="radio" name="subject" value="Physics" /> Physics
<input type="submit" value="Select Subject" />
</form>
<p>Below is C++ program which will generate cpp_radiobutton.cgi script to handle input given by web browser through radio buttons.</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
#include &lt;vector&gt;  
#include &lt;string&gt;  
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt; 

#include &lt;cgicc/CgiDefs.h&gt; 
#include &lt;cgicc/Cgicc.h&gt; 
#include &lt;cgicc/HTTPHTMLHeader.h&gt; 
#include &lt;cgicc/HTMLClasses.h&gt; 

using namespace std;
using namespace cgicc;

int main ()
{
   Cgicc formData;
  
   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;Radio Button Data to CGI&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";

   form_iterator fi = formData.getElement("subject");  
   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  
      cout &lt;&lt; "Radio box selected: " &lt;&lt; **fi &lt;&lt; endl;  
   }
  
   cout &lt;&lt; "&lt;br/&gt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<h2>Passing Text Area Data to CGI Program</h2>
<p>TEXTAREA element is used when multiline text has to be passed to the CGI Program.</p>
<p>Here is example HTML code for a form with a TEXTAREA box:</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/cpp_textarea.cgi" 
         method="post" 
         target="_blank"&gt;
&lt;textarea name="textcontent" cols="40" rows="4"&gt;
Type your text here...
&lt;/textarea&gt;
&lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</pre>
<p> The result of this code is the following form</p>
<form action="http://www.tutorialspoint.com/cgi-bin/cpp_textarea.cgi" method="post" target="_blank">
<textarea name="textcontent" cols="40" rows="4">Type your text here...</textarea>
<input type="submit" value="Submit" />
</form>
<p>Below is C++ program which will generate cpp_textarea.cgi script to handle input given by web browser through text area.</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
#include &lt;vector&gt;  
#include &lt;string&gt;  
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt; 

#include &lt;cgicc/CgiDefs.h&gt; 
#include &lt;cgicc/Cgicc.h&gt; 
#include &lt;cgicc/HTTPHTMLHeader.h&gt; 
#include &lt;cgicc/HTMLClasses.h&gt; 

using namespace std;
using namespace cgicc;

int main ()
{
   Cgicc formData;
  
   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;Text Area Data to CGI&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";

   form_iterator fi = formData.getElement("textcontent");  
   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  
      cout &lt;&lt; "Text Content: " &lt;&lt; **fi &lt;&lt; endl;  
   }else{
      cout &lt;&lt; "No text entered" &lt;&lt; endl;  
   }
  
   cout &lt;&lt; "&lt;br/&gt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<h2>Passing Drop Down Box Data to CGI Program</h2>
<p>Drop Down Box is used when we have many options available but only one or two will be selected.</p>
<p>Here is example HTML code for a form with one drop down box</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/cpp_dropdown.cgi" 
                       method="post" target="_blank"&gt;
&lt;select name="dropdown"&gt;
&lt;option value="Maths" selected&gt;Maths&lt;/option&gt;
&lt;option value="Physics"&gt;Physics&lt;/option&gt;
&lt;/select&gt;
&lt;input type="submit" value="Submit"/&gt;
&lt;/form&gt;
</pre>
<p> The result of this code is the following form</p>
<form action="http://www.tutorialspoint.com/cgi-bin/cpp_dropdown.cgi" method="post" target="_blank">
<select name="dropdown">
<option value="Maths" selected="selected">Maths</option>
<option value="Physics">Physics</option>
</select>
<input type="submit" value="Submit" />
</form>
<p>Below is C++ program which will generate cpp_dropdown.cgi script to handle input given by web browser through drop down box.</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
#include &lt;vector&gt;  
#include &lt;string&gt;  
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt; 

#include &lt;cgicc/CgiDefs.h&gt; 
#include &lt;cgicc/Cgicc.h&gt; 
#include &lt;cgicc/HTTPHTMLHeader.h&gt; 
#include &lt;cgicc/HTMLClasses.h&gt; 

using namespace std;
using namespace cgicc;

int main ()
{
   Cgicc formData;
  
   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;Drop Down Box Data to CGI&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";

   form_iterator fi = formData.getElement("dropdown");  
   if( !fi-&gt;isEmpty() &amp;&amp; fi != (*formData).end()) {  
      cout &lt;&lt; "Value Selected: " &lt;&lt; **fi &lt;&lt; endl;  
   }
  
   cout &lt;&lt; "&lt;br/&gt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<h2>Using Cookies in CGI</h2>
<p>HTTP protocol is a stateless protocol. But for a commercial website it is required to maintain session information  among different pages. For example one user registration ends after completing many pages. But how to maintain user's session information across all the web pages.</p>
<p>In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.</p>
<h2>How It Works</h2>
<p>Your server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.</p>
<p>Cookies are a plain text data record of 5 variable-length fields:</p>
<ul class="list">
<li><p><b>Expires :</b> The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</p></li>
<li><p><b>Domain :</b> The domain name of your site.</p></li>
<li><p><b>Path :</b> The path to the directory or web page that set the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</p></li>
<li><p><b>Secure :</b> If this field contains the word "secure" then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</p></li>
<li><p><b>Name=Value :</b> Cookies are set and retrieved  in the form of key and value pairs.</p></li>
</ul>
<h2>Setting up Cookies</h2>
<p>This is very easy to send cookies to browser. These cookies will be sent along with HTTP Header before to Content-type filed. Assuming you want to set UserID and Password as cookies. So cookies setting will be done as follows</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
using namespace std;

int main ()
{
 
   cout &lt;&lt; "Set-Cookie:UserID=XYZ;\r\n";
   cout &lt;&lt; "Set-Cookie:Password=XYZ123;\r\n";
   cout &lt;&lt; "Set-Cookie:Domain=www.tutorialspoint.com;\r\n";
   cout &lt;&lt; "Set-Cookie:Path=/perl;\n";
   cout &lt;&lt; "Content-type:text/html\r\n\r\n";

   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;Cookies in CGI&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";

   cout &lt;&lt; "Setting cookies" &lt;&lt; endl;  
  
   cout &lt;&lt; "&lt;br/&gt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<p>From this example you must have understood how to set cookies. We use <b>Set-Cookie</b> HTTP header to set cookies.</p>
<p>Here it is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line <b>"Content-type:text/html\r\n\r\n</b>.</p>
<p>Compile above program to produce setcookies.cgi, and try to set cookies using following link. It will set four cookies at your computer:</p>
<p><a style="text-decoration:none;" href="../cgi-bin/setcookies.html" target="_blank">/cgi-bin/setcookies.cgi</a></p>
<h2>Retrieving Cookies</h2>
<p>This is very easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form.</p>
<pre class="prettyprint">
key1=value1;key2=value2;key3=value3....
</pre>
<p>Here is an example of how to retrieving cookies.</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
#include &lt;vector&gt;  
#include &lt;string&gt;  
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt; 

#include &lt;cgicc/CgiDefs.h&gt; 
#include &lt;cgicc/Cgicc.h&gt; 
#include &lt;cgicc/HTTPHTMLHeader.h&gt; 
#include &lt;cgicc/HTMLClasses.h&gt;

using namespace std;
using namespace cgicc;

int main ()
{
   Cgicc cgi;
   const_cookie_iterator cci;

   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;Cookies in CGI&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";
   cout &lt;&lt; "&lt;table border = \"0\" cellspacing = \"2\"&gt;";
   
   // get environment variables
   const CgiEnvironment&amp; env = cgi.getEnvironment();

   for( cci = env.getCookieList().begin();
        cci != env.getCookieList().end(); 
        ++cci )
   {
      cout &lt;&lt; "&lt;tr&gt;&lt;td&gt;" &lt;&lt; cci-&gt;getName() &lt;&lt; "&lt;/td&gt;&lt;td&gt;";
      cout &lt;&lt; cci-&gt;getValue();                                 
      cout &lt;&lt; "&lt;/td&gt;&lt;/tr&gt;\n";
   }
   cout &lt;&lt; "&lt;/table&gt;&lt;\n";
  
   cout &lt;&lt; "&lt;br/&gt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<p>Now compile above program to produce getcookies.cgi, and try to get a list of all the cookies available at your computer:</p>
<p><a style="text-decoration:none;" href="../cgi-bin/getcookies.html" target="_blank">/cgi-bin/getcookies.cgi</a></p>
<p>This will produce a list of all the four cookies set in previous section and all other cookies set at your computer:</p>
<pre class="prettyprint">
UserID XYZ 
Password XYZ123 
Domain www.tutorialspoint.com 
Path /perl 
</pre>
<h2>File Upload Example:</h2>
<p>To upload a file the HTML form must have the enctype attribute set to <b>multipart/form-data</b>. The input tag with the file type will create a "Browse" button.</p>
<pre class="prettyprint">
&lt;html&gt;
&lt;body&gt;
   &lt;form enctype="multipart/form-data" 
            action="/cgi-bin/cpp_uploadfile.cgi" 
            method="post"&gt;
   &lt;p&gt;File: &lt;input type="file" name="userfile" /&gt;&lt;/p&gt;
   &lt;p&gt;&lt;input type="submit" value="Upload" /&gt;&lt;/p&gt;
   &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The result of this code is the following form:</p>
<form enctype="multipart/form-data" action="http://www.tutorialspoint.com/cgi-bin/cpp_uploadfile.cgi" method="post">
   <p>File: <input type="file" name="userfile" /></p>
   <p><input type="reset" value="Upload" /></p>
</form>
<p><b>Note:</b> Above example has been disabled intentionally to save people uploading files on our server. But you can try above code with your server.</p>
<p>Here is the script <b>cpp_uploadfile.cpp</b> to handle file upload:</p>
<pre class="prettyprint">
#include &lt;iostream&gt;
#include &lt;vector&gt;  
#include &lt;string&gt;  
#include &lt;stdio.h&gt;  
#include &lt;stdlib.h&gt; 

#include &lt;cgicc/CgiDefs.h&gt; 
#include &lt;cgicc/Cgicc.h&gt; 
#include &lt;cgicc/HTTPHTMLHeader.h&gt; 
#include &lt;cgicc/HTMLClasses.h&gt;

using namespace std;
using namespace cgicc;

int main ()
{
   Cgicc cgi;

   cout &lt;&lt; "Content-type:text/html\r\n\r\n";
   cout &lt;&lt; "&lt;html&gt;\n";
   cout &lt;&lt; "&lt;head&gt;\n";
   cout &lt;&lt; "&lt;title&gt;File Upload in CGI&lt;/title&gt;\n";
   cout &lt;&lt; "&lt;/head&gt;\n";
   cout &lt;&lt; "&lt;body&gt;\n";

   // get list of files to be uploaded
   const_file_iterator file = cgi.getFile("userfile");
   if(file != cgi.getFiles().end()) {
      // send data type at cout.
      cout &lt;&lt; HTTPContentHeader(file-&gt;getDataType());
      // write content at cout.
      file-&gt;writeToStream(cout);
   }
   cout &lt;&lt; "&lt;File uploaded successfully&gt;\n";
   cout &lt;&lt; "&lt;/body&gt;\n";
   cout &lt;&lt; "&lt;/html&gt;\n";
   
   return 0;
}
</pre>
<p>The above example is writing content at <b>cout</b> stream but you can open your file stream and save the content of uploaded file in a file at desired location.</p>
<p>Hope you enjoyed this tutorial. If yes, please send me your feedback at: <a href="../about/contact_us.htm">Contact Us</a></p>
<br />
<hr />
<div class="pre-btn">
<a href="cpp_multithreading.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/cpp_web_programming.pdf" alt="C++ Web Programming" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="cpp_quick_guide.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/cplusplus/cpp_web_programming.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 20:01:51 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
