<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>

<!-- Mirrored from www.tutorialspoint.com/ansi_c/c_basic_datatypes.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:42 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<title>C - Basic Datatypes</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="Keywords" content="ANSI, C, Programming, Tutorial, References, ISO, GNU, K and R, C99, Program, Learning, Computer, Language, Easy,Steps, Most, Popular, System, Coaching,Assembly." />
<meta name="Description" content="C - Basic Datatypes - Free tutorial and references for ANSI C Programming. You will learn ISO GNU K and R C99 C Programming computer language in easy steps. C is the most popular system programming and widely used computer language in the computer world." />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="18" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Learning C</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="index.htm">C - Programming HOME</a></li>
<li><a class="left" target="_top" href="c_introduction.htm" >C - Basic Introduction</a></li>
<li><a class="left" target="_top" href="c_program_structure.htm" >C - Program Structure</a></li>
<li><a class="left" target="_top" href="c_reserved_keywords.htm" >C - Reserved Keywords</a></li>
<li><a class="left" target="_top" href="c_basic_datatypes.htm" ><b>C - Basic Datatypes</b></a></li>
<li><a class="left" target="_top" href="c_variable_types.htm" >C - Variable Types</a></li>
<li><a class="left" target="_top" href="c_storage_classes.htm" >C - Storage Classes</a></li>
<li><a class="left" target="_top" href="c_using_constants.htm" >C - Using Constants</a></li>
<li><a class="left" target="_top" href="c_operator_types.htm" >C - Operator Types</a></li>
<li><a class="left" target="_top" href="c_control_statements.htm" >C - Control Statements</a></li>
<li><a class="left" target="_top" href="c_input_output.htm" >C - Input and Output</a></li>
<li><a class="left" target="_top" href="c_pointing_data.htm" >C - Pointing to Data</a></li>
<li><a class="left" target="_top" href="c_using_functions.htm" >C - Using Functions</a></li>
<li><a class="left" target="_top" href="c_play_with_strings.htm" >C - Play with Strings</a></li>
<li><a class="left" target="_top" href="c_structured_datatypes.htm" >C - Structured Datatypes</a></li>
<li><a class="left" target="_top" href="c_working_with_files.htm" >C - Working with Files</a></li>
<li><a class="left" target="_top" href="c_bits_manipulation.htm" >C - Bits Manipulation</a></li>
<li><a class="left" target="_top" href="c_preprocessors.htm" >C - Pre-Processors</a></li>
<li><a class="left" target="_top" href="c_useful_concepts.htm" >C - Useful Concepts</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>C Function References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="c_function_references.html" >C - Built-in Functions</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>C Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="c_useful_resources.htm" >C - Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
<td  style="width:10px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/about_advertising.html">Advertising</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle"  cellpadding="5" cellspacing="0">
<tr>
<td align="left">
<!-- PRINTING STARTS HERE -->
<a href="../cprogramming/index.html"  title="C Programming Language Tutorial"><img src="../images/obsolete.html" alt="Latest C Tutorial"/></a>
<h1>C - Basic Datatypes</h1>
<a href="c_reserved_keywords.htm"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="c_variable_types.htm"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<hr />
<table width="100%" border="0" cellpadding="0" cellspacing="0">
<tr>
<td valign="top">
<p>C has a concept of 'data types' which are used to define a variable before its use. The definition of a variable will assign storage for the variable and define the type of data that will be held in the location.</p>
<p>The value of a variable can be changed any time.</p>
<p>C has the following basic built-in datatypes.</p>
<ul>
<li><p>int</p></li>
<li><p>float</p></li>
<li><p>double</p></li>
<li><p>char</p></li>
</ul>
<p>Please note that there is not a boolean data type. C does not have the traditional view about logical comparison, but thats another story.</p>
<h2>int - data type</h2>
<p><b>int</b> is used to define integer numbers. </p>
<table class="src">
<tr><td>
<pre>
    {
        int Count;
        Count = 5;
    }
</pre>
</td></tr></table>
<h2>float - data type</h2>
<p><b>float</b> is used to define floating point numbers.</p>
<table class="src">
<tr><td>
<pre>

    {
        float Miles;
        Miles = 5.6;
    }
</pre>
</td></tr></table>
<h2>double - data type</h2>
<p><b>double</b> is used to define BIG floating point numbers. It reserves twice the storage for the number. On PCs this is likely to be 8 bytes.</p>
<table class="src">
<tr><td>
<pre>

    {
        double Atoms;
        Atoms = 2500000;
    }
</pre>
</td></tr></table>
<h2>char - data type</h2>
<p><b>char</b> defines characters.</p>
<table class="src">
<tr><td>
<pre>
    {
        char Letter;
        Letter = 'x';
    }
</pre>
</td></tr></table>
<h1>Modifiers</h1>
<p>The data types explained above have the following modifiers. </p>
<ul>
<li>short</li>
<li>long</li>
<li>signed</li>
<li>unsigned</li>
</ul>
<p>The modifiers define the amount of storage allocated to the variable.  The amount of storage allocated is not cast in stone. ANSI has the following rules:</p>
<table class="src">
<tr><td>
<pre>

        short int &lt;=    int &lt;= long int
            float &lt;= double &lt;= long double

</pre>
</td></tr></table>
<p>
What this means is that a 'short int' should assign less than or the same amount of storage as an 'int' and the 'int' should be less or the same bytes than a 'long int'. What this means in the real world is: </p>
<table class="src">
<tr><td>
<pre>
                 <b>Type Bytes             Range</b>
---------------------------------------------------------------------
</pre>
</td></tr>
<tr><td>
<pre>
            short int  2          -32,768 -> +32,767          (32kb)
   unsigned short int  2                0 -> +65,535          (64Kb)
         unsigned int  4                0 -> +4,294,967,295   ( 4Gb)
                  int  4   -2,147,483,648 -> +2,147,483,647   ( 2Gb)
             long int  4   -2,147,483,648 -> +2,147,483,647   ( 2Gb)
          signed char  1             -128 -> +127
        unsigned char  1                0 -> +255
                float  4 
               double  8  
          long double 12 
</pre>
</td></tr></table>
<p>
These figures only apply to todays generation of PCs. Mainframes and midrange machines could use different figures, but would still comply with the rule above.</p>
<p>You can find out how much storage is allocated to a data type by using the <b>sizeof</b> operator discussed in <a href="c_operator_types.htm">Operator Types</a> Session.</p>
<p>Here is an example to check size of memory taken by various datatypes.</p>
<table class="src">
<tr><td><pre>
int
main()
{
  printf("sizeof(char) == %d\n", sizeof(char));
  printf("sizeof(short) == %d\n", sizeof(short));
  printf("sizeof(int) == %d\n", sizeof(int));
  printf("sizeof(long) == %d\n", sizeof(long));
  printf("sizeof(float) == %d\n", sizeof(float));
  printf("sizeof(double) == %d\n", sizeof(double));
  printf("sizeof(long double) == %d\n", sizeof(long double));
  printf("sizeof(long long) == %d\n", sizeof(long long));

  return 0;
}
</pre></td></tr>
</table>
<h1>Qualifiers</h1>
<p>A type qualifier is used to refine the declaration of a variable, a function, and parameters, by specifying whether:</p>
<ul>
<li>The value of a variable can be changed.</li>
<li>The value of a variable must always be read from memory rather than from a register</li>
</ul>
<p>Standard C language recognizes the following two qualifiers:</p>
<ul>
<li>const</li>
<li>volatile</li>
</ul>
<p>The <i>const</i> qualifier is used to tell C that the variable value can not change after initialisation.</p>

        const float pi=3.14159;

<p>Now <i>pi</i> cannot be changed at a later time within the program.</p>

<p>Another way to define constants is with the <i>#define</i> preprocessor which has the advantage that it does not use any storage </p>
<p>The volatile qualifier declares a data type that can have its value changed in ways outside the control or detection of the compiler (such as a variable updated by the system clock or by another program). This prevents the compiler from optimizing code referring to the object by storing the object's value in a register and re-reading it from there, rather than from memory, where it may have changed. You will use this qualifier once you will become expert in "C". So for now just proceed.</p>
<h1>What are Arrays:</h1>
<p>We have seen all baisc data types. In C language it is possible to make arrays whose elements are basic types.  Thus we can make an array of 10 integers with the declaration.</p>
<table class="src" cellpadding="5"><tr><td><pre>
int x[10];
</pre></td></tr></table>
<p>The square brackets mean subscripting; parentheses are used only for function references.  Array indexes begin at zero, so the elements of x are:</p>
<p>Thus Array are special type of variables which can be used to store multiple values of same data type. Those values are stored and accessed using subscript or index.</p>
<p>Arrays occupy consecutive memory slots in the computer's memory.</p>
<table class="src" cellpadding="5"><tr><td><pre>
x[0], x[1], x[2], ..., x[9]
</pre></td></tr></table>
<p>If an array has n elements, the largest subscript is n-1.</p>
<p>Multiple-dimension arrays are provided.  The declaration and use look like:</p>
<table class="src" cellpadding="5"><tr><td><pre>
      int name[10] [20];
      n = name[i+j] [1] + name[k] [2];
</pre></td></tr></table>
<p>Subscripts can be arbitrary integer expressions.   Multi-dimension arrays are stored by row so the rightmost subscript varies fastest. In above example<b> name</b> has 10 rows and 20 columns.</p>
<p>Same way, arrays can be defined for any data type. Text is usually kept as an array of characters. By convention in C, the last character in a character array should be a `\0' because most programs that manipulate character arrays expect it. For example, printf uses the `\0' to detect the end of a character array when printing it out with a `%s'.</p>
<p>Here is a program which reads a line, stores it in a buffer, and prints its length (excluding the newline at the end).</p>
<table class="src" cellpadding="5"><tr><td><pre>
       main( ) {
               int n, c;
               char line[100];
               n = 0;
               while( (c=getchar( )) != '\n' ) {
                       if( n &lt; 100 )
                               line[n] = c;
                       n++;
               }
               printf("length = %d\n", n);
       }
</pre></td></tr></table>
<h2>Array Initialization</h2>
<ul>
<li>As with other declarations, array declarations can include an optional initialization</li>
<li>Scalar variables are initialized with a single value</li>
<li>Arrays are initialized with a list of values</li>
<li>The list is enclosed in curly braces</li>
</ul>
<table class="src"><tr><td><pre>
int array [8] = {2, 4, 6, 8, 10, 12, 14, 16};
</pre></td></tr></table>
<p>The number of initializers cannot be more than the number of elements in the array but it can be less in which case, the remaining elements are initialized to 0.if you like, the array size can be inferred from the number of initializers by leaving the square brackets empty so these are identical declarations:</p>
<table class="src"><tr><td><pre>
int array1 [8] = {2, 4, 6, 8, 10, 12, 14, 16};
int array2 [] = {2, 4, 6, 8, 10, 12, 14, 16};
</pre></td></tr></table>
<p>An array of characters ie string can be initialized as follows:</p>
<table class="src"><tr><td><pre>
char string[10] = "Hello";
</pre></td></tr></table>
</td>
</tr>
</table>
<br />
<hr />
<a href="c_reserved_keywords.htm"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="c_variable_types.htm"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversionde7d.html?tutorial=ansi_c&amp;file=c_basic_datatypes.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/ansi_c/c_basic_datatypes.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:42 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
