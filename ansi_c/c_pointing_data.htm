<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>

<!-- Mirrored from www.tutorialspoint.com/ansi_c/c_pointing_data.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:42 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<title>C - Pointing to data, Pointer Concept, Learning Pointer, Pointer Tutorial</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="Keywords" content="ANSI, C, Programming, Tutorial, References, ISO, GNU, K and R, C99, Program, Learning, Computer, Language, Easy,Steps, Most, Popular, System, Coaching,Assembly." />
<meta name="Description" content="C Pointing to data, Pointer Concept, Learning Pointer, Pointer Tutorial - Free tutorial and references for ANSI C Programming. You will learn ISO GNU K and R C99 C Programming computer language in easy steps. C is the most popular system programming and widely used computer language in the computer world." />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="18" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Learning C</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="index.htm">C - Programming HOME</a></li>
<li><a class="left" target="_top" href="c_introduction.htm" >C - Basic Introduction</a></li>
<li><a class="left" target="_top" href="c_program_structure.htm" >C - Program Structure</a></li>
<li><a class="left" target="_top" href="c_reserved_keywords.htm" >C - Reserved Keywords</a></li>
<li><a class="left" target="_top" href="c_basic_datatypes.htm" >C - Basic Datatypes</a></li>
<li><a class="left" target="_top" href="c_variable_types.htm" >C - Variable Types</a></li>
<li><a class="left" target="_top" href="c_storage_classes.htm" >C - Storage Classes</a></li>
<li><a class="left" target="_top" href="c_using_constants.htm" >C - Using Constants</a></li>
<li><a class="left" target="_top" href="c_operator_types.htm" >C - Operator Types</a></li>
<li><a class="left" target="_top" href="c_control_statements.htm" >C - Control Statements</a></li>
<li><a class="left" target="_top" href="c_input_output.htm" >C - Input and Output</a></li>
<li><a class="left" target="_top" href="c_pointing_data.htm" ><b>C - Pointing to Data</b></a></li>
<li><a class="left" target="_top" href="c_using_functions.htm" >C - Using Functions</a></li>
<li><a class="left" target="_top" href="c_play_with_strings.htm" >C - Play with Strings</a></li>
<li><a class="left" target="_top" href="c_structured_datatypes.htm" >C - Structured Datatypes</a></li>
<li><a class="left" target="_top" href="c_working_with_files.htm" >C - Working with Files</a></li>
<li><a class="left" target="_top" href="c_bits_manipulation.htm" >C - Bits Manipulation</a></li>
<li><a class="left" target="_top" href="c_preprocessors.htm" >C - Pre-Processors</a></li>
<li><a class="left" target="_top" href="c_useful_concepts.htm" >C - Useful Concepts</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>C Function References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="c_function_references.html" >C - Built-in Functions</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>C Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="c_useful_resources.htm" >C - Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
<td  style="width:10px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/about_advertising.html">Advertising</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle"  cellpadding="5" cellspacing="0">
<tr>
<td align="left">
<!-- PRINTING STARTS HERE -->
<a href="../cprogramming/index.html"  title="C Programming Language Tutorial"><img src="../images/obsolete.html" alt="Latest C Tutorial"/></a>
<h1>C - Pointing to Data</h1>
<a href="c_input_output.htm"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="c_using_functions.htm"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<hr />
<table width="100%" border="0" cellpadding="0" cellspacing="0">
<tr>
<td valign="top">
<p>A pointer is a special kind of variable. Pointers are designed for storing memory address i.e. the address of another variable. Declaring a pointer is the same as declaring a normal variable except you stick an asterisk '*' in front of the variables identifier. </p>
<ul>
<li><p>There are two new operators you will need to know to work with pointers. The "address of" operator '&amp;' and the "dereferencing" operator '*'. Both are prefix unary operators.</p></li>
<li><p>When you place an ampersand in front of a variable you will get it's address, this can be stored in a pointer vairable.</p></li>
<li><p>When you place an asterisk in front of a pointer you will get the value at the memory address pointed to.</p></li>
</ul>
<p>Here is an example to understand what I have stated above.</p>
<table class="src" cellpadding="5"><tr><td><pre>
#include &lt;stdio.h&gt;

int main()
{
  int my_variable = 6, other_variable = 10;
  int *my_pointer;

  printf("the address of my_variable is    : %p\n", &amp;my_variable);
  printf("the address of other_variable is : %p\n", &amp;other_variable);

  my_pointer = &amp;my_variable;

  printf("\nafter \"my_pointer = &amp;my_variable\":\n");
  printf("\tthe value of my_pointer is %p\n", my_pointer);
  printf("\tthe value at that address is %d\n", *my_pointer);

  my_pointer = &amp;other_variable;

  printf("\nafter \"my_pointer = &amp;other_variable\":\n");
  printf("\tthe value of my_pointer is %p\n", my_pointer);
  printf("\tthe value at that address is %d\n", *my_pointer);

  return 0;
}
</pre></td></tr></table>
<p>This will produce following result.</p>
<table class="src" cellpadding="5"><tr><td><pre>
the address of my_variable is    : 0xbfffdac4
the address of other_variable is : 0xbfffdac0

after "my_pointer = &amp;my_variable":
        the value of my_pointer is 0xbfffdac4
        the value at that address is 6

after "my_pointer = &amp;other_variable":
        the value of my_pointer is 0xbfffdac0
        the value at that address is 10
</pre></td></tr></table>
<h1>Pointers and Arrays</h1>
<p>The most frequent use of pointers in C is for walking efficiently along arrays. In fact, in the implementation of an array, the array name represents the address of the zeroth element of the array, so you can't use it on the left side of an expression. For example:</p>
<table class="src" cellpadding="5"><tr><td><pre>
   char *y;
   char x[100];
</pre></td></tr></table>
<p>y is of type pointer to character (although it doesn't yet point anywhere).  We can make y point to an element of x by either of</p>
<table class="src" cellpadding="5"><tr><td><pre>
   y = &amp;x[0];
   y = x;
</pre></td></tr></table>
<p>Since x is the address of x[0] this is legal and consistent. Now `*y' gives x[0].  More importantly notice the following:</p>
<table class="src" cellpadding="5"><tr><td><pre>
   *(y+1)  gives x[1]
   *(y+i)  gives x[i]

and the sequence

   y = &amp;x[0];
   y++;

leaves y pointing at x[1].

</pre></td></tr></table>
<h1>Pointer Arithmetic:</h1>
<p>C is one of the few languages that allows pointer arithmetic. In other words, you actually move the pointer reference by an arithmetic operation. For example:</p>
<table class="src" cellpadding="5"><tr><td><pre>
  int x = 5, *ip = &amp;x;

  ip++;
</pre></td></tr></table>
<p>On a typical 32-bit machine, *ip would be pointing to 5 after initialization. But ip++; increments the pointer 32-bits or 4-bytes. So whatever was in the next 4-bytes, *ip would be pointing at it.</p>
<p>Pointer arithmetic is very useful when dealing with arrays, because arrays and pointers share a special relationship in C.</p>
<h1>Using Pointer Arithmetic With Arrays:</h1>
<p>Arrays occupy consecutive memory slots in the computer's memory. This is where pointer arithmetic comes in handy - if you create a pointer to the first element, incrementing it one step will make it point to the next element.</p>
<table class="src" cellpadding="5"><tr><td><pre>
#include &lt;stdio.h&gt;

int main() {
  int *ptr;
  int arrayInts[10] = {1,2,3,4,5,6,7,8,9,10};

  ptr = arrayInts; <I>/* ptr = &amp;arrayInts[0]; is also fine */</I>

  printf("The pointer is pointing to the first &quot;);
  printf(&quot;array element, which is %d.\n", *ptr);
  printf("Let's increment it.....\n");

  ptr++;

  printf("Now it should point to the next element,&quot;);
  printf(&quot; which is %d.\n", *ptr);
  printf("But suppose we point to the 3rd and 4th: %d %d.\n", 
          *(ptr+1),*(ptr+2));

  ptr+=2;

  printf("Now skip the next 4 to point to the 8th: %d.\n", 
          *(ptr+=4));

  ptr--;

  printf("Did I miss out my lucky number %d?!\n", *(ptr++));
  printf("Back to the 8th it is then..... %d.\n", *ptr);

  return 0;
}
</pre></td></tr></table>
<p>This will produce following result:</p>
<table class="src" cellpadding="5"><tr><td><pre>
The pointer is pointing to the first array element, which is 1.
Let's increment it.....
Now it should point to the next element, which is 2.
But suppose we point to the 3rd and 4th: 3 4.
Now skip the next 4 to point to the 8th: 8.
Did I miss out my lucky number 7?!
Back to the 8th it is then..... 8. 
</pre></td></tr></table>
<p>See more examples on <a href="c_array_pointers_examples.html">Pointers and Array</a></p>
<h1>Pointers and const Type Qualifier:</h1>
<ul>
      <li>The <b>const</b> type qualifier can make things a little confusing when it is used with pointer declarations.</li>
      <li>The below example:</li>
</ul>
<table class="src" cellpadding="5"><tr><td><pre>
  const int * const ip;  /* The pointer *ip is const
                            and it points at is also cont */
        int * const ip;  /* The pointer *ip is const              */
  const int *       ip;  /* What *ip is pointing at is const      */
        int *       ip;  /* Nothing is const                      */
</pre></td></tr></table>
<p>As you can see, you must be careful when specifying the <b>const qualifier</b> when using pointers.</p>
<h1>Modifying Variables Using Pointers:</h1>
<p>You know how to access the value pointed to using the dereference operator, but you can also modify the content of variables. To achieve this, put the dereferenced pointer on the left of the assignment operator, as shown in this example, which uses an array:</p>
<table class="src" cellpadding="5"><tr><td><pre>
#include &lt;stdio.h&gt;

int main() {
  char *ptr;
  char arrayChars[8] = {'F','r','i','e','n','d','s','\0'};

  ptr = arrayChars;

  printf("The array reads %s.\n", arrayChars);
  printf("Let's change it..... ");

  *ptr = 'f'; <I>/* ptr points to the first element */</I>

  printf(" now it reads %s.\n", arrayChars);
  printf("The 3rd character of the array is %c.\n", 
          *(ptr+=2));
  printf("Let's change it again..... ");

  *(ptr - 1) = ' ';

  printf("Now it reads %s.\n", arrayChars);
  return 0;
}
</pre></td></tr></table>
<p>This will produce following result:</p>
<table class="src" cellpadding="5"><tr><td><pre>
The array reads Friends.
Let's change it..... now it reads friends.
The 3rd character of the array is i.
Let's change it again..... Now it reads f iends. 
</pre></td></tr></table>
<h1>Generic Pointers: ( void Pointer )</h1>
<p>When a variable is declared as being a pointer to type void it is known as a generic pointer. Since you cannot have a variable of type void, the pointer will not point to any data and therefore cannot be dereferenced. It is still a pointer though, to use it you just have to cast it to another kind of pointer first. Hence the term Generic pointer. This is very useful when you want a pointer to point to data of different types at different times.</p>
<p>Try the following code to understand Generic Pointers.</p>
<table class="src" cellpadding="5"><tr><td><pre>
#include &lt;stdio.h&gt;

int main()
{
  int i;
  char c;
  void *the_data;

  i = 6;
  c = 'a';

  the_data = &amp;i;
  printf("the_data points to the integer value %d\n", 
                         *(int*) the_data);

  the_data = &amp;c;
  printf("the_data now points to the character %c\n", 
                         *(char*) the_data);

  return 0;
}
</pre></td></tr></table>
<p><b>NOTE-1 :</b> Here in first print statement, the_data is prefixed by <b>*(int*)</b>. This is called type casting in C language.Type is used to caste a variable from one data type to another datatype to make it compatible to the lvalue.</p> 
<p><b>NOTE-2 :</b> lvalue is something which is used to left side of a statement and in which we can assign some value. A constant can't be an lvalue because we can not assign any value in contact. For example x = y, here x is lvalue and y is rvalue.</p>

<p>However, above example will produce following result:</p>
<table class="src" cellpadding="5"><tr><td><pre>
the_data points to the integer value 6
the_data now points to the character a
</pre></td></tr></table>

</td>
</tr>
</table>
<br />
<hr />
<a href="c_input_output.htm"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="c_using_functions.htm"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion52fd.html?tutorial=ansi_c&amp;file=c_pointing_data.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/ansi_c/c_pointing_data.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:42 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
