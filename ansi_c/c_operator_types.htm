<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>

<!-- Mirrored from www.tutorialspoint.com/ansi_c/c_operator_types.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:42 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<title>C - Overview of Operator Types, Arithmetic, Bitwise, Assignment, Precedence Table</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="Keywords" content="ANSI, C, Programming, Tutorial, References, ISO, GNU, K and R, C99, Program, Learning, Computer, Language, Easy,Steps, Most, Popular, System, Coaching,Assembly." />
<meta name="Description" content="C Overview of Operator Types, Arithmetic, Bitwise, Assignment, Precedence Table - Free tutorial and references for ANSI C Programming. You will learn ISO GNU K and R C99 C Programming computer language in easy steps. C is the most popular system programming and widely used computer language in the computer world." />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="18" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Learning C</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="index.htm">C - Programming HOME</a></li>
<li><a class="left" target="_top" href="c_introduction.htm" >C - Basic Introduction</a></li>
<li><a class="left" target="_top" href="c_program_structure.htm" >C - Program Structure</a></li>
<li><a class="left" target="_top" href="c_reserved_keywords.htm" >C - Reserved Keywords</a></li>
<li><a class="left" target="_top" href="c_basic_datatypes.htm" >C - Basic Datatypes</a></li>
<li><a class="left" target="_top" href="c_variable_types.htm" >C - Variable Types</a></li>
<li><a class="left" target="_top" href="c_storage_classes.htm" >C - Storage Classes</a></li>
<li><a class="left" target="_top" href="c_using_constants.htm" >C - Using Constants</a></li>
<li><a class="left" target="_top" href="c_operator_types.htm" ><b>C - Operator Types</b></a></li>
<li><a class="left" target="_top" href="c_control_statements.htm" >C - Control Statements</a></li>
<li><a class="left" target="_top" href="c_input_output.htm" >C - Input and Output</a></li>
<li><a class="left" target="_top" href="c_pointing_data.htm" >C - Pointing to Data</a></li>
<li><a class="left" target="_top" href="c_using_functions.htm" >C - Using Functions</a></li>
<li><a class="left" target="_top" href="c_play_with_strings.htm" >C - Play with Strings</a></li>
<li><a class="left" target="_top" href="c_structured_datatypes.htm" >C - Structured Datatypes</a></li>
<li><a class="left" target="_top" href="c_working_with_files.htm" >C - Working with Files</a></li>
<li><a class="left" target="_top" href="c_bits_manipulation.htm" >C - Bits Manipulation</a></li>
<li><a class="left" target="_top" href="c_preprocessors.htm" >C - Pre-Processors</a></li>
<li><a class="left" target="_top" href="c_useful_concepts.htm" >C - Useful Concepts</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>C Function References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="c_function_references.html" >C - Built-in Functions</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>C Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="c_useful_resources.htm" >C - Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
<td  style="width:10px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/about_advertising.html">Advertising</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle"  cellpadding="5" cellspacing="0">
<tr>
<td align="left">
<!-- PRINTING STARTS HERE -->
<a href="../cprogramming/index.html"  title="C Programming Language Tutorial"><img src="../images/obsolete.html" alt="Latest C Tutorial"/></a>
<h1>C - Operator Types</h1>
<a href="c_using_constants.htm"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="c_control_statements.htm"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<hr />
<table width="100%" border="0" cellpadding="0" cellspacing="0">
<tr>
<td valign="top">
<p><b>What is Operator?</b> Simple answer can be given using  expression <i>4 + 5 is equal  to 9</i>. Here 4 and 5 are called operands and + is called operator. C language supports following type of operators.</p>
<ul>
<li><p>Arithmetic Operators</p></li>
<li><p>Logical (or Relational) Operators</p></li>
<li><p>Bitwise Operators</p></li>
<li><p>Assignment Operators</p></li>
<li><p>Misc Operators</p></li>
</ul>
<p>Lets have a look on all operators one by one.</p>
<h2>Arithmetic Operators:</h2>
<p>There are following arithmetic operators supported by C language:</p>
<p>Assume variable A holds 10 and variable B holds 20 then:</p>
<p><a href="arithmatic_operators_examples.html">Show Examples</a></p>
<table border="1" width="100%" cellpadding="5" cellspacing="0">
<tr>
<th width="10%">Operator</th><th width="45%">Description</th><th>Example</th>
</tr>
<tr>
<td>+</td><td>Adds two operands</td><td> A + B will give 30</td>
</tr>
<tr>
<td>-</td><td>Subtracts second operand from the first</td><td> A - B will give -10</td>
</tr>
<tr>
<td>*</td><td>Multiply both operands</td><td> A * B will give 200</td>
</tr>
<tr>
<td>/</td><td>Divide numerator by denumerator</td><td> B / A will give 2</td>
</tr>
<tr>
<td>%</td><td>Modulus Operator and remainder of after an integer division</td><td> B % A will give 0</td>
</tr>
<tr>
<td>++</td><td>Increment operator, increases integer value by one</td><td> A++ will give 11</td>
</tr>
<tr>
<td>--</td><td>Decrement operator, decreases integer value by one</td><td> A-- will give 9</td>
</tr>
</table>
<h2>Logical (or Relational) Operators:</h2>
<p>There are following logical operators supported by C language</p>
<p>Assume variable A holds 10 and variable B holds 20 then:</p>
<p><a href="logical_operators_examples.html">Show Examples</a></p>
<table border="1" width="100%" cellpadding="5" cellspacing="0">
<tr>
<th width="10%">Operator</th><th width="45%">Description</th><th>Example</th>
</tr>
<tr>
<td>==</td><td> Checks if the value of two operands is equal or not, if yes then condition becomes true.</td><td> (A == B) is not true. </td>
</tr>
<tr>
<td>!=</td><td> Checks if the value of two operands is equal or not, if values are not equal then condition becomes true.</td><td> (A != B) is true. </td>
</tr>
<tr>
<td>&gt;</td><td> Checks if the value of left  operand is greater than the value of right operand, if yes then condition becomes true.</td><td> (A &gt; B) is not true. </td>
</tr>
<tr>
<td>&lt;</td><td> Checks if the value of left  operand is less than the value of right operand, if yes then condition becomes true.</td><td> (A &lt; B) is true. </td>
</tr>
<tr>
<td>&gt;=</td><td> Checks if the value of left  operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td><td> (A &gt;= B) is not true. </td>
</tr>
<tr>
<td>&lt;=</td><td> Checks if the value of left  operand is less than or equal to the value of right operand, if yes then condition becomes true.</td><td> (A &lt;= B) is true. </td>
</tr>
<tr>
<td>&amp;&amp;</td><td> Called Logical AND  operator. If both the operands are non zero then then condition becomes true.</td><td> (A &amp;&amp; B) is true. </td>
</tr>
<tr>
<td>||</td><td>Called Logical OR Operator.  If any of the two operands is non zero then then condition becomes true.</td><td> (A || B) is true. </td>
</tr>
<tr>
<td>!</td><td>Called Logical NOT Operator.  Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.</td><td> !(A &amp;&amp; B) is false. </td>
</tr>
</table>
<h2>Bitwise Operators:</h2>
<p>Bitwise operator works on bits and perform bit by bit operation.</p>
<p>Assume if A = 60; and B = 13; Now in binary format they will be as follows:</p>
<p>A = 0011 1100</p>
<p>B = 0000 1101</p>
<p>-----------------</p>
<p>A&amp;B = 0000 1100</p>
<p>A|B = 0011 1101</p>
<p>A^B = 0011 0001</p>
<p>~A&nbsp; = 1100 0011</p>
<p><a href="bitwise_operators_examples.html">Show Examples</a></p>
<p>There are following Bitwise operators supported by C language</p>
<table border="1" width="100%" cellpadding="5" cellspacing="0">
<tr>
<th width="10%">Operator</th><th width="45%">Description</th><th>Example</th>
</tr>
<tr>
<td>&amp;</td><td> Binary AND Operator copies a bit to the result if it exists in both operands. </td><td> (A &amp; B) will give 12 which is 0000 1100</td>
</tr>
<tr>
<td>|</td><td> Binary OR Operator copies a bit if it exists in eather operand. </td><td> (A | B) will give 61 which is 0011 1101</td>
</tr>
<tr>
<td>^</td><td> Binary XOR Operator copies the bit if it is set in one operand but not both. </td><td> (A ^ B) will give 49 which is 0011 0001</td>
</tr>
<tr>
<td>~</td><td> Binary Ones Complement Operator is unary and has the efect of 'flipping' bits. </td><td> (~A ) will give -60 which is 1100 0011</td>
</tr>
<tr>
<td>&lt;&lt;</td><td> Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand. </td><td> A &lt;&lt; 2 will give 240 which is 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td><td> Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand. </td><td> A &gt;&gt; 2 will give 15 which is 0000 1111</td>
</tr>
</table>
<h2>Assignment Operators:</h2>
<p>There are following assignment operators supported by C language:</p>
<p><a href="assignment_operators_examples.html">Show Examples</a></p>
<table border="1" width="100%" cellpadding="5" cellspacing="0">
<tr>
<th width="10%">Operator</th><th width="40%">Description</th><th>Example</th>
</tr>
<tr>
<td>=</td><td>Simple assignment operator, Assigns values from right side operands to left side operand</td><td> C = A + B will assigne value of A + B into C</td>
</tr>
<tr>
<td>+=</td><td>Add AND assignment operator, It adds right operand to the left operand and assign the result to left operand</td><td> C += A is equivalent to C = C + A</td>
</tr>
<tr>
<td>-=</td><td>Subtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand</td><td> C -= A is equivalent to C = C - A</td>
</tr>
<tr>
<td>*=</td><td>Multiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand</td><td> C *= A is equivalent to C = C * A</td>
</tr>
<tr>
<td>/=</td><td>Divide AND assignment operator, It divides left operand with the right operand and assign the result to left operand</td><td> C /= A is equivalent to C = C / A</td>
</tr>
<tr>
<td>%=</td><td>Modulus AND assignment operator, It takes modulus using two operands and assign the result to  left operand</td><td> C %= A is equivalent to C = C % A</td>
</tr>
<tr>
<td>&lt;&lt;=</td><td>Left shift AND assignment operator </td><td> C &lt;&lt;= 2 is same as  C = C &lt;&lt; 2</td>
</tr>
<tr>
<td>&gt;&gt;=</td><td>Right shift AND assignment operator </td><td> C &gt;&gt;= 2 is same as  C = C &gt;&gt; 2</td>
</tr>
<tr>
<td>&amp;=</td><td>Bitwise AND assignment operator</td><td> C &amp;= 2 is same as  C = C &amp; 2</td>
</tr>
<tr>
<td>^=</td><td>bitwise exclusive OR and assignment operator</td><td> C ^= 2 is same as  C = C ^ 2</td>
</tr>
<tr>
<td>|=</td><td>bitwise inclusive OR and assignment operator</td><td> C |= 2 is same as  C = C | 2</td>
</tr>
</table>
<h2> Short Notes on L-VALUE and R-VALUE:</h2>
<p> x = 1; takes the value on the right (e.g. 1) and puts it in the memory referenced by x. Here x and 1 are known as L-VALUES and R-VALUES respectively L-values can be on either side of the assignment operator where as R-values only appear on the right.</p>
<p>So x is an L-value because it can appear on the left as we've just seen, or on the right like this: y = x; However, constants like 1 are R-values because 1 could appear on the right, but 1 = x; is invalid.</p>
<h2>Misc Operators</h2>
<p>There are few other operators supported by C Language.</p>
<p><a href="misc_operators_examples.html">Show Examples</a></p>
<table border="1" width="100%" cellpadding="5" cellspacing="0">
<tr>
<th width="10%">Operator</th><th width="40%">Description</th><th>Example</th>
</tr>
<tr>
<td>sizeof()</td><td>Returns the size of an variable.</td><td> sizeof(a), where a is interger, will return 4.</td>
</tr>
<tr>
<td>&amp;</td><td>Returns the address of an variable.</td><td>&amp;a; will give actaul address of the variable.</td>
</tr>
<tr>
<td>*</td><td>Pointer to a variable.</td><td>*a; will pointer to a variable.</td>
</tr>
<tr>
<td>? :</td><td>Conditional Expression</td><td> If Condition is true ? Then value X : Otherwise value Y</td>
</tr>
</table>
<h2>Operators Categories:</h2>
<p>All the operators we have discussed above can be categorised into following categories:</p>
<ul>
   <li><p>Postfix operators, which follow a single operand.</p></li>
   <li><p>Unary prefix operators, which precede a single operand.</p></li>
   <li><p>Binary operators, which take two operands and perform a
   variety of arithmetic and logical operations.</p></li>
   <li><p>The conditional operator (a ternary operator), which
   takes three operands and evaluates either the second or third
   expression, depending on the evaluation of the first expression.</p></li>
   <li><p>Assignment operators, which assign a value to a variable.</p></li>
   <li><p>The comma operator, which guarantees left-to-right
   evaluation of comma-separated expressions.</p></li>
</ul>
<h2>Precedence of C Operators:</h2>
<p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator:</p>
<p>For example x = 7 + 3 * 2;  Here  x is assigned 13, not 20 because operator * has higher precedenace than + so it first get multiplied with 3*2 and then adds into 7.</p>

<p>Here operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedenace operators will be evaluated first.</p>
<table border="1" width="100%" cellpadding="5" cellspacing="0">
<tr> <th>Category&nbsp;</th> <th>Operator&nbsp;</th>
<th>Associativity&nbsp;</th> </tr> <tr> <td>Postfix&nbsp;</td>
<td>() [] -&gt; .  ++   - - &nbsp;</td> <td>Left to
right&nbsp;</td> </tr> <tr> <td>Unary&nbsp;</td> <td>+  -   !  ~  ++
  - -   (type)
*  &amp;  sizeof&nbsp;</td> <td>Right to left&nbsp;</td>
</tr> <tr> <td>Multiplicative &nbsp;</td> <td>*  /  %&nbsp;</td>

<td>Left to right&nbsp;</td> </tr> <tr> <td>Additive &nbsp;</td>
<td>+  -&nbsp;</td> <td>Left to right&nbsp;</td> </tr>
<tr> <td>Shift &nbsp;</td> <td>&lt;&lt; &gt;&gt;&nbsp;</td> <td>Left
to right&nbsp;</td> </tr> <tr> <td>Relational &nbsp;</td>

<td>&lt; &lt;=  &gt; &gt;=&nbsp;</td> <td>Left to right&nbsp;</td> </tr>
<tr> <td>Equality &nbsp;</td> <td>==  !=&nbsp;</td> <td>Left
to right&nbsp;</td> </tr> <tr> <td>Bitwise AND&nbsp;</td>

<td>&amp;&nbsp;</td> <td>Left to right&nbsp;</td> </tr> <tr> <td>Bitwise
XOR&nbsp;</td> <td>^&nbsp;</td> <td>Left to right&nbsp;</td>
</tr> <tr> <td>Bitwise OR&nbsp;</td> <td>|&nbsp;</td> <td>Left
to right&nbsp;</td> </tr> <tr> <td>Logical AND&nbsp;</td>

<td>&amp;&amp;&nbsp;</td> <td>Left to right&nbsp;</td> </tr> <tr>
<td>Logical OR&nbsp;</td> <td>||&nbsp;</td> <td>Left to
right&nbsp;</td> </tr> <tr> <td>Conditional&nbsp;</td>

<td>?:&nbsp;</td> <td>Right to left&nbsp;</td> </tr> <tr>
<td>Assignment&nbsp;</td> <td>=  +=  -=  *=  /=  %=
&gt;&gt;=  &lt;&lt;=  &amp;=  ^=   |=&nbsp;</td> <td>Right to left&nbsp;</td>
</tr> <tr> <td>Comma&nbsp;</td> <td>,&nbsp;</td> <td>Left to
right&nbsp;</td> </tr> </table>

</td>
</tr>
</table>
<br />
<hr />
<a href="c_using_constants.htm"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="c_control_statements.htm"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversionca85.html?tutorial=ansi_c&amp;file=c_operator_types.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/ansi_c/c_operator_types.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:05:42 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
