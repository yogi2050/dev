<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/spufs.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:19 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>spufs() - Unix, Linux System Call</title>
<meta name="Description" Content="spufs() - Unix, Linux System Calls Manual Pages (Manpages) ,  Learning fundamentals of UNIX in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - System Calls</b></a></li>
<li><a class="left" target="_top" href="../unix_commands/index.html">Unix - Commands List</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>spufs() - Unix, Linux System Call</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
spufs - the SPU file system
<p>
<h1 class="manpages">DESCRIPTION</h1>
The SPU file system is used on PowerPC machines that implement the
Cell Broadband Engine Architecture in order to access Synergistic
Processor Units (SPUs).
<p>
The file system provides a name space similar to posix shared
memory or message queues. Users that have write permissions
on the file system can use
<b>spu_create</b>(2)
to establish SPU contexts in the spufs root.
<p>
Every SPU context is represented by a directory containing
a predefined set of files. These files can be
used for manipulating the state of the logical SPU. Users
can change permissions on those files, but not actually
add or remove files.
<p>
<h1 class="manpages">MOUNT OPTIONS</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>uid=&lt;uid&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
set the user owning the mount point, the default is 0 (root).
</td></tr>
<tr valign="top"><td colspan="2">
<b>gid=&lt;gid&gt;</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
set the group owning the mount point, the default is 0 (root).
<p>
</td></tr>
</table>
<h1 class="manpages">FILES</h1>
The files in
<i>spufs</i> mostly follow the standard behavior for regular system calls like
<b>read</b>(2)
or
<b>write</b>(2),
but often support only a subset of the operations
supported on regular file systems. This list details the supported
operations and the deviations from the behaviour in the respective
man pages.
<p>
All files that support the
<b>read</b>(2)
operation also support
<b>readv</b>(2)
and all files that support the
<b>write</b>(2)
operation also support
<b>writev</b>(2).
All files support the
<b>access</b>(2)
and
<b>stat</b>(2)
family of operations, but only the st_mode, st_nlink, st_uid and st_gid
fields of
<b>struct stat</b> contain reliable information.
<p>
All files support the
<b>chmod</b>(2)/
<b>fchmod</b>(2)
and
<b>chown</b>(2)/
<b>fchown</b>(2)
operations, but will not be able to grant permissions that contradict
the possible operations, e.g. read access on the
<b>wbox</b> file.
<p>
The current set of files is:
<p>
<h2><i>/mem</i></h2>
the contents of the local storage memory of the SPU.
This can be accessed like a regular shared memory
file and contains both code and data in the address
space of the SPU.
The possible operations on an open
<b>mem</b> file are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>read</b>(2), 
<b>pread</b>(2), 
<b>write</b>(2), 
<b>pwrite</b>(2), 
<b>lseek</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
These operate as documented, with the exception that
<b>seek</b>(2), 
<b>write</b>(2)
and
<b>pwrite</b>(2)
are not supported beyond the end of the file. The file size
is the size of the local storage of the SPU, which normally
is 256 kilobytes.
</td></tr>
<tr valign="top"><td colspan="2">
<b>mmap</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Mapping
<b>mem</b> into the process address space gives access to the SPU local
storage within the process address space. Only MAP_SHARED
mappings are allowed.
<p>
</td></tr>
</table>
<h2><i>/mbox</i></h2>
The first SPU to CPU communication mailbox. This file
is read-only and can be read in units of 32 bits.
The file can only be used in non-blocking mode and
it even poll() will not block on it.
The possible operations on an open
<b>mbox</b> file are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>read</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If a count smaller than four is requested,
<b>read</b> returns -1 and sets errno to EINVAL.
If there is no data available in the mail box, the return
value is set to -1 and errno becomes EAGAIN. When data
has been read successfully, four bytes are placed in
the data buffer and the value four is returned.
<p>
</td></tr>
</table>
<h2><i>/ibox</i></h2>
The second SPU to CPU communication mailbox. This file
is similar to the first mailbox file, but can be read
in blocking I/O mode, and the poll familiy of system
calls can be used to wait for it.
The possible operations on an open
<b>ibox</b> file are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>read</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If a count smaller than four is requested,
<b>read</b> returns -1 and sets errno to EINVAL.
If there is no data available in the mail box and the file
descriptor has been opened with O_NONBLOCK, the return
value is set to -1 and errno becomes EAGAIN.
<p>
If there is no data available in the mail box and the file
descriptor has been opened without O_NONBLOCK, the call will
block until the SPU writes to its interrupt mailbox channel.
When data has been read successfully, four bytes are placed in
the data buffer and the value four is returned.
</td></tr>
<tr valign="top"><td colspan="2">
<b>poll</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Poll on the
<b>ibox</b> file returns (POLLIN | POLLRDNORM) whenever data is available
for reading.
<p>
</td></tr>
</table>
<h2><i>/wbox</i></h2>
The CPU to SPU communation mailbox. It is write-only
can can be written in units of 32 bits. If the mailbox
is full, write() will block and poll can be used to
wait for it becoming empty again.
The possible operations on an open
<b>wbox</b> file are:
<b>write</b>(2)
If a count smaller than four is requested,
<b>write</b> returns -1 and sets errno to EINVAL.
If there is no space available in the mail box and the file
descriptor has been opened with O_NONBLOCK, the return
value is set to -1 and errno becomes EAGAIN.
<p>
If there is no space available in the mail box and the file
descriptor has been opened without O_NONBLOCK, the call will
block until the SPU reads from its PPE mailbox channel.
When data has been read successfully, four bytes are placed in
the data buffer and the value four is returned.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>poll</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Poll on the
<b>ibox</b> file returns (POLLOUT | POLLWRNORM) whenever space is available
for writing.
<p>
</td></tr>
</table>
<h2><i>/mbox_stat</i></h2>
<h2><i>/ibox_stat</i></h2>
<h2><i>/wbox_stat</i></h2>
Read-only files that contain the length of the current
queue, i.e. how many words can be read from mbox or
ibox or how many words can be written to wbox without
blocking.
The files can be read only in 4-byte units and return
a big-endian binary integer number.
The possible operations on an open
<b>*box_stat</b> file are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>read</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If a count smaller than four is requested,
<b>read</b> returns -1 and sets errno to EINVAL.
Otherwise, a four byte value is placed in the data buffer,
containing the number of elements that can be read from (for
<b>mbox_stat</b> and
<b>ibox_stat)</b> or written to (for
<b>wbox_stat)</b> the respective mail box without blocking or resulting in
EAGAIN.
<p>
</td></tr>
</table>
<h2><i>/npc</i></h2>
<h2><i>/decr</i></h2>
<h2><i>/decr_status</i></h2>
<h2><i>/spu_tag_mask</i></h2>
<h2><i>/event_mask</i></h2>
<h2><i>/srr0</i></h2>
Internal registers of the SPU. The representation
is an ASCII string with the numeric value of the
next instruction to be executed. These can be used in
read/write mode for debugging, but normal operation of
programs should not rely on them because access to
any of them except npc requires an SPU context save
and is therefore very inefficient.
<p>
The contents of these files are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>npc</b> </td><td valign="bottom">
Next Program Counter
</td></tr>
<tr valign="top"><td>
<b>decr</b> </td><td valign="bottom">
SPU Decrementer
</td></tr>
<tr valign="top"><td>
<b>decr_status</b> </td><td valign="bottom">
Decrementer Status
</td></tr>
<tr valign="top"><td>
<b>spu_tag_mask</b> </td><td valign="bottom">
MFC tag mask for SPU DMA
</td></tr>
<tr valign="top"><td>
<b>event_mask</b> </td><td valign="bottom">
Event mask for SPU interrupts
</td></tr>
<tr valign="top"><td>
<b>srr0</b> </td><td valign="bottom">
Interrupt Return address register
</td></tr>
<!-- PP ends table -->
</table>
<p>
The possible operations on an open
<b>npc,</b> <b>decr,</b> <b>decr_status,</b> <b>spu_tag_mask,</b> <b>event_mask</b> or
<b>srr0</b> file are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>read</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
When the count supplied to the
<b>read</b> call is shorter than the required length for the pointer
value plus a newline character, subsequent reads from the same
file descriptor will result in completing the string, regardless
of changes to the register by a running SPU task.
When a complete string has been read, all subsequent read operations
will return zero bytes and a new file descriptor needs to be opened
to read the value again.
</td></tr>
<tr valign="top"><td colspan="2">
<b>write</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
A
<b>write</b> operation on the file results in setting the register to the
value given in the string. The string is parsed from the beginning
to the first non-numeric character or the end of the buffer.
Subsequent writes to the same file descriptor overwrite the
previous setting.
<p>
</td></tr>
</table>
<h2><i>/fpcr</i></h2>
This file gives access to the Floating Point Status and
Control Register as a four byte long file. The operations
on the
<b>fpcr</b> file are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>read</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If a count smaller than four is requested,
<b>read</b> returns -1 and sets errno to EINVAL.
Otherwise, a four byte value is placed in the data buffer,
containing the current value of the fpcr register.
</td></tr>
<tr valign="top"><td colspan="2">
<b>write</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If a count smaller than four is requested,
<b>write</b> returns -1 and sets errno to EINVAL.
Otherwise, a four byte value is copied from the data buffer,
updating the value of the fpcr register.
<p>
</td></tr>
</table>
<h2><i>/signal1</i></h2>
<h2><i>/signal2</i></h2>
The two signal notification channels of an SPU. These
are read-write files that operate on a 32 bit word.
Writing to one of these files triggers an interrupt on
the SPU. The value writting to the signal files can
be read from the SPU through a channel read or from
host user space through the file.
After the value has been read by the SPU, it is reset
to zero.
The possible operations on an open
<b>signal1</b> or
<b>signal2</b> file are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>read</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If a count smaller than four is requested,
<b>read</b> returns -1 and sets errno to EINVAL.
Otherwise, a four byte value is placed in the data buffer,
containing the current value of the specified signal notification
register.
</td></tr>
<tr valign="top"><td colspan="2">
<b>write</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If a count smaller than four is requested,
<b>write</b> returns -1 and sets errno to EINVAL.
Otherwise, a four byte value is copied from the data buffer,
updating the value of the specified signal notification
register.
The signal notification register will either be replaced with
the input data or will be updated to the bitwise OR
or the old value and the input data, depending on the contents
of the signal1_type, or signal2_type respectively, file.
<p>
</td></tr>
</table>
<h2><i>/signal1_type</i></h2>
<h2><i>/signal2_type</i></h2>
These two files change the behavior of the signal1 and
signal2 notification files. The contain a numerical
ASCII string which is read as either "1" or "0".
In mode 0 (overwrite), the hardware replaces the contents
of the signal channel with the data that is written to it.
in mode 1 (logical OR), the hardware accumulates the bits
that are subsequently written to it.
The possible operations on an open
<b>signal1_type</b> or
<b>signal2_type</b> file are:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>read</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
When the count supplied to the
<b>read</b> call is shorter than the required length for the digit
plus a newline character, subsequent reads from the same
file descriptor will result in completing the string.
When a complete string has been read, all subsequent read operations
will return zero bytes and a new file descriptor needs to be opened
to read the value again.
</td></tr>
<tr valign="top"><td colspan="2">
<b>write</b>(2)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
A
<b>write</b> operation on the file results in setting the register to the
value given in the string. The string is parsed from the beginning
to the first non-numeric character or the end of the buffer.
Subsequent writes to the same file descriptor overwrite the
previous setting.
<p>
</td></tr>
</table>
<h1 class="manpages">EXAMPLES</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>/etc/fstab entry</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
none  &nbsp;&nbsp;/spu  &nbsp;&nbsp;spufs  &nbsp;gid=spu  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0
<p>
</td></tr>
</table>
<h1 class="manpages">AUTHORS</h1>
Arnd Bergmann &lt;<a href="mailto:arndb@de.ibm.com">arndb@de.ibm.com</a>&gt;, Mark Nutter &lt;<a href="mailto:mnutter@us.ibm.com">mnutter@us.ibm.com</a>&gt;,
Ulrich Weigand &lt;<a href="mailto:Ulrich.Weigand@de.ibm.com">Ulrich.Weigand@de.ibm.com</a>&gt;
<h1 class="manpages">SEE ALSO</h1>
<ul>
<li><p><a href="close.htm">close (2)</a></p></li>
<li><p><a href="spu_create.htm">spu_create (2)</a></p></li>
<li><p><a href="spu_run.htm">spu_run (2)</a></p></li>
</ul>
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversiond671.html?tutorial=unix_system_calls&amp;file=spufs.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/spufs.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:19 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
