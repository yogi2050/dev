<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/select.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:16 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>select() - Unix, Linux System Call</title>
<meta name="Description" Content="select() - Unix, Linux System Calls Manual Pages (Manpages) ,  Learning fundamentals of UNIX in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - System Calls</b></a></li>
<li><a class="left" target="_top" href="../unix_commands/index.html">Unix - Commands List</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>select() - Unix, Linux System Call</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO - synchronous I/O multiplexing
<h1 class="manpages">SYNOPSIS</h1>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
/* According to POSIX.1-2001 */
<!-- Need break --><br />
<b>#include &lt;sys/select.h&gt;</b> 
<p>
/* According to earlier standards */
<!-- Need break --><br />
<b>#include &lt;sys/time.h&gt;</b> 
<!-- Need break --><br />
<b>#include &lt;sys/types.h&gt;</b> 
<!-- Need break --><br />
<b>#include &lt;unistd.h&gt;</b> 
<p>
<b>int select(int </b><i>nfds</i><b>, fd_set *</b><i>readfds</i><b>, fd_set *</b><i>writefds</i><b>,
           fd_set *</b><i>exceptfds</i><b>, struct timeval *</b><i>timeout</i><b>);
<p>
</b><b>void FD_CLR(int </b><i>fd</i><b>, fd_set *</b><i>set</i><b>);</b> 
<!-- Need break --><br />
<b>int FD_ISSET(int </b><i>fd</i><b>, fd_set *</b><i>set</i><b>);</b> 
<!-- Need break --><br />
<b>void FD_SET(int </b><i>fd</i><b>, fd_set *</b><i>set</i><b>);</b> 
<!-- Need break --><br />
<b>void FD_ZERO(fd_set *</b><i>set</i><b>);</b> 
<p>
<b>#define _XOPEN_SOURCE 600</b> 
<b>#include &lt;sys/select.h&gt;</b> 
<p>
<b>int pselect(int </b><i>nfds</i><b>, fd_set *</b><i>readfds</i><b>, fd_set *</b><i>writefds</i><b>,
            fd_set *</b><i>exceptfds</i><b>, const struct timespec *</b><i>timeout</i><b>,
            const sigset_t *</b><i>sigmask</i><b>);
</pre></td></tr>
</table>
<h1 class="manpages">DESCRIPTION</h1>
</b><b>select</b>() and
<b>pselect</b>() allow a program to monitor multiple file descriptors,
waiting until one or more of the file descriptors become "ready"
for some class of I/O operation (e.g., input possible).
A file descriptor is considered ready if it is possible to
perform the corresponding I/O operation (e.g.,
<b>read</b>(2))
without blocking.
<p>
The operation of
<b>select</b>() and
<b>pselect</b>() is identical, with three differences:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
(i)
</td><td valign="bottom">
<b>select</b>() uses a timeout that is a
<i>struct timeval</i> (with seconds and microseconds), while
<b>pselect</b>() uses a
<i>struct timespec</i> (with seconds and nanoseconds).
</td></tr>
<tr valign="top"><td>
(ii)
</td><td valign="bottom">
<b>select</b>() may update the
<i>timeout</i> argument to indicate how much time was left.
<b>pselect</b>() does not change this argument.
</td></tr>
<tr valign="top"><td>
(iii)
</td><td valign="bottom">
<b>select</b>() has no
<i>sigmask</i> argument, and behaves as
<b>pselect</b>() called with NULL
<i>sigmask</i>. </td></tr>
<!-- PP ends table -->
</table>
Three independent sets of file descriptors are watched. 
Those listed in
<i>readfds</i> will be watched to see if characters become
available for reading (more precisely, to see if a read will not
block; in particular, a file descriptor is also ready on end-of-file),
those in
<i>writefds</i> will be watched to see if a write will not block, and
those in
<i>exceptfds</i> will be watched for exceptions.  On exit, the sets are modified in place
to indicate which file descriptors actually changed status.
Each of the three file descriptor sets may be specified as NULL
if no file descriptors are to be watched for the corresponding class
of events.
<p>
Four macros are provided to manipulate the sets.
<b>FD_ZERO</b>() clears a set.
<b>FD_SET</b>() and
<b>FD_CLR</b>() respectively add and remove a given file descriptor from a set.
<b>FD_ISSET</b>() tests to see if a file descriptor is part of the set;
this is useful after
<b>select</b>() returns.
<p>
<i>nfds</i> is the highest-numbered file descriptor in any of the three sets, plus 1.
<p>
<i>timeout</i> is an upper bound on the amount of time elapsed before
<b>select</b>() returns. It may be zero, causing
<b>select</b>() to return immediately. (This is useful for polling.) If
<i>timeout</i> is NULL (no timeout),
<b>select</b>() can block indefinitely.
<p>
<i>sigmask</i> is a pointer to a signal mask (see
<b>sigprocmask</b>(2));
if it is not NULL, then
<b>pselect</b>() first replaces the current signal mask by the one pointed to by
<i>sigmask</i>, then does the &#145;select&#146; function, and then restores the original
signal mask.
<p>
Other than the difference in the precision of the
<i>timeout</i> argument, the following
<b>pselect</b>() call:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
    ready = pselect(nfds, &readfds, &writefds, &exceptfds,
                    timeout, &sigmask);
<p>
</pre></td></tr>
</table>
is equivalent to
<i>atomically</i> executing the following calls:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
    sigset_t origmask;
<p>
    sigprocmask(SIG_SETMASK, &sigmask, &origmask);
    ready = select(nfds, &readfds, &writefds, &exceptfds, timeout);
    sigprocmask(SIG_SETMASK, &origmask, NULL);
</pre></td></tr>
</table>
<p>
The reason that
<b>pselect</b>() is needed is that if one wants to wait for either a signal
or for a file descriptor to become ready, then
an atomic test is needed to prevent race conditions.
(Suppose the signal handler sets a global flag and
returns. Then a test of this global flag followed by a call of
<b>select</b>() could hang indefinitely if the signal arrived just after the test
but just before the call.
By contrast,
<b>pselect</b>() allows one to first block signals, handle the signals that have come in,
then call
<b>pselect</b>() with the desired
<i>sigmask</i>, avoiding the race.)
<h2><i>The timeout</i></h2>
The time structures involved are defined in
<i>&lt;sys/time.h&gt;</i> and look like
<p>
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
struct timeval {
    long    tv_sec;         /* seconds */
    long    tv_usec;        /* microseconds */
};
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
<p>
and
<p>
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
struct timespec {
    long    tv_sec;         /* seconds */
    long    tv_nsec;        /* nanoseconds */
};
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
<p>
(However, see below on the POSIX.1-2001 versions.)
<p>
Some code calls
<b>select</b>() with all three sets empty,
<i>n</i> zero, and a non-NULL
<i>timeout</i> as a fairly portable way to sleep with subsecond precision.
<p>
On Linux,
<b>select</b>() modifies
<i>timeout</i> to reflect the amount of time not slept; most other implementations
do not do this.
(POSIX.1-2001 permits either behaviour.)
This causes problems both when Linux code which reads
<i>timeout</i> is ported to other operating systems, and when code is ported to Linux
that reuses a struct timeval for multiple
<b>select</b>()s in a loop without reinitializing it.  Consider
<i>timeout</i> to be undefined after
<b>select</b>() returns.
<h1 class="manpages">RETURN VALUE</h1>
On success,
<b>select</b>() and
<b>pselect</b>() return the number of file descriptors contained in the three returned
descriptor sets (that is, the total number of bits that are set in
<i>readfds</i>, <i>writefds</i>, <i>exceptfds</i>) which may be zero if the timeout expires before anything interesting happens.
On error, -1 is returned, and
<i>errno</i> is set appropriately; the sets and
<i>timeout</i> become undefined, so do not
rely on their contents after an error.
<h1 class="manpages">ERRORS</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>EBADF</b> </td><td valign="bottom">
An invalid file descriptor was given in one of the sets.
(Perhaps a file descriptor that was already closed,
or one on which an error has occurred.)
</td></tr>
<tr valign="top"><td>
<b>EINTR</b> </td><td valign="bottom">
A signal was caught.
</td></tr>
<tr valign="top"><td>
<b>EINVAL</b> </td><td valign="bottom">
<i>nfds</i> is negative or the value contained within
<i>timeout</i> is invalid.
</td></tr>
<tr valign="top"><td>
<b>ENOMEM</b> </td><td valign="bottom">
unable to allocate memory for internal tables.
</td></tr>
</table>
<h1 class="manpages">EXAMPLE</h1>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
#include &lt;stdio.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;
<p>
int
main(void) {
    fd_set rfds;
    struct timeval tv;
    int retval;
<p>
    /* Watch stdin (fd 0) to see when it has input. */
    FD_ZERO(&rfds);
    FD_SET(0, &rfds);
<p>
    /* Wait up to five seconds. */
    tv.tv_sec = 5;
    tv.tv_usec = 0;
<p>
    retval = select(1, &rfds, NULL, NULL, &tv);
    /* Don&#146;t rely on the value of tv now! */
<p>
    if (retval == -1)
        perror("select()");
    else if (retval)
        printf("Data is available now.\n");
        /* FD_ISSET(0, &rfds) will be true. */
    else
        printf("No data within five seconds.\n");
<p>
    return 0;
}
</pre></td></tr>
</table>
<h1 class="manpages">CONFORMING TO</h1>
<b>select</b>() conforms to POSIX.1-2001 and
4.4BSD
(<b>select</b>() first appeared in 4.2BSD).  Generally portable to/from
non-BSD systems supporting clones of the BSD socket layer (including
System V variants).  However, note that the System V variant typically
sets the timeout variable before exit, but the BSD variant does not.
<p>
<b>pselect</b>() is defined in POSIX.1g, and in
POSIX.1-2001.
<h1 class="manpages">NOTES</h1>
An
<i>fd_set</i> is a fixed size buffer.
Executing
<b>FD_CLR</b>() or
<b>FD_SET</b>() with a value of
<i>fd</i> that is negative or is equal to or larger than FD_SETSIZE will result
in undefined behavior. Moreover, POSIX requires
<i>fd</i> to be a valid file descriptor.
<p>
Concerning the types involved, the classical situation is that
the two fields of a
<i>timeval</i> structure are longs (as shown above),
and the structure is defined in
<i>&lt;sys/time.h&gt;</i>. The POSIX.1-2001 situation is
<p>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
struct timeval {
    time_t         tv_sec;     /* seconds */
    suseconds_t    tv_usec;    /* microseconds */
};
</pre></td></tr>
</table>
<p>
where the structure is defined in
<i>&lt;sys/select.h&gt;</i> and the data types
<i>time_t</i> and
<i>suseconds_t</i> are defined in
<i>&lt;sys/types.h&gt;</i>. <p>
Concerning prototypes, the classical situation is that one should
include
<i>&lt;time.h&gt;</i> for
<b>select</b>(). The POSIX.1-2001 situation is that one should include
<i>&lt;sys/select.h&gt;</i> for
<b>select</b>() and
<b>pselect</b>(). Libc4 and libc5 do not have a
<i>&lt;sys/select.h&gt;</i> header; under glibc 2.0 and later this header exists.
Under glibc 2.0 it unconditionally gives the wrong prototype for
<b>pselect</b>(), under glibc 2.1-2.2.1 it gives
<b>pselect</b>() when
<b>_GNU_SOURCE</b> is defined, under glibc 2.2.2-2.2.4 it gives it when
<b>_XOPEN_SOURCE</b> is defined and has a value of 600 or larger.
No doubt, since POSIX.1-2001, it should give the prototype by default.
<h1 class="manpages">VERSIONS</h1>
<b>pselect</b>() was added to Linux in kernel 2.6.16.
Prior to this,
<b>pselect</b>() was emulated in glibc (but see BUGS).
<h1 class="manpages">LINUX NOTES</h1>
The Linux
<b>pselect</b>() system call modifies its
<i>timeout</i> argument.
However, the glibc wrapper function hides this behaviour
by using a local variable for the timeout argument that
is passed to the system call.
Thus, the glibc
<b>pselect</b>() function does not modify its timeout argument;
this is the behaviour required by POSIX.1-2001.
<h1 class="manpages">BUGS</h1>
Glibc 2.0 provided a version of
<b>pselect</b>() that did not take a
<i>sigmask</i> argument.
<p>
Since version 2.1, glibc has provided an emulation of
<b>pselect</b>() that is implemented using
<b>sigprocmask</b>(2)
and
<b>select</b>(). This implementation remains vulnerable to the very race condition that
<b>pselect</b>() was designed to prevent.
On systems that lack
<b>pselect</b>() reliable (and more portable) signal trapping can be achieved
using the self-pipe trick
(where a signal handler writes a byte to a pipe whose other end
is monitored by
<b>select</b>() in the main program.)
<p>
Under Linux,
<b>select</b>() may report a socket file descriptor as "ready for reading", while
nevertheless a subsequent read blocks. This could for example
happen when data has arrived but upon examination has wrong
checksum and is discarded. There may be other circumstances
in which a file descriptor is spuriously reported as ready.
Thus it may be safer to use O_NONBLOCK on sockets that should not block.
<h1 class="manpages">SEE ALSO</h1>
<ul>
</ul>
<b>select_tut</b>(2).
<p>
For vaguely related stuff, see
<b>accept</b>(2),
<b>connect</b>(2),
<b>poll</b>(2),
<b>read</b>(2),
<b>recv</b>(2),
<b>send</b>(2),
<b>sigprocmask</b>(2),
<b>write</b>(2),
<b>epoll</b>(7),
<b>feature_test_macros</b>(7)
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion8c95.html?tutorial=unix_system_calls&amp;file=select.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/select.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:16 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
