<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/recv.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:14 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>recv() - Unix, Linux System Call</title>
<meta name="Description" Content="recv() - Unix, Linux System Calls Manual Pages (Manpages) ,  Learning fundamentals of UNIX in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - System Calls</b></a></li>
<li><a class="left" target="_top" href="../unix_commands/index.html">Unix - Commands List</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>recv() - Unix, Linux System Call</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
recv, recvfrom, recvmsg - receive a message from a socket
<h1 class="manpages">SYNOPSIS</h1>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>#include &lt;sys/types.h&gt;</b> 
<!-- Need break --><br />
<b>#include &lt;sys/socket.h&gt;</b> 
<p>
<b>ssize_t recv(int </b><i>s</i><b>, void *</b><i>buf</i><b>, size_t </b><i>len</i><b>, int </b><i>flags</i><b>);</b> 
<p>
<b>ssize_t recvfrom(int </b><i>s</i><b>, void *</b><i>buf</i><b>, size_t </b><i>len</i><b>, int </b><i>flags</i><b>,</b> 
<b>                 struct sockaddr *</b><i>from</i><b>, socklen_t *</b><i>fromlen</i><b>);</b> 
<p>
<b>ssize_t recvmsg(int </b><i>s</i><b>, struct msghdr *</b><i>msg</i><b>, int </b><i>flags</i><b>);</b> 
</pre></td></tr>
</table>
<h1 class="manpages">DESCRIPTION</h1>
The
<b>recvfrom</b>() and
<b>recvmsg</b>() calls are used to receive messages from a socket, and may be used
to receive data on a socket whether or not it is connection-oriented.
<p>
If
<i>from</i> is not NULL, and the underlying protocol provides the source address,
this source address is filled in.
The argument
<i>fromlen</i> is a value-result parameter, initialized to the size of the buffer
associated with
<i>from</i>, and modified on return to indicate the actual size of the address stored
there.
<p>
The
<b>recv</b>() call is normally used only on a
<i>connected</i> socket (see
<b>connect</b>(2))
and is identical to
<b>recvfrom</b>() with a NULL
<i>from</i> parameter.
<p>
All three routines return the length of the message on successful
completion.  If a message is too long to fit in the supplied buffer, excess
bytes may be discarded depending on the type of socket the message is
received from.
<p>
If no messages are available at the socket, the receive calls wait for a
message to arrive, unless the socket is nonblocking (see
<b>fcntl</b>(2)),
in which case the value -1 is returned and the external variable
<i>errno</i> set to
<b>EAGAIN</b>. The receive calls normally return any data available, up to the requested
amount, rather than waiting for receipt of the full amount requested.
<p>
The
<b>select</b>(2)
or
<b>poll</b>(2)
call may be used to determine when more data arrives.
<p>
The
<i>flags</i> argument to a
<b>recv</b>() call is formed by
<i>OR</i>&#146;ing one or more of the following values:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
<b>MSG_DONTWAIT</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Enables non-blocking operation; if the operation would block,
<b>EAGAIN</b> is returned (this can also be enabled using the
<b>O_NONBLOCK</b> with the
<b>F_SETFL</b> <b>fcntl</b>(2)).
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_ERRQUEUE</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This flag
specifies that queued errors should be received from the socket error queue.
The error is passed in
an ancillary message with a type dependent on the protocol (for IPv4
<b>IP_RECVERR</b>). The user should supply a buffer of sufficient size. See
<b>cmsg</b>(3)
and
<b>ip</b>(7)
for more information.
The payload of the original packet that caused the error
is passed as normal data via
<i>msg_iovec</i>. The original destination address of the datagram that caused the error
is supplied via
<i>msg_name</i>. </td></tr>
<tr valign="top"><td width=6%>

</td><td>
For local errors, no address is passed (this can be checked with the
<i>cmsg_len</i> member of the
<i>cmsghdr</i>). For error receives, the
<b>MSG_ERRQUEUE</b> is set in the
<i>msghdr</i>. After an error has been passed, the pending socket error
is regenerated based on the next queued error and will be passed
on the next socket operation.
<p>
The error is supplied in a
<i>sock_extended_err</i> structure:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
#define SO_EE_ORIGIN_NONE    0
#define SO_EE_ORIGIN_LOCAL   1
#define SO_EE_ORIGIN_ICMP    2
#define SO_EE_ORIGIN_ICMP6   3
<p>
struct sock_extended_err
{
    u_int32_t ee_errno;   /* error number */
    u_int8_t  ee_origin;  /* where the error originated */
    u_int8_t  ee_type;    /* type */
    u_int8_t  ee_code;    /* code */
    u_int8_t  ee_pad;
    u_int32_t ee_info;    /* additional information */
    u_int32_t ee_data;    /* other data */ 
    /* More data may follow */
};
<p>
struct sockaddr *SO_EE_OFFENDER(struct sock_extended_err *);
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
<b>ee_errno</b> contains the errno number of the queued error.
<b>ee_origin</b> is the origin code of where the error originated.
The other fields are protocol specific. The macro
<b>SOCK_EE_OFFENDER</b> returns a pointer to the address of the network object
where the error originated from given a pointer to the ancillary message.
If this address is not known, the
<i>sa_family</i> member of the
<b>sockaddr</b> contains
<b>AF_UNSPEC</b> and the other fields of the
<b>sockaddr</b> are undefined. The payload of the packet
that caused the error is passed as normal data.
</td></tr>
<tr valign="top"><td width=6%>

</td><td>
For local errors, no address is passed (this
can be checked with the
<i>cmsg_len</i> member of the
<i>cmsghdr</i>). For error receives,
the
<b>MSG_ERRQUEUE</b> is set in the
<i>msghdr</i>. After an error has been passed, the pending socket error
is regenerated based on the next queued error and will be passed
on the next socket operation.
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_OOB</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This flag requests receipt of out-of-band data that would not be received
in the normal data stream.  Some protocols place expedited data
at the head of the normal data queue, and thus this flag cannot
be used with such protocols.
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_PEEK</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This flag causes the receive operation to return data from the beginning of the
receive queue without removing that data from the queue.  Thus, a
subsequent receive call will return the same data.
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_TRUNC</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Return the real length of the packet, even when it was longer than
the passed buffer. Only valid for packet sockets.
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_WAITALL</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
This flag requests that the operation block until the full request is
satisfied.  However, the call may still return less data than requested if
a signal is caught, an error or disconnect occurs, or the next data to be
received is of a different type than that returned.
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
The
<b>recvmsg</b>() call uses a
<i>msghdr</i> structure to minimize the number of directly supplied parameters.  This
structure has the following form, as defined in
<i>&lt;sys/socket.h&gt;</i>: <!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
struct msghdr {
    void         *msg_name;       /* optional address */
    socklen_t     msg_namelen;    /* size of address */
    struct iovec *msg_iov;        /* scatter/gather array */
    size_t        msg_iovlen;     /* # elements in msg_iov */
    void         *msg_control;    /* ancillary data, see below */
    socklen_t     msg_controllen; /* ancillary data buffer len */
    int           msg_flags;      /* flags on received message */
};
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
Here
<i>msg_name</i> and
<i>msg_namelen</i> specify the source address if the socket is unconnected;
<i>msg_name</i> may be given as a null pointer if no names are desired or required.
The fields
<i>msg_iov</i> and
<i>msg_iovlen</i> describe scatter-gather locations, as discussed in
<b>readv</b>(2).
The field
<i>msg_control</i>, which has length
<i>msg_controllen</i>, points to a buffer for other protocol control related messages or
miscellaneous ancillary data. When
<b>recvmsg</b>() is called,
<i>msg_controllen</i> should contain the length of the available buffer in
<i>msg_control</i>; upon return from a successful call it will contain the length
of the control message sequence.
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
The messages are of the form:
<!-- ignored unsupported tag .in -->
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<p>
struct cmsghdr {
    socklen_t cmsg_len;     /* data byte count, including hdr */
    int       cmsg_level;   /* originating protocol */
    int       cmsg_type;    /* protocol-specific type */
/* followed by
    u_char    cmsg_data[]; */
};
</pre></td></tr>
</table>
<!-- ignored unsupported tag .in -->
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
Ancillary data should only be accessed by the macros defined in
<b>cmsg</b>(3).
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
As an example, Linux uses this auxiliary data mechanism to pass extended
errors, IP options or file descriptors over Unix sockets.
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
The
<i>msg_flags</i> field in the msghdr is set on return of
<b>recvmsg</b>(). It can contain several flags:
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_EOR</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
indicates end-of-record; the data returned completed a record (generally
used with sockets of type
<b>SOCK_SEQPACKET</b>). </td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_TRUNC</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
indicates that the trailing portion of a datagram was discarded because the
datagram was larger than the buffer supplied.
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_CTRUNC</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
indicates that some control data were discarded due to lack of space in the
buffer for ancillary data.
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_OOB</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
is returned to indicate that expedited or out-of-band data were received.
</td></tr>
<tr valign="top"><td colspan="2">
<b>MSG_ERRQUEUE</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
indicates that no data was received but an extended error from the socket
error queue.
</td></tr>
</table>
<h1 class="manpages">RETURN VALUE</h1>
These calls return the number of bytes received, or -1
if an error occurred. The return value will be 0 when the
peer has performed an orderly shutdown.
<h1 class="manpages">ERRORS</h1>
These are some standard errors generated by the socket layer. Additional errors
may be generated and returned from the underlying protocol modules; see their
manual pages.
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>EAGAIN</b> </td><td valign="bottom">
The socket is marked non-blocking and the receive operation
would block, or a receive timeout had been set and the timeout expired
before data was received.
</td></tr>
<tr valign="top"><td>
<b>EBADF</b> </td><td valign="bottom">
The argument
<i>s</i> is an invalid descriptor.
</td></tr>
<tr valign="top"><td colspan="2">
<b>ECONNREFUSED</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
A remote host refused to allow the network connection (typically
because it is not running the requested service).
</td></tr>
<tr valign="top"><td>
<b>EFAULT</b> </td><td valign="bottom">
The receive buffer pointer(s) point outside the process&#146;s
address space.
</td></tr>
<tr valign="top"><td>
<b>EINTR</b> </td><td valign="bottom">
The receive was interrupted by delivery of a signal before
any data were available.
</td></tr>
<tr valign="top"><td>
<b>EINVAL</b> </td><td valign="bottom">
Invalid argument passed.
</td></tr>
<tr valign="top"><td>
<b>ENOMEM</b> </td><td valign="bottom">
Could not allocate memory for
<b>recvmsg</b>(). </td></tr>
<tr valign="top"><td colspan="2">
<b>ENOTCONN</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The socket is associated with a connection-oriented protocol
and has not been connected (see
<b>connect</b>(2)
and
<b>accept</b>(2)).
</td></tr>
<tr valign="top"><td colspan="2">
<b>ENOTSOCK</b> </td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The argument
<i>s</i> does not refer to a socket.
</td></tr>
</table>
<h1 class="manpages">CONFORMING TO</h1>
4.4BSD (these function calls first appeared in 4.2BSD),
POSIX.1-2001.
<p>
POSIX.1-2001 only describes the
<b>MSG_OOB</b>, <b>MSG_PEEK</b>, and
<b>MSG_WAITALL</b> flags.
<h1 class="manpages">NOTES</h1>
The prototypes given above follow glibc2.
The Single Unix Specification agrees, except that it has return values
of type &#145;ssize_t&#146; (while 4.x BSD and libc4 and libc5 all have &#145;int&#146;).
The
<i>flags</i> argument is &#145;int&#146; in 4.x BSD, but &#145;unsigned int&#146; in libc4 and libc5.
The
<i>len</i> argument is &#145;int&#146; in 4.x BSD, but &#145;size_t&#146; in libc4 and libc5.
The
<i>fromlen</i> argument is &#145;int *&#146; in 4.x BSD, libc4 and libc5.
The present  &#145;socklen_t *&#146; was invented by POSIX.
See also
<b>accept</b>(2).
<p>
According to POSIX.1-2001, the
<i>msg_controllen</i> field of the
<i>msghdr</i> structure should be typed as
<i>socklen_t</i>, but glibc currently (2.4) types it as
<i>size_t</i>. <h1 class="manpages">SEE ALSO</h1>
<ul>
<li><p><a href="fcntl.htm">fcntl (2)</a></p></li>
<li><p><a href="getsockopt.htm">getsockopt (2)</a></p></li>
<li><p><a href="read.htm">read (2)</a></p></li>
<li><p><a href="select.htm">select (2)</a></p></li>
<li><p><a href="shutdown.htm">shutdown (2)</a></p></li>
<li><p><a href="socket.htm">socket (2)</a></p></li>
</ul>
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversionf5ce-2.html?tutorial=unix_system_calls&amp;file=recv.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/recv.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:14 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
