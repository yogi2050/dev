<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/ptrace.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:13 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>ptrace() - Unix, Linux System Call</title>
<meta name="Description" Content="ptrace() - Unix, Linux System Calls Manual Pages (Manpages) ,  Learning fundamentals of UNIX in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - System Calls</b></a></li>
<li><a class="left" target="_top" href="../unix_commands/index.html">Unix - Commands List</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>ptrace() - Unix, Linux System Call</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
ptrace - process trace
<h1 class="manpages">SYNOPSIS</h1>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>#include &lt;sys/ptrace.h&gt;</b> 
<p>
<b>long ptrace(enum __ptrace_request </b><i>request</i><b>, pid_t </b><i>pid</i><b>, </b> 
<b>            void *</b><i>addr</i><b>, void *</b><i>data</i><b>);</b> 
</pre></td></tr>
</table>
<h1 class="manpages">DESCRIPTION</h1>
The
<b>ptrace</b>() system call provides a means by which a parent process may observe
and control the execution of another process,
and examine and change its core image and registers. 
It is primarily used to implement breakpoint debugging and system
call tracing.
<p>
The parent can initiate a trace by calling
<b>fork</b>(2)
and having the resulting child do a PTRACE_TRACEME,
followed (typically) by an
<b>exec</b>(3).
Alternatively, the parent may commence trace of an existing process using
PTRACE_ATTACH.
<p>
While being traced, the child will stop each time a signal is delivered,
even if the signal is being ignored. 
(The exception is SIGKILL, which has its usual effect.) 
The parent will be notified at its next
<b>wait</b>(2)
and may inspect and modify the child process while it is stopped. 
The parent then causes the child to continue,
optionally ignoring the delivered signal
(or even delivering a different signal instead).
<p>
When the parent is finished tracing, it can terminate the child with
PTRACE_KILL or cause it to continue executing in a normal, untraced mode
via PTRACE_DETACH.
<p>
The value of <i>request</i> determines the action to be performed:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
PTRACE_TRACEME
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Indicates that this process is to be traced by its parent.  Any signal
(except SIGKILL) delivered to this process will cause it to stop and its
parent to be notified via
<b>wait</b>(). Also, all subsequent calls to
<b>exec</b>() by this process will cause a SIGTRAP to be sent to it,
giving the parent a chance to gain control before the new program
begins execution. 
A process probably shouldn&#146;t make this request if its parent
isn&#146;t expecting to trace it. 
(<i>pid</i>, <i>addr</i>, and <i>data</i> are ignored.)
</td></tr>
<!-- Found tag TP -->
<tr><td colspan="2">
The above request is used only by the child process;
the rest are used only by the parent. 
In the following requests, <i>pid</i> specifies the child process
to be acted on. 
For requests other than PTRACE_KILL, the child process must
be stopped.
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_PEEKTEXT, PTRACE_PEEKDATA
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Reads a word at the location
<i>addr</i> in the child&#146;s memory, returning the word as the result of the
<b>ptrace</b>() call. 
Linux does not have separate text and data address spaces, so the two
requests are currently equivalent. 
(The argument <i>data</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_PEEKUSR
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Reads a word at offset
<i>addr</i> in the child&#146;s
<b>USER</b> area, which holds the registers and other information about the process
(see &lt;linux/user.h&gt; and &lt;sys/user.h&gt;). 
The word is returned as the result of the
<b>ptrace</b>() call. 
Typically the offset must be word-aligned, though this might vary by
architecture. See NOTES. (<i>data</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_POKETEXT, PTRACE_POKEDATA
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Copies the word
<i>data</i> to location
<i>addr</i> in the child&#146;s memory.  As above, the two requests are currently equivalent.
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_POKEUSR
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Copies the word
<i>data</i> to offset
<i>addr</i> in the child&#146;s
<b>USER</b> area. 
As above, the offset must typically be word-aligned. 
In order to maintain the integrity of the kernel,
some modifications to the
<b>USER</b> area are disallowed.
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_GETREGS, PTRACE_GETFPREGS
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Copies the child&#146;s general purpose or floating-point registers,
respectively, to location <i>data</i> in the parent. 
See &lt;linux/user.h&gt; for information on
the format of this data.  (<i>addr</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_GETSIGINFO (since Linux 2.3.99-pre6)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Retrieve information about the signal that caused the stop.
Copies a <i>siginfo_t</i> structure (see
<b>sigaction</b>(2))
from the child to location <i>data</i> in the parent.
(<i>addr</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_SETREGS, PTRACE_SETFPREGS
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Copies the child&#146;s general purpose or floating-point registers,
respectively, from location <i>data</i> in the parent. 
As for PTRACE_POKEUSER, some general
purpose register modifications may be disallowed. 
(<i>addr</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_SETSIGINFO (since Linux 2.3.99-pre6)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set signal information.
Copies a <i>siginfo_t</i> structure from location <i>data</i> in the
parent to the child.
This will only affect signals that would normally be delivered to
the child and were caught by the tracer.  It may be difficult to tell
these normal signals from synthetic signals generated by
<b>ptrace</b>() itself.  (<i>addr</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_SETOPTIONS (since Linux 2.4.6; see BUGS for caveats)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Sets ptrace options from <i>data</i> in the parent. 
(<i>addr</i> is ignored.)
<i>data</i> is interpreted
as a bitmask of options, which are specified by the following flags:
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
PTRACE_O_TRACESYSGOOD (since Linux 2.4.6)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
When delivering syscall traps, set bit 7 in the signal number
(i.e., deliver (SIGTRAP | 0x80) 
This makes it easy for the tracer to tell the difference
between normal traps and those caused by a syscall. 
(PTRACE_O_TRACESYSGOOD may not work on all architectures.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_O_TRACEFORK (since Linux 2.5.46)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Stop the child at the next
<b>fork</b>() call with SIGTRAP | PTRACE_EVENT_FORK &lt;&lt; 8 and automatically
start tracing the newly forked process,
which will start with a SIGSTOP.
The PID for the new process can be retrieved with PTRACE_GETEVENTMSG.
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_O_TRACEVFORK (since Linux 2.5.46)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Stop the child at the next
<b>vfork</b>() call with SIGTRAP | PTRACE_EVENT_VFORK &lt;&lt; 8 and automatically start
tracing the newly vforked process, which will start with a SIGSTOP.
The PID for the new process can be retrieved with PTRACE_GETEVENTMSG.
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_O_TRACECLONE (since Linux 2.5.46)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Stop the child at the next
<b>clone</b>() call with SIGTRAP | PTRACE_EVENT_CLONE &lt;&lt; 8 and automatically start
tracing the newly cloned process, which will start with a SIGSTOP.
The PID for the new process can be retrieved with PTRACE_GETEVENTMSG.
This option may not catch
<b>clone</b>() calls in all cases.  If the child calls
<b>clone</b>() with the CLONE_VFORK flag, PTRACE_EVENT_VFORK will be delivered instead
if PTRACE_O_TRACEVFORK is set; otherwise if the child calls
<b>clone</b>() with the exit signal set to SIGCHLD, PTRACE_EVENT_FORK will be delivered
if PTRACE_O_TRACEFORK is set.
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_O_TRACEEXEC (since Linux 2.5.46)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Stop the child at the next
<b>exec</b>() call with SIGTRAP | PTRACE_EVENT_EXEC &lt;&lt; 8.
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_O_TRACEVFORKDONE (since Linux 2.5.60)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Stop the child at the completion of the next
<b>vfork</b>() call with SIGTRAP | PTRACE_EVENT_VFORK_DONE &lt;&lt; 8.
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_O_TRACEEXIT (since Linux 2.5.60)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Stop the child at exit with SIGTRAP | PTRACE_EVENT_EXIT &lt;&lt; 8.
The child&#146;s exit status can be retrieved with PTRACE_GETEVENTMSG.
This stop will be done early during process exit when registers
are still available, allowing the tracer to see where the exit occurred,
whereas the normal exit notification is done after the process
is finished exiting.
Even though context is available, the tracer cannot prevent the exit from
happening at this point.
</td></tr>
</table>
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_GETEVENTMSG (since Linux 2.5.46)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Retrieve a message (as an
<i>unsigned long</i>) about the ptrace event
that just happened, placing it in the location <i>data</i> in the parent.
For PTRACE_EVENT_EXIT this is the child&#146;s exit status.  For
PTRACE_EVENT_FORK, PTRACE_EVENT_VFORK and PTRACE_EVENT_CLONE this
is the PID of the new process.  (<i>addr</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_CONT
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Restarts the stopped child process.  If <i>data</i> is non-zero and not
SIGSTOP, it is interpreted as a signal to be delivered to the child;
otherwise, no signal is delivered. 
Thus, for example, the parent can control
whether a signal sent to the child is delivered or not. 
(<i>addr</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_SYSCALL, PTRACE_SINGLESTEP
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Restarts the stopped child as for PTRACE_CONT, but arranges for
the child to be stopped at the next entry to or exit from a system call,
or after execution of a single instruction, respectively. 
(The child will also, as usual, be stopped upon receipt of a signal.) 
From the parent&#146;s perspective, the child will appear to have been
stopped by receipt of a SIGTRAP. 
So, for PTRACE_SYSCALL, for example, the idea is to inspect
the arguments to the system call at the first stop,
then do another PTRACE_SYSCALL and inspect the return value of
the system call at the second stop. 
(<i>addr</i> is ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_SYSEMU, PTRACE_SYSEMU_SINGLESTEP (since Linux 2.6.14)
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
For PTRACE_SYSEMU, continue and stop on entry to the next syscall,
which will not be executed.  For PTRACE_SYSEMU_SINGLESTEP, do the same
but also singlestep if not a syscall.  This call is used by programs like
User Mode Linux that want to emulate all the the child&#146;s syscalls.
(<i>addr</i> and <i>data</i> are ignored;
not supported on all architectures.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_KILL
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Sends the child a SIGKILL to terminate it. 
(<i>addr</i> and <i>data</i> are ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_ATTACH
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Attaches to the process specified in
<i>pid</i>, making it a traced "child" of the current process;
the behavior of the child is as if it had done a PTRACE_TRACEME. 
The current process actually becomes the parent of the child
process for most purposes (e.g., it will receive
notification of child events and appears in
<b>ps</b>(1)
output as the child&#146;s parent), but a
<b>getppid</b>(2)
by the child will still return the PID of the original parent. 
The child is sent a SIGSTOP, but will not necessarily have stopped
by the completion of this call; use
<b>wait</b>() to wait for the child to stop. 
(<i>addr</i> and <i>data</i> are ignored.)
</td></tr>
<tr valign="top"><td colspan="2">
PTRACE_DETACH
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Restarts the stopped child as for PTRACE_CONT, but first detaches
from the process, undoing the reparenting effect of PTRACE_ATTACH,
and the effects of PTRACE_TRACEME. 
Although perhaps not intended, under Linux a traced child can be
detached in this way regardless of which method was used to initiate
tracing. 
(<i>addr</i> is ignored.)
</td></tr>
</table>
<h1 class="manpages">NOTES</h1>
Although arguments to
<b>ptrace</b>() are interpreted according to the prototype given,
GNU libc currently declares
<b>ptrace</b>() as a variadic function with only the <i>request</i> argument fixed. 
This means that unneeded trailing arguments may be omitted,
though doing so makes use of undocumented
<b>gcc</b>(1)
behavior.
<p>
<b>init</b>(8),
the process with PID 1, may not be traced.
<p>
The layout of the contents of memory and the USER area are quite OS- and
architecture-specific. The offset supplied and the data returned might
not entirely match with the definition of
<i>struct user</i> <p>
The size of a "word" is determined by the OS variant
(e.g., for 32-bit Linux it&#146;s 32 bits, etc.).
<p>
Tracing causes a few subtle differences in the semantics of
traced processes.
For example, if a process is attached to with PTRACE_ATTACH,
its original parent can no longer receive notification via
<b>wait</b>() when it stops, and there is no way for the new parent to
effectively simulate this notification.
<p>
This page documents the way the
<b>ptrace</b>() call works currently in Linux. 
Its behavior differs noticeably on other flavors of Unix. 
In any case, use of
<b>ptrace</b>() is highly OS- and architecture-specific.
<p>
The SunOS man page describes
<b>ptrace</b>() as "unique and arcane", which it is. 
The proc-based debugging interface
present in Solaris 2 implements a superset of
<b>ptrace</b>() functionality in a more powerful and uniform way.
<h1 class="manpages">RETURN VALUE</h1>
On success, PTRACE_PEEK* requests return the requested data,
while other requests return zero. 
On error, all requests return -1, and
<i>errno</i> is set appropriately. 
Since the value returned by a successful PTRACE_PEEK*
request may be -1, the caller must check
<i>errno</i> after such requests to determine whether or not an error occurred.
<h1 class="manpages">BUGS</h1>
On hosts with 2.6 kernel headers, PTRACE_SETOPTIONS is declared
with a different value than the one for 2.4.
This leads to applications compiled with such
headers failing when run on 2.4 kernels.
This can be worked around by redefining PTRACE_SETOPTIONS to
PTRACE_OLDSETOPTIONS, if that is defined.
<h1 class="manpages">ERRORS</h1>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td>
<b>EBUSY</b> </td><td valign="bottom">
(i386 only) There was an error with allocating or freeing a debug
register.
</td></tr>
<tr valign="top"><td>
<b>EFAULT</b> </td><td valign="bottom">
There was an attempt to read from or write to an invalid area in
the parent&#146;s or child&#146;s memory,
probably because the area wasn&#146;t mapped or accessible. 
Unfortunately, under Linux, different variations of this fault
will return EIO or EFAULT more or less arbitrarily.
</td></tr>
<tr valign="top"><td>
<b>EINVAL</b> </td><td valign="bottom">
An attempt was made to set an invalid option.
</td></tr>
<tr valign="top"><td>
<b>EIO</b> </td><td valign="bottom">
<i>request</i> is invalid, or an attempt was made to read from or
write to an invalid area in the parent&#146;s or child&#146;s memory,
or there was a word-alignment violation,
or an invalid signal was specified during a restart request.
</td></tr>
<tr valign="top"><td>
<b>EPERM</b> </td><td valign="bottom">
The specified process cannot be traced.  This could be because the
parent has insufficient privileges (the required capability is
<b>CAP_SYS_PTRACE</b>); non-root processes cannot trace processes that they
cannot send signals to or those running
set-user-ID/set-group-ID programs, for obvious reasons.
Alternatively, the process may already be being traced, or be
<b>init</b> (PID 1).
</td></tr>
<tr valign="top"><td>
<b>ESRCH</b> </td><td valign="bottom">
The specified process does not exist, or is not currently being traced
by the caller, or is not stopped (for requests that require that).
</td></tr>
</table>
<h1 class="manpages">CONFORMING TO</h1>
SVr4, 4.3BSD
<h1 class="manpages">SEE ALSO</h1>
<ul>
<li><p><a href="../unix_commands/gdb.htm">gdb (1)</a></p></li>
<li><p><a href="../unix_commands/strace.htm">strace (1)</a></p></li>
<li><p><a href="execve.htm">execve (2)</a></p></li>
<li><p><a href="fork.htm">fork (2)</a></p></li>
<li><p><a href="signal.htm">signal (2)</a></p></li>
<li><p><a href="wait.htm">wait (2)</a></p></li>
</ul>
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion7d50.html?tutorial=unix_system_calls&amp;file=ptrace.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/ptrace.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:13 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
