<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/tux.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:21 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>tux() - Unix, Linux System Call</title>
<meta name="Description" Content="tux() - Unix, Linux System Calls Manual Pages (Manpages) ,  Learning fundamentals of UNIX in simple and easy steps : A beginner's tutorial containing complete knowledge of Unix Korn  and Bourne Shell and Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta name="Keywords" content="Unix, Tutorials, Learning, Operating, System, OS, Beginners, Basics, System Calls, Korn, Bourne, Shell,Programming, Utilities, File System, Directories, Memory Management, Special Variables, vi editor, Processes" />
<meta http-equiv="pragma" content="no-cache" />
<meta http-equiv="cache-control" content="no-cache" />
<base  />
<link rel="stylesheet" type="text/css" href="../tp.css" />
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body>
<center>
<a name="top"></a>
<table border="0" class="main" cellpadding="2" cellspacing="0">
<tr>
<td class="content" valign="top" align="left">
<a href="../index-2.html"><img src="../images/tp-logo.gif" border="0"  alt="Tutorials Point" /></a>
<br />
<br />
<div  class="search">
<!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0">
<tr><td nowrap="nowrap" valign="top" align="center" height="32">
<a href="http://www.google.com/">
<img src="../../www.google.com/logos/Logo_25wht.gif" border="0" alt="Google" align="middle"></img></a>
</td>
</tr>
<tr>
<td nowrap="nowrap">
<input type="hidden" name="domains" value="www.tutorialspoint.com"></input>
<input type="text" name="q" size="20" maxlength="255" value=""></input>
<input type="submit" name="sa" style="width:20px;font-weight:bold" value="..."></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="radio" name="sitesearch" value="" checked="checked"></input>
<font size="-1" color="#000000">Web</font>
</td>
<td>
<input type="radio" name="sitesearch" value="www.tutorialspoint.com"></input>
<font size="-1" color="#000000">This Site</font>
</td>
</tr>
</table>
<input type="hidden" name="client" value="pub-7133395778201029"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="cof" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"></input>
<input type="hidden" name="hl" value="en"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
</div>
<br />
&nbsp;&nbsp;<b>Unix for Beginners</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/index.html">Unix - Home</a></li>
<li><a class="left" target="_top" href="../unix/unix-getting-started.html">Unix - Getting Started</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-management.html">Unix - File Management</a></li>
<li><a class="left" target="_top" href="../unix/unix-directories.html">Unix - Directories</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-permission.html">Unix - File Permission</a></li>
<li><a class="left" target="_top" href="../unix/unix-environment.html">Unix - Environment</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-utilities.html">Unix - Basic Utilities</a></li>
<li><a class="left" target="_top" href="../unix/unix-pipes-filters.html">Unix - Pipes &amp; Filters</a></li>
<li><a class="left" target="_top" href="../unix/unix-processes.html">Unix - Processes</a></li>
<li><a class="left" target="_top" href="../unix/unix-communication.html">Unix - Communication</a></li>
<li><a class="left" target="_top" href="../unix/unix-vi-editor.html">Unix - The vi Editor</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Shell Programming</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-shell.html">Unix - What is Shell?</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-variables.html">Unix - Using Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-special-variables.html">Unix - Special Variables</a></li>
<li><a class="left" target="_top" href="../unix/unix-using-arrays.html">Unix - Using Arrays</a></li>
<li><a class="left" target="_top" href="../unix/unix-basic-operators.html">Unix - Basic Operators</a></li>
<li><a class="left" target="_top" href="../unix/unix-decision-making.html">Unix - Decision Making</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-loops.html">Unix - Shell Loops</a></li>
<li><a class="left" target="_top" href="../unix/unix-loop-control.html">Unix - Loop Control</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-substitutions.html">Unix - Shell Substitutions</a></li>
<li><a class="left" target="_top" href="../unix/unix-quoting-mechanisms.html">Unix - Quoting Mechanisms</a></li>
<li><a class="left" target="_top" href="../unix/unix-io-redirections.html">Unix - IO Redirections</a></li>
<li><a class="left" target="_top" href="../unix/unix-shell-functions.html">Unix - Shell Functions</a></li>
<li><a class="left" target="_top" href="../unix/unix-manpage-help.html">Unix - Manpage Help</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Advanced Unix</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-regular-expressions.html">Unix - Regular Expressions</a></li>
<li><a class="left" target="_top" href="../unix/unix-file-system.html">Unix - File System Basics</a></li>
<li><a class="left" target="_top" href="../unix/unix-user-administration.html">Unix - User Administration</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-performance.html">Unix - System Performance</a></li>
<li><a class="left" target="_top" href="../unix/unix-system-logging.html">Unix - System Logging</a></li>
<li><a class="left" target="_top" href="../unix/unix-signals-traps.html">Unix - Signals and Traps</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful References</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-commands.html">Unix - Useful Commands</a></li>
<li><a class="left" target="_top" href="../unix/unix-quick-guide.html">Unix - Quick Guide</a></li>
<li><a class="left" target="_top" href="../unix/unix-builtin-functions.html">Unix - Builtin Functions</a></li>
<li><a class="left" target="_top" href="index.html"><b>Unix - System Calls</b></a></li>
<li><a class="left" target="_top" href="../unix_commands/index.html">Unix - Commands List</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Unix Useful Resources</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../unix/unix-useful-resources.html">Unix Useful Resources</a></li>
</ul>
</div>
<br />
&nbsp;&nbsp;<b>Selected Reading</b>
<div  class="left">
<ul class="menu">
<li><a class="left" target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a class="left" target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div>
<br /><br />
<small>&copy; 2013 TutorialsPoint.COM </small>
</td>
<td valign="top">
<br /><br />
<table cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../index-2.html">Home</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../references.html">References</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../forums/index.html">Discussion Forums</a>&nbsp;&nbsp;
</td>
<td  style="width:20px;"></td>
<td  class="top">
&nbsp;&nbsp;<a class="top" href="../about/index.html">About TP</a>&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="middle" cellpadding="5" cellspacing="0">
<tr>
<td>
<!-- PRINTING STARTS HERE -->
<h1>tux() - Unix, Linux System Call</h1>
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<!-- AddThis Bookmark Button BEGIN -->
<a href="http://www.addthis.com/bookmark.php" rel="nofollow" onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" target="_blank"><img src="../images/add-this.gif" border="0" alt="AddThis Social Bookmark Button" /></a> <script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>
<script type="text/javascript">var addthis_pub = 'tutorialspoint';</script><script type="text/javascript" src="http://s9.addthis.com/js/widget.php?v=10"></script>  
<!-- AddThis Bookmark Button END -->
<br />
<br />
<hr/><div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
<hr />
<h1 class="manpages">NAME</h1>
tux - interact with the TUX kernel subsystem
<h1 class="manpages">SYNOPSIS</h1>
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
<b>#include &lt;sys/tuxmodule.h&gt;</b> 
<p>
<b>int tux (unsigned int action, user_req_t * req);</b> 
</pre></td></tr>
</table>
<h1 class="manpages">DESCRIPTION</h1>
The
<b>tux()</b> system call calls the kernel to perform an
<i>action</i> on behalf of the currently executing user-space TUX module.
<p>
<i>action</i> can be one of:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
    enum tux_actions {
            TUX_ACTION_STARTUP = 1,
            TUX_ACTION_SHUTDOWN = 2,
            TUX_ACTION_STARTTHREAD = 3,
            TUX_ACTION_STOPTHREAD = 4,
            TUX_ACTION_EVENTLOOP = 5,
            TUX_ACTION_GET_OBJECT = 6,
            TUX_ACTION_SEND_OBJECT = 7,
            TUX_ACTION_READ_OBJECT = 8,
            TUX_ACTION_FINISH_REQ = 9,
            TUX_ACTION_FINISH_CLOSE_REQ = 10,
            TUX_ACTION_REGISTER_MODULE = 11,
            TUX_ACTION_UNREGISTER_MODULE = 12,
            TUX_ACTION_CURRENT_DATE = 13,
            TUX_ACTION_REGISTER_MIMETYPE = 14,
            TUX_ACTION_READ_HEADERS = 15,
            TUX_ACTION_POSTPONE_REQ = 16,
            TUX_ACTION_CONTINUE_REQ = 17,
            TUX_ACTION_REDIRECT_REQ = 18,
            TUX_ACTION_READ_POST_DATA = 19,
            TUX_ACTION_SEND_BUFFER = 20,
            TUX_ACTION_WATCH_PROXY_SOCKET = 21,
            TUX_ACTION_WAIT_PROXY_SOCKET = 22,
            TUX_ACTION_QUERY_VERSION = 23,
            MAX_TUX_ACTION
    };
</pre></td></tr>
</table>
<p>
The first <i>action</i> values listed below are administrative and
are normally used only in the tux program.
<p>
TUX_ACTION_STARTUP starts the tux subsystem, and takes a NULL
<i>req</i>.  TODO: Only root can use TUX_ACTION_STARTUP.
<p>
TUX_ACTION_SHUTDOWN stops the tux subsystem, and takes any
<i>req</i>, even a zero-filled <i>req</i>.
<p>
TUX_ACTION_STARTTHREAD is called once per thread with a
<i>req-&gt;thread_nr</i> element monotonically increasing from 0.
<p>
TUX_ACTION_STOPTHREAD is not currently used by the tux
daemon because all threads are automatically stopped on
TUX_ACTION_SHUTDOWN.  It remains available because it
may be useful in circumstances that the tux daemon does
not yet handle.
<p>
TUX_ACTION_REGISTER_MODULE
Register a user-space module identified by the <i>req-&gt;modulename</i> string.
One VFS name can be registered only once.
<p>
<i>req-&gt;version_major</i>, <i>req-&gt;version_minor</i>, and
<i>req-&gt;version_patch</i> have to be set appropriately from
TUX_MAJOR_VERSION, TUX_MINOR_VERSION, and TUX_PATCHLEVEL_VERSION,
respectively; the kernel will sanity-check binary compatibility of
the module.
<p>
TUX_ACTION_UNREGISTER_MODULE
Unregister a user-space module identified by the req-&gt;modulename
string.  Only registered modules can be unregistered.
<p>
TUX_ACTION_CURRENT_DATE
Set the current date string to req-&gt;new_date.  The date string
must be RFC 1123-compliant and increase monotonically.  The
tux daemon normally calls this once per second.
<p>
TUX_ACTION_REGISTER_MIMETYPE
Sets the extension req-&gt;objectname to map to mimetype req-&gt;object_addr.
The tux daemon normally registers the mime types in /etc/tux.mime.types,
but modules could conceivably create their own mimetype mappings.
<p>
TUX_ACTION_QUERY_VERSION
Return the major version, minor version, and patchlevel of the kernel
TUX subsystem, encoded in the return value as
<!-- Need break --><br />
<tt>(TUX_MAJOR_VERSION &lt;&lt; 24) | (TUX_MINOR_VERSION &lt;&lt; 16) |
<br />
 TUX_PATCHLEVEL_VERSION</tt>
<!-- Need break --><br />
If the system call sets errno to EINVAL, assume major version 2,
minor version 1.
<p>
<p>
The rest of the <i>action</i> values are used to respond to
TUX events.  The general architecture is that TUX&#146;s event
loop is invoked to catch HTTP events, and then responses
are generated in response to those events.
<p>
TUX_ACTION_EVENTLOOP invokes the TUX event loop&#151;the TUX
subsystem will either immediately return with a new request
<i>req</i>, or will wait for new requests to arrive.
<p>
TUX_ACTION_GET_OBJECT issues a request for the URL object named in
<i>req-&gt;objectname</i>. If the object is not immediately available then
the currently handled request is suspended, and a new request is
returned, or the TUX subsystem waits for new requests.
<p>
A URL object is a data stream that is accessed via a URL and is
directly associated with a file pointed to by that URL.  (In the
future, we may extend the concept of a URL object.)
<p>
<p>
TUX_ACTION_SEND_OBJECT sends the current URL object to the client.
<p>
TUX_ACTION_READ_OBJECT reads the current URL object into the
address specified by <i>req-&gt;object_addr</i>.
TUX_ACTION_READ_OBJECT must not be called unless
<i>req-&gt;objectlen</i> &gt;= 0.
<p>
TUX_ACTION_READ_HEADERS reads a non-zero-delimited string into
req-&gt;object_addr, with the length of the string kept in
req-&gt;objectlen.  This is a workaround used to read fields
that tux does not currently parse; if you need it, report
it as a bug so that more fields can be added to user_req
(unless your use is so specialized that it will be of no
general utility).
<p>
TUX_ACTION_POSTPONE_REQ postpones the request, meaning that
no tux system calls will return data for this request until
TUX_ACTION_CONTINUE_REQ is called.
<p>
TUX_ACTION_CONTINUE_REQ continues a postponed request.
Unlike a normal TUX_ACTION, it takes as its argument
the socket descriptor (this allows it to be called from
a program that is unrelated to the program that called
TUX_ACTION_POSTPONE_REQ if necessary).  It is called
like this:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
    ret = tux(TUX_ACTION_CONTINUE_REQ, (user_req_t *)socket);
</pre></td></tr>
</table>
<p>
TUX_ACTION_READ_POST_DATA is an atomic action (it will always
return with the same request, no need to handle a new request)
that puts the non-zero-delimited POST data, up to the maximum
set in req-&gt;objectlen (and limited by /proc/sys/net/tux/max_header_len),
into req-&gt;object_addr, ands resets req-&gt;objectlen to the length.
<p>
TUX_ACTION_REDIRECT_REQ causes the request to be redirected to the
secondary server.  (No need to call TUX_ACTION_FINISH_REQ.)
<p>
TUX_ACTION_FINISH_REQ finishes and logs the request.
<p>
TUX_ACTION_FINISH_CLOSE_REQ is like TUX_ACTION_FINISH_REQ except that
it also closes HTTP 1.1 keepalive connections.
<p>
TUX_ACTION_SEND_BUFFER is like TUX_ACTION_SEND_OBJECT except that it sends
whatever is in the req-&gt;object_addr buffer.  This can be used as a generic
output buffer.
<p>
TUX_ACTION_WATCH_PROXY_SOCKET sets up a non-TUX socket to be used with
TUX_ACTION_WAIT_PROXY_SOCKET. The socket must be a network socket. The
function is atomic. Repeated calls to this action will replace the
previous proxy socket, so there is no need to deinitialize it. The
socket file descriptor must be put into req-&gt;object_addr.
<p>
TUX_ACTION_WAIT_PROXY_SOCKET postpones the current request until there
are input packets on the socket that was set up via
TUX_ACTION_WATCH_PROXY_SOCKET. The proxy socket has a keepalive timer
running. The request will be resumed once there is input activity on
the socket - the module can use nonblocking recv() on the socket to process
input packets.
<p>
user_req_t <i>req</i> is the request returned by the TUX subsystem.
Defined fields depend on the version.  For major version 2, they are:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
    typedef struct user_req_s {
            int version_major;
            int version_minor;
            int version_patch;
<p>
            int http_version;
            int http_method;
<p>
            int sock;
            int event;
            int thread_nr;
            void *id;
            void *priv;
<p>
            int http_status;
            int bytes_sent;
            char *object_addr;
            int module_index;
            char modulename[MAX_MODULENAME_LEN];
<p>
            unsigned int client_host;
            unsigned int objectlen;
            char query[MAX_URI_LEN];
            char objectname[MAX_URI_LEN];
<p>
            unsigned int cookies_len;
            char cookies[MAX_COOKIE_LEN];
<p>
            char content_type[MAX_FIELD_LEN];
            char user_agent[MAX_FIELD_LEN];
            char accept[MAX_FIELD_LEN];
            char accept_charset[MAX_FIELD_LEN];
            char accept_encoding[MAX_FIELD_LEN];
            char accept_language[MAX_FIELD_LEN];
            char cache_control[MAX_FIELD_LEN];
            char if_modified_since[MAX_FIELD_LEN];
            char negotiate[MAX_FIELD_LEN];
            char pragma[MAX_FIELD_LEN];
            char referer[MAX_FIELD_LEN];
<p>
            char *post_data;
            char new_date[DATE_LEN];
            int keep_alive;
    } user_req_t;
</pre></td></tr>
</table>
For major version 3, they are:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
typedef struct user_req_s {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t version_major;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t version_minor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t version_patch;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t http_version;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t http_method;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t http_status;
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t sock;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t event;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t error;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t thread_nr;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t bytes_sent;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t client_host;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t objectlen;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t module_index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t keep_alive;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint32_t cookies_len;
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint64_t id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint64_t priv;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint64_t object_addr;
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t query[MAX_URI_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t objectname[MAX_URI_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t cookies[MAX_COOKIE_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t content_type[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t user_agent[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t accept[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t accept_charset[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t accept_encoding[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t accept_language[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t cache_control[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t if_modified_since[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t negotiate[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t pragma[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t referer[MAX_FIELD_LEN];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uint8_t new_date[DATE_LEN];
} user_req_t;
</pre></td></tr>
</table>
<table class="src" cellpadding="5" cellspacing="0" border="1">
<tr><th width="25%">Tag</th><th>Description</th></tr>
<tr valign="top"><td colspan="2">
version_major
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Always set to TUX_MAJOR_VERSION,
used to flag binary incompatibility.
</td></tr>
<tr valign="top"><td colspan="2">
version_minor
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Always set to TUX_MINOR_VERSION,
used to flag binary incompatibility.
</td></tr>
<tr valign="top"><td colspan="2">
version_patch
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Always set to TUX_PATCHLEVEL_VERSION,
used to flag binary incompatibility.
</td></tr>
<tr valign="top"><td colspan="2">
http_version
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
One of
<b>HTTP_1_0</b> or
<b>HTTP_1_1</b> </td></tr>
<tr valign="top"><td colspan="2">
http_method
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
One of
<b>METHOD_NONE</b>, <b>METHOD_GET</b>, <b>METHOD_HEAD</b>, <b>METHOD_POST</b>, or
<b>METHOD_PUT</b> </td></tr>
<tr valign="top"><td>
sock
</td><td valign="bottom">
Socket file descriptor; writing to this will send data to the
connected client associated with this request.  Do not read
from this socket file descriptor; you could potentially confuse
the HTTP engine.
</td></tr>
<tr valign="top"><td>
event
</td><td valign="bottom">
Private, per-request state for use in tux modules.  The system
will preserve this value as long as a request is active.
</td></tr>
<tr valign="top"><td colspan="2">
thread_nr
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Thread index; see discussion of <i>TUX_ACTION_STARTTHREAD</i>.
</td></tr>
<tr valign="top"><td>
id
</td><td valign="bottom">
A tux-daemon-internal value that is used to multiplex requests
to the correct modules.
</td></tr>
<tr valign="top"><td>
priv
</td><td valign="bottom">
Works just like <i>event</i>, except that it is a pointer to
private data instead of an integer.
</td></tr>
<tr valign="top"><td colspan="2">
http_status
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set the error status as an integer for error reporting.  The
status is good by default, so it should not be modified except
to report errors.
</td></tr>
<tr valign="top"><td colspan="2">
bytes_sent
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
When you write to sock, you must set bytes_sent to the total
number of bytes sent since the last tux() operation on this
<i>req</i>, or the log entry&#146;s bytes sent counter will be
incorrect.  (This may change or disappear in future versions
of tux.)
</td></tr>
<tr valign="top"><td colspan="2">
object_addr
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Set to an address for a buffer of at least <i>req-&gt;objectlen</i>
size into which to read an object from the URL cache with the
TUX_ACTION_READ_OBJECT <i>action</i>.  TUX_ACTION_READ_OBJECT must not
be called unless <i>req-&gt;objectlen</i> &gt;= 0, and TUX implicitly
relies on <i>req-&gt;object_addr</i> being at least <i>req-&gt;objectlen</i>
in size.
</td></tr>
<tr valign="top"><td colspan="2">
module_index
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Used by the tux(8) daemon to determine which loadable module to
associate with a <i>req</i>.
</td></tr>
<tr valign="top"><td colspan="2">
modulename
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The name of the module as set by TUX_ACTION_REGISTER_MODULE;
private data to the tux daemon.
</td></tr>
<tr valign="top"><td colspan="2">
client_host
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The IP address of the host to which sock is connected.
</td></tr>
<tr valign="top"><td colspan="2">
objectlen
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The size of a file that satisfies the current request and
which is currently living in the URL cache.  This is set
if a request returns after TUX_ACTION_GET_OBJECT.  A module
should make sure that the buffer at <i>req-&gt;object_addr</i>
is at least <i>req-&gt;objectlen</i> in size before calling
TUX_ACTION_READ_OBJECT.
</td></tr>
<tr valign="top"><td>
query
</td><td valign="bottom">
The full query string sent from the client.
</td></tr>
<tr valign="top"><td colspan="2">
objectname
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Specifies the name of a URL to get with the TUX_ACTION_GET_OBJECT
<i>action</i>.  If the URL is not immediately available (that is,
is not in the URL cache), the request is queued and the tux
subsystem may go on to other ready requests while waiting.
</td></tr>
<tr valign="top"><td colspan="2">
cookies_len
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If cookies are in the request header,
<i>cookies_len</i> contains the length of the <i>cookies</i> string
</td></tr>
<tr valign="top"><td colspan="2">
cookies
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
If cookies are in the request header,
<i>cookies</i> is the string in which the cookies are passed to
the module.
</td></tr>
<tr valign="top"><td colspan="2">
content_type
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The Content-Type header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
user_agent
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The User-Agent header value for the request
</td></tr>
<tr valign="top"><td>
accept
</td><td valign="bottom">
The Accept header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
accept_charset
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The Accept-Charset header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
accept_encoding
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The Accept-Encoding header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
accept_language
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The Accept-Language header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
cache_control
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The  Cache-Control header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
if_modified_since
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The If-Modified-Since header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
negotiate
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The Negotiate header value for the request
</td></tr>
<tr valign="top"><td>
pragma
</td><td valign="bottom">
The Pragma header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
referer
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The Referer header value for the request
</td></tr>
<tr valign="top"><td colspan="2">
post_data
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
For POST requests, the incoming data is placed in post_data.
</td></tr>
<tr valign="top"><td colspan="2">
new_date
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
Returns the current date/time
</td></tr>
<tr valign="top"><td colspan="2">
keep_alive
</td></tr><tr valign="top"><td width=6%>&nbsp;</td><td>
The KeepAlive header value for the request
<p>
</td></tr>
</table>
<h1 class="manpages">RETURN VALUE</h1>
<b>tux()</b> returns the following values:
<table class="src" cellpadding="5" cellspacing="5">
<tr><td><pre>
    enum tux_reactions {
            TUX_RETURN_USERSPACE_REQUEST = 0,
            TUX_RETURN_EXIT = 1,
            TUX_RETURN_SIGNAL = 2,
    };
</pre></td></tr>
</table>
<p>
TUX_RETURN_USERSPACE_REQUEST means that the kernel has put a
new request into <i>req</i>; the request must be responded to
with one of TUX_ACTION_GET_OBJECT, TUX_ACTION_SEND_OBJECT,
TUX_ACTION_READ_OBJECT, or TUX_ACTION_FINISH_REQ.
<p>
TUX_RETURN_EXIT means that TUX has been stopped.
<p>
TUX_RETURN_SIGNAL means that a signal has occured.
No new request is scheduled.
<p>
<h1 class="manpages">ERRORS</h1>
Any negative value (such as -EFAULT, -EINVAL) is an indication of
an error.
<p>
<h1 class="manpages">BUGS</h1>
This man page is incomplete.
<br />
<hr />
<a href="index.html"><img alt="previous" border="0" src="../images/previous.gif" /></a>
<a href="index.html"><img alt="next" border="0" src="../images/next.gif" /></a>
<a href='../cgi-bin/printversion7bf5.html?tutorial=unix_system_calls&amp;file=tux.htm' target="_blank">
<img src="../images/print.gif" alt="Printer Friendly" border="0" /></a>
<br />
<hr />
<!-- PRINTING ENDS HERE -->
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text_image";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</td></tr>
</table>
</td>
<td class="right" align="center" valign="top">
<br /><br />
<table width="100%" cellpadding="0" cellspacing="0">
<tr valign="middle">
<td  class="top" style="border:0px;">
&nbsp;&nbsp;
</td>
</tr>
</table>
<table class="right"  cellpadding="0" cellspacing="0">
<tr>
<td align="center" class="right">
<p>
<u>Advertisements</u>
</p>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
  src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br /><br /></td></tr></table>
</td></tr></table>
</center>
</body>

<!-- Mirrored from www.tutorialspoint.com/unix_system_calls/tux.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:04:21 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
