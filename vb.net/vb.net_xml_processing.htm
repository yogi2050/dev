<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/vb.net/vb.net_xml_processing.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:33:34 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>VB.Net XML Processing</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="VB.Net XML Processing - Learn VB.Net Programming  in simple and easy steps starting from Environment setup, Basic Syntax, Data Types, Type Conversion, Variables, Constants, Operators, Decision Making, Loops, Methods, Arrays, Strings, Subs, File Handling, Exception Handling, Basic Controls, Dialog Boxes, Advanced Forms, Event Handling, Classes, Objects, Web Programming, Database Access, Excel Sheet and XML Processing" />
<meta name="keywords" content="VB.Net, Tutorial, Beginners, Programming,Environment setup, Basic Syntax, Data Types, Type Conversion, Variables, Constants, Operators, Decision Making, Loops, Methods, Arrays, Strings, Subs, File Handling, Exception Handling, Basic Controls, Dialog Boxes, Advanced Forms, Event Handling, Classes, Objects, Web Programming, Database Access, Excel Sheet and XML Processing" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<script type="text/javascript" src="../scripts/lang-vb.js"></script>
<style media="screen" type="text/css">
#header{
background:#eed85f !important;
}
#topmenu
{
background-color:#295479 !important;
}
#leftcol ul.menu li.heading
{
background:#eed85f !important;
border:1px solid #295479 !important;
}
#leftcol, #middlecol, #rightcol {min-height:1300px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/vb.net-mini-logo.png" alt="VB.Net Tutorial" />
</div>
<ul class="menu">
<li class="heading">VB.Net Basic Tutorial</li>
<li><a target="_top" href="index.htm">VB.Net Home</a></li>
<li><a target="_top" href="vb.net_overview.htm">VB.Net - Overview</a></li>
<li><a target="_top" href="vb.net_environment_setup.htm">VB.Net - Environment</a></li>
<li><a target="_top" href="vb.net_program_structure.htm">VB.Net - Program Structure</a></li>
<li><a target="_top" href="vb.net_basic_syntax.htm">VB.Net - Basic Syntax</a></li>
<li><a target="_top" href="vb.net_data_types.htm">VB.Net - Data Types</a></li>
<li><a target="_top" href="vb.net_variables.htm">VB.Net - Variables</a></li>
<li><a target="_top" href="vb.net_constants.htm">VB.Net - Constants</a></li>
<li><a target="_top" href="vb.net_modifiers.htm">VB.Net - Modifiers</a></li>
<li><a target="_top" href="vb.net_statements.htm">VB.Net - Statements</a></li>
<li><a target="_top" href="vb.net_directives.htm">VB.Net - Directives</a></li>
<li><a target="_top" href="vb.net_operators.htm">VB.Net - Operators</a></li>
<li><a target="_top" href="vb.net_decision_making.htm">VB.Net - Decision Making</a></li>
<li><a target="_top" href="vb.net_loops.htm">VB.Net - Loops</a></li>
<li><a target="_top" href="vb.net_strings.htm">VB.Net - Strings</a></li>
<li><a target="_top" href="vb.net_date_time.htm">VB.Net - Date &amp; Time</a></li>
<li><a target="_top" href="vb.net_arrays.htm">VB.Net - Arrays</a></li>
<li><a target="_top" href="vb.net_collections.htm">VB.Net - Collections</a></li>
<li><a target="_top" href="vb.net_functions.htm">VB.Net - Functions</a></li>
<li><a target="_top" href="vb.net_subs.htm">VB.Net - Subs</a></li>
<li><a target="_top" href="vb.net_classes_objects.htm">VB.Net - Classes &amp; Objects</a></li>
<li><a target="_top" href="vb.net_exception_handling.htm">VB.Net - Exception Handling</a></li>
<li><a target="_top" href="vb.net_file_handling.htm">VB.Net - File Handling</a></li>
<li><a target="_top" href="vb.net_basic_controls.htm">VB.Net - Basic Controls</a></li>
<li><a target="_top" href="vb.net_dialog_boxes.htm">VB.Net - Dialog Boxes</a></li>
<li><a target="_top" href="vb.net_advanced_forms.htm">VB.Net - Advanced Forms</a></li>
<li><a target="_top" href="vb.net_event_handling.htm">VB.Net - Event Handling</a></li>
</ul>
<ul class="menu">
<li class="heading">VB.Net Advanced Tutorial</li>
<li><a target="_top" href="vb.net_regular_expressions.htm">VB.Net - Regular Expressions</a></li>
<li><a target="_top" href="vb.net_database_access.htm">VB.Net - Database Access</a></li>
<li><a target="_top" href="vb.net_excel_sheet.htm">VB.Net - Excel Sheet</a></li>
<li><a target="_top" href="vb.net_send_email.htm">VB.Net - Send Email</a></li>
<li><a target="_top" href="vb.net_xml_processing.htm"><b>VB.Net - XML Processing</b></a></li>
<li><a target="_top" href="vb.net_web_programming.htm">VB.Net - Web Programming</a></li>
</ul>
<ul class="menu">
<li class="heading">VB.Net Useful Resources</li>
<li><a target="_top" href="vb.net_quick_guide.htm">VB.Net Quick Guide</a></li>
<li><a target="_top" href="vb.net_useful_resources.htm">VB.Net Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>VB.Net - XML Processing</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="vb.net_send_email.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="vb.net_web_programming.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>The Extensible Markup Language (XML) is a markup language much like HTML or SGML. This is recommended by the World Wide Web Consortium and available as an open standard.</p>
<p>The <b>System.Xml</b> namespace in the .Net Framework contains classes for processing XML documents. Following are some of the commonly used classes in the System.Xml namespace. </p>
<table class="src">
<tr><th style="width:5%;">S.N</th><th style="width:25%;">Class</th><th>Description</th></tr>
<tr><td>1</td><td><b>XmlAttribute</b></td><td>Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.</td></tr>
<tr><td>2</td><td><b>XmlCDataSection</b></td><td>Represents a CDATA section.</td></tr>
<tr><td>3</td><td><b>XmlCharacterData</b></td><td>Provides text manipulation methods that are used by several classes.</td></tr>
<tr><td>4</td><td><b>XmlComment</b></td><td>Represents the content of an XML comment.</td></tr>
<tr><td>5</td><td><b>XmlConvert</b></td><td>Encodes and decodes XML names and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types the values returned are locale independent.</td></tr>
<tr><td>6</td><td><b>XmlDeclaration</b></td><td>Represents the XML declaration node &lt;?xml version='1.0'...?&gt;.</td></tr>
<tr><td>7</td><td><b>XmlDictionary</b></td><td>Implements a dictionary used to optimize Windows Communication Foundation (WCF)'s XML reader/writer implementations.</td></tr>
<tr><td>8</td><td><b>XmlDictionaryReader</b></td><td>An abstract class that the Windows Communication Foundation (WCF) derives from XmlReader to do serialization and deserialization.</td></tr>
<tr><td>9</td><td><b>XmlDictionaryWriter</b></td><td>Represents an abstract class that Windows Communication Foundation (WCF) derives from XmlWriter to do serialization and deserialization.</td></tr>
<tr><td>10</td><td><b>XmlDocument</b></td><td>Represents an XML document.</td></tr>
<tr><td>11</td><td><b>XmlDocumentFragment</b></td><td>Represents a lightweight object that is useful for tree insert operations.</td></tr>
<tr><td>12</td><td><b>XmlDocumentType</b></td><td>Represents the document type declaration.</td></tr>
<tr><td>13</td><td><b>XmlElement</b></td><td>Represents an element.</td></tr>
<tr><td>14</td><td><b>XmlEntity</b></td><td>Represents an entity declaration, such as &lt;!ENTITY... &gt;.</td></tr>
<tr><td>15</td><td><b>XmlEntityReference</b></td><td>Represents an entity reference node.</td></tr>
<tr><td>16</td><td><b>XmlException</b></td><td>Returns detailed information about the last exception.</td></tr>
<tr><td>17</td><td><b>XmlImplementation</b></td><td>Defines the context for a set of XmlDocument objects.</td></tr>
<tr><td>18</td><td><b>XmlLinkedNode</b></td><td>Gets the node immediately preceding or following this node.</td></tr>
<tr><td>19</td><td><b>XmlNode</b></td><td>Represents a single node in the XML document.</td></tr>
<tr><td>20</td><td><b>XmlNodeList</b></td><td>Represents an ordered collection of nodes.</td></tr>
<tr><td>21</td><td><b>XmlNodeReader</b></td><td>Represents a reader that provides fast, non-cached forward only access to XML data in an XmlNode.</td></tr>
<tr><td>22</td><td><b>XmlNotation</b></td><td>Represents a notation declaration, such as &lt;!NOTATION... &gt;.</td></tr>
<tr><td>23</td><td><b>XmlParserContext</b></td><td>Provides all the context information required by the XmlReader to parse an XML fragment.</td></tr>
<tr><td>24</td><td><b>XmlProcessingInstruction</b></td><td>Represents a processing instruction, which XML defines to keep processor-specific information in the text of the document.</td></tr>
<tr><td>25</td><td><b>XmlQualifiedName</b></td><td>Represents an XML qualified name.</td></tr>
<tr><td>26</td><td><b>XmlReader</b></td><td>Represents a reader that provides fast, noncached, forward-only access to XML data.</td></tr>
<tr><td>27</td><td><b>XmlReaderSettings</b></td><td>Specifies a set of features to support on the XmlReader object created by the Create method.</td></tr>
<tr><td>28</td><td><b>XmlResolver</b></td><td>Resolves external XML resources named by a Uniform Resource Identifier (URI).</td></tr>
<tr><td>29</td><td><b>XmlSecureResolver</b></td><td>Helps to secure another implementation of XmlResolver by wrapping the XmlResolver object and restricting the resources that the underlying XmlResolver has access to.</td></tr>
<tr><td>30</td><td><b>XmlSignificantWhitespace</b></td><td>Represents white space between markup in a mixed content node or white space within an xml:space= 'preserve' scope. This is also referred to as significant white space.</td></tr>
<tr><td>31</td><td><b>XmlText</b></td><td>Represents the text content of an element or attribute.</td></tr>
<tr><td>32</td><td><b>XmlTextReader</b></td><td>Represents a reader that provides fast, non-cached, forward-only access to XML data.</td></tr>
<tr><td>33</td><td><b>XmlTextWriter</b></td><td>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</td></tr>
<tr><td>34</td><td><b>XmlUrlResolver</b></td><td>Resolves external XML resources named by a Uniform Resource Identifier (URI).</td></tr>
<tr><td>35</td><td><b>XmlWhitespace</b></td><td>Represents white space in element content.</td></tr>
<tr><td>36</td><td><b>XmlWriter</b></td><td>Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data.</td></tr>
<tr><td>37</td><td><b>XmlWriterSettings</b></td><td>Specifies a set of features to support on the XmlWriter object created by the XmlWriter.Create method.</td></tr>
</table>
<h2>XML Parser APIs</h2>
<p>The two most basic and broadly used APIs to XML data are the SAX and DOM interfaces.</p>
<ul class="list">
<li><p><b>Simple API for XML (SAX)</b> : Here you register callbacks for events of interest and then let the parser proceed through the document. This is useful when your documents are large or you have memory limitations, it parses the file as it reads it from disk, and the entire file is never stored in memory.</p></li>
<li><p><b>Document Object Model (DOM) API</b> : This is World Wide Web Consortium recommendation wherein the entire file is read into memory and stored in a hierarchical (tree-based) form to represent all the features of an XML document.</p></li>
</ul>
<p>SAX obviously can't process information as fast as DOM can when working with large files. On the other hand, using DOM exclusively can really kill your resources, especially if used on a lot of small files.</p>
<p>SAX is read-only, while DOM allows changes to the XML file. Since these two different APIs literally complement each other there is no reason why you can't use them both for large projects.</p>
<p>For all our XML code examples, let's use a simple XML file movies.xml as an input:</p>
<pre class="prettyprint lang-vb">
&lt;?xml version="1.0"?&gt;

&lt;collection shelf="New Arrivals"&gt;
&lt;movie title="Enemy Behind"&gt;
   &lt;type&gt;War, Thriller&lt;/type&gt;
   &lt;format&gt;DVD&lt;/format&gt;
   &lt;year&gt;2003&lt;/year&gt;
   &lt;rating&gt;PG&lt;/rating&gt;
   &lt;stars&gt;10&lt;/stars&gt;
   &lt;description&gt;Talk about a US-Japan war&lt;/description&gt;
&lt;/movie&gt;
&lt;movie title="Transformers"&gt;
   &lt;type&gt;Anime, Science Fiction&lt;/type&gt;
   &lt;format&gt;DVD&lt;/format&gt;
   &lt;year&gt;1989&lt;/year&gt;
   &lt;rating&gt;R&lt;/rating&gt;
   &lt;stars&gt;8&lt;/stars&gt;
   &lt;description&gt;A schientific fiction&lt;/description&gt;
&lt;/movie&gt;
   &lt;movie title="Trigun"&gt;
   &lt;type&gt;Anime, Action&lt;/type&gt;
   &lt;format&gt;DVD&lt;/format&gt;
   &lt;episodes&gt;4&lt;/episodes&gt;
   &lt;rating&gt;PG&lt;/rating&gt;
   &lt;stars&gt;10&lt;/stars&gt;
   &lt;description&gt;Vash the Stampede!&lt;/description&gt;
&lt;/movie&gt;
&lt;movie title="Ishtar"&gt;
   &lt;type&gt;Comedy&lt;/type&gt;
   &lt;format&gt;VHS&lt;/format&gt;
   &lt;rating&gt;PG&lt;/rating&gt;
   &lt;stars&gt;2&lt;/stars&gt;
   &lt;description&gt;Viewable boredom&lt;/description&gt;
&lt;/movie&gt;
&lt;/collection&gt;
</pre>
<h2>Parsing XML with SAX API</h2>
<p>In SAX model, you use the <b>XmlReader</b> and <b>XmlWriter</b> classes to work with the XML data. </p>
<p>The <b>XmlReader</b> class is used to read XML data in a fast, forward-only and non-cached manner. It reads an XML document or a stream. </p>
<h2>Example 1</h2>
<p>This example demonstrates reading XML data from the file movies.xml.</p>
<p>Take the following steps:</p>
<ol class="list">
<li><p>Add the movies.xml file in the bin\Debug folder of your application.</p></li>
<li><p>Import the System.Xml namespace in Form1.vb file.</p></li>
<li><p>Add a label in the form and change its text to 'Movies Galore'.</p></li>
<li><p>Add three list boxes and three buttons to show the title, type and description of a movie from the xml file.</p></li>
<li><p>Add the following code using the code editor window.</p></li>
</ol>
<pre class="prettyprint lang-vb">
Imports System.Xml
Public Class Form1

   Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
      ' Set the caption bar text of the form.   
      Me.Text = "tutorialspoint.com"
   End Sub
   Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
      ListBox1().Items.Clear()
      Dim xr As XmlReader = XmlReader.Create("movies.xml")
      Do While xr.Read()
          If xr.NodeType = XmlNodeType.Element AndAlso xr.Name = "movie" Then
              ListBox1.Items.Add(xr.GetAttribute(0))
          End If
      Loop
   End Sub
   Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
      ListBox2().Items.Clear()
      Dim xr As XmlReader = XmlReader.Create("movies.xml")
      Do While xr.Read()
          If xr.NodeType = XmlNodeType.Element AndAlso xr.Name = "type" Then
              ListBox2.Items.Add(xr.ReadElementString)
          Else
              xr.Read()
          End If
      Loop
   End Sub
   Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
      ListBox3().Items.Clear()
      Dim xr As XmlReader = XmlReader.Create("movies.xml")
      Do While xr.Read()
          If xr.NodeType = XmlNodeType.Element AndAlso xr.Name = "description" Then
              ListBox3.Items.Add(xr.ReadElementString)
          Else
              xr.Read()
          End If
      Loop
   End Sub
End Class
</pre>
<p>Execute and run the above code using <b>Start</b> button available at the Microsoft Visual Studio tool bar. Clicking on the buttons would display, title, type and description of the movies from the file.</p>
<img src="images/vb.net_xml_processing1.jpg" width="439" height="300" border="0" alt="VB.Net XML Processing Example 1">

<p>The <b>XmlWriter</b> class is used to write XML data into a stream, a file or a TextWriter object. It also works in a forward-only, non-cached manner. </p>
<h2>Example 2</h2>
<p>Let us create an XML file by adding some data at runtime. Take the following steps:</p>
<ol class="list">
<li><p>Add a WebBrowser control and a button control in the form.</p></li>
<li><p>Change the Text property of the button to Show Authors File.</p></li>
<li><p>Add the following code in the code editor.</p></li>
</ol>
<pre class="prettyprint lang-vb">
Imports System.Xml
Public Class Form1
   Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
      ' Set the caption bar text of the form.   
      Me.Text = "tutorialspoint.com"
   End Sub
   Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
      Dim xws As XmlWriterSettings = New XmlWriterSettings()
      xws.Indent = True
      xws.NewLineOnAttributes = True
      Dim xw As XmlWriter = XmlWriter.Create("authors.xml", xws)
      xw.WriteStartDocument()
      xw.WriteStartElement("Authors")
      xw.WriteStartElement("author")
      xw.WriteAttributeString("code", "1")
      xw.WriteElementString("fname", "Zara")
      xw.WriteElementString("lname", "Ali")
      xw.WriteEndElement()
      xw.WriteStartElement("author")
      xw.WriteAttributeString("code", "2")
      xw.WriteElementString("fname", "Priya")
      xw.WriteElementString("lname", "Sharma")
      xw.WriteEndElement()
      xw.WriteStartElement("author")
      xw.WriteAttributeString("code", "3")
      xw.WriteElementString("fname", "Anshuman")
      xw.WriteElementString("lname", "Mohan")
      xw.WriteEndElement()
      xw.WriteStartElement("author")
      xw.WriteAttributeString("code", "4")
      xw.WriteElementString("fname", "Bibhuti")
      xw.WriteElementString("lname", "Banerjee")
      xw.WriteEndElement()
      xw.WriteStartElement("author")
      xw.WriteAttributeString("code", "5")
      xw.WriteElementString("fname", "Riyan")
      xw.WriteElementString("lname", "Sengupta")
      xw.WriteEndElement()
      xw.WriteEndElement()
      xw.WriteEndDocument()
      xw.Flush()
      xw.Close()
      WebBrowser1.Url = New Uri(AppDomain.CurrentDomain.BaseDirectory + "authors.xml")
   End Sub
End Class
</pre>
<p>Execute and run the above code using <b>Start</b> button available at the Microsoft Visual Studio tool bar. Clicking on the Show Author File would display the newly created authors.xml file on the web browser.</p>
<img src="images/vb.net_xml_processing2.jpg" width="358" height="403" border="0" alt="VB.Net XML Processing Example 2">
<h2>Parsing XML with DOM API</h2>
<p>According to the Document Object Model (DOM), an XML document consists of nodes and attributes of the nodes. The <b>XmlDocument</b> class is used to implement the XML DOM parser of the .Net Framework. It also allows you to modify an existing XML document by inserting, deleting or updating data in the document. </p>
<p>Following are some of the commonly used methods of the <b>XmlDocument</b> class:</p>
<table class="src">
<tr><th style="width:5%;">S.N</th><th>Method Name &amp; Description</th></tr>
<tr><td>1</td><td><b>AppendChild</b><br>Adds the specified node to the end of the list of child nodes, of this node.</td></tr>
<tr><td>2</td><td><b>CreateAttribute(String)</b><br> Creates an XmlAttribute with the specified Name. </td></tr>
<tr><td>3</td><td><b>CreateComment</b><br> Creates an XmlComment containing the specified data.</td></tr>
<tr><td>4</td><td><b>CreateDefaultAttribute</b><br> Creates a default attribute with the specified prefix, local name and namespace URI.</td></tr>
<tr><td>5</td><td><b>CreateElement(String)</b><br>Creates an element with the specified name.</td></tr>
<tr><td>6</td><td><b>CreateNode(String, String, String)</b><br> Creates an XmlNode with the specified node type, Name, and NamespaceURI.</td></tr>
<tr><td>7</td><td><b>CreateNode(XmlNodeType, String, String)</b><br>Creates an XmlNode with the specified XmlNodeType, Name, and NamespaceURI.</td></tr>
<tr><td>8</td><td><b>CreateNode(XmlNodeType, String, String, String)</b><br>Creates a XmlNode with the specified XmlNodeType, Prefix, Name, and NamespaceURI.      </td></tr>
<tr><td>9</td><td><b>CreateProcessingInstruction</b><br>Creates an XmlProcessingInstruction with the specified name and data.</td></tr>
<tr><td>10</td><td><b>CreateSignificantWhitespace</b><br>Creates an XmlSignificantWhitespace node. </td></tr>
<tr><td>11</td><td><b>CreateTextNode</b><br>Creates an XmlText with the specified text. </td></tr>
<tr><td>12</td><td><b>CreateWhitespace</b><br>Creates an XmlWhitespace node.</td></tr>
<tr><td>13</td><td><b>CreateXmlDeclaration</b><br>Creates an XmlDeclaration node with the specified values.</td></tr>
<tr><td>14</td><td><b>GetElementById</b><br>Gets the XmlElement with the specified ID.</td></tr>
<tr><td>15</td><td><b>GetElementsByTagName(String)</b><br> Returns an XmlNodeList containing a list of all descendant elements that match the specified Name.     </td></tr>
<tr><td>16</td><td><b>GetElementsByTagName(String, String)</b><br> Returns an XmlNodeList containing a list of all descendant elements that match the specified LocalName and NamespaceURI. </td></tr>
<tr><td>17</td><td><b>InsertAfter</b><br>Inserts the specified node immediately after the specified reference node.</td></tr>
<tr><td>18</td><td><b>InsertBefore</b><br>Inserts the specified node immediately before the specified reference node.</td></tr>
<tr><td>19</td><td><b>Load(Stream)</b><br>Loads the XML document from the specified stream.</td></tr>
<tr><td>20</td><td><b>Load(String)</b><br>Loads the XML document from the specified URL. </td></tr>
<tr><td>21</td><td><b>Load(TextReader)</b><br>Loads the XML document from the specified TextReader.</td></tr>
<tr><td>22</td><td><b>Load(XmlReader)</b><br>Loads the XML document from the specified XmlReader.</td></tr>
<tr><td>23</td><td><b>LoadXml</b><br>Loads the XML document from the specified string. </td></tr>
<tr><td>24</td><td><b>PrependChild</b><br>Adds the specified node to the beginning of the list of child nodes for this node.</td></tr>
<tr><td>25</td><td><b>ReadNode</b><br>Creates an XmlNode object based on the information in the XmlReader. The reader must be positioned on a node or attribute.     </td></tr>
<tr><td>26</td><td><b>RemoveAll</b><br>Removes all the child nodes and/or attributes of the current node. </td></tr>
<tr><td>27</td><td><b>RemoveChild</b><br>Removes specified child node. </td></tr>
<tr><td>28</td><td><b>ReplaceChild</b><br>Replaces the child node oldChild with newChild node. </td></tr>
<tr><td>29</td><td><b>Save(Stream)</b><br>Saves the XML document to the specified stream.</td></tr>
<tr><td>30</td><td><b>Save(String)</b><br>Saves the XML document to the specified file.</td></tr>
<tr><td>31</td><td><b>Save(TextWriter)</b><br> Saves the XML document to the specified TextWriter. </td></tr>
<tr><td>32</td><td><b>Save(XmlWriter)</b><br> Saves the XML document to the specified XmlWriter.</td></tr>
</table>
<h2>Example 3</h2>
<p>In this example, let us insert some new nodes in the xml document authors.xml and then show all the authors' first names in a list box.</p>
<p>Take the following steps:</p>
<ul class="list">
<li><p>Add the authors.xml file in the bin/Debug folder of your application( it should be there if you have tried the last example)</p></li>
<li><p>Import the System.Xml namespace</p></li>
<li><p>Add a list box and a button control in the form and set the text property of the button control to Show Authors.</p></li>
<li><p>Add the following code using the code editor. </p></li>
</ul>
<pre class="prettyprint lang-vb">
Imports System.Xml
Public Class Form1
   Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
      ' Set the caption bar text of the form.   
      Me.Text = "tutorialspoint.com"
   End Sub
   Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
      ListBox1.Items.Clear()
      Dim xd As XmlDocument = New XmlDocument()
      xd.Load("authors.xml")
      Dim newAuthor As XmlElement = xd.CreateElement("author")
      newAuthor.SetAttribute("code", "6")
      Dim fn As XmlElement = xd.CreateElement("fname")
      fn.InnerText = "Bikram"
      newAuthor.AppendChild(fn)
      Dim ln As XmlElement = xd.CreateElement("lname")
      ln.InnerText = "Seth"
      newAuthor.AppendChild(ln)
      xd.DocumentElement.AppendChild(newAuthor)
      Dim tr As XmlTextWriter = New XmlTextWriter("movies.xml", Nothing)
      tr.Formatting = Formatting.Indented
      xd.WriteContentTo(tr)
      tr.Close()
      Dim nl As XmlNodeList = xd.GetElementsByTagName("fname")
      For Each node As XmlNode In nl
          ListBox1.Items.Add(node.InnerText)
      Next node
   End Sub
End Class
</pre>
<p>Execute and run the above code using <b>Start</b> button available at the Microsoft Visual Studio tool bar. Clicking on the Show Author button would display the first names of all the authors including the one we have added at runtime. </p>
<img src="images/vb.net_xml_processing3.jpg" width="248" height="311" border="0" alt="VB.Net XML Processing Example 3">

<hr />
<div class="pre-btn">
<a href="vb.net_send_email.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/vb.net_xml_processing.pdf" alt="VB.Net XML Processing" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="vb.net_web_programming.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2012 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/vb.net/vb.net_xml_processing.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:33:43 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>