<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/vb.net/vb.net_classes_objects.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:32:17 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>VB.Net Classes &amp; Objects</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="VB.Net Classes &amp; Objects - Learn VB.Net Programming  in simple and easy steps starting from Environment setup, Basic Syntax, Data Types, Type Conversion, Variables, Constants, Operators, Decision Making, Loops, Methods, Arrays, Strings, Subs, File Handling, Exception Handling, Basic Controls, Dialog Boxes, Advanced Forms, Event Handling, Classes, Objects, Web Programming, Database Access, Excel Sheet and XML Processing" />
<meta name="keywords" content="VB.Net, Tutorial, Beginners, Programming,Environment setup, Basic Syntax, Data Types, Type Conversion, Variables, Constants, Operators, Decision Making, Loops, Methods, Arrays, Strings, Subs, File Handling, Exception Handling, Basic Controls, Dialog Boxes, Advanced Forms, Event Handling, Classes, Objects, Web Programming, Database Access, Excel Sheet and XML Processing" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<script type="text/javascript" src="../scripts/lang-vb.js"></script>
<style media="screen" type="text/css">
#header{
background:#eed85f !important;
}
#topmenu
{
background-color:#295479 !important;
}
#leftcol ul.menu li.heading
{
background:#eed85f !important;
border:1px solid #295479 !important;
}
#leftcol, #middlecol, #rightcol {min-height:1300px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/vb.net-mini-logo.png" alt="VB.Net Tutorial" />
</div>
<ul class="menu">
<li class="heading">VB.Net Basic Tutorial</li>
<li><a target="_top" href="index.htm">VB.Net Home</a></li>
<li><a target="_top" href="vb.net_overview.htm">VB.Net - Overview</a></li>
<li><a target="_top" href="vb.net_environment_setup.htm">VB.Net - Environment</a></li>
<li><a target="_top" href="vb.net_program_structure.htm">VB.Net - Program Structure</a></li>
<li><a target="_top" href="vb.net_basic_syntax.htm">VB.Net - Basic Syntax</a></li>
<li><a target="_top" href="vb.net_data_types.htm">VB.Net - Data Types</a></li>
<li><a target="_top" href="vb.net_variables.htm">VB.Net - Variables</a></li>
<li><a target="_top" href="vb.net_constants.htm">VB.Net - Constants</a></li>
<li><a target="_top" href="vb.net_modifiers.htm">VB.Net - Modifiers</a></li>
<li><a target="_top" href="vb.net_statements.htm">VB.Net - Statements</a></li>
<li><a target="_top" href="vb.net_directives.htm">VB.Net - Directives</a></li>
<li><a target="_top" href="vb.net_operators.htm">VB.Net - Operators</a></li>
<li><a target="_top" href="vb.net_decision_making.htm">VB.Net - Decision Making</a></li>
<li><a target="_top" href="vb.net_loops.htm">VB.Net - Loops</a></li>
<li><a target="_top" href="vb.net_strings.htm">VB.Net - Strings</a></li>
<li><a target="_top" href="vb.net_date_time.htm">VB.Net - Date &amp; Time</a></li>
<li><a target="_top" href="vb.net_arrays.htm">VB.Net - Arrays</a></li>
<li><a target="_top" href="vb.net_collections.htm">VB.Net - Collections</a></li>
<li><a target="_top" href="vb.net_functions.htm">VB.Net - Functions</a></li>
<li><a target="_top" href="vb.net_subs.htm">VB.Net - Subs</a></li>
<li><a target="_top" href="vb.net_classes_objects.htm"><b>VB.Net - Classes &amp; Objects</b></a></li>
<li><a target="_top" href="vb.net_exception_handling.htm">VB.Net - Exception Handling</a></li>
<li><a target="_top" href="vb.net_file_handling.htm">VB.Net - File Handling</a></li>
<li><a target="_top" href="vb.net_basic_controls.htm">VB.Net - Basic Controls</a></li>
<li><a target="_top" href="vb.net_dialog_boxes.htm">VB.Net - Dialog Boxes</a></li>
<li><a target="_top" href="vb.net_advanced_forms.htm">VB.Net - Advanced Forms</a></li>
<li><a target="_top" href="vb.net_event_handling.htm">VB.Net - Event Handling</a></li>
</ul>
<ul class="menu">
<li class="heading">VB.Net Advanced Tutorial</li>
<li><a target="_top" href="vb.net_regular_expressions.htm">VB.Net - Regular Expressions</a></li>
<li><a target="_top" href="vb.net_database_access.htm">VB.Net - Database Access</a></li>
<li><a target="_top" href="vb.net_excel_sheet.htm">VB.Net - Excel Sheet</a></li>
<li><a target="_top" href="vb.net_send_email.htm">VB.Net - Send Email</a></li>
<li><a target="_top" href="vb.net_xml_processing.htm">VB.Net - XML Processing</a></li>
<li><a target="_top" href="vb.net_web_programming.htm">VB.Net - Web Programming</a></li>
</ul>
<ul class="menu">
<li class="heading">VB.Net Useful Resources</li>
<li><a target="_top" href="vb.net_quick_guide.htm">VB.Net Quick Guide</a></li>
<li><a target="_top" href="vb.net_useful_resources.htm">VB.Net Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>VB.Net - Classes &amp; Objects</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="vb.net_subs.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="vb.net_exception_handling.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>When you define a class, you define a blueprint for a data type. This doesn't actually define any data, but it does define what the class name means, that is, what an object of the class will consist of and what operations can be performed on such an object. </p>
<p>Objects are instances of a class. The methods and variables that constitute a class are called members of the class.</p>
<h2>Class Definition</h2>
<p>A class definition starts with the keyword <b>Class</b> followed by the class name; and the class body, ended by the End Class statement. Following is the general form of a class definition:</p>
<pre class="prettyprint lang-vb">
[ &lt;attributelist&gt; ] [ accessmodifier ] [ Shadows ] [ MustInherit | NotInheritable ] [ Partial ] _
Class name [ ( Of typelist ) ]
    [ Inherits classname ]
    [ Implements interfacenames ]
    [ statements ]
End Class
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b><i>attributelist</i></b> is a list of attributes that apply to the class. Optional. </p></li>
<li><p><b><i>accessmodifier</i></b> defines the access levels of the class, it has values as - Public, Protected, Friend, Protected Friend and Private. Optional. </p></li>
<li><p><b><i>Shadows</i></b> indicate that the variable re-declares and hides an identically named element, or set of overloaded elements, in a base class. Optional. </p></li>
<li><p><b><i>MustInherit</i></b> specifies that the class can be used only as a base class and that you cannot create an object directly from it, i.e, an abstract class. Optional.</p></li>
<li><p><b><i>NotInheritable</i></b> specifies that the class cannot be used as a base class.</p></li>
<li><p><b><i>Partia</i></b>l indicates a partial definition of the class</p></li>
<li><p><b><i>Inherits</i></b> specifies the base class it is inheriting from</p></li>
<li><p><b><i>Implements</i></b> specifies the interfaces the class is inheriting from</p></li>
</ul>
<p>The following example demonstrates a Box class, with three data members, length, breadth and height:</p>
<pre class="prettyprint lang-vb">
Module mybox
   Class Box
      Public length As Double   ' Length of a box
      Public breadth As Double   ' Breadth of a box
      Public height As Double    ' Height of a box
   End Class
   Sub Main()
      Dim Box1 As Box = New Box()        ' Declare Box1 of type Box
      Dim Box2 As Box = New Box()        ' Declare Box2 of type Box
      Dim volume As Double = 0.0     ' Store the volume of a box here
      ' box 1 specification
      Box1.height = 5.0
      Box1.length = 6.0
      Box1.breadth = 7.0
       ' box 2 specification
      Box2.height = 10.0
      Box2.length = 12.0	
      Box2.breadth = 13.0
      'volume of box 1
      volume = Box1.height * Box1.length * Box1.breadth
      Console.WriteLine("Volume of Box1 : {0}", volume)
      'volume of box 2
      volume = Box2.height * Box2.length * Box2.breadth
      Console.WriteLine("Volume of Box2 : {0}", volume)
      Console.ReadKey()
   End Sub
End Module
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="result">
Volume of Box1 : 210
Volume of Box2 : 1560
</pre>
<h2>Member Functions and Encapsulation</h2>
<p>A member function of a class is a function that has its definition or its prototype within the class definition like any other variable. It operates on any object of the class of which it is a member, and has access to all the members of a class for that object. </p>
<p>Member variables are attributes of an object (from design perspective) and they are kept private to implement encapsulation. These variables can only be accessed using the public member functions. </p>
<p>Let us put above concepts to set and get the value of different class members in a class:</p>
<pre class="prettyprint lang-vb">
Module mybox
   Class Box
      Public length As Double   ' Length of a box
      Public breadth As Double   ' Breadth of a box
      Public height As Double    ' Height of a box
      Public Sub setLength(ByVal len As Double)
          length = len
      End Sub
      Public Sub setBreadth(ByVal bre As Double)
          breadth = bre
      End Sub
      Public Sub setHeight(ByVal hei As Double)
          height = hei
      End Sub
      Public Function getVolume() As Double
          Return length * breadth * height
      End Function
   End Class
   Sub Main()
      Dim Box1 As Box = New Box()        ' Declare Box1 of type Box
      Dim Box2 As Box = New Box()        ' Declare Box2 of type Box
      Dim volume As Double = 0.0     ' Store the volume of a box here

     ' box 1 specification
      Box1.setLength(6.0)
      Box1.setBreadth(7.0)
      Box1.setHeight(5.0)
      
      'box 2 specification
      Box2.setLength(12.0)
      Box2.setBreadth(13.0)
      Box2.setHeight(10.0)
      
      ' volume of box 1
      volume = Box1.getVolume()
      Console.WriteLine("Volume of Box1 : {0}", volume)

      'volume of box 2
      volume = Box2.getVolume()
      Console.WriteLine("Volume of Box2 : {0}", volume)
      Console.ReadKey()
   End Sub
End Module
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="result">
Volume of Box1 : 210
Volume of Box2 : 1560
</pre>
<h2>Constructors and Destructors</h2>
<p>A class <b>constructor</b> is a special member Sub of a class that is executed whenever we create new objects of that class. A constructor has the name <b>New</b> and it does not have any return type.</p>
<p>Following program explain the concept of constructor:</p>
<pre class="prettyprint lang-vb">
Class Line
   Private length As Double    ' Length of a line
   Public Sub New()   'constructor
      Console.WriteLine("Object is being created")
   End Sub
   Public Sub setLength(ByVal len As Double)
      length = len
   End Sub
     
   Public Function getLength() As Double
      Return length
   End Function
   Shared Sub Main()
      Dim line As Line = New Line()
      'set line length
      line.setLength(6.0)
      Console.WriteLine("Length of line : {0}", line.getLength())
      Console.ReadKey()
   End Sub
End Class
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="result">
Object is being created
Length of line : 6
</pre>
<p>A default constructor does not have any parameter but if you need a constructor can have parameters. Such constructors are called <b>parameterized constructors</b>. This technique helps you to assign initial value to an object at the time of its creation as shown in the following example:</p>
<pre class="prettyprint lang-vb">
Class Line
   Private length As Double    ' Length of a line
   Public Sub New(ByVal len As Double)   'parameterised constructor
      Console.WriteLine("Object is being created, length = {0}", len)
      length = len
   End Sub
   Public Sub setLength(ByVal len As Double)
      length = len
   End Sub
       
   Public Function getLength() As Double
      Return length
   End Function
   Shared Sub Main()
      Dim line As Line = New Line(10.0)
      Console.WriteLine("Length of line set by constructor : {0}", line.getLength())
      'set line length
      line.setLength(6.0)
      Console.WriteLine("Length of line set by setLength : {0}", line.getLength())
      Console.ReadKey()
   End Sub
End Class
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="result">
Object is being created, length = 10
Length of line set by constructor : 10
Length of line set by setLength : 6
</pre>
<p>A <b>destructor</b> is a special member Sub of a class that is executed whenever an object of its class goes out of scope.</p>
<p>A <b>destructor</b> has the name <b>Finalize</b> and it can neither return a value nor can it take any parameters. Destructor can be very useful for releasing resources before coming out of the program like closing files, releasing memories etc.</p>
<p>Destructors cannot be inherited or overloaded. </p>
<p>Following example explain the concept of destructor:</p>
<pre class="prettyprint lang-vb">
Class Line
   Private length As Double    ' Length of a line
   Public Sub New()   'parameterised constructor
      Console.WriteLine("Object is being created")
   End Sub
   Protected Overrides Sub Finalize()  ' destructor
      Console.WriteLine("Object is being deleted")
   End Sub
   Public Sub setLength(ByVal len As Double)
      length = len
   End Sub
   Public Function getLength() As Double
      Return length
   End Function
   Shared Sub Main()
      Dim line As Line = New Line()
      'set line length
      line.setLength(6.0)
      Console.WriteLine("Length of line : {0}", line.getLength())
      Console.ReadKey()
   End Sub
End Class
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="result">
Object is being created
Length of line : 6
Object is being deleted
</pre>
<h2>Shared Members of a VB.Net Class</h2>
<p>We can define class members as static using the Shared keyword. When we declare a member of a class as Shared it means no matter how many objects of the class are created, there is only one copy of the member.</p>
<p>The keyword <b>Shared</b> implies that only one instance of the member exists for a class. Shared variables are used for defining constants because their values can be retrieved by invoking the class without creating an instance of it. </p>
<p>Shared variables can be initialized outside the member function or class definition. You can also initialize Shared variables inside the class definition. </p>
<p>You can also declare a member function as Shared. Such functions can access only Shared variables. The Shared functions exist even before the object is created. </p>
<p>The following example demonstrates the use of shared members:</p>
<pre class="prettyprint lang-vb">
Class StaticVar
   Public Shared num As Integer
   Public Sub count()
      num = num + 1
   End Sub
   Public Shared Function getNum() As Integer
      Return num
   End Function
   Shared Sub Main()
      Dim s As StaticVar = New StaticVar()
      s.count()
      s.count()
      s.count()
      Console.WriteLine("Value of variable num: {0}", StaticVar.getNum())
      Console.ReadKey()
   End Sub
End Class
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="result">
Value of variable num: 3
</pre>
<h2>Inheritance</h2>
<p>One of the most important concepts in object-oriented programming is that of inheritance. Inheritance allows us to define a class in terms of another class, which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and fast implementation time.</p>
<p>When creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the <b>base</b> class, and the new class is referred to as the <b>derived</b> class.</p>
<h2>Base &amp; Derived Classes:</h2>
<p>A class can be derived from more than one class or interface, which means that it can inherit data and functions from multiple base class or interface. </p>
<p>The syntax used in VB.Net for creating derived classes is as follows:</p>
<pre class="prettyprint lang-vb">
&lt;access-specifier&gt; Class &lt;base_class&gt;
...
End Class
Class &lt;derived_class&gt;: Inherits &lt;base_class&gt;
...
End Class
</pre>
<p>Consider a base class Shape and its derived class Rectangle:</p>
<pre class="prettyprint lang-vb">
' Base class
Class Shape
   Protected width As Integer
   Protected height As Integer
   Public Sub setWidth(ByVal w As Integer)
      width = w
   End Sub
   Public Sub setHeight(ByVal h As Integer)
      height = h
   End Sub
End Class
' Derived class
Class Rectangle : Inherits Shape
   Public Function getArea() As Integer
      Return (width * height)
   End Function
End Class
Class RectangleTester
   Shared Sub Main()
      Dim rect As Rectangle = New Rectangle()
      rect.setWidth(5)
      rect.setHeight(7)
      ' Print the area of the object.
      Console.WriteLine("Total area: {0}", rect.getArea())
      Console.ReadKey()
   End Sub	
End Class
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="result">
Total area: 35
</pre>
<h2>Base Class Initialization</h2>
<p>The derived class inherits the base class member variables and member methods. Therefore the super class object should be created before the subclass is created. The super class or the base class is implicitly known as <b>MyBase</b> in VB.Net</p>
<p>The following program demonstrates this:</p>
<pre class="prettyprint lang-vb">
' Base class
Class Rectangle
   Protected width As Double
   Protected length As Double
   Public Sub New(ByVal l As Double, ByVal w As Double)
      length = l
      width = w
   End Sub
   Public Function GetArea() As Double
      Return (width * length)
   End Function
   Public Overridable Sub Display()
      Console.WriteLine("Length: {0}", length)
      Console.WriteLine("Width: {0}", width)
      Console.WriteLine("Area: {0}", GetArea())
   End Sub
   'end class Rectangle  
End Class
'Derived class
Class Tabletop : Inherits Rectangle
   Private cost As Double
   Public Sub New(ByVal l As Double, ByVal w As Double)
      MyBase.New(l, w)
   End Sub
   Public Function GetCost() As Double
      Dim cost As Double
      cost = GetArea() * 70
      Return cost
   End Function
   Public Overrides Sub Display()
      MyBase.Display()
      Console.WriteLine("Cost: {0}", GetCost())
   End Sub
    'end class Tabletop
End Class
Class RectangleTester
   Shared Sub Main()
      Dim t As Tabletop = New Tabletop(4.5, 7.5)
      t.Display()
      Console.ReadKey()
   End Sub
End Class
</pre>
<p>When the above code is compiled and executed, it produces following result:</p>
<pre class="result">
Length: 4.5
Width: 7.5
Area: 33.75
Cost: 2362.5
</pre>
<p>VB.Net supports multiple inheritance.</p>
<hr />
<div class="pre-btn">
<a href="vb.net_subs.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/vb.net_classes_objects.pdf" alt="VB.Net Classes &amp; Objects" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="vb.net_exception_handling.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2012 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/vb.net/vb.net_classes_objects.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:32:19 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
