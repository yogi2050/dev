<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/spring/schema_based_aop_appoach.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:06:48 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>XML Schema Based AOP with Spring</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="XML Schema Based AOP with Spring - Learn Java Spring Framework version 3.1.0 starting from environment setup, inversion of control (IoC), dependency injection, bean scopes, bean life cycle, inner beans, autowiring, different modules, aspect oriented programming (AOP), database access (JDBC), Transaction Management, Web MVC framework, Web Flow, Exception handling, EJB integration and Sending email etc." />
<meta name="keywords" content="Free, Spring, Tutorials, beginners, Framework, Web Flow,  Reference, Manual, Guide, transaction, Management" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
/* Spring Scheme */
#header{ 
   background:#c1cc22 !important;
}
#topmenu
{
   background-color:#387b2c !important;
}
#leftcol ul.menu li.heading 
{
   background:#c1cc22 !important;
   border:1px solid #387b2c !important;
}
#leftcol, #middlecol, #rightcol {min-height:1300px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
   _uacct = "UA-232293-6";
   urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index-2.html">Tutorials Point Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index-2.html" target="_top">HOME </a>
<a href="../java/index.html" target="_top">JAVA </a>
<a href="../php/index.html" target="_top">PHP </a>
<a href="../python/index.html" target="_top">Python </a>
<a href="../ruby/index.html" target="_top">Ruby </a>
<a href="../perl/index.html" target="_top">Perl </a>
<a href="../html/index.html" target="_top">HTML </a>
<a href="../css/index.html" target="_top">CSS </a>
<a href="../javascript/index.html" target="_top">Javascript </a>
<a href="../mysql/index.html" target="_top">MySQL </a>
<a href="../cplusplus/index.html" target="_top">C++ </a>
<a href="../unix/index.html" target="_top">UNIX </a>
<a href="../more.html" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.html" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.html" target="_top">ABOUT</a> |
<a href="../about/contact_us.html" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/spring-mini-logo.png" alt="Spring tutorial" />
</div>
<ul class="menu">
<li class="heading">Spring Core Basics</li>
<li><a target="_top" href="index.html">Home</a></li>
<li><a target="_top" href="spring_overview.html">Overview</a></li>
<li><a target="_top" href="spring_architecture.html">Architecture</a></li>
<li><a target="_top" href="spring_environment_setup.html">Environment Setup</a></li>
<li><a target="_top" href="spring_hello_world_example.html">Hello World Example</a></li>
<li><a target="_top" href="spring_ioc_containers.html">IoC Containers</a></li>
<li><a target="_top" href="spring_bean_definition.html">Bean Definition</a></li>
<li><a target="_top" href="spring_bean_scopes.html">Bean Scopes</a></li>
<li><a target="_top" href="spring_bean_life_cycle.html">Bean Life Cycle</a></li>
<li><a target="_top" href="spring_bean_post_processors.html">Bean Post Processors</a></li>
<li><a target="_top" href="spring_bean_definition_inheritance.html">Bean Definition Inheritance</a></li>
<li><a target="_top" href="spring_dependency_injection.html">Dependency Injection</a></li>
<li><a target="_top" href="spring_injecting_inner_beans.html">Injecting Inner Beans</a></li>
<li><a target="_top" href="spring_injecting_collection.html">Injecting Collection</a></li>
<li><a target="_top" href="spring_beans_autowiring.html">Spring Beans Auto-Wiring</a></li>
<li><a target="_top" href="spring_annotation_based_configuration.html">Annotation Based Configuration</a></li>
<li><a target="_top" href="spring_java_based_configuration.html">Java Based Configuration</a></li>
<li><a target="_top" href="event_handling_in_spring.html">Event Handling in Spring</a></li>
<li><a target="_top" href="custom_events_in_spring.html">Custom Events in Spring</a></li>
<li><a target="_top" href="aop_with_spring.html"><b>AOP with Spring Framework</b></a></li>
<li><a target="_top" href="spring_jdbc_framework.html">Spring JDBC Framework</a></li>
<li><a target="_top" href="spring_transaction_management.html">Transaction Management</a></li>
<li><a target="_top" href="spring_web_mvc_framework.html">Spring Web MVC Framework</a></li>
<li><a target="_top" href="logging_with_log4j.html">Spring Logging with Log4J</a></li>
</ul>
<ul class="menu">
<li class="heading">Spring Useful Resources</li>
<li><a target="_top" href="spring_quick_guide.html">Spring Quick Guide</a></li>
<li><a target="_top" href="spring_useful_resources.html">Spring Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.html">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.html">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.html">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>XML Schema Based AOP with Spring</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="aop_with_spring.html">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="aop_with_spring.html">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>To use the aop namespace tags described in this section, you need to import the spring-aop schema as described below:</p>
<pre class="prettyprint">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "&gt;

   &lt;!-- bean definition &amp; AOP specific configuration --&gt;

&lt;/beans&gt;
</pre>
<p>You will also need following AspectJ libraries on the CLASSPATH of your application. These libraries are available in the 'lib' directory of an AspectJ installation, otherwise you can download them from the internet.</p>
<ul class="list">
<li><p>aspectjrt.jar</p></li>
<li><p>aspectjweaver.jar</p></li>
<li><p>aspectj.jar</p></li>
</ul>
<h2>Declaring an aspect</h2>
<p>An <b>aspect</b> is declared using the <b>&lt;aop:aspect&gt;</b> element, and the backing bean is referenced using the <b>ref</b> attribute as follows:</p>
<pre class="prettyprint">
&lt;aop:config&gt;
   &lt;aop:aspect id="myAspect" ref="aBean"&gt;
   ...
   &lt;/aop:aspect&gt;
&lt;/aop:config&gt;

&lt;bean id="aBean" class="..."&gt;
...
&lt;/bean&gt;
</pre>
<p>Here "aBean" will be configured and dependency injected just like any other Spring bean as you have seen in previous chapters.</p>
<h2>Declaring a pointcut</h2>
<p>A <b>pointcut</b> helps in determining the join points (ie methods) of interest to be executed with different advices. While working with XML Schema based configuration, pointcut will be defined as follows:</p>
<pre class="prettyprint">
&lt;aop:config&gt;
   &lt;aop:aspect id="myAspect" ref="aBean"&gt;

   &lt;aop:pointcut id="businessService"
      expression="execution(* com.xyz.myapp.service.*.*(..))"/&gt;
   ...
   &lt;/aop:aspect&gt;
&lt;/aop:config&gt;

&lt;bean id="aBean" class="..."&gt;
...
&lt;/bean&gt;
</pre>
<p>The following example defines a pointcut named 'businessService' that will match the execution of getName() method available in Student class under the package com.tutorialspoint:</p>
<pre class="prettyprint">
&lt;aop:config&gt;
   &lt;aop:aspect id="myAspect" ref="aBean"&gt;

   &lt;aop:pointcut id="businessService"
      expression="execution(* com.tutorialspoint.Student.getName(..))"/&gt;
   ...
   &lt;/aop:aspect&gt;
&lt;/aop:config&gt;

&lt;bean id="aBean" class="..."&gt;
...
&lt;/bean&gt;
</pre>
<h2>Declaring advices</h2>
<p>You can declare any of the five advices inside an &lt;aop:aspect&gt; using the &lt;aop:{ADVICE NAME}&gt; element as given below:</p>
<pre class="prettyprint">
&lt;aop:config&gt;
   &lt;aop:aspect id="myAspect" ref="aBean"&gt;
      &lt;aop:pointcut id="businessService"
         expression="execution(* com.xyz.myapp.service.*.*(..))"/&gt;

      &lt;!-- a before advice definition --&gt;
      &lt;aop:before pointcut-ref="businessService" 
         method="doRequiredTask"/&gt;

      &lt;!-- an after advice definition --&gt;
      &lt;aop:after pointcut-ref="businessService" 
         method="doRequiredTask"/&gt;

      &lt;!-- an after-returning advice definition --&gt;
      &lt;!--The doRequiredTask method must have parameter named retVal --&gt;
      &lt;aop:after-returning pointcut-ref="businessService"
         returning="retVal"
         method="doRequiredTask"/&gt;

      &lt;!-- an after-throwing advice definition --&gt;
      &lt;!--The doRequiredTask method must have parameter named ex --&gt;
      &lt;aop:after-throwing pointcut-ref="businessService"
         throwing="ex"
         method="doRequiredTask"/&gt;

      &lt;!-- an around advice definition --&gt;
      &lt;aop:around pointcut-ref="businessService" 
         method="doRequiredTask"/&gt;
   ...
   &lt;/aop:aspect&gt;
&lt;/aop:config&gt;

&lt;bean id="aBean" class="..."&gt;
...
&lt;/bean&gt;
</pre>
<p>You can use same <b>doRequiredTask</b>  or different methods for different advices. These methods will be defined as a part of aspect module.</p>
<h2>XML Schema Based AOP Example</h2>
<p>To understand above mentioned concepts related to XML Schema Based AOP, let us write an example which will implement few of the advices. To write our example with few advices, let us have working Eclipse IDE in place and follow the following steps to create a Spring application:</p>
<table class="src">
<tr><th class="fivepct">Step</th><th>Description</th></tr>
<tr><td>1</td><td>Create a project with a name <i>SpringExample</i> and create a package <i>com.tutorialspoint</i> under the <b>src</b> folder in the created project.</td></tr>
<tr><td>2</td><td>Add required Spring libraries using <i>Add External JARs</i> option as explained in the <i>Spring Hello World Example</i> chapter.</td></tr>
<tr><td>3</td><td>Add Spring AOP specific libraries <b>aspectjrt.jar, aspectjweaver.jar</b> and <b>aspectj.jar</b> in the project.</td></tr>
<tr><td>4</td><td>Create Java classes <b>Logging</b>, <i>Student</i> and <i>MainApp</i> under the <i>com.tutorialspoint</i> package.</td></tr>
<tr><td>5</td><td>Create Beans configuration file <i>Beans.xml</i> under the <b>src</b> folder.</td></tr>
<tr><td>6</td><td>The final step is to create the content of all the Java files and Bean Configuration file and run the application as explained below.</td></tr>
</table>
<p>Here is the content of <b>Logging.java</b> file. This is actually a sample of aspect module which defines methods to be called at various points.</p>
<pre class="prettyprint">
package com.tutorialspoint;

public class Logging {

   /** 
    * This is the method which I would like to execute
    * before a selected method execution.
    */
   public void beforeAdvice(){
      System.out.println("Going to setup student profile.");
   }

   /** 
    * This is the method which I would like to execute
    * after a selected method execution.
    */
   public void afterAdvice(){
      System.out.println("Student profile has been setup.");
   }

   /** 
    * This is the method which I would like to execute
    * when any method returns.
    */
   public void afterReturningAdvice(Object retVal){
      System.out.println("Returning:" + retVal.toString() );
   }

   /**
    * This is the method which I would like to execute
    * if there is an exception raised.
    */
   public void AfterThrowingAdvice(IllegalArgumentException ex){
      System.out.println("There has been an exception: " + ex.toString());   
   }
   
}
</pre>
<p>Following is the content of the <b>Student.java</b> file:</p>
<pre class="prettyprint">
package com.tutorialspoint;

public class Student {
   private Integer age;
   private String name;

   public void setAge(Integer age) {
      this.age = age;
   }
   public Integer getAge() {
	  System.out.println("Age : " + age );
      return age;
   }

   public void setName(String name) {
      this.name = name;
   }
   public String getName() {
      System.out.println("Name : " + name );
      return name;
   }
   
   public void printThrowException(){
	   System.out.println("Exception raised");
       throw new IllegalArgumentException();
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file:</p>
<pre class="prettyprint">
package com.tutorialspoint;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp {
   public static void main(String[] args) {
      ApplicationContext context = 
             new ClassPathXmlApplicationContext("Beans.xml");

      Student student = (Student) context.getBean("student");

      student.getName();
      student.getAge();
      
      student.printThrowException();
   }
}
</pre> 
<p>Following is the configuration file <b>Beans.xml</b>:</p> 
<pre class="prettyprint">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "&gt;

   &lt;aop:config&gt;
      &lt;aop:aspect id="log" ref="logging"&gt;
         &lt;aop:pointcut id="selectAll" 
         expression="execution(* com.tutorialspoint.*.*(..))"/&gt;
         &lt;aop:before pointcut-ref="selectAll" method="beforeAdvice"/&gt;
         &lt;aop:after pointcut-ref="selectAll" method="afterAdvice"/&gt;
         &lt;aop:after-returning pointcut-ref="selectAll" 
                              returning="retVal"
                              method="afterReturningAdvice"/&gt;
         &lt;aop:after-throwing pointcut-ref="selectAll" 
                             throwing="ex"
                             method="AfterThrowingAdvice"/&gt;
      &lt;/aop:aspect&gt;
   &lt;/aop:config&gt;

   &lt;!-- Definition for student bean --&gt;
   &lt;bean id="student" class="com.tutorialspoint.Student"&gt;
      &lt;property name="name"  value="Zara" /&gt;
      &lt;property name="age"  value="11"/&gt;      
   &lt;/bean&gt;

   &lt;!-- Definition for logging aspect --&gt;
   &lt;bean id="logging" class="com.tutorialspoint.Logging"/&gt; 
      
&lt;/beans&gt;
</pre> 
<p>Once you are done with creating source and bean configuration files, let us run the application. If everything is fine with your application, this will print the following message:</p>
<pre class="result">
Going to setup student profile.
Name : Zara
Student profile has been setup.
Returning:Zara
Going to setup student profile.
Age : 11
Student profile has been setup.
Returning:11
Going to setup student profile.
Exception raised
Student profile has been setup.
There has been an exception: java.lang.IllegalArgumentException
.....
other exception content
</pre>
<p>Let me explain that above defined &lt;aop:pointcut&gt; selects all the methods defined under the package com.tutorialspoint. Let us suppose, you want to execute your advice before or after a particular method, you can define your pointcut to narrow down your execution by replacing stars (*) in pointcut definition with actual class and method names. Below is a modified XML configuration file to show the concept:</p>
<pre class="prettyprint">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd "&gt;

   &lt;aop:config&gt;
   &lt;aop:aspect id="log" ref="logging"&gt;
      &lt;aop:pointcut id="selectAll" 
      expression="execution(* com.tutorialspoint.Student.getName(..))"/&gt;
      &lt;aop:before pointcut-ref="selectAll" method="beforeAdvice"/&gt;
      &lt;aop:after pointcut-ref="selectAll" method="afterAdvice"/&gt;
   &lt;/aop:aspect&gt;
   &lt;/aop:config&gt;

   &lt;!-- Definition for student bean --&gt;
   &lt;bean id="student" class="com.tutorialspoint.Student"&gt;
      &lt;property name="name"  value="Zara" /&gt;
      &lt;property name="age"  value="11"/&gt;      
   &lt;/bean&gt;

   &lt;!-- Definition for logging aspect --&gt;
   &lt;bean id="logging" class="com.tutorialspoint.Logging"/&gt; 
      
&lt;/beans&gt;
</pre> 
<p>If you will execute sample application with these configuration changes, this will print the following message:</p>
<pre class="result">
Going to setup student profile.
Name : Zara
Student profile has been setup.
Age : 11
Exception raised
.....
other exception content
</pre>
<hr />
<div class="pre-btn">
<a href="aop_with_spring.html">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/schema_based_aop_appoach.html" alt="XML Schema Based AOP with Spring" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="aop_with_spring.html">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.html" target="_top">ASP.NET </a> |
<a href="../jquery/index.html" target="_top">jQuery </a> |
<a href="../ajax/index.html" target="_top">AJAX </a> |
<a href="../ant/index.html" target="_top">ANT</a> |
<a href="../jsp/index.html" target="_top">JSP </a> |
<a href="../servlets/index.html" target="_top">Servlets </a> |
<a href="../log4j/index.html" target="_top">log4j </a> |
<a href="../ibatis/index.html" target="_top">iBATIS </a> |
<a href="../hibernate/index.html" target="_top">Hibernate </a> |
<a href="../jdbc/index.html" target="_top">JDBC </a> |
<a href="../struts_2/index.html" target="_top">Struts </a> |
<a href="../html5/index.html" target="_top">HTML5 </a> |
<a href="../sql/index.html" target="_top">SQL </a> |
<a href="../mysql/index.html" target="_top">MySQL </a> |
<a href="../cplusplus/index.html" target="_top">C++ </a> |
<a href="../unix/index.html" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/spring/schema_based_aop_appoach.htm by HTTrack Website Copier/3.x [XR&CO'2010], Mon, 15 Apr 2013 05:06:48 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
