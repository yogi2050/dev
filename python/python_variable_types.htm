<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/python/python_variable_types.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:41:23 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Python Variable Types</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="Python Variable Types - Learning Python in simple and easy steps : A beginner's tutorial containing complete knowledge of Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming" />
<meta name="Keywords" content="Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
#topmenu a:link {text-decoration:none;color:#000 !important;background-color:transparent;font-weight:bold;}
#topmenu a:visited {text-decoration:none;color:#000 !important;background-color:transparent;font-weight:bold;}
#topmenu a:hover {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#header{ 
   background:#3777ab !important;
}
#topmenu
{
   background-color:#fbc62f !important;
}
#leftcol ul.menu li.heading 
{
   background:#3777ab !important;
   border:1px solid #fbc62f !important;
}
#leftcol, #middlecol, #rightcol {min-height:1250px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
   _uacct = "UA-232293-6";
   urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/python-mini.png" alt="Python tutorial" />
</div>
<ul class="menu">
<li class="heading">Python Basic Tutorial</li>
<li><a target="_top" href="index.htm">Python - Home</a></li>
<li><a target="_top" href="python_overview.htm">Python - Overview</a></li>
<li><a target="_top" href="python_environment.htm">Python - Environment</a></li>
<li><a target="_top" href="python_basic_syntax.htm">Python - Basic Syntax</a></li>
<li><a target="_top" href="python_variable_types.htm"><b>Python - Variable Types</b></a></li>
<li><a target="_top" href="python_basic_operators.htm">Python - Basic Operators</a></li>
<li><a target="_top" href="python_decision_making.htm">Python - Decision Making</a></li>
<li><a target="_top" href="python_loops.htm">Python - Loops</a></li>
<li><a target="_top" href="python_numbers.htm">Python - Numbers</a></li>
<li><a target="_top" href="python_strings.htm">Python - Strings</a></li>
<li><a target="_top" href="python_lists.htm">Python - Lists</a></li>
<li><a target="_top" href="python_tuples.htm">Python - Tuples</a></li>
<li><a target="_top" href="python_dictionary.htm">Python - Dictionary</a></li>
<li><a target="_top" href="python_date_time.htm">Python - Date &amp; Time</a></li>
<li><a target="_top" href="python_functions.htm">Python - Functions</a></li>
<li><a target="_top" href="python_modules.htm">Python - Modules</a></li>
<li><a target="_top" href="python_files_io.htm">Python - Files I/O</a></li>
<li><a target="_top" href="python_exceptions.htm">Python - Exceptions</a></li>
</ul>
<ul class="menu">
<li class="heading">Python Advanced Tutorial</li>
<li><a target="_top" href="python_classes_objects.htm">Python - Classes/Objects</a></li>
<li><a target="_top" href="python_reg_expressions.htm">Python - Reg Expressions</a></li>
<li><a target="_top" href="python_cgi_programming.htm">Python - CGI Programming</a></li>
<li><a target="_top" href="python_database_access.htm">Python - Database Access</a></li>
<li><a target="_top" href="python_networking.htm">Python - Networking</a></li>
<li><a target="_top" href="python_sending_email.htm">Python - Sending Email</a></li>
<li><a target="_top" href="python_multithreading.htm">Python - Multithreading</a></li>
<li><a target="_top" href="python_xml_processing.htm">Python - XML Processing</a></li>
<li><a target="_top" href="python_gui_programming.htm">Python - GUI Programming</a></li>
<li><a target="_top" href="python_further_extensions.htm">Python - Further Extensions</a></li>
</ul>
<ul class="menu">
<li class="heading">Python  Useful Resources</li>
<li><a target="_top" href="python_quick_guide.htm">Python - Quick Guide</a></li>
<li><a target="_top" href="python_tools_utilities.htm">Python - Tools/Utilities</a></li>
<li><a target="_top" href="python_useful_resources.htm">Python Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Python Variable Types</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="python_basic_syntax.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="python_basic_operators.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>
<p>Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.</p>
<h2>Assigning Values to Variables:</h2>
<p>Python variables do not have to be explicitly declared to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables.</p>
<p>The operand to the left of the = operator is the name of the variable, and the operand to the right of the = operator is the value stored in the variable. For example:</p>
<pre class="prettyprint">
#!/usr/bin/python

counter = 100          # An integer assignment
miles   = 1000.0       # A floating point
name    = "John"       # A string

print counter
print miles
print name
</pre>
<p>Here 100, 1000.0 and  "John" are the values assigned to <i>counter</i>, <i>miles</i> and <i>name</i> variables, respectively. While running this program, this will produce following result:</p>
<pre class="result">
100
1000.0
John
</pre>
<h2>Multiple Assignment:</h2>
<p>Python allows you to assign a single value to several variables simultaneously. For example:</p>
<pre class="prettyprint">
a = b = c = 1
</pre>
<p>Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example:</p>
<pre class="prettyprint">
a, b, c = 1, 2, "john"
</pre>
<p>Here two integer objects with values 1 and 2 are assigned to variables a and b, and one string object with the value "john" is assigned to the variable c.</p>
<h2>Standard Data Types:</h2>
<p>The data stored in memory can be of many types. For example, a person's age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard types that are used to define the operations possible on them and the storage method for each of them.</p>
<p>Python has five standard data types:</p>
<ul class="list">
<li><p>Numbers</p></li>
<li><p>String</p></li>
<li><p>List</p></li>
<li><p>Tuple</p></li>
<li><p>Dictionary</p></li>
</ul>
<h2>Python Numbers:</h2>
<p>Number data types store numeric values. They are immutable data types, which means that changing the value of a number data type results in a newly allocated object.</p>
<p>Number objects are created when you assign a value to them. For example:</p>
<pre class="prettyprint">
var1 = 1
var2 = 10
</pre>
<p>You can also delete the reference to a number object by using the <b>del</b> statement. The syntax of the del statement is:</p>
<pre class="prettyprint">
del var1[,var2[,var3[....,varN]]]]
</pre>
<p>You can delete a single object or multiple objects by using the del statement. For example:</p>
<pre class="prettyprint">
del var
del var_a, var_b
</pre>
<p>Python supports four different numerical types:</p>
<ul class="list">
<li><p>int (signed integers)</p></li>
<li><p>long (long integers [can also be represented in octal and hexadecimal])</p></li>
<li><p>float (floating point real values)</p></li>
<li><p>complex (complex numbers)</p></li>
</ul>
<h2>Examples:</h2>
<p>Here are some examples of numbers:</p>
<table class="src">
<tr><th>int</th><th>long</th><th>float</th><th>complex</th></tr>
<tr><td>10</td><td>51924361L</td><td>0.0</td><td>3.14j</td></tr>
<tr><td>100</td><td>-0x19323L</td><td>15.20</td><td>45.j</td></tr>
<tr><td>-786</td><td>0122L</td><td>-21.9</td><td>9.322e-36j</td></tr>
<tr><td>080</td><td>0xDEFABCECBDAECBFBAEl</td><td>32.3+e18</td><td>.876j</td></tr>
<tr><td>-0490</td><td>535633629843L</td><td>-90.</td><td>-.6545+0J</td></tr>
<tr><td>-0x260</td><td>-052318172735L</td><td>-32.54e100</td><td>3e+26J</td></tr>
<tr><td>0x69</td><td>-4721885298529L</td><td>70.2-E12</td><td>4.53e-7j</td></tr>
</table>
<ul class="list">
<li><p>Python allows you to use a lowercase L with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.</p></li>
<li><p>A complex number consists of an ordered pair of real floatingpoint numbers denoted by a + bj, where a is the real part and b is the imaginary part of the complex number.</p></li>
</ul>
<h2>Python Strings:</h2>
<p>Strings in Python are identified as a contiguous set of characters in between quotation marks.  Python allows for either pairs of single or double quotes. Subsets of strings can be taken using the slice operator ( [ ] and [ : ] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end.</p>
<p>The plus ( + ) sign is the string concatenation operator, and the asterisk ( * ) is the repetition operator. For example:</p>
<pre class="prettyprint">
#!/usr/bin/python

str = 'Hello World!'

print str          # Prints complete string
print str[0]       # Prints first character of the string
print str[2:5]     # Prints characters starting from 3rd to 5th
print str[2:]      # Prints string starting from 3rd character
print str * 2      # Prints string two times
print str + "TEST" # Prints concatenated string
</pre>
<p>This will produce following result:</p>
<table  class="src" cellpadding="5">
<tr><td><pre>
Hello World!
H
llo
llo World!
Hello World!Hello World!
Hello World!TEST
</pre></td></tr>
</table>
<h2>Python Lists:</h2>
<p>Lists are the most versatile of Python's compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.</p>
<p>The values stored in a list can be accessed using the slice operator ( [ ] and [ : ] ) with indexes starting at 0 in the beginning of the list and working their way to end-1. The plus ( + ) sign is the list concatenation operator, and the asterisk ( * ) is the repetition operator. For example:</p>
<pre class="prettyprint">
#!/usr/bin/python

list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'john']

print list          # Prints complete list
print list[0]       # Prints first element of the list
print list[1:3]     # Prints elements starting from 2nd till 3rd 
print list[2:]      # Prints elements starting from 3rd element
print tinylist * 2  # Prints list two times
print list + tinylist # Prints concatenated lists
</pre>
<p>This will produce following result:</p>
<pre class="result">
['abcd', 786, 2.23, 'john', 70.200000000000003]
abcd
[786, 2.23]
[2.23, 'john', 70.200000000000003]
[123, 'john', 123, 'john']
['abcd', 786, 2.23, 'john', 70.200000000000003, 123, 'john']
</pre>
<h2>Python Tuples:</h2>
<p>A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.</p>
<p>The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ), and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as <b>read-only</b> lists. For example:</p>
<pre class="prettyprint">
#!/usr/bin/python

tuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
tinytuple = (123, 'john')

print tuple           # Prints complete list
print tuple[0]        # Prints first element of the list
print tuple[1:3]      # Prints elements starting from 2nd till 3rd 
print tuple[2:]       # Prints elements starting from 3rd element
print tinytuple * 2   # Prints list two times
print tuple + tinytuple # Prints concatenated lists
</pre>
<p>This will produce following result:</p>
<pre class="result">
('abcd', 786, 2.23, 'john', 70.200000000000003)
abcd
(786, 2.23)
(2.23, 'john', 70.200000000000003)
(123, 'john', 123, 'john')
('abcd', 786, 2.23, 'john', 70.200000000000003, 123, 'john')
</pre>
<p>Following is invalid with tuple, because we attempted to update a tuple,which is not allowed. Similar case is possible with lists:</p>
<pre class="prettyprint">
#!/usr/bin/python

tuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
list = [ 'abcd', 786 , 2.23, 'john', 70.2  ]
tuple[2] = 1000    # Invalid syntax with tuple
list[2] = 1000     # Valid syntax with list
</pre>
<h2>Python Dictionary:</h2>
<p>Python's dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary keys can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.</p>
<p>Dictionaries are enclosed by curly braces ( { } ) and values can be assigned and accessed using square braces ( [] ). For example:</p>
<pre class="prettyprint">
#!/usr/bin/python

dict = {}
dict['one'] = "This is one"
dict[2]     = "This is two"

tinydict = {'name': 'john','code':6734, 'dept': 'sales'}


print dict['one']       # Prints value for 'one' key
print dict[2]           # Prints value for 2 key
print tinydict          # Prints complete dictionary
print tinydict.keys()   # Prints all the keys
print tinydict.values() # Prints all the values
</pre>
<p>This will produce following result:</p>
<pre class="result">
This is one
This is two
{'dept': 'sales', 'code': 6734, 'name': 'john'}
['dept', 'code', 'name']
['sales', 6734, 'john']
</pre>
<p>Dictionaries have no concept of order among elements. It is incorrect to say that the elements are "out of order"; they are simply unordered.</p>
<h2>Data Type Conversion:</h2>
<p>Sometimes you may need to perform conversions between the built-in types. To convert between types you simply use the type name as a function.</p>
<p>There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.</p>
<table  class="src">
<tr><th>Function</th><th>Description</th></tr>
<tr valign="top">
<td >
<p>int(x [,base])</p>
</td>
<td >
<p>Converts x to an integer. base specifies the base if x is a string.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>long(x [,base] )</p>
</td>
<td >
<p>Converts x to a long integer. base specifies the base if x is a string.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>float(x)</p>
</td>
<td >
<p>Converts x to a floating-point number.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>complex(real [,imag])</p>
</td>
<td >
<p>Creates a complex number.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>str(x)</p>
</td>
<td >
<p>Converts object x to a string representation.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>repr(x)</p>
</td>
<td >
<p>Converts object x to an expression string.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>eval(str)</p>
</td>
<td >
<p>Evaluates a string and returns an object.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>tuple(s)</p>
</td>
<td >
<p>Converts s to a tuple.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>list(s)</p>
</td>
<td >
<p>Converts s to a list.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>set(s)</p>
</td>
<td >
<p>Converts s to a set.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>dict(d)</p>
</td>
<td >
<p>Creates a dictionary. d must be a sequence of (key,value) tuples.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>frozenset(s)</p>
</td>
<td >
<p>Converts s to a frozen set.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>chr(x)</p>
</td>
<td >
<p>Converts an integer to a character.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>unichr(x)</p>
</td>
<td >
<p>Converts an integer to a Unicode character.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>ord(x)</p>
</td>
<td >
<p>Converts a single character to its integer value.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>hex(x)</p>
</td>
<td >
<p>Converts an integer to a hexadecimal string.</p>
</td>
</tr>
<tr valign="top">
<td >
<p>oct(x)</p>
</td>
<td >
<p>Converts an integer to an octal string.</p>
</td>
</tr>
</table>
<hr />
<div class="pre-btn">
<a href="python_basic_syntax.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/python_variable_types.pdf" alt="Python Variable Types" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="python_basic_operators.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/python/python_variable_types.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:41:28 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>