<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/python/python_cgi_programming.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:43:27 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Python CGI Programming</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="Python CGI Programming - Learning Python in simple and easy steps : A beginner's tutorial containing complete knowledge of Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming" />
<meta name="Keywords" content="Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
#topmenu a:link {text-decoration:none;color:#000 !important;background-color:transparent;font-weight:bold;}
#topmenu a:visited {text-decoration:none;color:#000 !important;background-color:transparent;font-weight:bold;}
#topmenu a:hover {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#header{ 
   background:#3777ab !important;
}
#topmenu
{
   background-color:#fbc62f !important;
}
#leftcol ul.menu li.heading 
{
   background:#3777ab !important;
   border:1px solid #fbc62f !important;
}
#leftcol, #middlecol, #rightcol {min-height:1250px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
   _uacct = "UA-232293-6";
   urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/python-mini.png" alt="Python tutorial" />
</div>
<ul class="menu">
<li class="heading">Python Basic Tutorial</li>
<li><a target="_top" href="index.htm">Python - Home</a></li>
<li><a target="_top" href="python_overview.htm">Python - Overview</a></li>
<li><a target="_top" href="python_environment.htm">Python - Environment</a></li>
<li><a target="_top" href="python_basic_syntax.htm">Python - Basic Syntax</a></li>
<li><a target="_top" href="python_variable_types.htm">Python - Variable Types</a></li>
<li><a target="_top" href="python_basic_operators.htm">Python - Basic Operators</a></li>
<li><a target="_top" href="python_decision_making.htm">Python - Decision Making</a></li>
<li><a target="_top" href="python_loops.htm">Python - Loops</a></li>
<li><a target="_top" href="python_numbers.htm">Python - Numbers</a></li>
<li><a target="_top" href="python_strings.htm">Python - Strings</a></li>
<li><a target="_top" href="python_lists.htm">Python - Lists</a></li>
<li><a target="_top" href="python_tuples.htm">Python - Tuples</a></li>
<li><a target="_top" href="python_dictionary.htm">Python - Dictionary</a></li>
<li><a target="_top" href="python_date_time.htm">Python - Date &amp; Time</a></li>
<li><a target="_top" href="python_functions.htm">Python - Functions</a></li>
<li><a target="_top" href="python_modules.htm">Python - Modules</a></li>
<li><a target="_top" href="python_files_io.htm">Python - Files I/O</a></li>
<li><a target="_top" href="python_exceptions.htm">Python - Exceptions</a></li>
</ul>
<ul class="menu">
<li class="heading">Python Advanced Tutorial</li>
<li><a target="_top" href="python_classes_objects.htm">Python - Classes/Objects</a></li>
<li><a target="_top" href="python_reg_expressions.htm">Python - Reg Expressions</a></li>
<li><a target="_top" href="python_cgi_programming.htm"><b>Python - CGI Programming</b></a></li>
<li><a target="_top" href="python_database_access.htm">Python - Database Access</a></li>
<li><a target="_top" href="python_networking.htm">Python - Networking</a></li>
<li><a target="_top" href="python_sending_email.htm">Python - Sending Email</a></li>
<li><a target="_top" href="python_multithreading.htm">Python - Multithreading</a></li>
<li><a target="_top" href="python_xml_processing.htm">Python - XML Processing</a></li>
<li><a target="_top" href="python_gui_programming.htm">Python - GUI Programming</a></li>
<li><a target="_top" href="python_further_extensions.htm">Python - Further Extensions</a></li>
</ul>
<ul class="menu">
<li class="heading">Python  Useful Resources</li>
<li><a target="_top" href="python_quick_guide.htm">Python - Quick Guide</a></li>
<li><a target="_top" href="python_tools_utilities.htm">Python - Tools/Utilities</a></li>
<li><a target="_top" href="python_useful_resources.htm">Python Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Python CGI Programming</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="python_reg_expressions.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="python_database_access.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<h2>What is CGI ?</h2>
<ul class="list">
<li><p>The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script.</p></li>
<li><p>The CGI specs are currently maintained by the NCSA and NCSA defines CGI is as follows:</p></li>
<li><p>The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.</p> </li>
<li><p>The current version is CGI/1.1 and CGI/1.2 is under progress.</p></li>
</ul>
<h2>Web Browsing</h2>
<p>To understand the concept of CGI, lets see what happens when we click a hyper link to browse a particular web page or URL.</p>
<ul class="list">
<li><p>Your browser contacts the HTTP web server and demand for the URL ie. filename.</p></li>
<li><p>Web Server will parse the URL and will look for the filename in if it finds that file then sends back to the browser otherwise sends an error message indicating that you have requested a wrong file.</p></li>
<li><p>Web browser takes response from web server and displays either the received file or error message.</p></li>
</ul>
<p>However, it is possible to set up the HTTP server so that whenever a file in a certain directory is requested that file is not sent back; instead it is executed as a program, and whatever that program outputs is sent back for your browser to display. This function is called the Common Gateway Interface or CGI and the programs are called CGI scripts. These CGI programs can be a Python Script, PERL Script, Shell Script, C or C++ program etc.</p>
<h2>CGI Architecture Diagram</h2>
<img src="../images/cgiarch.gif" alt="CGI Architecture" />
<h2>Web Server Support &amp; Configuration</h2>
<p class="alignment">Before you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI Directory and by convention it is named as /var/www/cgi-bin. By convention CGI files will have extention as <b>.cgi</b> but you can keep your files with python extension <b>.py</b> as well.</p>
<p>By default, the Linux server is configured to run only the scripts in the cgi-bin directory in /var/www. If you want to specify any other directory to run your CGI scripts, comment the following lines in the httpd.conf file:</p>
<pre class="prettyprint">
&lt;Directory "/var/www/cgi-bin"&gt;
   AllowOverride None
   Options ExecCGI
   Order allow,deny
   Allow from all
&lt;/Directory&gt;

&lt;Directory "/var/www/cgi-bin"&gt;
Options All
&lt;/Directory&gt;
</pre>
<p>Here I assumed that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Sheel etc.</p>
<h2>First CGI Program</h2>
<p>Here is a simple link which is linked to a CGI script called <a href="../cgi-bin/hello-2.html" target="_blank">hello.py</a>. This file is being kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program make sure you have chage mode of file using <b>chmod 755 hello.py</b> UNIX command to make file executable.</p>
<pre class="prettyprint">
#!/usr/bin/python

print "Content-type:text/html\r\n\r\n"
print '&lt;html&gt;'
print '&lt;head&gt;'
print '&lt;title&gt;Hello Word - First CGI Program&lt;/title&gt;'
print '&lt;/head&gt;'
print '&lt;body&gt;'
print '&lt;h2&gt;Hello Word! This is my first CGI program&lt;/h2&gt;'
print '&lt;/body&gt;'
print '&lt;/html&gt;'
</pre>
<p>If you click hello.py then this produces following output:</p>
<table class="src">
<tr><td>
<h2>Hello Word! This is my first CGI program</h2>
</td></tr>
</table>
<p>This hello.py script is a simple Python script which is writing its output on STDOUT file ie. screen. There is one important and extra feature available which is first line to be printed <b>Content-type:text/html\r\n\r\n</b>. This line is sent back to the browser and specifiy the content type to be displayed on the browser screen.</p>
<p>Now you must have understood basic concept of CGI and you can write many complicated CGI programs using Python. This script can interact with any other exertnal system also to exchange information such as RDBMS.</p>
<h2>HTTP Header</h2>
<p>The line <b>Content-type:text/html\r\n\r\n</b> is part of HTTP header which is sent to the browser to understand the content.  All the HTTP header will be in the following form</p>
<pre class="prettyprint">
HTTP Field Name: Field Content

For Example
Content-type: text/html\r\n\r\n
</pre>
<p>There are few other important HTTP headers which you will use frequently in your CGI Programming.</p>
<table class="src">
<tr>
<th style="width:30%">Header</th><th>Description</th>
</tr>
<tr> <td>Content-type: </td><td>A MIME string defining the format of the file being returned. Example is Content-type:text/html</td></tr>
<tr> <td>Expires: Date </td><td>The date the information becomes invalid. This should be used by the browser to decide when a page needs to be refreshed. A valid date string should be in the format 01 Jan 1998 12:00:00 GMT.</td> </tr>
<tr> <td>Location: URL </td><td>The URL that should be returned instead of the URL requested. You can use this filed to redirect a request to any file.</td> </tr>
<tr> <td>Last-modified: Date</td><td>The date of last modification of the resource.</td> </tr>
<tr> <td>Content-length: N</td><td>The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.</td> </tr>
<tr> <td>Set-Cookie: String </td><td>Set the cookie passed through the <i>string</i></td> </tr>
</table>
<h2>CGI Environment Variables</h2>
<p>All the CGI program will have access to the following environment variables. These variables play an important role while writing any CGI program.</p>
<table class="src">
<tr><th style="width:30%;">Variable Name</th><th>Description</th></tr>
<tr> <td>CONTENT_TYPE</td><td>The data type of the content. Used when the client is sending attached content to the server. For example file upload etc.</td> </tr>
<tr> <td>CONTENT_LENGTH</td><td>The length of the query information. It's available only for POST requests</td> </tr>
<tr> <td>HTTP_COOKIE</td><td>Return the set cookies in the form of key &amp; value pair.</td> </tr>
<tr> <td>HTTP_USER_AGENT</td><td>The User-Agent request-header field contains information about the user agent originating the request. Its name of the web browser.</td> </tr>
<tr> <td>PATH_INFO</td><td>The path for the CGI script.</td> </tr>
<tr> <td>QUERY_STRING</td><td>The URL-encoded information that is sent with GET method request.</td> </tr>
<tr> <td>REMOTE_ADDR</td><td>The IP address of the remote host making the request. This can be useful for logging or for authentication purpose.</td> </tr>
<tr> <td>REMOTE_HOST</td><td>The fully qualified name of the host making the request. If this information is not available then REMOTE_ADDR can be used to get IR address.</td> </tr>
<tr> <td>REQUEST_METHOD</td><td>The method used to make the request. The most common methods are GET and POST.</td></tr>
<tr> <td>SCRIPT_FILENAME</td><td>The full path to the CGI script.</td></tr>
<tr> <td>SCRIPT_NAME</td><td>The name of the CGI script.</td></tr>
<tr> <td>SERVER_NAME</td><td>The server's hostname or IP Address</td></tr>
<tr> <td>SERVER_SOFTWARE</td><td>The name and version of the software the server is running.</td></tr>
</table>
<p>Here is small CGI program to list out all the CGI variables. Click this link to see the result <a href="../cgi-bin/get_env-2.html" target="_blank">Get Environment</a></p>
<pre class="prettyprint">
#!/usr/bin/python

import os

print "Content-type: text/html\r\n\r\n";
print "&lt;font size=+1&gt;Environment&lt;/font&gt;&lt;\br&gt;";
for param in os.environ.keys():
  print "&lt;b&gt;%20s&lt;/b&gt;: %s&lt;\br&gt;" % (param, os.environ[param])
</pre>
<h2>GET and POST Methods</h2>
<p>You must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently browser uses two methods two pass this information to web server. These methods are GET Method and POST Method.</p>
<h2>Passing Information using GET method:</h2>
<p>The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows:</p>
<pre class="prettyprint">
http://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2
</pre>
<p>The GET method is the defualt method to pass information from browser to web server and it produces a long string that appears in your browser's Location:box. Never use GET method if you have password or other sensitive information to pass to the server. The GET method has size limtation: only 1024 characters can be sent in a request string. The GET method sends information using QUERY_STRING header and will be accessible in your CGI Program through QUERY_STRING environment variable</p>
<p>You can pass information by simply concatenating key and value pairs alongwith any URL or you can use HTML &lt;FORM&gt; tags to pass information using GET method.</p>
<h2>Simple URL Example :  Get Method  </h2>
<p>Here is a simple URL which will pass two values to hello_get.py program using GET method.</p>
<a style="text-decoration:none;" href="../cgi-bin/hello_geta571-2.html?first_name=ZARA&amp;last_name=ALI" target="_blank">/cgi-bin/hello_get.py?first_name=ZARA&amp;last_name=ALI</a>
<p>Below is <b>hello_get.py</b> script to handle input given by web browser. We are going to use <b>cgi</b> module which makes it very easy to access passed information:</p>
<pre class="prettyprint">
#!/usr/bin/python

# Import modules for CGI handling 
import cgi, cgitb 

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

# Get data from fields
first_name = form.getvalue('first_name')
last_name  = form.getvalue('last_name')

print "Content-type:text/html\r\n\r\n"
print "&lt;html&gt;"
print "&lt;head&gt;"
print "&lt;title&gt;Hello - Second CGI Program&lt;/title&gt;"
print "&lt;/head&gt;"
print "&lt;body&gt;"
print "&lt;h2&gt;Hello %s %s&lt;/h2&gt;" % (first_name, last_name)
print "&lt;/body&gt;"
print "&lt;/html&gt;"
</pre>
<p>This would generate following result:</p>
<table class="src">
<tr><td>
<h2>Hello ZARA ALI</h2>
</td></tr>
</table>
<h2>Simple FORM Example: GET Method</h2>
<p>Here is a simple example which passes two values using HTML FORM and submit button. We are going to use same CGI script hello_get.py to handle this imput.</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/hello_get.py" method="get"&gt;
First Name: &lt;input type="text" name="first_name"&gt;  &lt;br /&gt;

Last Name: &lt;input type="text" name="last_name" /&gt;
&lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</pre>
<p>Here is the actual output of the above form, You enter First and Last Name and then click submit button to see the result.</p>
<form action="http://www.tutorialspoint.com/cgi-bin/hello_get.py" method="get" target="_blank">
First Name: <input type="text" name="first_name" /><br/>

Last Name: <input type="text" name="last_name" />
<input type="submit" value="Submit" /></form>
<h2>Passing Information using POST method:</h2>
<p>A generally more reliable method  of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.</p>
<p>Below is same hello_get.py script which handles GET as well as POST method.</p>
<pre class="prettyprint">
#!/usr/bin/python

# Import modules for CGI handling 
import cgi, cgitb 

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

# Get data from fields
first_name = form.getvalue('first_name')
last_name  = form.getvalue('last_name')

print "Content-type:text/html\r\n\r\n"
print "&lt;html&gt;"
print "&lt;head&gt;"
print "&lt;title&gt;Hello - Second CGI Program&lt;/title&gt;"
print "&lt;/head&gt;"
print "&lt;body&gt;"
print "&lt;h2&gt;Hello %s %s&lt;/h2&gt;" % (first_name, last_name)
print "&lt;/body&gt;"
print "&lt;/html&gt;"
</pre>
<p>Let us take again same examle as above, which passes two values using HTML FORM and submit button. We are going to use same CGI script hello_get.py to handle this imput.</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/hello_get.py" method="post"&gt;
First Name: &lt;input type="text" name="first_name"&gt;&lt;br /&gt;
Last Name: &lt;input type="text" name="last_name" /&gt;

&lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</pre>
<p>Here is the actual output of the above form, You enter First and Last Name and then click submit button to see the result.</p>
<form action="http://www.tutorialspoint.com/cgi-bin/hello_get.py" method="post" target="_blank">
First Name: <input type="text" name="first_name" /><br />

Last Name: <input type="text" name="last_name" />
<input type="submit" value="Submit" />
</form>
<h2>Passing Checkbox Data to CGI Program</h2>
<p>Checkboxes are used when more than one option is required to be selected.</p>
<p>Here is example HTML code for a form with two checkboxes</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/checkbox.cgi" method="POST" target="_blank"&gt;
&lt;input type="checkbox" name="maths" value="on" /&gt; Maths
&lt;input type="checkbox" name="physics" value="on" /&gt; Physics
&lt;input type="submit" value="Select Subject" /&gt;
&lt;/form&gt;
</pre>
<p>The result of this code is the following form</p>
<form action="http://www.tutorialspoint.com/cgi-bin/checkbox.py" method="post" target="_blank" >
<input type="checkbox" name="maths" value="on" /> Maths
<input type="checkbox" name="physics" value="on" /> Physics
<input type="submit" value="Select Subject" />
</form>
<p>Below is checkbox.cgi script to handle input given by web browser for checkbox button.</p>
<pre class="prettyprint">
#!/usr/bin/python

# Import modules for CGI handling 
import cgi, cgitb 

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

# Get data from fields
if form.getvalue('maths'):
   math_flag = "ON"
else:
   math_flag = "OFF"

if form.getvalue('physics'):
   physics_flag = "ON"
else:
   physics_flag = "OFF"

print "Content-type:text/html\r\n\r\n"
print "&lt;html&gt;"
print "&lt;head&gt;"
print "&lt;title&gt;Checkbox - Third CGI Program&lt;/title&gt;"
print "&lt;/head&gt;"
print "&lt;body&gt;"
print "&lt;h2&gt; CheckBox Maths is : %s&lt;/h2&gt;" % math_flag
print "&lt;h2&gt; CheckBox Physics is : %s&lt;/h2&gt;" % physics_flag
print "&lt;/body&gt;"
print "&lt;/html&gt;"
</pre>
<h2>Passing Radio Button Data to CGI Program</h2>
<p>Radio Buttons are used when only one option is required to be selected.</p>
<p>Here is example HTML code for a form with two radio button:</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/radiobutton.py" method="post" target="_blank"&gt;
&lt;input type="radio" name="subject" value="maths" /&gt; Maths
&lt;input type="radio" name="subject" value="physics" /&gt; Physics
&lt;input type="submit" value="Select Subject" /&gt;
&lt;/form&gt;
</pre>
<p>The result of this code is the following form</p>
<form action="http://www.tutorialspoint.com/cgi-bin/radiobutton.py" method="post" target="_blank">
<input type="radio" name="subject" value="Maths" /> Maths
<input type="radio" name="subject" value="Physics" /> Physics
<input type="submit" value="Select Subject" />
</form>
<p>Below is radiobutton.py script to handle input given by web browser for radio button.</p>
<pre class="prettyprint">
#!/usr/bin/python

# Import modules for CGI handling 
import cgi, cgitb 

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

# Get data from fields
if form.getvalue('subject'):
   subject = form.getvalue('subject')
else:
   subject = "Not set"

print "Content-type:text/html\r\n\r\n"
print "&lt;html&gt;"
print "&lt;head&gt;"
print "&lt;title&gt;Radio - Fourth CGI Program&lt;/title&gt;"
print "&lt;/head&gt;"
print "&lt;body&gt;"
print "&lt;h2&gt; Selected Subject is %s&lt;/h2&gt;" % subject
print "&lt;/body&gt;"
print "&lt;/html&gt;"
</pre>
<h2>Passing Text Area Data to CGI Program</h2>
<p>TEXTAREA element is used when multiline text has to be passed to the CGI Program.</p>
<p>Here is example HTML code for a form with a TEXTAREA box:</p>
<table cellpadding="5" class="src"><tr><td><pre>
&lt;form action="/cgi-bin/textarea.py" method="post" target="_blank"&gt;
&lt;textarea name="textcontent" cols="40" rows="4"&gt;
Type your text here...
&lt;/textarea&gt;
&lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</pre></td></tr></table>
<p> The result of this code is the following form</p>
<form action="http://www.tutorialspoint.com/cgi-bin/textarea.py" method="post" target="_blank">
<textarea name="textcontent" cols="40" rows="4">Type your text here...</textarea>
<input type="submit" value="Submit" />
</form>
<p>Below is textarea.cgi script to handle input given by web browser.</p>
<pre class="prettyprint">
#!/usr/bin/python

# Import modules for CGI handling 
import cgi, cgitb 

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

# Get data from fields
if form.getvalue('textcontent'):
   text_content = form.getvalue('textcontent')
else:
   text_content = "Not entered"

print "Content-type:text/html\r\n\r\n"
print "&lt;html&gt;"
print "&lt;head&gt;";
print "&lt;title&gt;Text Area - Fifth CGI Program&lt;/title&gt;"
print "&lt;/head&gt;"
print "&lt;body&gt;"
print "&lt;h2&gt; Entered Text Content is %s&lt;/h2&gt;" % text_content
print "&lt;/body&gt;"
</pre>
<h2>Passing Drop Down Box Data to CGI Program</h2>
<p>Drop Down Box is used when we have many options available but only one or two will be selected.</p>
<p>Here is example HTML code for a form with one drop down box</p>
<pre class="prettyprint">
&lt;form action="/cgi-bin/dropdown.py" method="post" target="_blank"&gt;
&lt;select name="dropdown"&gt;
&lt;option value="Maths" selected&gt;Maths&lt;/option&gt;
&lt;option value="Physics"&gt;Physics&lt;/option&gt;
&lt;/select&gt;
&lt;input type="submit" value="Submit"/&gt;
&lt;/form&gt;
</pre>
<p>The result of this code is the following form</p>
<form  action="http://www.tutorialspoint.com/cgi-bin/dropdown.py" method="post" target="_blank">
<select name="dropdown">
<option value="Maths" selected="selected">Maths</option>
<option value="Physics">Physics</option>
</select>
<input type="submit" value="Submit" />
</form>
<p>Below is dropdown.py script to handle input given by web browser.</p>
<pre class="prettyprint">
#!/usr/bin/python

# Import modules for CGI handling 
import cgi, cgitb 

# Create instance of FieldStorage 
form = cgi.FieldStorage() 

# Get data from fields
if form.getvalue('dropdown'):
   subject = form.getvalue('dropdown')
else:
   subject = "Not entered"

print "Content-type:text/html\r\n\r\n"
print "&lt;html&gt;"
print "&lt;head&gt;"
print "&lt;title&gt;Dropdown Box - Sixth CGI Program&lt;/title&gt;"
print "&lt;/head&gt;"
print "&lt;body&gt;"
print "&lt;h2&gt; Selected Subject is %s&lt;/h2&gt;" % subject
print "&lt;/body&gt;"
print "&lt;/html&gt;"
</pre>
<h2>Using Cookies in CGI</h2>
<p>HTTP protocol is a stateless protocol. But for a commercial website it is required to maintain session information  among different pages. For example one user registration ends after completing many pages. But how to maintain user's session information across all the web pages.</p>
<p>In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.</p>
<h2>How It Works</h2>
<p>Your server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.</p>
<p>Cookies are a plain text data record of 5 variable-length fields:</p>
<ul class="list">
<li><p><b>Expires :</b> The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</p></li>
<li><p><b>Domain :</b> The domain name of your site.</p></li>
<li><p><b>Path :</b> The path to the directory or web page that set the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</p></li>
<li><p><b>Secure :</b> If this field contains the word "secure" then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</p></li>
<li><p><b>Name=Value :</b> Cookies are set and retrviewed in the form of key and value pairs.</p></li>
</ul>
<h2>Setting up Cookies</h2>
<p>This is very easy to send cookies to browser. These cookies will be sent along with HTTP Header before to Content-type filed. Assuming you want to set UserID and Password as cookies. So cookies setting will be done as follows</p>
<pre class="prettyprint">
#!/usr/bin/python

print "Set-Cookie:UserID=XYZ;\r\n"
print "Set-Cookie:Password=XYZ123;\r\n"
print "Set-Cookie:Expires=Tuesday, 31-Dec-2007 23:12:40 GMT";\r\n"
print "Set-Cookie:Domain=www.tutorialspoint.com;\r\n"
print "Set-Cookie:Path=/perl;\n"
print "Content-type:text/html\r\n\r\n"
...........Rest of the HTML Content....
</pre>
<p>From this example you must have understood how to set cookies. We use <b>Set-Cookie</b> HTTP header to set cookies.</p>
<p>Here it is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line <b>"Content-type:text/html\r\n\r\n</b>.</p>
<h2>Retrieving Cookies</h2>
<p>This is very easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form.</p>
<pre class="prettyprint">
key1=value1;key2=value2;key3=value3....
</pre>
<p>Here is an example of how to retrieving cookies.</p>
<pre class="prettyprint">
#!/usr/bin/python

# Import modules for CGI handling 
from os import environ
import cgi, cgitb

if environ.has_key('HTTP_COOKIE'):
   for cookie in map(strip, split(environ['HTTP_COOKIE'], ';')):
      (key, value ) = split(cookie, '=');
      if key == "UserID":
         user_id = value

      if key == "Password":
         password = value

print "User ID  = %s" % user_id
print "Password = %s" % password
</pre>
<p>This will produce following result for the cookies set by above script:</p>
<pre class="prettyprint">
User ID = XYZ
Password = XYZ123
</pre>
<h2>File Upload Example:</h2>
<p>To upload a file the HTML form must have the enctype attribute set to <b>multipart/form-data</b>. The input tag with the file type will create a "Browse" button.</p>
<pre class="prettyprint">
&lt;html&gt;
&lt;body&gt;
   &lt;form enctype="multipart/form-data" 
                     action="save_file.py" method="post"&gt;
   &lt;p&gt;File: &lt;input type="file" name="filename" /&gt;&lt;/p&gt;
   &lt;p&gt;&lt;input type="submit" value="Upload" /&gt;&lt;/p&gt;
   &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The result of this code is the following form:</p>
<form enctype="multipart/form-data" action="http://www.tutorialspoint.com/save_file.py" method="post">
   <p>File: <input type="file" name="filename" /></p>
   <p><input type="reset" value="Upload" /></p>
</form>
<p>Above example has been disabled intentionally to save people uploading file on our server. But you can try above code with your server.</p>
<p>Here is the script <b>save_file.py</b> to handle file upload:</p>
<pre class="prettyprint">
#!/usr/bin/python

import cgi, os
import cgitb; cgitb.enable()

form = cgi.FieldStorage()

# Get filename here.
fileitem = form['filename']

# Test if the file was uploaded
if fileitem.filename:
   # strip leading path from file name to avoid 
   # directory traversal attacks
   fn = os.path.basename(fileitem.filename)
   open('/tmp/' + fn, 'wb').write(fileitem.file.read())

   message = 'The file "' + fn + '" was uploaded successfully'
   
else:
   message = 'No file was uploaded'
   
print """\
Content-Type: text/html\n
&lt;html&gt;
&lt;body&gt;
   &lt;p&gt;%s&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
""" % (message,)
</pre>
<p>If you are running above script on Unix/Linux then you would have to take care of replacing  file separator as follows, otherwise on your windows machine above open() statement should work fine.</p>
<pre class="prettyprint">
fn = os.path.basename(fileitem.filename.replace("\\", "/" ))
</pre>
<h2>How To Raise a "File Download" Dialog Box ?</h2>
<p>Sometime it is desired that you want to give option where a user will click a link and it will pop up a "File Download" dialogue box to the user instead of displaying actual content. This is very easy and will be achived through HTTP header. This HTTP header will be different  from the header mentioned in previous section.</p>
<p>For example,if you want make a <b>FileName</b> file downloadable from a given link then its syntax will be as follows.</p>
<pre class="prettyprint">
#!/usr/bin/python

# HTTP Header
print "<b>Content-Type:</b>application/octet-stream; name=\"FileName\"\r\n";
print "<b>Content-Disposition:</b> attachment; filename=\"FileName\"\r\n\n";

# Actual File Content will go hear.
fo = open("foo.txt", "rb")

str = fo.read();
print str

# Close opend file
fo.close()
</pre>
<p>Hope you enjoyed this tutorial. If yes, please send me your feedback at: <a href="../about/contact_us.htm">Contact Us</a></p>
<hr />
<div class="pre-btn">
<a href="python_reg_expressions.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/python_cgi_programming.pdf" alt="Python CGI Programming" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="python_database_access.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/python/python_cgi_programming.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:43:30 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>