<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/python/python_classes_objects.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:43:19 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>Python Object Oriented</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="Python Object Oriented - Learning Python in simple and easy steps : A beginner's tutorial containing complete knowledge of Python Syntax Object Oriented Language, Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML Programming" />
<meta name="Keywords" content="Python, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Networking, Multithreading,Methods, Tuples, Tools/Utilities, Exceptions Handling, Sockets, GUI, Extentions, XML, Programming" />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
#topmenu a:link {text-decoration:none;color:#000 !important;background-color:transparent;font-weight:bold;}
#topmenu a:visited {text-decoration:none;color:#000 !important;background-color:transparent;font-weight:bold;}
#topmenu a:hover {text-decoration:none;color:#fff !important;background-color:transparent;font-weight:bold;}
#header{ 
   background:#3777ab !important;
}
#topmenu
{
   background-color:#fbc62f !important;
}
#leftcol ul.menu li.heading 
{
   background:#3777ab !important;
   border:1px solid #fbc62f !important;
}
#leftcol, #middlecol, #rightcol {min-height:1250px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
   _uacct = "UA-232293-6";
   urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/python-mini.png" alt="Python tutorial" />
</div>
<ul class="menu">
<li class="heading">Python Basic Tutorial</li>
<li><a target="_top" href="index.htm">Python - Home</a></li>
<li><a target="_top" href="python_overview.htm">Python - Overview</a></li>
<li><a target="_top" href="python_environment.htm">Python - Environment</a></li>
<li><a target="_top" href="python_basic_syntax.htm">Python - Basic Syntax</a></li>
<li><a target="_top" href="python_variable_types.htm">Python - Variable Types</a></li>
<li><a target="_top" href="python_basic_operators.htm">Python - Basic Operators</a></li>
<li><a target="_top" href="python_decision_making.htm">Python - Decision Making</a></li>
<li><a target="_top" href="python_loops.htm">Python - Loops</a></li>
<li><a target="_top" href="python_numbers.htm">Python - Numbers</a></li>
<li><a target="_top" href="python_strings.htm">Python - Strings</a></li>
<li><a target="_top" href="python_lists.htm">Python - Lists</a></li>
<li><a target="_top" href="python_tuples.htm">Python - Tuples</a></li>
<li><a target="_top" href="python_dictionary.htm">Python - Dictionary</a></li>
<li><a target="_top" href="python_date_time.htm">Python - Date &amp; Time</a></li>
<li><a target="_top" href="python_functions.htm">Python - Functions</a></li>
<li><a target="_top" href="python_modules.htm">Python - Modules</a></li>
<li><a target="_top" href="python_files_io.htm">Python - Files I/O</a></li>
<li><a target="_top" href="python_exceptions.htm">Python - Exceptions</a></li>
</ul>
<ul class="menu">
<li class="heading">Python Advanced Tutorial</li>
<li><a target="_top" href="python_classes_objects.htm"><b>Python - Classes/Objects</b></a></li>
<li><a target="_top" href="python_reg_expressions.htm">Python - Reg Expressions</a></li>
<li><a target="_top" href="python_cgi_programming.htm">Python - CGI Programming</a></li>
<li><a target="_top" href="python_database_access.htm">Python - Database Access</a></li>
<li><a target="_top" href="python_networking.htm">Python - Networking</a></li>
<li><a target="_top" href="python_sending_email.htm">Python - Sending Email</a></li>
<li><a target="_top" href="python_multithreading.htm">Python - Multithreading</a></li>
<li><a target="_top" href="python_xml_processing.htm">Python - XML Processing</a></li>
<li><a target="_top" href="python_gui_programming.htm">Python - GUI Programming</a></li>
<li><a target="_top" href="python_further_extensions.htm">Python - Further Extensions</a></li>
</ul>
<ul class="menu">
<li class="heading">Python  Useful Resources</li>
<li><a target="_top" href="python_quick_guide.htm">Python - Quick Guide</a></li>
<li><a target="_top" href="python_tools_utilities.htm">Python - Tools/Utilities</a></li>
<li><a target="_top" href="python_useful_resources.htm">Python Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>Python Object Oriented</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="python_exceptions.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="python_reg_expressions.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<p>Python has been an object-oriented language from day one. Because of this, creating and using classes and objects are downright easy. This chapter helps you become an expert in using Python's object-oriented programming support. </p>
<p>If you don't have any previous experience with object-oriented (OO) programming, you may want to consult an introductory course on it or at least a tutorial of some sort so that you have a grasp of the basic concepts.</p>
<p>However, here is small introduction of Object-Oriented Programming (OOP) to bring you at speed:</p>
<h2>Overview of OOP Terminology</h2>
<ul class="list">
<li><p><b>Class:</b>  A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation. </p></li>
<li><p><b>Class variable:</b> A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class's methods. Class variables aren't used as frequently as instance variables are. </p></li>
<li><p><b>Data member:</b> A class variable or instance variable that holds data associated with a class and its objects. </p></li>
<li><p><b>Function overloading:</b> The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects (arguments) involved.</p></li>
<li><p><b>Instance variable:</b> A variable that is defined inside a method and belongs only to the current instance of a class. </p></li>
<li><p><b>Inheritance :</b> The transfer of the characteristics of a class to other classes that are derived from it. </p></li>
<li><p><b>Instance:</b>  An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.</p></li>
<li><p><b>Instantiation :</b> The creation of an instance of a class. </p></li>
<li><p><b>Method :</b> A special kind of function that is defined in a class definition.</p></li>
<li><p><b>Object :</b> A unique instance of a data structure that's defined by its class. An object comprises both data members (class variables and instance variables) and methods. </p></li>
<li><p><b>Operator overloading:</b> The assignment of more than one function to a particular operator.</p></li>
</ul>
<h2>Creating Classes:</h2>
<p>The <i>class</i> statement creates a new class definition. The name of the class immediately follows the keyword <i>class</i> followed by a colon as follows:</p>
<pre class="prettyprint">
class ClassName:
   'Optional class documentation string'
   class_suite
</pre>
<ul class="list">
<li><p>The class has a documentation string which can be access via <i>ClassName.__doc__</i>.</p></li>
<li><p>The <i>class_suite</i> consists of all the component statements, defining class members, data attributes, and functions.</p></li>
</ul>
<h3>Example:</h3>
<p>Following is the example of a simple Python class:</p>
<pre class="prettyprint">
class Employee:
   'Common base class for all employees'
   empCount = 0

   def __init__(self, name, salary):
      self.name = name
      self.salary = salary
      Employee.empCount += 1
   
   def displayCount(self):
     print "Total Employee %d" % Employee.empCount

   def displayEmployee(self):
      print "Name : ", self.name,  ", Salary: ", self.salary
</pre>
<ul class="list">
<li><p>The variable <i>empCount</i> is a class variable whose value would be shared among all instances of a this class. This can be accessed as <i>Employee.empCount</i> from inside the class or outside the class.</p></li>
<li><p>The first method <i>__init__()</i> is a special method which is called class constructor or initialization method that Python calls when you create a new instance of this class.</p></li>
<li><p>You declare other class methods like normal functions with the exception that the first argument to each method is <i>self</i>. Python adds the <i>self</i> argument to the list for you; you don't need to include it when you call the methods.</p></li>
</ul>
<h2>Creating instance objects:</h2>
<p>To create instances of a class, you call the class using class name and pass in whatever arguments its <i>__init__</i> method accepts.</p>
<pre class="prettyprint">
"This would create first object of Employee class"
emp1 = Employee("Zara", 2000)
"This would create second object of Employee class"
emp2 = Employee("Manni", 5000)
</pre>
<h2>Accessing attributes:</h2>
<p>You access the object's attributes using the dot operator with object. Class variable would be accessed using class name as follows:</p>
<pre class="prettyprint">
emp1.displayEmployee()
emp2.displayEmployee()
print "Total Employee %d" % Employee.empCount
</pre>
<p>Now putting all  the concepts together:</p>
<pre class="prettyprint">
#!/usr/bin/python

class Employee:
   'Common base class for all employees'
   empCount = 0

   def __init__(self, name, salary):
      self.name = name
      self.salary = salary
      Employee.empCount += 1
   
   def displayCount(self):
     print "Total Employee %d" % Employee.empCount

   def displayEmployee(self):
      print "Name : ", self.name,  ", Salary: ", self.salary

"This would create first object of Employee class"
emp1 = Employee("Zara", 2000)
"This would create second object of Employee class"
emp2 = Employee("Manni", 5000)
emp1.displayEmployee()
emp2.displayEmployee()
print "Total Employee %d" % Employee.empCount
</pre>
<p>When the above code is  executed, it produces following result:</p>
<pre class="result">
Name :  Zara ,Salary:  2000
Name :  Manni ,Salary:  5000
Total Employee 2
</pre>
<p>You can add, remove, or modify attributes of classes and objects at any time:</p>
<pre class="prettyprint">
emp1.age = 7  # Add an 'age' attribute.
emp1.age = 8  # Modify 'age' attribute.
del emp1.age  # Delete 'age' attribute.
</pre>
<p>Instead of using the normal statements to access attributes, you can use following functions:</p>
<ul class="list">
<li><p>The <b>getattr(obj, name[, default])</b> : to access the attribute of object.</p></li>
<li><p>The <b>hasattr(obj,name)</b> : to check if an attribute exists or not.</p></li>
<li><p>The <b>setattr(obj,name,value)</b> : to set an attribute. If attribute does not exist then it would be created.</p></li>
<li><p>The <b>delattr(obj, name)</b> : to delete an attribute.</p></li>
</ul>
<pre class="prettyprint">
hasattr(emp1, 'age')    # Returns true if 'age' attribute exists
getattr(emp1, 'age')    # Returns value of 'age' attribute
setattr(emp1, 'age', 8) # Set attribute 'age' at 8
delattr(empl, 'age')    # Delete attribute 'age'
</pre>
<h2>Built-In Class Attributes:</h2>
<p>Every Python class keeps following built-in attributes and they can be accessed using dot operator like any other attribute:</p>
<ul class="list">
<li><p><b>__dict__ :</b> Dictionary containing the class's namespace.</p></li>
<li><p><b>__doc__ :</b> Class documentation string, or None if undefined. </p></li>
<li><p><b>__name__:</b> Class name. </p></li>
<li><p><b>__module__:</b> Module name in which the class is defined. This attribute is "__main__" in interactive mode. </p></li>
<li><p><b>__bases__ :</b> A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.</p></li>
</ul>
<p>For the above class let's try to access all these attributes:</p>
<pre class="prettyprint">
print "Employee.__doc__:", Employee.__doc__
print "Employee.__name__:", Employee.__name__
print "Employee.__module__:", Employee.__module__
print "Employee.__bases__:", Employee.__bases__
print "Employee.__dict__:", Employee.__dict__
</pre>
<p>When the above code is  executed, it produces following result:</p>
<pre class="result">
Employee.__doc__: Common base class for all employees
Employee.__name__: Employee
Employee.__module__: __main__
Employee.__bases__: ()
Employee.__dict__: {'__module__': '__main__', 'displayCount':
&lt;function displayCount at 0xb7c84994&gt;, 'empCount': 2, 
'displayEmployee': &lt;function displayEmployee at 0xb7c8441c&gt;, 
'__doc__': 'Common base class for all employees', 
'__init__': &lt;function __init__ at 0xb7c846bc&gt;}
</pre>
<h2>Destroying Objects (Garbage Collection):</h2>
<p>Python deletes unneeded objects (built-in types or class instances) automatically to free memory space. The process by which Python periodically reclaims blocks of memory that no longer are in use is termed garbage collection.</p>
<p>Python's garbage collector runs during program execution and is triggered when an object's reference count reaches zero. An object's reference count changes as the number of aliases that point to it changes:</p>
<p>An object's reference count increases when it's assigned a new name or placed in a container (list, tuple, or dictionary). The object's reference count decreases when it's deleted with <i>del</i>, its reference is reassigned, or its reference goes out of scope. When an object's reference count reaches zero, Python collects it automatically.</p>
<pre class="prettyprint">
a = 40      # Create object &lt;40&gt;
b = a       # Increase ref. count  of &lt;40&gt; 
c = [b]     # Increase ref. count  of &lt;40&gt; 

del a       # Decrease ref. count  of &lt;40&gt;
b = 100     # Decrease ref. count  of &lt;40&gt; 
c[0] = -1   # Decrease ref. count  of &lt;40&gt; 
</pre>
<p>You normally won't notice when the garbage collector destroys an orphaned instance and reclaims its space. But a class can implement the special method <i>__del__()</i>, called a destructor, that is invoked when the instance is about to be destroyed. This method might be used to clean up any nonmemory resources used by an instance.</p>
<h3>Example:</h3>
<p>This __del__() destructor prints the class name of an instance that is about to be destroyed:</p>
<pre class="prettyprint">
#!/usr/bin/python

class Point:
   def __init( self, x=0, y=0):
      self.x = x
      self.y = y
   def __del__(self):
      class_name = self.__class__.__name__
      print class_name, "destroyed"

pt1 = Point()
pt2 = pt1
pt3 = pt1
print id(pt1), id(pt2), id(pt3) # prints the ids of the obejcts
del pt1
del pt2
del pt3
</pre>
<p>When the above code is  executed, it produces following result:</p>
<pre class="result">
3083401324 3083401324 3083401324
Point destroyed
</pre>
<p><b>Note:</b> Ideally, you should define your classes in separate file then you should import them in your main program file using <i>import</i> statement. Kindly check <a  href="python_modules.htm">Python - Modules</a> chapter for more detail on importing modules and classes.</p>
<h2>Class Inheritance:</h2>
<p>Instead of starting from scratch, you can create a class by deriving it from a preexisting class by listing the parent class in parentheses after the new class name:</p>
<p>The child class inherits the attributes of its parent class, and you can use those attributes as if they were defined in the child class. A child class can also override data members and methods from the parent.</p>
<h3>Syntax:</h3>
<p>Derived classes are declared much like their parent class; however, a list of base classes to inherit from are given after the class name:</p>
<pre class="prettyprint">
class SubClassName (ParentClass1[, ParentClass2, ...]):
   'Optional class documentation string'
   class_suite
</pre>
<h3>Example:</h3>
<pre class="prettyprint">
#!/usr/bin/python

class Parent:        # define parent class
   parentAttr = 100
   def __init__(self):
      print "Calling parent constructor"

   def parentMethod(self):
      print 'Calling parent method'

   def setAttr(self, attr):
      Parent.parentAttr = attr

   def getAttr(self):
      print "Parent attribute :", Parent.parentAttr

class Child(Parent): # define child class
   def __init__(self):
      print "Calling child constructor"

   def childMethod(self):
      print 'Calling child method'

c = Child()          # instance of child
c.childMethod()      # child calls its method
c.parentMethod()     # calls parent's method
c.setAttr(200)       # again call parent's method
c.getAttr()          # again call parent's method
</pre>
<p>When the above code is  executed, it produces following result:</p>
<pre class="prettyprint">
Calling child constructor
Calling child method
Calling parent method
Parent attribute : 200
</pre>
<p>Similar way you can drive a class from multiple parent classes as follows:</p>
<pre class="prettyprint">
class A:        # define your class A
.....

class B:         # define your calss B
.....

class C(A, B):   # subclass of A and B
.....
</pre>
<p>You can use issubclass() or isinstance() functions to check a relationships of two classes and instances:</p>
<ul class="list">
<li><p>The <b>issubclass(sub, sup)</b> boolean function returns true if the given subclass <b>sub</b> is indeed a subclass of the superclass <b>sup</b>.</p></li>
<li><p>The <b>isinstance(obj, Class)</b> boolean function returns true if <i>obj</i> is an instance of class <i>Class</i> or is an instance of a subclass of Class</p></li>
</ul>
<h2>Overriding Methods:</h2>
<p>You can always override your parent class methods. One reason for overriding parent's methods is because you may want special or different functionality in your subclass.</p>
<h3>Example:</h3>
<pre class="prettyprint">
#!/usr/bin/python

class Parent:        # define parent class
   def myMethod(self):
      print 'Calling parent method'

class Child(Parent): # define child class
   def myMethod(self):
      print 'Calling child method'

c = Child()          # instance of child
c.myMethod()         # child calls overridden method
</pre>
<p>When the above code is  executed, it produces following result:</p>
<pre class="result">
Calling child method
</pre>
<h2>Base Overloading Methods:</h2>
<p>Following table lists some generic functionality that you can override in your own classes:</p>
<table class="src">
<tr>
<th style="width:10%">SN</th><th>Method, Description &amp; Sample Call</th>
</tr>
<tr><td>1</td><td><b>__init__ ( self [,args...] )</b><br />Constructor (with any optional arguments)<br />Sample Call : <i>obj = className(args)</i></td></tr>
<tr><td>2</td><td><b>__del__( self )</b><br />Destructor, deletes an object<br />Sample Call : <i>dell obj</i></td></tr>
<tr><td>3</td><td><b>__repr__( self )</b><br />Evaluatable string representation<br />Sample Call : <i>repr(obj)</i></td></tr>
<tr><td>4</td><td><b>__str__( self )</b><br />Printable string representation<br />Sample Call : <i>str(obj)</i></td></tr>
<tr><td>5</td><td><b>__cmp__ ( self, x )</b><br />Object comparison<br />Sample Call : <i>cmp(obj, x)</i></td></tr>
</table>
<h2>Overloading Operators:</h2>
<p>Suppose you've created a Vector class to represent two-dimensional vectors. What happens when you use the plus operator to add them? Most likely Python will yell at you.</p>
<p>You could, however, define the <i>__add__</i> method in your class to perform vector addition, and then the plus operator would behave as per expectation:</p>
<h3>Example:</h3>
<pre class="prettyprint">
#!/usr/bin/python

class Vector:
   def __init__(self, a, b):
      self.a = a
      self.b = b

   def __str__(self):
      return 'Vector (%d, %d)' % (self.a, self.b)
   
   def __add__(self,other):
      return Vector(self.a + other.a, self.b + other.b)

v1 = Vector(2,10)
v2 = Vector(5,-2)
print v1 + v2
</pre>
<p>When the above code is  executed, it produces following result:</p>
<pre class="result">
Vector(7,8)
</pre>
<h2>Data Hiding:</h2>
<p>An object's attributes may or may not be visible outside the class definition. For these cases, you can name attributes with a double underscore prefix, and those attributes will not be directly visible to outsiders:</p>
<h3>Example:</h3>
<pre class="prettyprint">
#!/usr/bin/python

class JustCounter:
   __secretCount = 0
  
   def count(self):
      self.__secretCount += 1
      print self.__secretCount

counter = JustCounter()
counter.count()
counter.count()
print counter.__secretCount
</pre>
<p>When the above code is  executed, it produces following result:</p>
<pre class="result">
1
2
Traceback (most recent call last):
  File "test.py", line 12, in &lt;module&gt;
    print counter.__secretCount
AttributeError: JustCounter instance has no attribute '__secretCount'
</pre>
<p>Python protects those members by internally changing the name to include the class name. You can access such attributes as <i>object._className__attrName</i>. If you would replace your last line as following, then it would work for you:</p>
<pre class="prettyprint">
.........................
print counter._JustCounter__secretCount
</pre>
<p>When the above code is  executed, it produces following result:</p>
<pre class="result">
1
2
2
</pre>
<hr />
<div class="pre-btn">
<a href="python_exceptions.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/python_classes_objects.pdf" alt="Python Object Oriented" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="python_reg_expressions.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="../jsp/index.htm" target="_top">JSP </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/python/python_classes_objects.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:43:27 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
