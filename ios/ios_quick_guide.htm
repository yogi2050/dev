<!doctype html> 
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/ios/ios_quick_guide.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:31:23 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>iOS - Quick Guide</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="iOS, Tutorials, Learning, Beginners, Basics, Environment, xCode, Installation, iPhone, Applications, actions and outlets, UI elements, Delegates, Objective-C, Accelerometer, Universal Applications, Camera Management, LocationHandling, SQLite Database, Sending Email, Audio & Video, File Handling, Accessing Maps, In-App Purchase, iAd Integration, GameKit, Storyboards, Auto Layouts, Twitter & Facebook, Memory Management, Application Debugging" />
<meta name="keywords" content="iOS Quick Guide -  Learning iPhone and iPad application development on iOS in simple and easy steps using this beginner's tutorial containing basic to advanced knowledge environment setup, actions and outlets, UI elements, Delegates, Objective-C, Accelerometer, Universal Applications, Camera Management, LocationHandling, SQLite Database, Sending Email, Audio & Video, File Handling, Accessing Maps, In-App Purchase, iAd Integration, GameKit, Storyboards, Auto Layouts, Twitter & Facebook, Memory Management, Application Debugging." />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
#topmenu a:hover {text-decoration:none;color:#c4c7c8 !important;background-color:transparent;font-weight:bold;}
#header{ 
 background:#c4c7c8 !important;
 background:url(/images/footer.png) repeat-x !important;
}
#topmenu
{
background-color:#353435 !important;
}
#leftcol ul.menu li.heading 
{
   background:#c4c7c8 !important;
   background:url(/images/footer.png) repeat-x !important; 
   border:1px solid #c1c1c1 !important;
}
#leftcol, #middlecol, #rightcol {min-height:1275px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/ios-mini-logo.png" alt="iOS Tutorial" />
</div>
<ul class="menu">
<li class="heading">iOS Tutorial</li>
<li><a target="_top" href="index.htm">iOS - Home</a></li>
<li><a target="_top" href="ios_getting_started.htm">iOS - Getting Started</a></li>
<li><a target="_top" href="ios_environment_setup.htm">iOS - Environment Setup</a></li>
<li><a target="_top" href="ios_objective_c.htm">iOS - Objective-C Basics</a></li>
<li><a target="_top" href="ios_first_iphone_application.htm">iOS - First iPhone Application</a></li>
<li><a target="_top" href="ios_actions_and_outlets.htm">iOS - Actions and Outlets</a></li>
<li><a target="_top" href="ios_delegates.htm">iOS - Delegates</a></li>
<li><a target="_top" href="ios_ui_elements.htm">iOS - UI Elements</a></li>
<li><a target="_top" href="ios_accelerometer.htm">iOS - Accelerometer</a></li>
<li><a target="_top" href="ios_universal_applications.htm">ios - Universal Applications</a></li>
<li><a target="_top" href="ios_camera_management.htm">iOS - Camera Management</a></li>
<li><a target="_top" href="ios_location_handling.htm">iOS - Location Handling</a></li>
<li><a target="_top" href="ios_sqlite_database.htm">iOS - SQLite Database</a></li>
<li><a target="_top" href="ios_sending_email.htm">iOS - Sending Email</a></li>
<li><a target="_top" href="ios_audio_video.htm">iOS - Audio &amp; Video</a></li>
<li><a target="_top" href="ios_file_handling.htm">iOS - File Handling</a></li>
<li><a target="_top" href="ios_accessing_maps.htm">iOS - Accessing Maps</a></li>
<li><a target="_top" href="ios_in_app_purchase.htm">iOS - In-App Purchase</a></li>
<li><a target="_top" href="ios_iad_integration.htm">iOS - iAd Integration</a></li>
<li><a target="_top" href="ios_gamekit.htm">iOS - GameKit</a></li>
<li><a target="_top" href="ios_storyboards.htm">iOS - Storyboards</a></li>
<li><a target="_top" href="ios_auto_layouts.htm">iOS - Auto Layouts</a></li>
<li><a target="_top" href="ios_twitter_facebook.htm">iOS - Twitter &amp; Facebook</a></li>
<li><a target="_top" href="ios_memory_management.htm">iOS - Memory Management</a></li>
<li><a target="_top" href="ios_application_debugging.htm">iOS - Application Debugging</a></li>
</ul>
<ul class="menu">
<li class="heading">iOS Useful Resources</li>
<li><a target="_top" href="ios_quick_guide.htm"><b>iOS - Quick Guide</b></a></li>
<li><a target="_top" href="ios_useful_resources.htm">iOS Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>iOS - Quick Guide</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr />
<div class="pre-btn">
<a href="index.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="ios_environment_setup.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<h2>General Overview</h2>
<p>iOS which was previously called iPhone OS is a mobile operating system developed by Apple Inc. Its first release was in 2007 which included iPhone and iPod Touch.  iPad (1st Generation) was released  in the April 2010 and in iPad mini was released in November 2012</p>
<p>The iOS devices get evolved quite frequently and from the experience we find that at least one version of iPhone and iPad is launched every year. Now we have iphone5 launched which has its predecessors starting from iPhone, iPhone 3gs, iPhone 4, iPhone 4s. Similarly iPad has evolved from iPad (1st Generation) to iPad(4th Generation) and an additional iPad mini version.</p>
<p>The iOS SDK has evolved from 1.0 to 6.0. iOS 6.0, the latest SDK is the only officially supported version in Xcode 4.5 and higher. We have rich apple documentation and we can find which methods and libraries can be used based on our deployment target.  In the current version of Xcode, we&rsquo;ll be able to choose between deployment targets of iOS 4.3, 5.0 and 6.0..</p>
<p>The power of iOS can be felt with some of the following features provided part of the device.
<ul class="list">
	<li><p>Maps<p></li>
	<li><p>Siri<p></li>
	<li><p>Facebook and Twitter<p></li>
	<li><p>Multi-Touch<p></li>
	<li><p>Accelerometer<p></li>
	<li><p>GPS<p></li>
	<li><p>High end processor<p></li>
	<li><p>Camera<p></li>
	<li><p>Safari<p></li>
	<li><p>Powerful APIs<p></li>
	<li><p>Game center<p></li>
	<li><p>In-App Purchase<p></li>
	<li><p>Reminders<p></li>
	<li><p>Wide Range of gestures<p></li>
</ul>
</p>
<p>The number of users using iPhone/iPad has increased a great deal. This creates the opportunity for developers to make money by creating applications for iPhone and iPad the Apple's App Store.</p>
<p>For some one new to iOS, Apple has designed an application store where the user can buy apps developed for their iOS devices.  A developer can create both free and paid apps to App Store. To develop applications and distribute to the store the developer will require to register with iOS developer program which cost $99 a year and a Mac with Mountain Lion or higher for its development with latest Xcode. </p>
<br>
<h2>Registering as an Apple developer</h2>
<p>An apple ID is most necessary if you are having any apple device and being a developer, you definitely need it. It's also free and hence no issues in having one.  The benefits of having an apple account are as follows,<ul class="list">
	<li><p>Access to development tools<p></li>
	<li><p>Worldwide Developers Conference (WWDC) videos<p></li>
	<li><p>Can join iOS developer program teams when invited<p></li>	
</ul></p>
<p>To register an apple account for you</p>
<p>1. Click the link <a rel="nofollow" href="https://developer.apple.com/programs/register/" target="_blank" title="Register Apple Account">(https://developer.apple.com/programs/register/)</a>
 and select &quot;Create Apple ID&quot;
</p>
<img src="images/iOS_Free_Reg.jpg" width="560" height="360" border="0" alt="">
<p>2. Provide the necessary information which is self explanatory as given in the page.</p>
<p>3. Verify your account with your email verification and account becomes active.</p>
<p>4. Now you will be able to download the developer tools like Xcode which is packaged with iOS simulator and iOS SDK, and other developer resources.</p>
<h2>Apple iOS Developer Program</h2>
<p>The first question that would arise to a new developer is why I should register for iOS developer program. The answer is quite simple; Apple always focuses on providing quality applications to its user. If there was no registration fee there could be a possibility of junk apps being uploaded and cause problem for app review team of Apple.</p>
<p>The benefits of joining iOS developer program are as follows,<ul class="list">
	<li><p>Run the apps you develop on the real iOS device<p></li>
	<li><p>Distribute the apps to app store<p></li>
	<li><p>Get access to developer previews<p></li>	
</ul></p>
<p>The steps to join iOS developer program are as follows</p>
<p>1. To register click  <a rel="nofollow" href="https://developer.apple.com/programs/ios/" target="_blank" title="Register for iOS Developer program">(https://developer.apple.com/programs/ios/)</a></p>
<img src="images/iOS_DeveloperProgram_Reg.jpg" width="560" height="360" border="0" alt="">
<p>2. Click enroll now in the page that is displayed</p>
<p>3. Then you can either sign in to your existing apple account (if you have one) or create a new Apple ID.</p>
<p>4. Then you have to select between Individual and Company accounts. Use company account if there will be more than one developer in your team. In individual account you can't add members.</p>
<p>5. Then after entering the personal information (for those who newly registers), you can purchase and activate the program by paying with the help of your credit card (Only accepted mode of payment).</p>
<p>6. Now you will get access to developer resources by selecting the member center option in the page.</p>
<img src="images/memberCenter.jpg" width="560" height="360" border="0" alt="">
<p>7. Here you will be able to do the following,</p>
<ul class="list">
	<li><p>Create provisioning profiles</p></li>
	<li><p>Manage your team and devices</p></li>
	<li><p>Managing application to app store through iTunes Connect</p></li>
	<li><p>Get forum and technical support</p></li>
</ul>
<h1>iOS - Environment Setup</h1>
<h2>iOS - Xcode Installation</h2>
<p>1. Download Xcode latest version from <a rel="nofollow" href="https://developer.apple.com/downloads/" target="_blank" title="Download Xcode">(https://developer.apple.com/downloads/)</a></p>
<img src="images/Xcode_Download.jpg" width="560" height="360" border="0" alt="">
<p>2. Double click the Xcode dmg file.</p>
<p>3. You will find a device mounted and opened.</p>
<p>4. Here there will be two items in the window that's displayed namely Xcode application and the Application folder's shortcut. </p>
<p>5. Drag the Xcode to application and it will be copied to your applications.  </p>
<p>6. Now Xcode will be available part of other applications from which you can select and run.</p>
<p>You also have another option of downloading Xcode from the Mac App store and then install following the step by step procedure given in the screen.</p>
<h2>Interface Builder</h2>
<p>Interface builder is the tool that enables easy creation of UI interface. You have a rich set of UI elements that is developed for use. You have just drag and drop into your UI view.  We'll learn about adding UI elements, creating outlets and actions for the UI elements in the upcoming pages. </p>
<img src="images/InterfaceBuilder.jpg" width="560" height="360" border="0" alt="">
<p>You have objects library in right bottom that consists the entire necessary UI element. The user interface is often referred as xibs which is their file extension. Each of the xibs is linked to a corresponding view controller.</p>
<h2>iOS simulator</h2>
<p>iOS simulator actually consists of two types of devices namely iPhone and iPad with its different versions. iPhone versions include iPhone (normal), iPhone Retina, iPhone 5 .iPad has iPad and iPad Retina. iPhone simulator is displayed below.</p>
<img src="images/iPhoneSimulator.jpg" width="260" height="200" border="0" alt="">
<p>You can simulate location in iOS simulator for playing around with latitude and longitude effects of the app. You can also simulate memory warning and in-call status in the simulator. You can be able to use the simulator for most purposes. But you cannot test the device features like accelerometer. So you might always need an iOS device to test thoroughly on all aspect and scenarios of an application.</p>
<h1>Objective C Introduction</h1>
<p>The language used in iOS development is objective C. It is an object oriented language and hence it would easy for those who have some background in object oriented language programming.</p>
<h2>Interface and Implementation </h2>
<p>In objective C the file where the declaration of class is done is called the interface file and the file where the class is defined is called the implementation file. </p>
<p>A simple interface file <b>MyClass.h</b> would look like the following.</p>
<pre class="prettyprint">
@interace MyClass:NSObject{ 
// class variable declared here
}
// class properties declared here
// class methods and instance methods declared here
@end
</pre>
<p>The implementation file <b>MyClass.m</b> would be like follows</p>
<pre class="prettyprint">
@implementation MyClass
// class methods defined here
@end
</pre>
<h2>Object Creation</h2>
<p>Object creation is done as follows </p>
<pre class="prettyprint">
MyClass  *objectName = [[MyClass alloc]init] ;
</pre>
<h2>Methods</h2>
<p>Method  is declared in objective C as follows </p>
<pre class="prettyprint">
-(returnType)methodName:(typeName) variable1 :(typeName)variable2;
</pre>
<p>An example is shown below</p>
<pre class="prettyprint">
-(void)calculateAreaForRectangleWithLength:(CGfloat)length 
andBreadth:(CGfloat)breadth;
</pre>
<p>You might be wondering what the andBreadth string for; actually its optional string which helps us read and understands the method easier especially at the time of calling. To call this method in the same class we use the following statement</p>
<pre class="prettyprint">
[self calculateAreaForRectangleWithLength:30 andBreadth:20];
</pre>
<p>As said above the use of andBreadth helps us understand that breath is 20. Self is used to specify it's a class method. </p>
<h4>Class method </h4>
<p>Class methods can be accessed directly without creating objects for the class. They don't have any variables and objects associated with it. An example is shown below.</p>
<pre class="prettyprint">
+(void)simpleClassMethod;
</pre>
<p>It can be accessed by using the class name (let's assume the class name as MyClass) as follows. </p>
<pre class="prettyprint">
[MyClass simpleClassMethod];
</pre>
<h4>Instance methods </h4>
<p>Instance methods can be accessed only after creating an object for the class. Memory is allocated to the instance variables. An example instance method is shown below.</p>
<pre class="prettyprint">
-(void)simpleInstanceMethod; 
</pre>
<p>It can be accessed after creating an object for the class as follows</p>
<pre class="prettyprint">
MyClass  *objectName = [[MyClass alloc]init] ;
[objectName simpleInstanceMethod];
</pre>
<h2>Important data types in Objective C </h2>
<table class="src">
<tr><th style="width:5%;">S.N.</th><th>Data Type</th></tr>
<tr><td>1</td><td>NSString<br />It is used for representing a string</td></tr>
<tr><td>2</td><td>CGfloat <br />It is used for representing a floating point value (normal float is also allowed but it's better to use CGfloat) </td></tr>
<tr><td>3</td><td>NSInteger <br />It is used for representing integer</td></tr>
<tr><td>4</td><td>BOOL <br />used for representing Boolean(YES or NO are BOOL types allowed )</td></tr>
</table>
<h2>Printing logs</h2>
<p>NSLog - used for printing a statement. It will be printed in device logs and debug console in release and debug modes respectively.</p>
<p>Eg: NSlog(@&quot;&quot;);</p>
<h2>Control Structures </h2>
<p>Most of control structures are same as in C and C++ except for a few additions like for in statement.</p>
<h2>Properties</h2>
<p>For an external class to access class variables properties are used</p>
<p>Eg: @property(nonatomic , strong) NSString *myString;</p>
<h4>Accessing Properties</h4>
<p>You can use dot operator to access properties. To access the above property we will do the following.</p>
<pre class="prettyprint">
self.myString = @&quot;Test&quot;;
</pre>
<p>You can also use set method as follows.</p>
<pre class="prettyprint">
[self setMyString:@&quot;Test&quot;];
</pre>
<h2>Categories</h2>
<p>Categories are use to add methods to existing classes. By this way we can add method to classes for which we don't have even implementation files where the actual class is defined. A sample category for our class is as follows.</p>
<pre class="prettyprint">
@interace MyClass(customAdditions)
- (void)sampleCategoryMethod;
@end

@implementation MyClass(categoryAdditions)

-(void)sampleCategoryMethod{
   NSLog(@&quot;Just a test category&quot;);
}
</pre>
<h2>Arrays</h2>
<p>NSMutableArray and NSArray are the array classes used in objective C. As the name suggests the former is mutable and latter is immutable. An example is shown below.</p>
<pre class="prettyprint">
NSMutableArray *aMutableArray = [[NSMutableArray alloc]init];
[anArray addObject:@&quot;firstobject&quot;];
NSArray *aImmutableArray = [[NSArray alloc]
initWithObjects:@&quot;firstObject&quot;,nil];
</pre>
<h2>Dictionary</h2>
<p>NSMutableDictionary and NSDictionary is the dictionary classes used in objective C. As the name suggests the former is mutable and latter is immutable. An example is shown below.</p>
<pre class="prettyprint">
NSMutableDictionary*aMutableDictionary = [[NSMutableArray alloc]init];
[aMutableDictionary setObject:@&quot;firstobject&quot; forKey:@&quot;aKey&quot;];
NSDictionary*aImmutableDictionary= [[NSDictionary alloc]initWithObjects:[NSArray arrayWithObjects:
@&quot;firstObject&quot;,nil] forKeys:[ NSArray arrayWithObjects:@&quot;aKey&quot;]];
</pre>
<h1>First iPhone Application</h1>
<p>Now we are just going to create a simple single view application (a blank app) that just runs on the iOS simulator.</p>
<p>The steps are as follows.</p>
<p>1. Open Xcode and select create a new Xcode project.</p>
<img src="images/XcodeWelcomePage.jpg" width="560" height="360" border="0" alt="">
<p>2. Then select single view application</p>
<img src="images/CreateProject.jpg" width="560" height="360" border="0" alt="">
<p>3. Then enter product name i.e. the name of the application, organization name and then the company identifier  </p>
<img src="images/NewProjectCreateOptions.jpg" width="560" height="360" border="0" alt="">
<p>4. Ensure Use automatic reference counting is selected in order to automatically release the resources allocated once it goes out of scope. Click Next.</p>
<p>5. Select the directory for the project and select create.</p>
<img src="images/CreateProjectSelectFolder.jpg" width="560" height="360" border="0" alt="">
<p>6. You will see a screen as follows </p>
<img src="images/XcodeProjectPage.jpg" width="560" height="360" border="0" alt="">
<p>In the screen above you will able to select the supported orientations, build and release settings. 
There is a field deployment target, the device version from which we want to support, lets select 4.3 which is the minimum deployment target allowed now. For now these are not required and let's focus on running the application. </p>
<p>7. Now select iPhone simulator in the drop down near Run button and select run.</p>
<img src="images/runProject.jpg" width="200" height="100" border="0" alt="">
<p>8. That's it; you have successfully run your first application. You will get an output as follows</p>
<img src="images/iPhoneSimulator.jpg" width="200" height="360" border="0" alt="">
<p>Now let's change the background color, just to have a start with interface builder. Select ViewController.xib. Select background option in the right side, change the color and run. </p>
<img src="images/InterfaceBuilder.jpg" width="560" height="360" border="0" alt="">
<p>In the above project, by default the deployment target would have been set to iOS 6.0 and auto layout will be enabled. But to ensure our application to run on devices that run iOS 4.3 onwards, we have already modified the deployment target at the start of creation of this application but we didn't disable auto layout, to disable auto layout we need to deselect the auto layout checkbox in file inspector of each nib i.e the xib files. The various sections of Xcode project IDE are given in the following figure (Courtesy: Apple Xcode 4 User documentation). </p>
<img src="images/Xcode4Workspace.jpg" width="560" height="360" border="0" alt="">
<p>File inspector is found in the inspector selector bar as shown above and auto layout can be unchecked there. Auto layout can be used when you want to target only iOS 6 devices. Also you'll be able to use many new features like passbook if you raise the deployment target to iOS 6. For now let's stick to iOS 4.3 as deployment target.</p>
<h2>Digging deep into the code of the First iOS application</h2>
<p>You will find 5 different files that would have been generated for your application. They are listed as follows. </p>
<ul class="list">
	<li><p>AppDelegate.h </p></li>
	<li><p>AppDelegate.m</p></li>
	<li><p>ViewController.h</p></li>
	<li><p>ViewController.m</p></li>
	<li><p>ViewController.xib</p></li>
</ul>
<p>We use these single line comments (//) to give simple code explanations and important items explained below the code.</p>
<h4>AppDelegate.h</h4>
<pre class="prettyprint">
// Header File that provides all UI related items. 
#import &lt;UIKit/UIKit.h&gt; 
 // Forward declaration (Used when class will be defined /imported in future)
@class ViewController;  

 // Interface for Appdelegate
@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;
// Property window 
@property (strong, nonatomic) UIWindow *window; 
 // Property Viewcontroller
@property (strong, nonatomic) ViewController *viewController;
//this marks end of interface 
@end  
</pre>
<h6><i>Important items in code</i></h6>
<ul class="list">
	<li><p>AppDelegate inherits from UIResponder that handles iOS events</p></li>
	<li><p>Implements the delegate methods of UIApplication delegate which provide key application events like finished launching, about to terminate and so on.</p></li>
	<li><p>UIWindow object to manage and co-ordinate the various views on the iOS device screen. It's like the base view over which all other views are loaded. Generally there is only one window for an application.</p></li>
	<li><p>UIViewController to handle the screen flow.</p></li>
</ul>
<h4>AppDelegate.m</h4>
<pre class="prettyprint">
// Imports the class Appdelegate's interface
import "AppDelegate.h" 

// Imports the viewcontroller to be loaded
#import "ViewController.h" 

// Class definition starts here
@implementation AppDelegate 


// Following method intimates us the application launched  successfully 
- (BOOL)application:(UIApplication *)application 
 didFinishLaunchingWithOptions:(NSDictionary *)launchOptions 
{
    self.window = [[UIWindow alloc] initWithFrame:
	[[UIScreen mainScreen] bounds]]; 
    // Override point for customization after application launch.
    self.viewController = [[ViewController alloc] 
	 initWithNibName:@"ViewController" bundle:nil];
    self.window.rootViewController = self.viewController;
    [self.window makeKeyAndVisible];
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    /* Sent when the application is about to move from active to inactive state.
    This can occur for certain types of temporary interruptions
    (such as an incoming phone call or SMS message)
    or when the user quits the application and it begins the transition to the 
    background state. Use this method to pause ongoing tasks, disable timers, 
    and throttle down OpenGL ES frame rates. Games should use this method 
    to pause the game.*/
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    /* Use this method to release shared resources, save user data, invalidate 
    timers, and store enough application state information	to restore your
    application to its current state in case it is terminated later. If your 
    application supports background execution, this method is called instead 
    of applicationWillTerminate: when the user quits.*/
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    /* Called as part of the transition from the background to the inactive state;
    here you can undo many of the changes made on entering the background.*/
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    /* Restart any tasks that were paused (or not yet started) while the
    application was inactive. If the application was previously in the background, 
	optionally refresh the user interface.*/
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    /* Called when the application is about to terminate. Save data if appropriate.
    See also applicationDidEnterBackground:. */
}

@end
</pre>
<h6><i>Important items in code</i></h6>
<ul class="list">
<li><p>UIApplication delegates defined here. All the methods defined above are UI application delegates and contains no user defined methods.</p></li>
<li><p>UIWindow object  is allocated  to hold the application is allocated</p></li>
<li><p>UIViewController is allocated made as window's initial view controller.</p></li>
<li><p>To make window visible makeKeyAndVisible method is called.</p></li>
</ul>
<h4>ViewController.h</h4>
<pre class="prettyprint">
#import <UIKit/UIKit.h> 

// Interface for class ViewController
@interface ViewController : UIViewController 

@end
</pre>
<h6><i>Important items in code</i></h6>
<ul class="list">
<li><p>The ViewController class inherits the UIViewController which provides the fundamental view management model for the iOS applications.</p></li>
</ul>
<h4>ViewController.m</h4>
<pre class="prettyprint">
#import "ViewController.h"

// Category, an extension of ViewController class
@interface ViewController ()

@end

@implementation ViewController  

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
</pre>
<h6><i>Important items in code</i></h6>
<ul class="list">
<li><p>Two methods implemented here which are defined in the base class UIViewController</p></li>
<li><p>Do initial setup in viewDidLoad which is called after view loads</p></li>
<li><p>didReceiveMemoryWarning method is called in case of memory warning.</p></li>
</ul>
<hr />
<div class="pre-btn">
<a href="index.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="nxt-btn">
<a href="ios_environment_setup.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>

<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="index.htm" target="_top">iOS </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2013 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/ios/ios_quick_guide.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 19:31:23 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>
