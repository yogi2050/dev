<!doctype html>
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en"><!--<![endif]-->

<!-- Mirrored from www.tutorialspoint.com/jasper_reports/jasper_quick_guide.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 21:18:54 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="utf-8">
<title>JasperReports - Quick Guide</title>
<link rel="shortcut icon" href="../favicon.png" type="image/x-icon" />
<meta name="description" content="JasperReports, Tutorials, Learning, Beginners, Basics, Environment, Environment setup, Report Designs, Compiling Report Design, Filling Reports, View and Print Reports, Exporting, Parameters, Data Sources, Fields, Expression, Variables, Sections, Groups, Styles, Scriplets, Subreports, Charts, Corsstabs and Internationalization." />
<meta name="keywords" content="JasperReports - Quick Guide -  Learning designing and creating JasperReports in simple and easy steps using this beginner's tutorial containing basic to advanced knowledge starting from Environment Setup, Report Designs, Compiling Report Design, Filling Reports, View and Print Reports, Exporting, Parameters, Data Sources, Fields, Expression, Variables, Sections, Groups, Styles, Scriplets, Subreports, Charts, Corsstabs and Internationalization." />
<base  />
<link rel="stylesheet" type="text/css" href="../scripts/style.css" />
<link rel="stylesheet" type="text/css" href="../scripts/prettify.css" />
<script type="text/javascript" src="../scripts/prettify.js"></script>
<style media="screen" type="text/css">
#topmenu a:hover {text-decoration:none;color:#bfc82f  !important;background-color:transparent;font-weight:bold;}
#header{
background:#bfc82f  !important;
}
#topmenu
{
background-color:#298f79 !important;
}
#leftcol ul.menu li.heading
{
background:#bfc82f !important;
border:1px solid #298f79  !important;
}
#leftcol, #middlecol, #rightcol {min-height:1200px; padding:0px;}
</style>
<script src="../../www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";urchinTracker();
</script>
</head>
<body onload="prettyPrint()">
<div id="header">
<div class="wrapper">
<h1 class="logo"><a href="../index.htm">Tutorials Point - Simply Easy Learning</a></h1>
<div id="search">
<form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com"/>
<input type="text" name="as_q" id="s" value="Search this site..." onfocus="if (this.value == 'Search this site...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search this site...';}"/>
<input value="FORID:11" name="cof" type="hidden"/>
<input type="hidden" name="ie" value="ISO-8859-1" />
<input class="submit btn" type="image" src="../images/icon-search.png" alt="Go"/>
</form>
</div>
</div>
</div>
<div id="topmenu">
<div class="wrapper">
<div id="left">
<a href="../index.htm" target="_top">HOME </a>
<a href="../java/index.htm" target="_top">JAVA </a>
<a href="../php/index.htm" target="_top">PHP </a>
<a href="../python/index.htm" target="_top">Python </a>
<a href="../ruby/index.htm" target="_top">Ruby </a>
<a href="../perl/index.htm" target="_top">Perl </a>
<a href="../html/index.htm" target="_top">HTML </a>
<a href="../css/index.htm" target="_top">CSS </a>
<a href="../javascript/index.htm" target="_top">Javascript </a>
<a href="../mysql/index.htm" target="_top">MySQL </a>
<a href="../cplusplus/index.htm" target="_top">C++ </a>
<a href="../unix/index.htm" target="_top">UNIX </a>
<a href="../more.htm" target="_top">MORE...</a>
</div>
<div id="right">
<a href="../references.htm" target="_top">REFERENCES</a> |
<a href="../forums/index.html" target="_top">FORUM</a> |
<a href="../about/index.htm" target="_top">ABOUT</a> |
<a href="../about/contact_us.htm" target="_top">CONTACT</a>
</div>
</div>
</div>
<div class="wrapper">
<div id="leftcol">
<div class="mini-logo">
<img src="../images/jasper-mini-logo.png" alt="JasperReports Tutorial" />
</div>
<ul class="menu">
<li class="heading">JasperReports Tutorial</li>
<li><a target="_top" href="index.htm">Home</a></li>
<li><a target="_top" href="jasper_getting_started.htm">Getting Started</a></li>
<li><a target="_top" href="jasper_report_life_cycle.htm">Report Life Cycle</a></li>
<li><a target="_top" href="jasper_environment_setup.htm">Environment Setup</a></li>
<li><a target="_top" href="jasper_report_designs.htm">Report Designs</a></li>
<li><a target="_top" href="jasper_compiling_report_design.htm">Compiling Report Design</a></li>
<li><a target="_top" href="jasper_filling_reports.htm">Filling Reports</a></li>
<li><a target="_top" href="jasper_view_and_print_reports.htm">View and Print Reports</a></li>
<li><a target="_top" href="jasper_exporting_reports.htm">Exporting Reports</a></li>
<li><a target="_top" href="jasper_report_parameters.htm">Report Parameters</a></li>
<li><a target="_top" href="jasper_report_data_sources.htm">Report Data Sources</a></li>
<li><a target="_top" href="jasper_report_fields.htm">Report Fields</a></li>
<li><a target="_top" href="jasper_report_expression.htm">Report Expression</a></li>
<li><a target="_top" href="jasper_report_variables.htm">Report Variables</a></li>
<li><a target="_top" href="jasper_report_sections.htm">Report Sections</a></li>
<li><a target="_top" href="jasper_report_groups.htm">Report Groups</a></li>
<li><a target="_top" href="jasper_report_fonts.htm">Report Fonts</a></li>
<li><a target="_top" href="jasper_unicode_support.htm">Unicode Support</a></li>
<li><a target="_top" href="jasper_report_styles.htm">Report Styles</a></li>
<li><a target="_top" href="jasper_report_scriptlets.htm">Report Scriptlets</a></li>
<li><a target="_top" href="jasper_create_subreports.htm">Create Subreports</a></li>
<li><a target="_top" href="jasper_creating_charts.htm">Creating Charts</a></li>
<li><a target="_top" href="jasper_crosstabs.htm">Crosstabs</a></li>
<li><a target="_top" href="jasper_Internationalization.htm">Internationalization</a></li>
</ul>
<ul class="menu">
<li class="heading">JasperReports Resources</li>
<li><a target="_top" href="jasper_quick_guide.htm"><b>Quick Guide</b></a></li>
<li><a target="_top" href="jasper_useful_resources.htm">Useful Resources</a></li>
</ul>
<ul class="menu">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="../developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="../computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="../computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div><!-- leftcol -->
<div id="middlecol">
<!-- PRINTING STARTS HERE -->
<div class="content">
<h1>JasperReports - Quick Guide</h1>
<div class="topgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<hr />
<div class="pre-btn">
<a href="jasper_quick_guide.htm">Previous Page</a>
</div>
<div class="nxt-btn">
<a href="index.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
<h1>JasperReports Getting Started</h1>
<p><b>Jasper Report</b> is an open source java reporting engine, which unlike other reporting tools, for example, Crystal Reports, is Java based and doesn't have its own expression syntax. JasperReports has the ability to deliver rich content onto the screen, to the printer, or into PDF, HTML, XLS, RTF, ODT, CSV, TXT and XML files. As it is not a standalone tool, it cannot be installed on its own. Instead, it is embedded into Java applications by including its library in the application's CLASSPATH. JasperReports is a Java class library, and is not meant for end users, but rather is targeted towards Java developers who need to add reporting capabilities to their applications.</p>

<h1>Features of JasperReports</h1>
<p>Some of the main JasperReport features include:</p>
<ul class="list">
<li><p>Has flexible report layout.</p></li>
<li><p>It can present data textually or graphically.</p></li>
<li><p>Developers can supply data in multiple ways.</p></li>
<li><p>It can accept data from multiple datasources.</p></li>
<li><p>It can generate watermarks.(A watermark is like a secondary image that is laid over the primary image)</p></li>
<li><p>It can generate subreports.</p></li>
<li><p>It is capable of exporting reports to a variety of formats.</p></li>
</ul>
<h1>JasperReports Environment Setup</h1>
<p> Downlaod the latest JAR alongwith the required and optional libraries (.ZIP file) from the site: <a rel="nofollow" href="http://sourceforge.net/projects/jasperreports/files/jasperreports/" target="_blank">JasperReport Library Link</a>. .</p>
<p>The ZIP file includes the JasperReports JAR file alongwith the JasperReports source code, depenedent JARs and a lot of examples demonstrating JasperReport's functionality.</p>
<p>To start creating the reports we need to set up the environment ready. Extract the downloaded JasperReport .ZIP file to any location(In our case we have extracted it to C:\tools\jasperreports-5.0.1). The directory structure of the extracted file is as in screen below:</p>
<img src="images/jasper_dir_structure.jpg" alt="Jasper directory structure" />
<h2>Setting classpath</h2>
<p>To use the JasperReport, we need to set the following files to our CLASSPATH:</p>
<ul class="list">
<li><p>jasperreports-x.x.x.jar, where x.x.x is the JasperReports version. This found under directory C:\tools\jasperreports-x.x.x\dist).</p></li>
<li><p>All the JAR files under the <i>lib</i> subdirectory (C:\tools\jasperreports-x.x.x\lib).</p></li>
</ul>
<p>At the time of installation, we used JasperReport version 5.0.1. Right-click on 'My Computer' and select 'Properties', click on the 'Environment variables' button under the 'Advanced' tab. Now update the 'Path' variable with this <b>C:\tools\jasperreports-5.0.1\dist\jasperreports-5.0.1.jar;C:\tools\jasperreports-5.0.1\lib;</b>. Now you are ready to create your reports.</p>
<blockquote>In all the examples in this tutorial we have used ANT tasks to generate reports. The build file takes care of including all the required JARs for generating reports. Hence, setting CLASSPATH as mentioned above will only help those who wish to generate reports without using ANT.</blockquote>
<h2>Jasper Managers classes</h2>
<p>There are number of classes which will be used to compile a JRXML report design, to fill a report, to print a report, to export to PDF, HTML and XML files, view the generated reports and report design.</p>
<img src="images/report%20manage%20classes.jpg" alt="Manager Classes" />
The list of these classes is:
<ul class="list">
<li><p><i>net.sf.jasperreports.engine.JasperCompileManager:</i> Used to copile a JRXML report template.</p></li>
<li><p><i>net.sf.jasperreports.engine.JasperFillManager:</i> Used to fill a report with data from a datasource</p></li>
<li><p><i>net.sf.jasperreports.engine.JasperPrintManager:</i> Used to print the documents generated by the JasperReports library</p></li>
<li><p><i>net.sf.jasperreports.engine.JasperExportManager:</i>Used to obtain PDF, HTML, or XML content for the documents produced by the report-filling process</p></li>
<li><p><i>net.sf.jasperreports.view.JasperViewer:</i>It represents a simple Java Swing application that can load and display reports.</p></li>
<li><p><i>net.sf.jasperreports.view.JasperDesignViewer:</i>Used at design time to preview the report templates.</p></li>
</ul>
<h1>JasperReports Life Cycle</h1>
<p>The main purpose of JasperReports is to create page oriented, ready to print documents in a simple and flexible manner. The following flow chart depicts a typical work flow while creating reports.</p>
<img src="images/jasperreport_lifecycle.jpg" alt="Jasper Compilation Process" />
<p>As in the image the life cycle has following distinct phases</p>
<ol class="list">
<li><p><a href="jasper_report_designs.htm">Designing the report</a> In this step we create the JRXML file, which is an XML document that contains the definition of the report layout. We can use any text editor or <a rel="nofollow"  href="http://community.jaspersoft.com/wiki/ireport-designer-getting-started" target="_blank" >iReportDesigner</a> to manually create it. If iReportDesigner is used the layout is designed in a visual way, hence real structure of the JRXML can be ignored.</p></li>
<li><p><a href="jasper_compiling_report_design.htm">Compiling the report</a> In this step JRXML is compiled in a binary object called a Jasper file(*.jasper). This compilation is done for performance reasons. Jasper files are what you need to ship with your application in order to run the reports.</p></li>
<li><p><a href="jasper_filling_reports.htm">Executing the report(Filling data into the report)</a> In this step data from the application is filled in the compiled report. The class net.sf.jasperreports.engine.JasperFillManager provides necessary functions to fill the data in the reports. A Jasper print file (*.jrprint) is created, which can be used to either print or export the report.</p></li>
<li><p><a href="jasper_exporting_reports.htm">Exporting the report to desired format</a> In this step we can export the Jasper print file created in the previous step to any format using JasperExportManager. As Jasper provides various forms of exports, hence with the same input we can create multiple representations of the data.</p></li>
</ol>
<h1>Jasper Report - Report Design</h1>
<p>The JRXML templates (or JRXML files) in JasperReport are standard XML files, having an extension of .jrxml. All the JRXML files contain tag &lt;jasperReport&gt;, as root element. This in turn contains many sub-elements (all of these are optional). JasperReport framework can handle different kinds of data sources.</p>
<p>We can create a JRXML using a text editor. The created JRXML can be previewed using the  utility net.sf.jasperreports.view.JasperDesignViewer available in JasperReports JAR. This utility is a standalone Java application, hence can be executed using ANT. Here the preview shows only report expressions for obtaining the data are displayed, as JasperDesignViewer doesn't have access to the actual datasource or report parameters.</p>
<h1>Jasper Report - Compiling Report Design</h1>
<p>The report temlate or JRXML cannot be used directly to generate reports. It has to be compiled to JasperReport' native binary format, called Jasper file. On compiling we transform JasperDesign object into JasperReport object:</p>
<img src="images/jasper_report_compiling.jpg" alt="Jasper Report Compiling" />
<h1>Jasper Report - Filling Reports</h1>
<p>Report filling process helps reporting tool to produce high quality documents by manipulating sets of data. The main input required for report-filling process is:</p>
<ul class="list">
<li><p><b>Report Template:</b> This is actual JasperReport file</p></li>
<li><p><b>Report Parameters</b> These are basically named values that are passed at the report filling time to the engine. </p></li>
<li><p><b>Data Source</b> We can fill a Jasper file from a range of datasources like an SQL query, an XML file, a csv file, an HQL (Hibernate Query Language) query, a collection of Java Beans, etc. </p></li>
</ul>
<p>The output generated of this process <b>.jrprint </b> is a document ready to be viewed, printed or exported to other formats. The facade class <i>net.sf.jasperreports.engine.JasperFillManager</i> is usually used for filling a report template with data. This class has various <i>fillReportXXX()</i> methods that fill report templates (templates could be located on disk, picked from input streams, or are supplied directly as in-memory).</p>
<p>There are two categories of fillReportXXX() methods in this facade class:</p>
<ol class="list">
<li><p>The first type, receive a java.sql.Connection object as the third parameter. Most of the times reports are filled with data from a relational database. This is achieved by:
<ul class = "list">
<li><p>Connect to the database through JDBC.</p></li>
<li><p>Include an SQL query inside the report template.</p></li>
<li><p>JasperReports engine uses the connection passed in and executes the SQL query.</p></li>
<li><p>A report data source is thus produced for filling the report.</p></li>
</ul>
<li><p>The second type, receive a net.sf.jasperreports.engine.JRDataSource object, when data to be filled is available in other forms.</p></li></ol>

<h1>Jasper Report - View And Print Reports</h1>
<p>The output of the report filling process <i>JasperPrint objects</i> can be viewed using a built-in viewer component, or printed or exported to more popular document formats like PDF, HTML, RTF, XLS, ODT, CSV, or XML. </p>
<h2>Viewing Reports</h2>
<p>JasperReport provides a built-in viewer for viewing the generated reports in its original format. It is a swing based component and other Java applications can integrate this component without having to export the documents to other formats in order to be viewed or printed.  The <i>net.sf.jasperreports.view.JRViewer</i> class represents this visual component. This class can also be customized as per the application needs, by subclassing it.</p>
<p>JasperReports also has a Swing application that uses the visual component for viewing the reports. This application helps view reports in the same format as *.jrprint is produced. This Swing application is implemented in the class <i>net.sf.jasperreports.view.JasperViewer</i>. To use this, we can wrap this into an ANT target, to view the report.</p>
<h2>Printing Reports</h2>
<p>We can print the documents generated by the JasperReports library (in their proprietary format i.e <i>JasperPrint</i> objects) using the <i>net.sf.jasperreports.engine.JasperPrintManager</i>  class. This is a facade class that relies on the Java 2 Printing API. We can also print the documents once the JasperReport documents are exported to other formats such as HTML or PDF.</p>

<h1>Jasper Report - Exporting Reports</h1>
<p>Generated reports can be exported to other formats like PDF,HTML and XLS. Facade class <i>net.sf.jasperreports.engine.JasperExportManager</i> is provided to achieve this functionality. Exporting means transforming the <i>JasperPrint</i> object (.jrprint file) into different format.</p>

<h1>Report Parameters</h1>
<p>Parameters are the object references that are passed during report-filling operations to the report engine.  Parameters are useful for passing useful data to report engine, the data which cannot be passed through the datasource. Data like author name, title of the report etc, can be passed through parameters. A Jasper report template or JRXML template can have zero or more parameter elements. </p>
<h2>Parameter Declaration</h2>
<p>Parameter declaration is simple as follows:</p>
<pre class="prettyprint">
&lt;parameter name="exampleParameter" class="java.lang.String" /&gt;
</pre>
<h3>The name attribute</h3>
<p>The <i>name</i> attribute of the &lt;parameter&gt element is mandatory. It references the parameter in report expressions by name. Parameter name should be a single word. It should not contain any special characters like dot or comma.</p>
<h3>The class attribute</h3>
<p>The <i>class</i> attribute is also mandatory and it specifies the class name for the parameter values. Its default value is <i>java.lang.String</i>. This can be changed to any class available at runtime. Irrespective of the type of a report parameter, the engine takes care of casting in the report expressions in which the $P{} token is used, hence making manual casts unnecessary.</p>

<p>The report parameter values are always packed in a java.util.Map object, which has the parameter name as its key. Report parameters can be used in the query string of the report, so as to further customize the data set retrieved from the database. These act like dynamic filters in the query that supplies data for the report.</p>

<h2>Built-in Parameters</h2>
<p>Following are the pre-defined report parameters, ready to use in expressions:</p>
<table class="src">
<tr><th>Parameter Name</th><th>Description</th></tr>
<tr><td>REPORT_PARAMETERS_MAP</td><td>Contains a map with all user defined and built-in parameters</td></tr>
<tr><td>REPORT_CONNECTION</td><td>This points to user supplied java.sql.Connection used for JDBC datasources</td></tr>
<tr><td>REPORT_DATA_SOURCE</td><td>This is a user supplied instance of JRDataSource representing either one of the built-in data source types or a user-defined one</td></tr>
<tr><td>REPORT_MAX_COUNT</td><td>This is a <i>java.lang.Integer</i> value, allowing the users to limit the records from datasource.</td></tr>
<tr><td>REPORT_SCRIPTLET</td><td>This points to <i>net.sf.jasperreports.engine.JRAbstractScriptlet</i> and contains an instance of the report scriptlet provided by the user</td></tr>
<tr><td>REPORT_LOCALE</td><td>This a <i>java.util.Locale</i> instance, containing the resource bundle desired locale</td></tr>
<tr><td>REPORT_RESOURCE_BUNDLE</td><td>This points to <i>java.util.ResourceBundle</i> object and contains localized messages</td></tr>
<tr><td>REPORT_TIME_ZONE</td><td>This a <i>java.util.TimeZone</i> instance, used for date formatting</td></tr>
<tr><td>REPORT_VIRTUALIZER</td><td>This is an instance of <i>net.sf.jasperreports.engine.JRVirtualizer</i> object, and used for page virtualization (optimize memory consumption)</td></tr>
<tr><td>REPORT_CLASS_LOADER</td><td>This is a <i>java.lang.ClassLoader</i> instance to be used during the report filling process to load resources such as images, fonts and subreport templates</td></tr>
<tr><td>IS_IGNORE_PAGINATION</td><td>If set to <i>java.lang.Boolean.TRUE</i> the report will be generated on one long page and page break will not occur</td></tr>
</table>

<h1>DataSources</h1>
<p>Datasources are structured data container. While generating the report, Jasper report engine obtains data from datasources. Data can be obtained from databases, XML files, arrays of objects and collection of objects. The fillReportXXX () method expects to receive a data source of the report that it has to fill, in the form of <b>net.sf.jasperreports.engine.JRDataSource</b> object or a <b>java.sql.Connection</b> (when the report data is found in a relational database).</p>

<p>The JRDataSource interface has only two methods, which should be implemented:</p>
<ol class="list">
<li><i>public boolean next() throws JRException;</i></li>
At the report filling time, this method is called on the data source object by the reporting engine when iterating through the data.
<li><i>public Object getFieldValue(JRField jrField) throws JRException;</i></li>
This method provides the value for each report field in the current data source record.
</ol>
<p>The only way to retrieve data from the data source is by using the report fields. There are several default implementations of the JRDataSource interface, depending on the way the records in the data source are acquired.</p>
<h2>Datasource Implementations</h2>
<table class="src">
<tr><th style="width:25%;">Datasource</th><th>Implementation Class</th></tr>
<tr><td>JDBC</td><td>net.sf.jasperreports.engine.JRResultSetDataSource</td></tr>
<tr><td>JavaBean</td><td>net.sf.jasperreports.engine.data.JRBeanCollectionDataSource, net.sf.jasperreports.engine.data.JRBeanArrayDataSource</td></tr>
<tr><td>Map-based</td><td>net.sf.jasperreports.engine.data.JRMapArrayDataSource, net.sf.jasperreports.engine.data.JRMapCollectionDataSource</td></tr>
<tr><td>TableModel</td><td>net.sf.jasperreports.engine.data.JRTableModelDataSource</td></tr>
<tr><td>XML</td><td>net.sf.jasperreports.engine.data.JRXmlDataSource</td></tr>
<tr><td>CSV</td><td>net.sf.jasperreports.engine.data.JRCsvDataSource</td></tr>
<tr><td>XLS</td><td>net.sf.jasperreports.engine.data.JRXlsDataSource</td></tr>
<tr><td>Empty</td><td>net.sf.jasperreports.engine.JREmptyDataSource</td></tr>
</table>
<h2>Rewindable Data Sources</h2>
<p>The <b>net.sf.jasperreports.engine.JRRewindableDataSource</b> extends the basic <i>JRDataSource</i> interface. It adds only one method, called moveFirst (), to the interface. This method is intended to move the cursor to the first element in the datasource.</p>
<p>Rewindable data sources are useful when working with subreports placed inside a band that is not allowed to split due to the isSplitAllowed="false" setting and there is not enough space on the current page for the subreport to be rendered.</p>

<p>All the above data source implementations are rewindable except for the <b>JRResultSetDataSource</b>, as it does not support moving the record pointer back. This poses a problem only if this data source is used to manually wrap a java.sql.ResultSet before passing it to the subreport. There is no problem, if the SQL query resides in the subreport template, as the engine will execute it again when restarting the subreport on the next page.</p>

<h2>Data Source Providers</h2>
<p>The JasperReports library has an interface <b>net.sf.jasperreports.engine.JRDataSourceProvider</b>. This helps in creating and disposing of data source objects. When creating a report template using GUI tools, a special tool for customizing the report's data source is needed. JRDataSourceProvider is the standard way to plug custom data sources into a design tool. A custom implementation of this interface should implement the following methods that allow creating and disposing of data source objects and also methods for listing the available report fields inside the data source if possible:</p>
<pre class="prettyprint">
  public boolean supportsGetFieldsOperation();

  public JRField[] getFields(JasperReport report)
      throws JRException, UnsupportedOperationException;

  public JRDataSource create(JasperReport report) throws JRException;

  public void dispose(JRDataSource dataSource) throws JRException;
</pre>
<h1>Report Fields</h1>
<p>Report fields are elements which represent mapping of data between datasource and report template. Fields can be combined in the report expressions to obtain the desired output. A report template can contain zero or more &lt;field&gt; elements. When declaring report fields, the data source should supply data corresponding to all the fields defined in the report template.</p>
<h2>Field Declaration</h2>
<p>Field declaration is done as below:</p>
<pre class="prettyprint">
&lt;field name="FieldName" class="java.lang.String"/&gt;
</pre>
<h3>The name attribute</h3>
<p>The <i>name</i> attribute of the &lt;field&gt element is mandatory. It references the field in report expressions by name.</p>
<h3>The class attribute</h3>
<p>The <i>class</i> attribute specifies the class name for the field values. Its default value is <i>java.lang.String</i>. This can be changed to any class available at runtime. Irrespective of the type of a report field, the engine takes care of casting in the report expressions in which the $F{} token is used, hence making manual casts unnecessary.</p>
<h3>Field Description</h3>
<p>The &lt;fieldDesciption&gt; element is an optional element. This is very useful when implementing a custom data source, for example. We can store a key or some information, using which we can retrieve the value of field from the custom data source at runtime. By using the &lt;fieldDesciption&gt; element instead of the field name, you can easily overcome restrictions of field-naming conventions when retrieving the field values from the data source.</p>
<p>Following is a piece of  JRXML file . Here we can see usage of <b><i>name</i></b>, <b><i>class</i></b> and <b><i>fieldDescription</i></b> elements.</p>
<pre class="prettyprint">
&lt;field name="country" class="java.lang.String"&gt;
    &lt;fieldDescription&gt;&lt;![CDATA[country]]&gt;&lt;/fieldDescription&gt;
&lt;/field&gt;
&lt;field name="name" class="java.lang.String"&gt;
    &lt;fieldDescription&gt;&lt;![CDATA[name]]&gt;&lt;/fieldDescription&gt;
&lt;/field&gt;
</pre>
<h3>Sort Fields</h3>
<p>At the times when data sorting is required and the data source implementation doesn't support it (for e.g. CSV datasource), JasperReports supports in-memory field-based data source sorting. The sorting can be done using one or more &lt;sortField&gt; elements in the report template. </p>

<h1>Report Expression</h1>
<p>Report expressions are a powerful feature of JasperReports, which allows us to display calculated data on a report. Calculated data is the data that is not a static data and is not specifically passed as a report parameter or datasource field. Report expressions are built from combining report parameters, fields, and static data. By default, the Java language is used for writing report expressions. Other scripting languages for report expressions like Groovy scripting language, JavaScript or BeanShell script are supported by JasperReports compilers.</p>
<h2>Expression Declaration</h2>
<p>Basically, all report expressions are Java expressions that can reference report fields, report variables and report parameters.</p>
<h3>Field Reference In Expression</h3>
<p>To use a report field reference in an expression, the name of the field must be put between <b> $F{</b> and <b>} </b> character sequences, as shown below. </p>
<pre class="prettyprint">
&lt;textfieldexpression&gt;
   $F{Name}
&lt;/textfieldexpression&gt;
</pre>
<p>Following is a piece of JRXML file:</p>
<pre class="prettyprint">
&lt;textFieldExpression class="java.lang.String"&gt;
    &lt;![CDATA[$F{country}]]&gt;
&lt;/textFieldExpression&gt;
</pre>
<h3>Variable Reference In Expression</h3>
<p>To reference a variable in an expression, we must put the name of the variable between <b>$V{</b> and <b>}</b> like in the example below:</p>
<pre class="prettyprint">
&lt;textfieldexpression&gt;
   "Total height : " + $V{SumOfHeight} + " ft."
&lt;/textfieldexpression&gt;
</pre>
<h3>Parameter Reference In Expression</h3>
<p>To reference a parameter in an expression, the name of the parameter should be put between <b>$P{</b> and <b>}</b> like in the following example:</p>
<pre class="prettyprint">
&lt;textfieldexpression&gt;
   "ReportTitle : " + $P{Title}
&lt;/textfieldexpression&gt;
</pre>
<p>Following example shows how to extract and display the first letter from java.lang.String report field "Name":</p>
<pre class="prettyprint">
&lt;textFieldExpression&gt;
    $F{Name}.substring(0, 1)
&lt;/textFieldExpression&gt;
</pre>
<h3>Resource Bundle Reference In Expression</h3>
<p>To reference a resource in an expression, the <i>key</i> should be put between <b>$R{</b> and <b>}</b> like in the following example:</p>
<pre class="prettyprint">
&lt;textfieldexpression&gt;
   $R{report.title}
&lt;/textfieldexpression&gt;
</pre>
<p>Based on the runtime-supplied locale and the <i>report.title</i> key, the resource bundle associated with the report template is loaded. Hence the title of report is displayed by extracting the String value from the resource bundle.</p>
<h2>Calculator</h2>
<p>Calculator is an entity in JasperReports, which  evaluates expressions and increments variables or datasets at report-filling time. using an instance of net.sf.jasperreports.engine.fill.JRCalculator class.</p>
<p>Java source file is generated and compiled by Java-based report compilers on the fly. This generated class is a subclass of the JRCalculator, and the bytecode produced by compiling it is stored inside the JasperReport object. This bytcode is loaded at the report filling time and the resulting class is instantiated to obtain the calculator object needed for expression evaluation.</p>
<h2>Conditional Expressions</h2>
<p>Jasper Reports doesn't support if-else statements when defining variable expressions. Instead you can use the ternary operators <b>{cond} ? {statement 1} : {statement 2}</b>. You can nest this operator inside a Java expression to obtain the desired output based on multiple conditions.</p>

<h1>Report Variables</h1>
<p>Report variables are special objects built on top of a report expression. Report variables simplify the following tasks:</p>
<ul class="list">
<li><p>Report expressions which are heavily used throughout the report template. These expressions can be declared only once by using the report variables.</p></li>
<li><p>Report variables can perform various calculations based on the corresponding expressions values like: count, sum, average, lowest, highest, variance, etc</p></li>
</ul>
<p>If variables are defined in a report design, then these can be referenced by new variables in the expressions. Hence the order in which the variables are declared in a report design is important.</p>
<h2>Variable Declaration</h2>
<p>A variable declaration is as follows:</p>
<pre class="prettyprint">
&lt;variable name="CityNumber" class="java.lang.Integer" incrementType="Group"
   incrementGroup="CityGroup" calculation="Count"&gt;
   &lt;variableExpression&gt;
       &lt;![CDATA[Boolean.TRUE]]&gt;
   &lt;/variableExpression&gt;
&lt;/variable&gt;
</pre>
<p>As seen above, &lt;variable&gt; element contains number of attributes. These attributes are summarized below:</p>
<h3>The Name Attribute</h3>
<p>Similar to <i>parameters</i> and <i>fields</i>, the <i>name</i> attribute of &lt;/variable&gt; element is mandatory. It allows referencing the variable by its declared name in report expressions. </p>
<h3>The Class Attribute</h3>
<p>The <i>class</i> attribute is also mandatory and it specifies the class name for the variable values. Its default value is <i>java.lang.String</i>. This can be changed to any class available in the classpath, both at report-compilation time and report filling
time. Irrespective of the type of a report value, the engine takes care of casting in the report expressions in which the $V{} token is used, hence making manual casts unnecessary.</p>
<h3>Calculation</h3>
<p>This attribute determines what calculation to perform on the variable when filling the report. The following subsections describe all the possible values for the calculation attribute of the &lt;variable&gt; element.</p>
<ul class="list">
<li><p><i>Average:</i> The variable value is the average of every non-null value of the variable expression. Valid for numeric variables only. </p></li>
<li><p><i>Count:</i> The variable value is the count of non-null instances of the variable expression.</p></li>
<li><p><i>First:</i> The variable value is the value of the first instance of the variable expression. Subsequent values are ignored.</p></li>
<li><p><i>Highest:</i> The variable value is the highest value for the variable expression.</p></li>
<li><p><i>Lowest:</i> The variable value is the lowest value for the variable expression in the report.</p></li>
<li><p><i>Nothing:</i> No calculations are performed on the variable.</p></li>
<li><p><i>StandardDeviation:</i> The variable value is the standard deviation of all non-null values matching the report expression. Valid for numeric variables only.</p></li>
<li><p><i>Sum:</i> The variable value is the sum of all non-null values returned by the report expression.</p></li>
<li><p><i>System:</i> The variable value is a custom calculation.(calculating the value for that variable yourself, using the scriptlets functionality of JasperReports)</p></li>
<li><p><i>Variance:</i> The variable value is the variance of all non-null values returned by evaluation of a report variable's expression.</p></li>
</ul>
<h3>Incrementer FactoryClass</h3>
<p>This attribute determines the class used to calculate the value of the variable when filling the current record on the report. Default value would be any class implementing  <b>net.sf.jasperreports.engine.fill.JRIncrementerFactory</b>. The factory class will be used by the engine to instantiate incrementer objects at runtime depending on the <i>calculation</i> attribute set for the variable.</p>
<h3>IncrementType</h3>
<p>This determines when to recalculate the value of the variable. This attribute uses values, as below:</p>
<ul class="list">
<li><p><i>Column:</i> The variable value is recalculated at the end of each column</p></li>
<li><p><i>Group:</i> The variable value is recalculated when the group specified by incrementGroup changes.</p></li>
<li><p><i>None:</i> The variable value is recalculated with every record.</p></li>
<li><p><i>Page:</i> The variable value is recalculated at the end of every page.</p></li>
<li><p><i>Report:</i> The variable value is recalculated once, at the end of the report.</p></li>
</ul>
<h3>IncrementGroup</h3>
<p>This determines the name of the group at which the variable value is recalculated, when <i>incrementType</i> is <i>Group</i>. This takes name of any group declared in the JRXML report template.</p>
<h3>ResetType</h3>
<p>This determines when the value of a variable is reset. This attribute uses values, as below:</p>
<ul class="list">
<li><p><i>Column:</i> The variable value is reset at the beginning of each column.</p></li>
<li><p><i>Group:</i> The variable value is reset when the group specified by incrementGroup changes.</p></li>
<li><p><i>None:</i> The variable value is never reset.</p></li>
<li><p><i>Page:</i> The variable value is reset at the beginning of every page.</p></li>
<li><p><i>Report:</i> The variable value is reset only once, at the beginning of the report.</p></li>
</ul>
<h3>ResetGroup</h3>
<p>This determines the name of the group at which the variable value is reset, when <i>resetType</i> is <i>Group</i>. The values for this attribute would be the name of any group declared in the JRXML report template.</p>
<h2>Built-In Report Variables</h2>
<p>There are some built-in system variables, ready to use in expressions, as follows:</p>
<table class="src">
<tr><th>Variable Name</th><th>Description</th></tr>
<tr><td>PAGE_NUMBER</td><td>This variable's value is its current page number. It can be used to display both the current page number and the total number of pages using a special feature of JasperReports text field elements, the <i>evaluationTime</i> attribute.</td></tr>
<tr><td>COLUMN_NUMBER</td><td>This variable contains the current column number</td></tr>
<tr><td>REPORT_COUNT</td><td>This report variable contains the total number of records processed.</td></tr>
<tr><td>PAGE_COUNT</td><td>This variable contains the number of records that were processed when generating the current page.</td></tr>
<tr><td>COLUMN_COUNT</td><td>This variable contains the number of records that were processed when generating the current column.</td></tr>
<tr><td>GroupName_COUNT</td><td>The name of this variable is derived from the name of the group it corresponds to, suffixed with the _COUNT sequence. This variable contains the number of records in the current group.</td></tr>
</table>
<h1>Report Sections</h1>
Sections are portions of the report that have a specified height and can contain report objects like lines, rectangles, images or text fields.</p>
<p>The report engine iterates through the virtual records of the supplied report data source, at report filling time. Depending on each section's defined behavior , the engine then renders each report section when appropriate. For instance, the detail section is rendered for each record in the data source. When page breaks occur, the page header and page footer sections are rendered as needed.</p>
<p>In JasperReports terminology, report sections are also called report bands. Sections are made of one or more bands. These sections are filled repeatedly at report-generating time and prepare the final document.</p>

<h2>Main Sections</h2>
<p>A report template in JasperReports has the following main sections:</p>
<pre class="prettyprint">
&lt;title&gt;&lt;/title&gt;

&lt;pageheader&gt;&lt;/pageheader&gt;

&lt;columnheader&gt;&lt;/columnheader&gt;

&lt;groupheader&gt;&lt;/groupheader&gt;

&lt;detail&gt;&lt;/detail&gt;

&lt;groupfooter&gt;&lt;/groupfooter&gt;

&lt;columnfooter&gt;&lt;/columnfooter&gt;

&lt;pagefooter&gt;&lt;/pagefooter&gt;

&lt;lastpagefooter&gt;&lt;/lastpagefooter&gt;

&lt;summary&gt;&lt;/summary&gt;

&lt;nodata&gt;&lt;/nodata&lt;&gt;

&lt;background&gt;&lt;/background&gt;
</pre>
<h3>Section, Elements and Attribute Relation</h3>
<p>The following diagram shows the elements and attributes relationship in a section in a report.</p>
<img src="images/report_sections.jpg" alt="Report Sections" />

<h1>Report Groups</h1>
<p>Groups in JasperReports help organize data on report in a logical manner.A report group represent a sequence of consecutive records in the data source that have something in common, like the value of a certain report field. A report group is defined by the &lt;group&gt; element. A report can have any number of groups. Once declared, groups can be referred to throughout the report.
</p>
<p>A report group has three elements:</p>
<ul class="list">
<li><p><i>Group expression</i>: This indicates the data that must change to start a new data group.</p></li>
<li><p><i>Group header section</i>: Helps place label at the beginning of grouped data.</p></li>
<li><p><i>Group footer section</i>: : Helps place label at the end of grouped data.</p></li>
</ul>
<p>During the iteration through the data source at report-filling time if the value of the group expression changes , a group rupture occurs and the corresponding &lt;groupFooter&gt; and &lt;groupHeader&gt; sections are inserted in the resulting document.</p>

<blockquote>Report group mechanism does not perform any sorting on the data supplied by the data source. Data grouping works as expected only when the records in the data source are already ordered according to the group expressions used in the report.</blockquote>
<h2>Group Attributes</h2>
<p>The &lt;group&gt; element contains attributes that allow us to control how grouped data is laid out. The attributes are summarized in table below:</p>
<table class="src">
<tr><th>Attribute</th><th>Description</th></tr>
<tr><td>name</td><td>This is mandatory. It references the group in report expressions by name. It follows the same naming conventions we that we mentioned for the report parameters, fields, and report variables. It can be used in other JRXML attributes when you want to refer a particular report group.</td></tr>
<tr><td>isStartNewColumn</td><td>When set to <i>true</i>, each data group will begin on a new column. Default value is <i>false</i></td></tr>
<tr><td>isStartNewPage</td><td>When set to '<i>true</i>, each data group will begin on a new page. Default value is <i>false</i></td></tr>
<tr><td>isResetPageNumber</td><td>When set to <i>true</i>, the report page number will be reset every time a new group starts. Default value is <i>false</i></td></tr>
<tr><td>isReprintHeaderOnEachPage</td><td>When set to <i>true</i>, the group header will be reprinted on every page. Default value is <i>false</i></td></tr>
<tr><td>minHeightToStartNewPage</td><td>Defines minimum amount of vertical space needed at the bottom of the column in order to place the group header on the current column. The amount is specified in report units.</td></tr>
<tr><td>footerPosition</td><td>Renders position of the group footer on the page, as well as its behavior in relation to the report sections that follow it.Its value can be: <i>Normal</i>, <i>StackAtBottom</i>, <i>ForceAtBottom</i>, <i>CollateAtBottom</i>. Default value is <i>Normal</i></td></tr>
<tr><td>keepTogether</td><td>When set to <i>true</i>, prevents the group from splitting on its first break attempt</td></tr>
</table>
<h1>Report Fonts</h1>
<p>A report contains text elements and each of these can have its own font settings. These settings can be specified using the <b>&lt;font&gt;</b> tag available in the &lt;textElement&gt; tag. A report can define a number of fonts. Once defined, they can be used as default or base font settings for other font definitions throughout the entire report.

<h2>Report Fonts</h2>
<p>A report font is a collection of font settings, declared at the report level. A report font can be reused throughout the entire report template when setting the font properties of text elements.</p>
<blockquote> Report fonts are now deprecated. Do not use &lt;reportFont/&gt; elements declared within the document itself. Use the &lt;style/&gt; element instead.</blockquote>
<h2>Font Attributes</h2>
<p>Table below summarizes the main attributes of the <b>&lt;font&gt;</b> element:</p>
<table class="src">
<tr><th>Attribute</th><th>Description</th></tr>
<tr><td>fontName</td><td>The font name, which can be the name of a physical font, a logical one or the name of a font family from the registered JasperReports font extensions.</td></tr>
<tr><td>size</td><td>The size of the font measured in points. It defaults to 10.</td></tr>
<tr><td>isBold</td><td>The flag specifying if a bold font is required. It defaults to false.</td></tr>
<tr><td>isItalic</td><td>The flag specifying if an italic font is required. It defaults to false.</td></tr>
<tr><td>isUnderline</td><td>The flag specifying if the underline text decoration is required. It defaults to false.</td></tr>
<tr><td>isStrikeThrough</td><td>The flag specifying if the strikethrough text decoration is required. It defaults to false.</td></tr>
<tr><td>pdfFontName</td><td>The name of an equivalent PDF font required by the iText library when exporting documents to PDF format.</td></tr>
<tr><td>pdfEncoding</td><td>The equivalent PDF character encoding, also required by the iText library.</td></tr>
<tr><td>isPdfEmbedded</td><td>The flag that specifies whether the font should be embedded into the document itself. It defaults to false. If set to true, helps view the PDF document without any problem.</td></tr>
</table>
<h3>Font Types</h3>
<p>In JasperReports fonts can be categorized in the following types:</p>
<ol class="list">
<li><p><b>Logical Fonts:</b> These fonts are the five font types that have been recognized by the Java platform since version 1.0: <b>Serif, SansSerif, Monospaced, Dialog, and DialogInput</b>. These logical fonts are not actual font libraries that are installed anywhere on the system. They are merely font type names recognized by the Java runtime. These must be mapped to some physical font that is installed on the system.</p></li>
<li><p><b>Physical Fonts:</b>  These fonts are the actual font libraries consisting of, for example, TrueType or PostScript Type 1 fonts. The physical fonts may be Arial, Time, Helvetica, Courier, or any number of other fonts, including international fonts.</p></li>
<li><p><b>Font Extensions:</b> The JasperReports library can make use of fonts registered on-the-fly at runtime, through its built-in support for font extensions. A list of font families can be made available to the JasperReports using font extension. These are made out of similarly looking font faces and supporting specific locales.</p></li>
</ol>
<p>As described in the table above we need to specify in the attribute <i>fontName</i> the name of a physical font, the name of a logical font, or the name of a font family from the registered JasperReports font extensions.</p>

<h3>PDF Font Name</h3>
<p>JasperReports library uses the iText library, when exporting reports to PDF(Portable Document Format). PDF files can be viewed on various platforms and will always look the same. This is partially because in this format there is a special way of dealing with fonts. <i>fontName</i> attribute is of no use when exporting to PDF. Attribute <i>pdfFontName</i> exist where we need to specify the font settings.</p>

<h2>Default Fonts and Inheritance</h2>
<p>Each text element inherits font and style attributes from its parent element which in turn inherits these attributes from its parent. If no styles and/or fonts are defined for elements, the default style (and/or font - but this is now deprecated) declared in the &lt;jasperReport/&gt; root element will be applied. </p>
<p>Defining default styles or fonts in JasperReports is not mandatory. If no font is defined for a given element, the engine looks either for the inherited font attributes, or, if no attributes are found on this way, it looks for the <i>net.sf.jasperreports.default.font.name</i> property in the <i>/src/default.jasperreports.properties </i>file. Its value defines the name of the font family to be used when font properties are not explicitly defined for a text element or inherited from its parent.</p>
<p>
The main default font properties and their values defined in the <i>/src/default.jasperreports.properties </i> file are in the table below:
<table class="src">
<tr><th>Property</th><th>Description</th></tr>
<tr><td>net.sf.jasperreports.default.font.name=SansSerif</td><td>The default font name.</td></tr>
<tr><td>net.sf.jasperreports.default.font.size=10</td><td>The default font size.</td></tr>
<tr><td>net.sf.jasperreports.default.pdf.font.name=Helvetica</td><td>The default PDF font.</td></tr>
<tr><td>net.sf.jasperreports.default.pdf.encoding=Cp1252</td><td>The default PDF character encoding.</td></tr>
<tr><td>net.sf.jasperreports.default.pdf.embedded=false</td><td>By default PDF fonts are not embedded.</td></tr>
</table>
<h1>Unicode Support</h1>
<p>One of the main features concerning the text content in a given report is the possibility to internationalize it. It means we can run the report in different localized environments, using different languages and other localization settings without any hardcoded modification. Character encoding is an important feature when a report is intended to be internationalized.</p>

<h2>Character Encoding</h2>
<p>A character is the smallest unit of writing that's capable of conveying information. It's an abstract concept, a character does not have a visual appearance. "Uppercase Latin A" is a different character from "lowercase Latin a" and from "uppercase Cyrillic A" and "uppercase Greek Alpha".</p>
<p>A visual representation of a character is known as a <i>glyph</i>. A certain set of glyphs is called a <i>font</i>. "Uppercase Latin A", "uppercase Cyrillic A" and "uppercase Greek Alpha" may have identical glyphs, but they are different characters. At the same time, the glyphs for "uppercase Latin A" can look very different in Times New Roman, Gill Sans and Poetica chancery italic, but they still represent the same character.</p>
<p>The set of available characters is called a <i>character repertoire</i>. The location (index) of a given character within a repertoire is known as its code position, or code point. The method of numerically representing a code point within a given repertoire is called the <b>character encoding</b>.</p>
<p>Encodings are normally expressed in terms of octets. An octet is a group of eight binary digits, i.e., eight ones and zeros. An octet can express a numeric range between 0 and 255, or between 0x00 and 0xFF, to use hexadecimal notation.</p>

<h2>Unicode</h2>
<p>A Unicode is a character repertoire that contains most of the characters used in the languages of the world. It can accommodate millions of characters, and already contains hundreds of thousands. Unicode is divided into "planes" of 64K characters. The only one used in most circumstances is the first plane, known as the basic multilingual plane, or BMP.</p>
<p> UTF-8 is the recommended encoding.  It uses a variable number of octets to represent different characters.</p>
<p>In a JRXML file the encoding attribute is specified in the header. It is used at report compilation time to decode the XML content. For instance, if the report contains French words only and characters such as &ccedil;, &eacute;, &acirc; , then the ISO-8859-1 (a.k.a Latin-1) encoding is sufficient:</p>
<pre class="prettyprint">
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
</pre>
<p>As seen above, ideally we can choose the encoding fit to the minimal character set which can correctly represent all the characters in the document. But in case of multilanguage documents (i.e documents containing words spelled in several languages), one should choose the encoding adapted to the minimal character set able to correctly represent all the characters in the document, even if they belong to different languages. One of the character encodings able to handle multilingual documents is the <b>UTF-8</b>, used as default encoding value by JasperReports.</p>
<p>The texts are usually kept in resource bundle files rather than within the document during internationalization. So, there are cases where the JRXML itself looks completely ASCII-compatible, but generated reports at runtime do contain texts unreadable with ASCII. As a result, for a certain type of document export formats (such as CSV, HTML, XHTML, XML, text) one has to know the encoding for the generated document too.  Different languages are supported by different character encodings, so each time we need to run a report in a localized environment, we have to know which is the most appropriate character encoding for the generated document language. In this case, the encoding property defined in the JRXML file itself might be no more useful.</p>
<p>To solve this kind of issues an export custom property : <i>net.sf.jasperreports.export.character.encoding</i> which defaults to UTF-8 is present in Jasperreport. This default value is set in the <i>default.jasperreports.properties</i> file. For more specific options at export time, the CHARACTER_ENCODING export parameter is also available.</p>

<h1>Report Styles</h1>
<p>JasperReports has a feature &lt;style&gt; which helps controls text properties in a report template. This element is a collection of style settings declared at the report level. Properties like foreground color, background color, whether the font is bold, italic, or normal, the font size, a border for the font, and many other attributes are controlled by &lt;style&gt; element. Styles can extend other styles, and add to, or override properties of the parent style.
</p>

<h2>Style Properties</h2>
<p>A &lt;style&gt; element has many attributes. Some of the most commonly used are listed in the table below:</p>
<table class="src">
<tr><th>Attribute</th><th>Description</th></tr>
<tr><td>name</td><td>Is mandatory. It must be unique because it references the corresponding report style throughout the report</td></tr>
<tr><td>isDefault</td><td> Indicates whether this style is the document's default style.</td></tr>
<tr><td>style</td><td>A reference to the parent style</td></tr>
<tr><td>mode</td><td> Specifies the element's transparency. Possible values are <i>Opaque</i> and <i>Transparent</i>.</td></tr>
<tr><td>forecolor</td><td>The foreground color of object.</td></tr>
<tr><td>backcolor</td><td>The background color of object.</td></tr>
<tr><td>fill</td><td>Determines the fill pattern used to fill the object. At the moment the single value allowed is <i>Solid</i>.</td></tr>
<tr><td>radius</td><td>Specifies the radius of the rectangle's corner arc.</td></tr>
<tr><td>scaleImage</td><td>Specifies the scale for images only. Possible values: <i>Clip, FillFrame, RetainShape, RealHeight, RealSize</i>.</td></tr>
<tr><td>hAlign</td><td>Specifies the horizontal alignment. Possible values: <i>Left, Center, Right, Justified</i>.</td></tr>
<tr><td>vAlign</td><td>Specifies the vertical alignment. Possible values: <i>Top, Middle, Bottom</i>.</td></tr>
<tr><td>rotation</td><td>Specifies the element's rotation. Possible values: <i>None, Left, Right, UpsideDown</i>.</td></tr>
<tr><td>lineSpacing</td><td>Specifies the line spacing between lines of text. Possible values:<i> Single, 1_1_2, Double</i>.</td></tr>
<tr><td>markup</td><td>Specifies the markup style for styled texts</td></tr>
<tr><td>fontName</td><td>Specifies the font name.</td></tr>
<tr><td>fontSize</td><td>Specifies the font size.</td></tr>
<tr><td>isBold</td><td>Indicates if the font style is bold</td></tr>
<tr><td>isItalic</td><td>Indicates if the font style is italic.</td></tr>
<tr><td>isUnderline</td><td>Indicates if the font style is underline</td></tr>
<tr><td>isStrikeThrough</td><td>Indicates if the font style is strikethrough.</td></tr>
<tr><td>pdfFontName</td><td>Specifies the related PDF font name.</td></tr>
<tr><td>pdfEncoding</td><td>Specifies the character encoding for the PDF output format</td></tr>
<tr><td>isPdfEmbedded</td><td>Indicates if the PDF font is embedded.</td></tr>
<tr><td>pattern</td><td>Specifies the format pattern for formatted texts.</td></tr>
<tr><td>isBlankWhenNull</td><td>Indicates if a white space should be shown if the text is not present.</td></tr>
</table>

<h2>Conditional Styles</h2>
<p>In some situations, a style should be applied only when certain condition is met (for example, to alternate adjacent row colors in a report detail section). This can be achieved using conditional styles.</p>
<p>A conditional style has two elements:</p>
<ul class="list">
<li><p>a Boolean condition expression </p></li>
<li><p>a style</p></li>
</ul>
<h2>Style Templates</h2>
<p>We can make a set of reports with a common look by defining the style at a common place. This common style template can then be referenced by the report templates. A style template is an XML file that contains one or more style definitions. Style template files use by convention the <b>*.jrtx</b> extension, but this is not mandatory. A style template contains following elements:</p>
<ul class="list">
<li><p><i>&lt;jasperTemplate&gt;</i>:This is the root element of a style template file.</p></li>
<li><p><i>&lt;template&gt;</i>: This element is used to include references to other template files. The contents of this element are interpreted as the location of the referred template file.</p></li>
<li><p><i>&lt;style&gt;</i>: This element is identical to the element with the same name from report design templates (JRXML files), with the exception that a style in a style template cannot contain conditional styles. This limitation is caused by the fact that conditional styles involve report expressions, and expressions can only be interpreted in the context of a single report definition.</p></li>
</ul>

<h1>Report Scriptlets</h1>
<p>Scriptlets are sequences of Java code that are executed every time a report event occurs. Values of report variables can be affected through scriptlets.
<h2>Scriptlet Declaration</h2>
<p>We can declare a scriptlet in two ways:</p>
<ul class="list">
<li><p>Using <b>&lt;scriptlet&gt;</b> element. This element has <i>name</i> attribute and <i>class</i> attribute. The <i>class</i> attribute should specify the name of the class, which extends <i>JRAbstractScriptlet</i> class. The class must be available in the classpath at report filling time and must have an empty constructor, so that the engine can instantiate it on the fly.</p></li>
<li><p>Using the attribute <b>scriptletClass</b> of the element <b>&lt;jasperReport&gt;</b>, in the report template (JRXML). By setting this attribute with fully qualified name of scriptlet (including the entire package name),  we indicate that we want to use a scriptlet. The scriptlet instance created with this attribute, acts like the first scriptlet in the list of scriptlets and has the
predefined name REPORT.
</p></li>
</ul>

<h2>Scriptlet class</h2>
<p>A scriptlet is a java class which must extend either of the following classes: </p></p>
<ul class="list">
<li><p><b>net.sf.jasperreports.engine.JRAbstractScriptlet</b>: This class contains a number of abstract methods that must be overridden in every implementation. These methods are called automatically by JasperReports at the appropriate moment. Developer must implement all the abstract methods.</p></li>
<li><p><b>net.sf.jasperreports.engine.JRDefaultScriptlet</b>: This class contains default empty implementations of every method in JRAbstractScriptlet. A developer is only required to implement those methods he/she needs for their project.
</p></li>
</ul>
<p>Following table lists the methods in the above class. These methods will be called by the report engine at the appropriate time, during report filling phase.</p>
<table class="src">
<tr><th>Method</th><th>Description</th></tr>
<tr><td>public void beforeReportInit()</td><td>Called before report initialization.</td></tr>
<tr><td>public void afterReportInit()</td><td>Called after report initialization.</td></tr>
<tr><td>public void beforePageInit()</td><td>Called before each page is initialized.</td></tr>
<tr><td>public void afterPageInit()</td><td>Called after each page is initialized.</td></tr>
<tr><td>public void beforeColumnInit()</td><td>Called before each column is initialized.</td></tr>
<tr><td>public void afterColumnInit()</td><td>Called after each column is initialized.</td></tr>
<tr><td>public void beforeGroupInit(String groupName)</td><td>Called before the group specified in the parameter is initialized.</td></tr>
<tr><td>public void afterGroupInit(String groupName)</td><td>Called after the group specified in the parameter is initialized.</td></tr>
<tr><td>public void beforeDetailEval()</td><td>Called before each record in the detail section of the report is evaluated.</td></tr>
<tr><td>public void afterDetailEval()</td><td>Called after each record in the detail section of the report is evaluated.</td></tr>
</table>
<p>Any number of scriptlets can be specified per report. If no scriptlet is specified for a report, the engine still creates a single JRDefaultScriptlet instance and registers it with the built-in REPORT_SCRIPTLET parameter.</p>
<p>We can add any additional methods we need to our scriptlets. Reports can call these methods by using the built-in parameter REPORT_SCRIPTLET.</p>


<h2>Global Scriptlets</h2>
<p>We can associate scriptlets in another way to reports, which is by declaring the scriptlets globally. This makes the scriptlets apply to all reports being filled in the given JasperReports deployment. This is made easy by the fact that scriptlets can be added to JasperReports as extensions. The scriptlet extension point is represented by the <i>net.sf.jasperreports.engine.scriptlets.ScriptletFactory</i> interface. JasperReports will load all scriptlet factories available through extensions at runtime. Then, it will ask each one of them for the list of scriptlets instances that they want to apply to the
current report that is being run. When asking for the list of scriptlet instances, the engine gives some context information that the factory could use in order to decide which scriptlets actually apply to the current report.</p>

<h2>Report Governors</h2>
<p>Governors are just an extension of global scriptlets that enable us to tackle a problem of report engine entering infinite loop at runtime, while generating reports. Invalid report templates cannot be detected at design time, because most of the time the conditions for entering the infinite loops depend on the actual data that is fed into the engine at runtime. Report Governors help deciding whether a certain report has entered an infinite loop and they can stop it, preventing resource exhaustion for the machine that runs the report.</p>
<p>JasperReports has two simple report governors that would stop a report execution based on a specified maximum number of pages or a specified timeout interval. They are:</p>
<ol class="list">
<li><p><b>net.sf.jasperreports.governors.MaxPagesGovernor</b>: This is a global scriptlet that is looking for two configuration properties to decide if it applies or not to the report currently being run. The configuration properties are:</p></li>
<ul class="list"><li><p>net.sf.jasperreports.governor.max.pages.enabled=[true|false]</p></li>
<li><p>net.sf.jasperreports.governor.max.pages=[integer]</p></li></ul>
<li><p><b>net.sf.jasperreports.governors.TimeoutGovernor</b>: This is also a global scriptlet that is looking for the following two configuration properties to decide if it applies or not: The configuration properties are:</p></li>
<ul class="list"><li><p>net.sf.jasperreports.governor.timeout.enabled=[true|false]</p></li>
<li><p>net.sf.jasperreports.governor.timeout=[milliseconds]</p></li></ul>
</ol>
<p>The properties for both governors can be set globally, in the jasperreports.properties file, or at report level, as custom report properties. This is useful because different reports can have different estimated size or timeout limits and also because you might want turn on the governors for all reports, while turning it off for some, or vice-versa.</p>

<h1>Create SubReports</h1>
<p>Subreports are like normal report templates. They are in fact <i>net.sf.jasperreports.engine.JasperReport</i> objects, which are obtained after compiling a <i>net.sf.jasperreports.engine.design.JasperDesign object</i>.</p>

<h2>&lt;subreport&gt; Element</h2>
<p>A &lt;subreport&gt; element is used when introducing subreports into master reports. Here is the list of sub-elements in the &lt;subreport&gt; JRXML element.</p>
<ul class="list">
<li><p>&lt;reportElement&gt;</p></li>
<li><p>&lt;parametersMapExpression&gt; : This is used to pass a map containing report parameters to the subreport. The map is usually obtained from a parameter in the master report, or by using the built-in REPORTS_PARAMETERS_MAP parameter to pass the parent report's parameters to the subreport. This expression should always return a <i>java.util.Map</i> object in which the keys are the parameter
names.</p></li>
<li><p>&lt;subreportParameter&gt; : This element is used to pass parameters to the subreport. It has an attribute <i>name</i>, which is mandatory.</p></li>
<li><p>&lt;connectionExpression &gt; : This is used to pass a <i>java.sql.Connection</i> to the subreport. It is used only when the subreport template needs a database connection during report filling phase.</p></li>
<li><p>&lt;dataSourceExpression&gt; : This is used to pass a datasource to the subreport. This datasource is usually obtained from a parameter in the master report or by using the built-in REPORT_DATA_SOURCE parameter to pass the parent report's datasource to the subreport.</p>
<p>The elements (<i>connectionExpression and dataSourceExpression</i>) cannot be present at the same time in a &lt;subreport&gt; element declaration. This is because we cannot supply both a data source and a connection to the subreport. We must decide on one of them and stick to it.</p></li>
<li><p>&lt;returnValue&gt; : This is used to assign the value of one of the subreport's variables to one of the master report's variables. This sub element has attributes as follows:
<ul class="list">
<li><p><i>subreportVariable</i>: This attribute specifies the name of the subreport variable whose value is to be returned.</p></li>
<li><p><i>toVariable</i>: This attribute specifies the name of the parent report variable whose value is to be copied/incremented with the value from the subreport.</p></li>
<li><p><i>calculation</i>: This attribute can take values : Nothing, Count, DistinctCount, Sum, Average, Lowest, Highest, StandardDeviation, Variance. Default value for attribute <i>calculation</i> is "Nothing".</p></li>
<li><p><i>incrementerFactoryClass</i>: This attribute specifies the factory class for creating the incrementer instance.</p></li>
</ul>
</p></li>
<li><p>&lt;subreportExpression&gt; : This indicates where to find the compiled report template for the subreport. This element has a <b>class</b> attribute. The <i>class</i> attribute can take any of these values:java.lang.String, java.io.File, java.net.URL, java.io.InputStream, net.sf.jasperreports.engine.JasperReport.Default value is <i>java.lang.String</i>.</p></li>
<li><p>isUsingCache : This is an attribute of the &lt;subreport&gt; element. This is a Boolean, when set to <i>true</i>, the reporting engine will try to recognize previously loaded subreport template objects, using their specified source. This caching functionality is available only for subreport elements that have expressions returning java.lang.String objects as the subreport template source, representing file names, URLs, or classpath resources.</p></li>
</ul>

<h1>Creating Charts</h1>
<p>Using the new chart component, user need to apply only the visual settings and define expressions that will help build the chart dataset. JasperReports uses JFreeChart as the underlying charting library. When configuring a new chart component, following three components are involved:</p>
<ul class="list">
<li><p>The overall chart component.</p></li>
<li><p>The chart dataset (which groups chart data-related settings).</p></li>
<li><p>The chart plot (which groups visual settings related to the way the chart items
are rendered).</p></li>
</ul>
<p>JasperReports currently supports the following types of charts: Pie, Pie 3D, Bar, Bar 3D, XY Bar, Stacked Bar, Stacked Bar 3D, Line, XY Line, Area, XY Area, Stacked Area, Scatter, Bubble, Time Series, High-Low-Open-Close, Candlestick, Multiple Axis, Meter, Thermometer and Gantt.</p>
<h2>Chart Properties</h2>
<p>Charts are normal report elements, so they share some of their properties with all the other report elements. There is a JRXML element called <b>&lt;chart&gt;</b>, used to create each type of chart. This element groups special chart-specific settings that apply to all types of charts.</p>

<h3>Chart Sub-Elements</h3>
<p>The sub-elements of &lt;chart&gt; element are:</p>
<ul class="list">
<li><p><b>&lt;reportElement&gt;</b>: These are displayable objects like static texts, text fields, images, lines, and rectangles that you put in your report template sections</p></li>
<li><p><b>&lt;Box&gt;</b>: This element is used to surround charts by a border that's customizable on each side.</p></li>
<li><p><b>&lt;chartTitle&gt;</b>:  This element is used to place the title of the chart. The <i>position</i> attribute decides the title position of the chart in the report. This element has attributes - <b>Position</b> (Values could be <i>Top</i>, <i>Bottom</i>, <i>Left</i>, <i>Right</i>. Deafult value is <i>Top</i>), <b>color</b>. &lt;chartTitle&gt; has <i>font</i> and <i>titleExpression</i> as subelements.</p></li>
<li><p><b>&lt;chartSubtitle&gt;</b>: This element is used to place the subtitle of the chart. This element has attribute - <b>color</b>. &lt;chartSubtitle&gt; has <i>font</i> and <i>subtitleExpression</i> as subelements. </p></li>
<li><p><b>&lt;chartLegend&gt;</b>: The element can control the font-related properties as well as the text color and the background
color of the chart legend using this element. This element has attributes - <b>textColor</b>, <b>backgroundColor</b> </p></li>
<li><p><b>&lt;anchorNameExpression&gt;</b>: This element creates the target for the anchor.</p></li>
<li><p><b>&lt;hyperlinkReferenceExpression&gt;</b>: This element contains a report expression indicating the name of the external resource (usually a URL).</p></li>
<li><p><b>&lt;hyperlinkAnchorExpression&gt;</b>: Hyperlink points to an anchor in an external resource.</p></li>
<li><p><b>&lt;hyperlinkPageExpression&gt;</b>: Hyperlink points to a page in the current report.</p></li>
<li><p><b>&lt;hyperlinkTooltipExpression&gt;</b>: This element controls the ToolTip of hyperlink. The type of the expression should be
<i>java.lang.String</i>.</p></li>
<li><p><b>&lt;hyperlinkParameter&gt;</b>: This element when present generates a final hyperlink depending on the parameter values.</p></li>
</ul>

<h3>Chart attributes</h3>
<p>Attributes in the &lt;chart&gt; element available for all chart types are: </p>

<ul class="list">
<li><p><b>isShowLegend</b>: This attribute is used to determine if a chart legend will be displayed on the report. Values could be <i>true</i>, <i>false</i>. Default value is <i>true</i></p></li>
<li><p><b>evaluationTime</b>: Determines when the chart's expression will be evaluated. Values could be <i>Now</i>, <i>Report</i>, <i> Page</i>, <i>Column</i>, <i>Group</i>, <i>Band</i>. Default value is <i>Now</i>.</p></li>
<li><p><b>evaluationGroup</b>: This attribute determines the name of the group to be used to evaluate the chart's expressions. The value for this attribute must match the name of the group we would like to use as the chart's evaluation group. </p></li>
<li><p><b>hyperlinkType</b>: This attribute can hold any text value. Default value is <i>None</i>. This means neither the text fields nor the images represent hyperlinks, even if the special hyperlink expressions are present. </p></li>
<li><p><b>hyperlinkTarget</b>: This attribute help customize the behavior of the specified link when it is clicked in the viewer. Values could be <i>Self</i>, <i>Blank</i>. Default value is <i>Self</i></p></li>
<li><p><b>bookmarkLevel</b>: This attribute when set to a positive integer, generate bookmarks in reports exported to PDF. Deafult value is <i>0</i>.</p></li>
<li><p><b>customizerClass</b>: This is the name of a class (optional) that can be used to customize the chart. The value for this element must be a String containing the name of a customizer class.</p></li>
</ul>
<h2>Chart Datasets</h2>
<p>One of the common properties across all chart types is <b>&lt;dataset&gt;</b> element. Chart datasets help mapping report data and retrieving chart data at runtime. Each chart type contains different sub-elements to define a chart's expressions that define the data used to generate the chart. All of these sub-elements contain a &lt;dataset&gt; element that defines when the chart's expressions are evaluated and reset.</p>
<p>Several types of chart datasets are available in JasperReports because each type of chart works with certain datasets: Pie, Category, XY, Time Series, Time Period, XYZ, and High-Low. Each of these dataset types implements <i>net.sf.jasperreports.engine.JRChartDataset</i> interface that define chart datasets. All chart datasets initialize and increment in the same way, and differ only in the type of data or data series they map.</p>

<h3>Dataset Properties</h3>
<p>Table below summarizes the attributes of the element &lt;dataset&gt;</p>
<table class="src">
<tr><th>Attribute</th><th>Description</th><th>Values</th></tr>
<tr><td>resetType</td><td>This attribute determines when the value of the chart expression is to be reset.</td><td>None, Report, Page, Column, Group.<br> Default value is <b>Report</b></td></tr>
<tr><td>resetGroup</td><td>this attribute determines the name of the group at which the chart expression value is reset.</td><td>The value for this attribute must match the name of any group declared in the JRXML report template.</td></tr>
<tr><td>incrementType</td><td>This attribute determines when to recalculate the value of the chart expression.</td><td>None, Report, Page, Column, Group.<br> Default value is <b>"None"</b>.</td></tr>
<tr><td>incrementGroup</td><td>This attribute determines the name of the group at which the chart expression is recalculated. </td><td>The value for this attribute must match the name of a group declared in the JRXML report template.</td></tr>
</table>
<p>Table below summarizes the sub elements of the element &lt;dataset&gt;</p>
<table class="src">
<tr><th>Sub element</th><th>Description</th></tr>
<tr><td>&lt;incrementWhenExpression&gt;</td><td>The way a chart dataset is incremented can be customized by filtering out
unwanted data through the use of this sub element.</td></tr>
<tr><td>&lt;datasetRun&gt;</td><td>This contains information required to instantiate a report subdataset.</td></tr>
</table>
<h2>Chart Plots</h2>
<p>Another common JRXML element through all chart types is the <b>&lt;plot&gt;</b> element. This allows us to define several of chart's characteristics like orientation and background color.  Plots differ based on the type of chart.</p>
<h3>Plot Attribute</h3>
<p>The table below summarizes the attributes of &lt;plot&gt; element.</p>
<table class="src">
<tr><th>Attribute</th><th>Description</th><th>Values</th></tr>
<tr><td>backcolor</td><td>This attribute defines the chart's background color.</td><td>Any six digit hexadecimal value is a valid value for this attribute. The hexadecimal value must be preceded by a #.</td></tr>
<tr><td>orientation</td><td>This attribute defines the chart's orientation.</td><td>Horizontal,Vertical<br> Default value is <b>"Vertical"</b></td></tr>
<tr><td>backgroundAlpha</td><td>This attribute defines the transparency of the chart's background color.</td><td>The valid values for this attribute include any decimal number between 0 and 1, inclusive. The higher the number, the less transparent the background will be.<br>Default value is <b>"1"</b>.</td></tr>
<tr><td>foregroundAlpha</td><td>This attribute defines the transparency of the chart's foreground colors.</td><td>The valid values for this attribute include any decimal number between 0 and 1, inclusive. The higher the number, the less transparent the background will be.<br>Default value is <b>"1"</b>.</td></tr>
<tr><td>labelRotation</td><td>This attribute allows rotation of text labels on x-axis to rotate clockwise or anti-clockwise. This attribute applies only to charts for which the x axis is not numeric or does not display dates.</td><td>Default value is <b>"0.0"</b>.</td></tr>
</table>
<p>The &lt;plot&gt; element has a subelement &lt;seriesColor&gt; whose attributes are: <i>seriesOrder</i> and <i>color</i>. This element customizes colors for series, and their position within in the color sequence. </p>

<h1>Crosstabs</h1>
<p>
Crosstab (cross-tabulation) reports are reports containing tables that arrange  data across rows and columns in a tabular form. Crosstab object is used for inserting a crosstab report within the main report. Crosstabs can be used with any level of data (nominal, ordinal, interval, or ratio), and usually display the summarized data, contained in report variables, in the form of a dynamic table. Variables are used to display aggregate data such as sums, counts, average values.</p>

<h2>Crosstab Properties</h2>
<p>JRXML element <b>&lt;crosstab&gt;</b> is used to insert a crosstab into a report.
<h3>Attribute</h3>
<p>Following is a list of attribute of a <b>&lt;crosstab&gt;</b> element:</p>
<ul class="list">
<li><p><b>isRepeatColumnHeaders</b>: Indicates whether the column headers should be reprinted after a page break. The default value is <i>true</i>.</p></li>
<li><p><b>isRepeatRowHeaders</b>:Indicates whether the row headers should be reprinted after a crosstab column break. The default value is <i>true</i>.</p></li>
<li><p><b>columnBreakOffset</b>: When a column break occurs, indicates the amount of vertical space, measured in pixels, before the subsequent crosstab piece to be placed below the previous one on the same page. The default value is 10.</p></li>
<li><p><b>runDirection</b>: Indicates whether the crosstab data should be filled from left to right (LTR) or from right to left (RTL). The default value is LTR.</p></li>
<li><p><b>ignoreWidth</b>:  Indicates whether the crosstab will stretch beyond the initial crosstab width limit and don't generate column breaks. Else it will stop rendering columns within the crosstab width limit and continue with the remaining columns only after all rows have started rendering. The default value is <i>false</i>.</p></li>
</ul>
<h3>Sub Elements</h3>
<p>A &lt;crosstab&gt; element has following sub elements :</p>
<p>&lt;reportElement&gt;, &lt;crosstabParameter&gt;, &lt;parametersMapExpression&gt;, &lt;crosstabDataset&gt;, &lt;crosstabHeaderCell&gt;, &lt;rowGroup&gt;, &lt;columnGroup&gt;, &lt;measure&gt;, &lt;crosstabCell&gt;,  and &lt;whenNoDataCell&gt;</p>
<h3>Data Grouping in Crosstab</h3>
<p>The crosstab calculation engine aggregates data by iterating through the associated dataset records. In order to aggregate data, one need to group them first. In a crosstab, rows and columns are based on specific group items, called <b>buckets</b>. A bucket definition should contain:</p>
<ul class="list">
<li><p><i>bucketExpression</i>: The expression to be evaluated in order to obtain data group items.</p></li>
<li><p><i>comparatorExpression</i>: Needed in the case the natural ordering of the values is not the best choice.</p></li>
<li><p><i>orderByExpression</i>: Indicates the value used to sort data.</p></li>
</ul>
<p>Row and column groups (defined above) in a crosstab rely on <b>buckets</b>.</p>
<h3>Built-In Crosstab Total Variables</h3>
<p>Below is a list of current value of measure and totals of different levels corresponding to the cell can be accessed through variables named according to the following scheme:</p>
<ul class="list">
<li><p>The current value of a measure calculation is stored in a variable having the same name as the measure.</p></li>
<li><p><i>&lt;Measure&gt;_&lt;Column Group&gt;_ALL</i>: This yields the total for all the entries in the column group from the same row..</p></li>
<li><p><i>&lt;Measure&gt;_&lt;Row Group&gt;_ALL</i>: This yields the total for all the entries in the row group from the same column.</p></li>
<li><p><i>&lt;Measure&gt;_&lt;Row Group&gt;_&lt;Column Group&gt;_ALL</i>: This yields the combined total corresponding to all the entries in both row and column groups.</p></li>
</ul>

<h1>Internationalization</h1>
<p>At times we need reports in different languages. Writing the same report for each different language implies a lot of redundant work.  Only pieces of text differing from language to language should be written separately, and loaded into text elements at runtime, depending on locale settings. This is the purpose of the report internationalization. Internationalized reports once written can run everywhere.</p>

<p>In the following steps, we have listed how to generate a report in different languages and also some other features of report internationalization:</p>
<ul class="list">
<li><p>Associate a resource bundle <i>java.util.ResourceBundle</i> with the report template. There are two ways to associate the java.util.ResourceBundle object with the
report template.</p>
<ul class="list">
<li><p>At design time, by setting the <i>resourceBundle</i> attribute of the report template object to the base name of the target resource bundle.</p></li>
<li><p>A dynamic/runtime association can be made by supplying a <i>java.util.ResourceBundle</i> object as the value for the REPORT_RESOURCE_BUNDLE parameter at report-filling time.</p></li>
<li><p> If the report needs to be generated in a locale that is different from the current one, the built-in REPORT_LOCALE parameter can be used to specify the runtime locale when filling the report. </p></li>
</ul>
</li>
<li><p>To facilitate report internationalization, a special syntax <b>$R{}</b> is available inside report expressions to reference <i>java.lang.String</i> resources placed inside a <i>java.util.ResourceBundle</i> object associated with the report. The <b>$R{}</b> character syntax extracts the locale-specific resource from the resource bundle based on the key that must be put between the brackets:
<pre class="prettyprint">
&lt;textFieldExpression&gt;
$R{report.title}
&lt;/textFieldExpression&gt;
</pre>
The above text field displays the title of the report by extracting the String value from the resource bundle associated with the report template based on the runtimesupplied locale and the <i>report.title</i> key</p></li>
<li><p>Formatting messages in different languages based on the report locale, there's a built-in method inside the report's <i>net.sf.jasperreports.engine.fill.JRCalculator</i>. This method offers functionality similar to the <i>java.text.MessageFormat</i> class. This method, msg(), has three convenient signatures that allow you to use up to three message parameters in the messages.</p></li>
<li><p>A built-in <i>str()</i> method (the equivalent of the $R{} syntax inside the report expressions), which gives access to the resource bundle content based on the report locale.</p></li>
<li><p>For date and time formatting, the built-in REPORT_TIME_ZONE parameter can be used to ensure proper time transformations.</p></li>
<li><p>In the generated output, the library keeps information about the text run direction so that documents generated in languages that have right-to-left writing (like Arabic and Hebrew) can be rendered properly.</p></li>
<li><p>If an application relies on the built-in Swing viewer to display generated reports, then it needs to be internationalized by adapting the button ToolTips or other texts displayed. This is very easy to do since the viewer relies on a predefined resource bundle to extract locale-specific information. The base name for this resource bundle is <i>net.sf.jasperreports.view.viewer</i></p></li>
</ul>

<hr />
<div class="pre-btn">
<a href="jasper_quick_guide.htm">Previous Page</a>
</div>
<div class="print-btn">
<a href="../cgi-bin/printpage.html" target="_blank">Print Version</a>
</div>
<div class="pdf-btn">
<a href="pdf/jasper_quick_guide.pdf" alt="JasperReports - Quick Guide" target="_blank">PDF Version</a>
</div>
<div class="nxt-btn">
<a href="index.htm">Next Page</a>
</div>
<div class="clearer"></div>
<hr />
</div>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 336;
google_ad_height = 280;
google_ad_format = "336x280_as";
google_ad_type = "text";
google_ad_channel ="9030538898";
google_color_border="ffffff";
google_color_link="900b09";
google_color_url="000000";
google_color_text="000000";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
</div><!-- middlecol -->
<div id="rightcol">
<!-- AddThis Button BEGIN -->
<div class="addthis">
<div class="addthis_toolbox addthis_default_style">
<a class="addthis_button_facebook"></a>
<a class="addthis_button_twitter"></a>
<script type="text/javascript">
<!--
 document.write('<a class="addthis_button_google_plusone" g:plusone:count="false"></a>');
//-->
</script>
<a class="addthis_button_linkedin"></a>
<a class="addthis_button_email"></a>
<a class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="../../s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
<!-- AddThis Button END -->
<div class="localad">
<a rel="nofollow" href="http://www.modernindianbabynames.com/" target="_blank" title="Modern Baby Names">Modern Baby Names</a>
</div>
<div class="localad">
<a rel="nofollow" href="http://www.photofuntoos.com/" target="_blank" title="Online Photo Editing">Online Photo Editing</a>
</div>
<div class="rightgooglead">
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="../../pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div><!-- rightcol -->
<div style="clear:both;"></div>
</div><!-- wrapper -->
<div id="footer">
<div class="wrapper">
<div id="bottommenu">
<a href="../asp.net/index.htm" target="_top">ASP.NET </a> |
<a href="../jquery/index.htm" target="_top">jQuery </a> |
<a href="../ajax/index.htm" target="_top">AJAX </a> |
<a href="../ant/index.htm" target="_top">ANT</a> |
<a href="index.htm" target="_top">iOS </a> |
<a href="../servlets/index.htm" target="_top">Servlets </a> |
<a href="../log4j/index.htm" target="_top">log4j </a> |
<a href="../ibatis/index.htm" target="_top">iBATIS </a> |
<a href="../hibernate/index.htm" target="_top">Hibernate </a> |
<a href="../jdbc/index.htm" target="_top">JDBC </a> |
<a href="../struts_2/index.htm" target="_top">Struts </a> |
<a href="../html5/index.htm" target="_top">HTML5 </a> |
<a href="../sql/index.htm" target="_top">SQL </a> |
<a href="../mysql/index.htm" target="_top">MySQL </a> |
<a href="../cplusplus/index.htm" target="_top">C++ </a> |
<a href="../unix/index.htm" target="_top">UNIX </a>
</div>
<div id="copyright">
<p>Copyright &copy; 2012 by tutorialspoint. All Rights Reserved.</p>
</div>
</div>
</div>
</body>

<!-- Mirrored from www.tutorialspoint.com/jasper_reports/jasper_quick_guide.htm by HTTrack Website Copier/3.x [XR&CO'2010], Sat, 13 Apr 2013 21:18:55 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
</html>